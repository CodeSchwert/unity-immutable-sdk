var passport = (function (exports) {
    'use strict';

    var PassportErrorType;
    (function (PassportErrorType) {
        PassportErrorType["AUTHENTICATION_ERROR"] = "AUTHENTICATION_ERROR";
        PassportErrorType["INVALID_CONFIGURATION"] = "INVALID_CONFIGURATION";
        PassportErrorType["WALLET_CONNECTION_ERROR"] = "WALLET_CONNECTION_ERROR";
        PassportErrorType["NOT_LOGGED_IN_ERROR"] = "NOT_LOGGED_IN_ERROR";
        PassportErrorType["SILENT_LOGIN_ERROR"] = "SILENT_LOGIN_ERROR";
        PassportErrorType["REFRESH_TOKEN_ERROR"] = "REFRESH_TOKEN_ERROR";
        PassportErrorType["USER_REGISTRATION_ERROR"] = "USER_REGISTRATION_ERROR";
        PassportErrorType["LOGOUT_ERROR"] = "LOGOUT_ERROR";
        PassportErrorType["TRANSFER_ERROR"] = "TRANSFER_ERROR";
        PassportErrorType["CREATE_ORDER_ERROR"] = "CREATE_ORDER_ERROR";
        PassportErrorType["CANCEL_ORDER_ERROR"] = "CANCEL_ORDER_ERROR";
        PassportErrorType["EXCHANGE_TRANSFER_ERROR"] = "EXCHANGE_TRANSFER_ERROR";
        PassportErrorType["CREATE_TRADE_ERROR"] = "CREATE_TRADE_ERROR";
        PassportErrorType["OPERATION_NOT_SUPPORTED_ERROR"] = "OPERATION_NOT_SUPPORTED_ERROR";
    })(PassportErrorType || (PassportErrorType = {}));
    class PassportError extends Error {
        type;
        constructor(message, type) {
            super(message);
            this.type = type;
        }
    }
    const withPassportError = async (fn, customErrorType) => {
        try {
            return await fn();
        }
        catch (error) {
            const errorMessage = `${customErrorType}: ${error.message}` || 'UnknownError';
            throw new PassportError(errorMessage, customErrorType);
        }
    };

    var global$1 = (typeof global !== "undefined" ? global :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    var lookup$2 = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup$2[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup$2[num >> 18 & 0x3F] + lookup$2[num >> 12 & 0x3F] + lookup$2[num >> 6 & 0x3F] + lookup$2[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup$2[tmp >> 2];
        output += lookup$2[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup$2[tmp >> 10];
        output += lookup$2[(tmp >> 4) & 0x3F];
        output += lookup$2[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString$3 = {}.toString;

    var isArray$3 = Array.isArray || function (arr) {
      return toString$3.call(arr) == '[object Array]';
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer$g.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    var _kMaxLength = kMaxLength();

    function kMaxLength () {
      return Buffer$g.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer$g.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer$g(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer$g (arg, encodingOrOffset, length) {
      if (!Buffer$g.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$g)) {
        return new Buffer$g(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer$g.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer$g._augment = function (arr) {
      arr.__proto__ = Buffer$g.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer$g.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer$g.TYPED_ARRAY_SUPPORT) {
      Buffer$g.prototype.__proto__ = Uint8Array.prototype;
      Buffer$g.__proto__ = Uint8Array;
      if (typeof Symbol !== 'undefined' && Symbol.species &&
          Buffer$g[Symbol.species] === Buffer$g) ;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer$g.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer$g.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer$g.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer$g.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer$g.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer$g.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$3(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer$g.alloc(+length)
    }
    Buffer$g.isBuffer = isBuffer$4;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer$g.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer$g.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer$g.concat = function concat (list, length) {
      if (!isArray$3(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer$g.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer$g.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer$g.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer$g.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer$g.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer$g.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer$g.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer$g.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer$g.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer$g.compare(this, b) === 0
    };

    Buffer$g.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer$g.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer$g.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer$g.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer$g.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer$g.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer$g.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer$g.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer$g.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex$2(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer$g.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer$g.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer$g(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer$g.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer$g.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer$g.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer$g.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer$g.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer$g.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer$g.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer$g.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$g.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$g.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer$g.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$g.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$g.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer$g.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer$g.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer$g.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer$g.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer$g.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer$g.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$g.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$g.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer$g.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer$g.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$g.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer$g.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$g.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer$g.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$g.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$g.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer$g.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer$g.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$g.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer$g.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$g.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer$g.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer$g.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer$g.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer$g.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer$g.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer$g.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer$g.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer$g.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer$g.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer$g(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex$2 (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer$4(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Buffer: Buffer$g,
        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
        SlowBuffer: SlowBuffer,
        isBuffer: isBuffer$4,
        kMaxLength: _kMaxLength
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function a () {
    			if (this instanceof a) {
    				var args = [null];
    				args.push.apply(args, arguments);
    				var Ctor = Function.bind.apply(f, args);
    				return new Ctor();
    			}
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var index_cjs = {};

    var lib$w = {};

    var ethers = {};

    var lib$v = {};

    var lib$u = {};

    var fragments = {};

    var lib$t = {};

    var bignumber = {};

    var bn$3 = {exports: {}};

    var require$$0$5 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_buffer);

    bn$3.exports;

    (function (module) {
    	(function (module, exports) {

    	  // Utils
    	  function assert (val, msg) {
    	    if (!val) throw new Error(msg || 'Assertion failed');
    	  }

    	  // Could use `inherits` module, but don't want to move from single file
    	  // architecture yet.
    	  function inherits (ctor, superCtor) {
    	    ctor.super_ = superCtor;
    	    var TempCtor = function () {};
    	    TempCtor.prototype = superCtor.prototype;
    	    ctor.prototype = new TempCtor();
    	    ctor.prototype.constructor = ctor;
    	  }

    	  // BN

    	  function BN (number, base, endian) {
    	    if (BN.isBN(number)) {
    	      return number;
    	    }

    	    this.negative = 0;
    	    this.words = null;
    	    this.length = 0;

    	    // Reduction context
    	    this.red = null;

    	    if (number !== null) {
    	      if (base === 'le' || base === 'be') {
    	        endian = base;
    	        base = 10;
    	      }

    	      this._init(number || 0, base || 10, endian || 'be');
    	    }
    	  }
    	  if (typeof module === 'object') {
    	    module.exports = BN;
    	  } else {
    	    exports.BN = BN;
    	  }

    	  BN.BN = BN;
    	  BN.wordSize = 26;

    	  var Buffer;
    	  try {
    	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
    	      Buffer = window.Buffer;
    	    } else {
    	      Buffer = require$$0$5.Buffer;
    	    }
    	  } catch (e) {
    	  }

    	  BN.isBN = function isBN (num) {
    	    if (num instanceof BN) {
    	      return true;
    	    }

    	    return num !== null && typeof num === 'object' &&
    	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    	  };

    	  BN.max = function max (left, right) {
    	    if (left.cmp(right) > 0) return left;
    	    return right;
    	  };

    	  BN.min = function min (left, right) {
    	    if (left.cmp(right) < 0) return left;
    	    return right;
    	  };

    	  BN.prototype._init = function init (number, base, endian) {
    	    if (typeof number === 'number') {
    	      return this._initNumber(number, base, endian);
    	    }

    	    if (typeof number === 'object') {
    	      return this._initArray(number, base, endian);
    	    }

    	    if (base === 'hex') {
    	      base = 16;
    	    }
    	    assert(base === (base | 0) && base >= 2 && base <= 36);

    	    number = number.toString().replace(/\s+/g, '');
    	    var start = 0;
    	    if (number[0] === '-') {
    	      start++;
    	      this.negative = 1;
    	    }

    	    if (start < number.length) {
    	      if (base === 16) {
    	        this._parseHex(number, start, endian);
    	      } else {
    	        this._parseBase(number, base, start);
    	        if (endian === 'le') {
    	          this._initArray(this.toArray(), base, endian);
    	        }
    	      }
    	    }
    	  };

    	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    	    if (number < 0) {
    	      this.negative = 1;
    	      number = -number;
    	    }
    	    if (number < 0x4000000) {
    	      this.words = [number & 0x3ffffff];
    	      this.length = 1;
    	    } else if (number < 0x10000000000000) {
    	      this.words = [
    	        number & 0x3ffffff,
    	        (number / 0x4000000) & 0x3ffffff
    	      ];
    	      this.length = 2;
    	    } else {
    	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
    	      this.words = [
    	        number & 0x3ffffff,
    	        (number / 0x4000000) & 0x3ffffff,
    	        1
    	      ];
    	      this.length = 3;
    	    }

    	    if (endian !== 'le') return;

    	    // Reverse the bytes
    	    this._initArray(this.toArray(), base, endian);
    	  };

    	  BN.prototype._initArray = function _initArray (number, base, endian) {
    	    // Perhaps a Uint8Array
    	    assert(typeof number.length === 'number');
    	    if (number.length <= 0) {
    	      this.words = [0];
    	      this.length = 1;
    	      return this;
    	    }

    	    this.length = Math.ceil(number.length / 3);
    	    this.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      this.words[i] = 0;
    	    }

    	    var j, w;
    	    var off = 0;
    	    if (endian === 'be') {
    	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
    	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
    	        this.words[j] |= (w << off) & 0x3ffffff;
    	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
    	        off += 24;
    	        if (off >= 26) {
    	          off -= 26;
    	          j++;
    	        }
    	      }
    	    } else if (endian === 'le') {
    	      for (i = 0, j = 0; i < number.length; i += 3) {
    	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
    	        this.words[j] |= (w << off) & 0x3ffffff;
    	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
    	        off += 24;
    	        if (off >= 26) {
    	          off -= 26;
    	          j++;
    	        }
    	      }
    	    }
    	    return this._strip();
    	  };

    	  function parseHex4Bits (string, index) {
    	    var c = string.charCodeAt(index);
    	    // '0' - '9'
    	    if (c >= 48 && c <= 57) {
    	      return c - 48;
    	    // 'A' - 'F'
    	    } else if (c >= 65 && c <= 70) {
    	      return c - 55;
    	    // 'a' - 'f'
    	    } else if (c >= 97 && c <= 102) {
    	      return c - 87;
    	    } else {
    	      assert(false, 'Invalid character in ' + string);
    	    }
    	  }

    	  function parseHexByte (string, lowerBound, index) {
    	    var r = parseHex4Bits(string, index);
    	    if (index - 1 >= lowerBound) {
    	      r |= parseHex4Bits(string, index - 1) << 4;
    	    }
    	    return r;
    	  }

    	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    	    // Create possibly bigger array to ensure that it fits the number
    	    this.length = Math.ceil((number.length - start) / 6);
    	    this.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      this.words[i] = 0;
    	    }

    	    // 24-bits chunks
    	    var off = 0;
    	    var j = 0;

    	    var w;
    	    if (endian === 'be') {
    	      for (i = number.length - 1; i >= start; i -= 2) {
    	        w = parseHexByte(number, start, i) << off;
    	        this.words[j] |= w & 0x3ffffff;
    	        if (off >= 18) {
    	          off -= 18;
    	          j += 1;
    	          this.words[j] |= w >>> 26;
    	        } else {
    	          off += 8;
    	        }
    	      }
    	    } else {
    	      var parseLength = number.length - start;
    	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
    	        w = parseHexByte(number, start, i) << off;
    	        this.words[j] |= w & 0x3ffffff;
    	        if (off >= 18) {
    	          off -= 18;
    	          j += 1;
    	          this.words[j] |= w >>> 26;
    	        } else {
    	          off += 8;
    	        }
    	      }
    	    }

    	    this._strip();
    	  };

    	  function parseBase (str, start, end, mul) {
    	    var r = 0;
    	    var b = 0;
    	    var len = Math.min(str.length, end);
    	    for (var i = start; i < len; i++) {
    	      var c = str.charCodeAt(i) - 48;

    	      r *= mul;

    	      // 'a'
    	      if (c >= 49) {
    	        b = c - 49 + 0xa;

    	      // 'A'
    	      } else if (c >= 17) {
    	        b = c - 17 + 0xa;

    	      // '0' - '9'
    	      } else {
    	        b = c;
    	      }
    	      assert(c >= 0 && b < mul, 'Invalid character');
    	      r += b;
    	    }
    	    return r;
    	  }

    	  BN.prototype._parseBase = function _parseBase (number, base, start) {
    	    // Initialize as zero
    	    this.words = [0];
    	    this.length = 1;

    	    // Find length of limb in base
    	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
    	      limbLen++;
    	    }
    	    limbLen--;
    	    limbPow = (limbPow / base) | 0;

    	    var total = number.length - start;
    	    var mod = total % limbLen;
    	    var end = Math.min(total, total - mod) + start;

    	    var word = 0;
    	    for (var i = start; i < end; i += limbLen) {
    	      word = parseBase(number, i, i + limbLen, base);

    	      this.imuln(limbPow);
    	      if (this.words[0] + word < 0x4000000) {
    	        this.words[0] += word;
    	      } else {
    	        this._iaddn(word);
    	      }
    	    }

    	    if (mod !== 0) {
    	      var pow = 1;
    	      word = parseBase(number, i, number.length, base);

    	      for (i = 0; i < mod; i++) {
    	        pow *= base;
    	      }

    	      this.imuln(pow);
    	      if (this.words[0] + word < 0x4000000) {
    	        this.words[0] += word;
    	      } else {
    	        this._iaddn(word);
    	      }
    	    }

    	    this._strip();
    	  };

    	  BN.prototype.copy = function copy (dest) {
    	    dest.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      dest.words[i] = this.words[i];
    	    }
    	    dest.length = this.length;
    	    dest.negative = this.negative;
    	    dest.red = this.red;
    	  };

    	  function move (dest, src) {
    	    dest.words = src.words;
    	    dest.length = src.length;
    	    dest.negative = src.negative;
    	    dest.red = src.red;
    	  }

    	  BN.prototype._move = function _move (dest) {
    	    move(dest, this);
    	  };

    	  BN.prototype.clone = function clone () {
    	    var r = new BN(null);
    	    this.copy(r);
    	    return r;
    	  };

    	  BN.prototype._expand = function _expand (size) {
    	    while (this.length < size) {
    	      this.words[this.length++] = 0;
    	    }
    	    return this;
    	  };

    	  // Remove leading `0` from `this`
    	  BN.prototype._strip = function strip () {
    	    while (this.length > 1 && this.words[this.length - 1] === 0) {
    	      this.length--;
    	    }
    	    return this._normSign();
    	  };

    	  BN.prototype._normSign = function _normSign () {
    	    // -0 = 0
    	    if (this.length === 1 && this.words[0] === 0) {
    	      this.negative = 0;
    	    }
    	    return this;
    	  };

    	  // Check Symbol.for because not everywhere where Symbol defined
    	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    	    try {
    	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    	    } catch (e) {
    	      BN.prototype.inspect = inspect;
    	    }
    	  } else {
    	    BN.prototype.inspect = inspect;
    	  }

    	  function inspect () {
    	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    	  }

    	  /*

    	  var zeros = [];
    	  var groupSizes = [];
    	  var groupBases = [];

    	  var s = '';
    	  var i = -1;
    	  while (++i < BN.wordSize) {
    	    zeros[i] = s;
    	    s += '0';
    	  }
    	  groupSizes[0] = 0;
    	  groupSizes[1] = 0;
    	  groupBases[0] = 0;
    	  groupBases[1] = 0;
    	  var base = 2 - 1;
    	  while (++base < 36 + 1) {
    	    var groupSize = 0;
    	    var groupBase = 1;
    	    while (groupBase < (1 << BN.wordSize) / base) {
    	      groupBase *= base;
    	      groupSize += 1;
    	    }
    	    groupSizes[base] = groupSize;
    	    groupBases[base] = groupBase;
    	  }

    	  */

    	  var zeros = [
    	    '',
    	    '0',
    	    '00',
    	    '000',
    	    '0000',
    	    '00000',
    	    '000000',
    	    '0000000',
    	    '00000000',
    	    '000000000',
    	    '0000000000',
    	    '00000000000',
    	    '000000000000',
    	    '0000000000000',
    	    '00000000000000',
    	    '000000000000000',
    	    '0000000000000000',
    	    '00000000000000000',
    	    '000000000000000000',
    	    '0000000000000000000',
    	    '00000000000000000000',
    	    '000000000000000000000',
    	    '0000000000000000000000',
    	    '00000000000000000000000',
    	    '000000000000000000000000',
    	    '0000000000000000000000000'
    	  ];

    	  var groupSizes = [
    	    0, 0,
    	    25, 16, 12, 11, 10, 9, 8,
    	    8, 7, 7, 7, 7, 6, 6,
    	    6, 6, 6, 6, 6, 5, 5,
    	    5, 5, 5, 5, 5, 5, 5,
    	    5, 5, 5, 5, 5, 5, 5
    	  ];

    	  var groupBases = [
    	    0, 0,
    	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    	  ];

    	  BN.prototype.toString = function toString (base, padding) {
    	    base = base || 10;
    	    padding = padding | 0 || 1;

    	    var out;
    	    if (base === 16 || base === 'hex') {
    	      out = '';
    	      var off = 0;
    	      var carry = 0;
    	      for (var i = 0; i < this.length; i++) {
    	        var w = this.words[i];
    	        var word = (((w << off) | carry) & 0xffffff).toString(16);
    	        carry = (w >>> (24 - off)) & 0xffffff;
    	        off += 2;
    	        if (off >= 26) {
    	          off -= 26;
    	          i--;
    	        }
    	        if (carry !== 0 || i !== this.length - 1) {
    	          out = zeros[6 - word.length] + word + out;
    	        } else {
    	          out = word + out;
    	        }
    	      }
    	      if (carry !== 0) {
    	        out = carry.toString(16) + out;
    	      }
    	      while (out.length % padding !== 0) {
    	        out = '0' + out;
    	      }
    	      if (this.negative !== 0) {
    	        out = '-' + out;
    	      }
    	      return out;
    	    }

    	    if (base === (base | 0) && base >= 2 && base <= 36) {
    	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    	      var groupSize = groupSizes[base];
    	      // var groupBase = Math.pow(base, groupSize);
    	      var groupBase = groupBases[base];
    	      out = '';
    	      var c = this.clone();
    	      c.negative = 0;
    	      while (!c.isZero()) {
    	        var r = c.modrn(groupBase).toString(base);
    	        c = c.idivn(groupBase);

    	        if (!c.isZero()) {
    	          out = zeros[groupSize - r.length] + r + out;
    	        } else {
    	          out = r + out;
    	        }
    	      }
    	      if (this.isZero()) {
    	        out = '0' + out;
    	      }
    	      while (out.length % padding !== 0) {
    	        out = '0' + out;
    	      }
    	      if (this.negative !== 0) {
    	        out = '-' + out;
    	      }
    	      return out;
    	    }

    	    assert(false, 'Base should be between 2 and 36');
    	  };

    	  BN.prototype.toNumber = function toNumber () {
    	    var ret = this.words[0];
    	    if (this.length === 2) {
    	      ret += this.words[1] * 0x4000000;
    	    } else if (this.length === 3 && this.words[2] === 0x01) {
    	      // NOTE: at this stage it is known that the top bit is set
    	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    	    } else if (this.length > 2) {
    	      assert(false, 'Number can only safely store up to 53 bits');
    	    }
    	    return (this.negative !== 0) ? -ret : ret;
    	  };

    	  BN.prototype.toJSON = function toJSON () {
    	    return this.toString(16, 2);
    	  };

    	  if (Buffer) {
    	    BN.prototype.toBuffer = function toBuffer (endian, length) {
    	      return this.toArrayLike(Buffer, endian, length);
    	    };
    	  }

    	  BN.prototype.toArray = function toArray (endian, length) {
    	    return this.toArrayLike(Array, endian, length);
    	  };

    	  var allocate = function allocate (ArrayType, size) {
    	    if (ArrayType.allocUnsafe) {
    	      return ArrayType.allocUnsafe(size);
    	    }
    	    return new ArrayType(size);
    	  };

    	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    	    this._strip();

    	    var byteLength = this.byteLength();
    	    var reqLength = length || Math.max(1, byteLength);
    	    assert(byteLength <= reqLength, 'byte array longer than desired length');
    	    assert(reqLength > 0, 'Requested array length <= 0');

    	    var res = allocate(ArrayType, reqLength);
    	    var postfix = endian === 'le' ? 'LE' : 'BE';
    	    this['_toArrayLike' + postfix](res, byteLength);
    	    return res;
    	  };

    	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    	    var position = 0;
    	    var carry = 0;

    	    for (var i = 0, shift = 0; i < this.length; i++) {
    	      var word = (this.words[i] << shift) | carry;

    	      res[position++] = word & 0xff;
    	      if (position < res.length) {
    	        res[position++] = (word >> 8) & 0xff;
    	      }
    	      if (position < res.length) {
    	        res[position++] = (word >> 16) & 0xff;
    	      }

    	      if (shift === 6) {
    	        if (position < res.length) {
    	          res[position++] = (word >> 24) & 0xff;
    	        }
    	        carry = 0;
    	        shift = 0;
    	      } else {
    	        carry = word >>> 24;
    	        shift += 2;
    	      }
    	    }

    	    if (position < res.length) {
    	      res[position++] = carry;

    	      while (position < res.length) {
    	        res[position++] = 0;
    	      }
    	    }
    	  };

    	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    	    var position = res.length - 1;
    	    var carry = 0;

    	    for (var i = 0, shift = 0; i < this.length; i++) {
    	      var word = (this.words[i] << shift) | carry;

    	      res[position--] = word & 0xff;
    	      if (position >= 0) {
    	        res[position--] = (word >> 8) & 0xff;
    	      }
    	      if (position >= 0) {
    	        res[position--] = (word >> 16) & 0xff;
    	      }

    	      if (shift === 6) {
    	        if (position >= 0) {
    	          res[position--] = (word >> 24) & 0xff;
    	        }
    	        carry = 0;
    	        shift = 0;
    	      } else {
    	        carry = word >>> 24;
    	        shift += 2;
    	      }
    	    }

    	    if (position >= 0) {
    	      res[position--] = carry;

    	      while (position >= 0) {
    	        res[position--] = 0;
    	      }
    	    }
    	  };

    	  if (Math.clz32) {
    	    BN.prototype._countBits = function _countBits (w) {
    	      return 32 - Math.clz32(w);
    	    };
    	  } else {
    	    BN.prototype._countBits = function _countBits (w) {
    	      var t = w;
    	      var r = 0;
    	      if (t >= 0x1000) {
    	        r += 13;
    	        t >>>= 13;
    	      }
    	      if (t >= 0x40) {
    	        r += 7;
    	        t >>>= 7;
    	      }
    	      if (t >= 0x8) {
    	        r += 4;
    	        t >>>= 4;
    	      }
    	      if (t >= 0x02) {
    	        r += 2;
    	        t >>>= 2;
    	      }
    	      return r + t;
    	    };
    	  }

    	  BN.prototype._zeroBits = function _zeroBits (w) {
    	    // Short-cut
    	    if (w === 0) return 26;

    	    var t = w;
    	    var r = 0;
    	    if ((t & 0x1fff) === 0) {
    	      r += 13;
    	      t >>>= 13;
    	    }
    	    if ((t & 0x7f) === 0) {
    	      r += 7;
    	      t >>>= 7;
    	    }
    	    if ((t & 0xf) === 0) {
    	      r += 4;
    	      t >>>= 4;
    	    }
    	    if ((t & 0x3) === 0) {
    	      r += 2;
    	      t >>>= 2;
    	    }
    	    if ((t & 0x1) === 0) {
    	      r++;
    	    }
    	    return r;
    	  };

    	  // Return number of used bits in a BN
    	  BN.prototype.bitLength = function bitLength () {
    	    var w = this.words[this.length - 1];
    	    var hi = this._countBits(w);
    	    return (this.length - 1) * 26 + hi;
    	  };

    	  function toBitArray (num) {
    	    var w = new Array(num.bitLength());

    	    for (var bit = 0; bit < w.length; bit++) {
    	      var off = (bit / 26) | 0;
    	      var wbit = bit % 26;

    	      w[bit] = (num.words[off] >>> wbit) & 0x01;
    	    }

    	    return w;
    	  }

    	  // Number of trailing zero bits
    	  BN.prototype.zeroBits = function zeroBits () {
    	    if (this.isZero()) return 0;

    	    var r = 0;
    	    for (var i = 0; i < this.length; i++) {
    	      var b = this._zeroBits(this.words[i]);
    	      r += b;
    	      if (b !== 26) break;
    	    }
    	    return r;
    	  };

    	  BN.prototype.byteLength = function byteLength () {
    	    return Math.ceil(this.bitLength() / 8);
    	  };

    	  BN.prototype.toTwos = function toTwos (width) {
    	    if (this.negative !== 0) {
    	      return this.abs().inotn(width).iaddn(1);
    	    }
    	    return this.clone();
    	  };

    	  BN.prototype.fromTwos = function fromTwos (width) {
    	    if (this.testn(width - 1)) {
    	      return this.notn(width).iaddn(1).ineg();
    	    }
    	    return this.clone();
    	  };

    	  BN.prototype.isNeg = function isNeg () {
    	    return this.negative !== 0;
    	  };

    	  // Return negative clone of `this`
    	  BN.prototype.neg = function neg () {
    	    return this.clone().ineg();
    	  };

    	  BN.prototype.ineg = function ineg () {
    	    if (!this.isZero()) {
    	      this.negative ^= 1;
    	    }

    	    return this;
    	  };

    	  // Or `num` with `this` in-place
    	  BN.prototype.iuor = function iuor (num) {
    	    while (this.length < num.length) {
    	      this.words[this.length++] = 0;
    	    }

    	    for (var i = 0; i < num.length; i++) {
    	      this.words[i] = this.words[i] | num.words[i];
    	    }

    	    return this._strip();
    	  };

    	  BN.prototype.ior = function ior (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuor(num);
    	  };

    	  // Or `num` with `this`
    	  BN.prototype.or = function or (num) {
    	    if (this.length > num.length) return this.clone().ior(num);
    	    return num.clone().ior(this);
    	  };

    	  BN.prototype.uor = function uor (num) {
    	    if (this.length > num.length) return this.clone().iuor(num);
    	    return num.clone().iuor(this);
    	  };

    	  // And `num` with `this` in-place
    	  BN.prototype.iuand = function iuand (num) {
    	    // b = min-length(num, this)
    	    var b;
    	    if (this.length > num.length) {
    	      b = num;
    	    } else {
    	      b = this;
    	    }

    	    for (var i = 0; i < b.length; i++) {
    	      this.words[i] = this.words[i] & num.words[i];
    	    }

    	    this.length = b.length;

    	    return this._strip();
    	  };

    	  BN.prototype.iand = function iand (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuand(num);
    	  };

    	  // And `num` with `this`
    	  BN.prototype.and = function and (num) {
    	    if (this.length > num.length) return this.clone().iand(num);
    	    return num.clone().iand(this);
    	  };

    	  BN.prototype.uand = function uand (num) {
    	    if (this.length > num.length) return this.clone().iuand(num);
    	    return num.clone().iuand(this);
    	  };

    	  // Xor `num` with `this` in-place
    	  BN.prototype.iuxor = function iuxor (num) {
    	    // a.length > b.length
    	    var a;
    	    var b;
    	    if (this.length > num.length) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    for (var i = 0; i < b.length; i++) {
    	      this.words[i] = a.words[i] ^ b.words[i];
    	    }

    	    if (this !== a) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    this.length = a.length;

    	    return this._strip();
    	  };

    	  BN.prototype.ixor = function ixor (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuxor(num);
    	  };

    	  // Xor `num` with `this`
    	  BN.prototype.xor = function xor (num) {
    	    if (this.length > num.length) return this.clone().ixor(num);
    	    return num.clone().ixor(this);
    	  };

    	  BN.prototype.uxor = function uxor (num) {
    	    if (this.length > num.length) return this.clone().iuxor(num);
    	    return num.clone().iuxor(this);
    	  };

    	  // Not ``this`` with ``width`` bitwidth
    	  BN.prototype.inotn = function inotn (width) {
    	    assert(typeof width === 'number' && width >= 0);

    	    var bytesNeeded = Math.ceil(width / 26) | 0;
    	    var bitsLeft = width % 26;

    	    // Extend the buffer with leading zeroes
    	    this._expand(bytesNeeded);

    	    if (bitsLeft > 0) {
    	      bytesNeeded--;
    	    }

    	    // Handle complete words
    	    for (var i = 0; i < bytesNeeded; i++) {
    	      this.words[i] = ~this.words[i] & 0x3ffffff;
    	    }

    	    // Handle the residue
    	    if (bitsLeft > 0) {
    	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    	    }

    	    // And remove leading zeroes
    	    return this._strip();
    	  };

    	  BN.prototype.notn = function notn (width) {
    	    return this.clone().inotn(width);
    	  };

    	  // Set `bit` of `this`
    	  BN.prototype.setn = function setn (bit, val) {
    	    assert(typeof bit === 'number' && bit >= 0);

    	    var off = (bit / 26) | 0;
    	    var wbit = bit % 26;

    	    this._expand(off + 1);

    	    if (val) {
    	      this.words[off] = this.words[off] | (1 << wbit);
    	    } else {
    	      this.words[off] = this.words[off] & ~(1 << wbit);
    	    }

    	    return this._strip();
    	  };

    	  // Add `num` to `this` in-place
    	  BN.prototype.iadd = function iadd (num) {
    	    var r;

    	    // negative + positive
    	    if (this.negative !== 0 && num.negative === 0) {
    	      this.negative = 0;
    	      r = this.isub(num);
    	      this.negative ^= 1;
    	      return this._normSign();

    	    // positive + negative
    	    } else if (this.negative === 0 && num.negative !== 0) {
    	      num.negative = 0;
    	      r = this.isub(num);
    	      num.negative = 1;
    	      return r._normSign();
    	    }

    	    // a.length > b.length
    	    var a, b;
    	    if (this.length > num.length) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    var carry = 0;
    	    for (var i = 0; i < b.length; i++) {
    	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
    	      this.words[i] = r & 0x3ffffff;
    	      carry = r >>> 26;
    	    }
    	    for (; carry !== 0 && i < a.length; i++) {
    	      r = (a.words[i] | 0) + carry;
    	      this.words[i] = r & 0x3ffffff;
    	      carry = r >>> 26;
    	    }

    	    this.length = a.length;
    	    if (carry !== 0) {
    	      this.words[this.length] = carry;
    	      this.length++;
    	    // Copy the rest of the words
    	    } else if (a !== this) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    return this;
    	  };

    	  // Add `num` to `this`
    	  BN.prototype.add = function add (num) {
    	    var res;
    	    if (num.negative !== 0 && this.negative === 0) {
    	      num.negative = 0;
    	      res = this.sub(num);
    	      num.negative ^= 1;
    	      return res;
    	    } else if (num.negative === 0 && this.negative !== 0) {
    	      this.negative = 0;
    	      res = num.sub(this);
    	      this.negative = 1;
    	      return res;
    	    }

    	    if (this.length > num.length) return this.clone().iadd(num);

    	    return num.clone().iadd(this);
    	  };

    	  // Subtract `num` from `this` in-place
    	  BN.prototype.isub = function isub (num) {
    	    // this - (-num) = this + num
    	    if (num.negative !== 0) {
    	      num.negative = 0;
    	      var r = this.iadd(num);
    	      num.negative = 1;
    	      return r._normSign();

    	    // -this - num = -(this + num)
    	    } else if (this.negative !== 0) {
    	      this.negative = 0;
    	      this.iadd(num);
    	      this.negative = 1;
    	      return this._normSign();
    	    }

    	    // At this point both numbers are positive
    	    var cmp = this.cmp(num);

    	    // Optimization - zeroify
    	    if (cmp === 0) {
    	      this.negative = 0;
    	      this.length = 1;
    	      this.words[0] = 0;
    	      return this;
    	    }

    	    // a > b
    	    var a, b;
    	    if (cmp > 0) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    var carry = 0;
    	    for (var i = 0; i < b.length; i++) {
    	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
    	      carry = r >> 26;
    	      this.words[i] = r & 0x3ffffff;
    	    }
    	    for (; carry !== 0 && i < a.length; i++) {
    	      r = (a.words[i] | 0) + carry;
    	      carry = r >> 26;
    	      this.words[i] = r & 0x3ffffff;
    	    }

    	    // Copy rest of the words
    	    if (carry === 0 && i < a.length && a !== this) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    this.length = Math.max(this.length, i);

    	    if (a !== this) {
    	      this.negative = 1;
    	    }

    	    return this._strip();
    	  };

    	  // Subtract `num` from `this`
    	  BN.prototype.sub = function sub (num) {
    	    return this.clone().isub(num);
    	  };

    	  function smallMulTo (self, num, out) {
    	    out.negative = num.negative ^ self.negative;
    	    var len = (self.length + num.length) | 0;
    	    out.length = len;
    	    len = (len - 1) | 0;

    	    // Peel one iteration (compiler can't do it, because of code complexity)
    	    var a = self.words[0] | 0;
    	    var b = num.words[0] | 0;
    	    var r = a * b;

    	    var lo = r & 0x3ffffff;
    	    var carry = (r / 0x4000000) | 0;
    	    out.words[0] = lo;

    	    for (var k = 1; k < len; k++) {
    	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    	      // note that ncarry could be >= 0x3ffffff
    	      var ncarry = carry >>> 26;
    	      var rword = carry & 0x3ffffff;
    	      var maxJ = Math.min(k, num.length - 1);
    	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
    	        var i = (k - j) | 0;
    	        a = self.words[i] | 0;
    	        b = num.words[j] | 0;
    	        r = a * b + rword;
    	        ncarry += (r / 0x4000000) | 0;
    	        rword = r & 0x3ffffff;
    	      }
    	      out.words[k] = rword | 0;
    	      carry = ncarry | 0;
    	    }
    	    if (carry !== 0) {
    	      out.words[k] = carry | 0;
    	    } else {
    	      out.length--;
    	    }

    	    return out._strip();
    	  }

    	  // TODO(indutny): it may be reasonable to omit it for users who don't need
    	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    	  // multiplication (like elliptic secp256k1).
    	  var comb10MulTo = function comb10MulTo (self, num, out) {
    	    var a = self.words;
    	    var b = num.words;
    	    var o = out.words;
    	    var c = 0;
    	    var lo;
    	    var mid;
    	    var hi;
    	    var a0 = a[0] | 0;
    	    var al0 = a0 & 0x1fff;
    	    var ah0 = a0 >>> 13;
    	    var a1 = a[1] | 0;
    	    var al1 = a1 & 0x1fff;
    	    var ah1 = a1 >>> 13;
    	    var a2 = a[2] | 0;
    	    var al2 = a2 & 0x1fff;
    	    var ah2 = a2 >>> 13;
    	    var a3 = a[3] | 0;
    	    var al3 = a3 & 0x1fff;
    	    var ah3 = a3 >>> 13;
    	    var a4 = a[4] | 0;
    	    var al4 = a4 & 0x1fff;
    	    var ah4 = a4 >>> 13;
    	    var a5 = a[5] | 0;
    	    var al5 = a5 & 0x1fff;
    	    var ah5 = a5 >>> 13;
    	    var a6 = a[6] | 0;
    	    var al6 = a6 & 0x1fff;
    	    var ah6 = a6 >>> 13;
    	    var a7 = a[7] | 0;
    	    var al7 = a7 & 0x1fff;
    	    var ah7 = a7 >>> 13;
    	    var a8 = a[8] | 0;
    	    var al8 = a8 & 0x1fff;
    	    var ah8 = a8 >>> 13;
    	    var a9 = a[9] | 0;
    	    var al9 = a9 & 0x1fff;
    	    var ah9 = a9 >>> 13;
    	    var b0 = b[0] | 0;
    	    var bl0 = b0 & 0x1fff;
    	    var bh0 = b0 >>> 13;
    	    var b1 = b[1] | 0;
    	    var bl1 = b1 & 0x1fff;
    	    var bh1 = b1 >>> 13;
    	    var b2 = b[2] | 0;
    	    var bl2 = b2 & 0x1fff;
    	    var bh2 = b2 >>> 13;
    	    var b3 = b[3] | 0;
    	    var bl3 = b3 & 0x1fff;
    	    var bh3 = b3 >>> 13;
    	    var b4 = b[4] | 0;
    	    var bl4 = b4 & 0x1fff;
    	    var bh4 = b4 >>> 13;
    	    var b5 = b[5] | 0;
    	    var bl5 = b5 & 0x1fff;
    	    var bh5 = b5 >>> 13;
    	    var b6 = b[6] | 0;
    	    var bl6 = b6 & 0x1fff;
    	    var bh6 = b6 >>> 13;
    	    var b7 = b[7] | 0;
    	    var bl7 = b7 & 0x1fff;
    	    var bh7 = b7 >>> 13;
    	    var b8 = b[8] | 0;
    	    var bl8 = b8 & 0x1fff;
    	    var bh8 = b8 >>> 13;
    	    var b9 = b[9] | 0;
    	    var bl9 = b9 & 0x1fff;
    	    var bh9 = b9 >>> 13;

    	    out.negative = self.negative ^ num.negative;
    	    out.length = 19;
    	    /* k = 0 */
    	    lo = Math.imul(al0, bl0);
    	    mid = Math.imul(al0, bh0);
    	    mid = (mid + Math.imul(ah0, bl0)) | 0;
    	    hi = Math.imul(ah0, bh0);
    	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    	    w0 &= 0x3ffffff;
    	    /* k = 1 */
    	    lo = Math.imul(al1, bl0);
    	    mid = Math.imul(al1, bh0);
    	    mid = (mid + Math.imul(ah1, bl0)) | 0;
    	    hi = Math.imul(ah1, bh0);
    	    lo = (lo + Math.imul(al0, bl1)) | 0;
    	    mid = (mid + Math.imul(al0, bh1)) | 0;
    	    mid = (mid + Math.imul(ah0, bl1)) | 0;
    	    hi = (hi + Math.imul(ah0, bh1)) | 0;
    	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    	    w1 &= 0x3ffffff;
    	    /* k = 2 */
    	    lo = Math.imul(al2, bl0);
    	    mid = Math.imul(al2, bh0);
    	    mid = (mid + Math.imul(ah2, bl0)) | 0;
    	    hi = Math.imul(ah2, bh0);
    	    lo = (lo + Math.imul(al1, bl1)) | 0;
    	    mid = (mid + Math.imul(al1, bh1)) | 0;
    	    mid = (mid + Math.imul(ah1, bl1)) | 0;
    	    hi = (hi + Math.imul(ah1, bh1)) | 0;
    	    lo = (lo + Math.imul(al0, bl2)) | 0;
    	    mid = (mid + Math.imul(al0, bh2)) | 0;
    	    mid = (mid + Math.imul(ah0, bl2)) | 0;
    	    hi = (hi + Math.imul(ah0, bh2)) | 0;
    	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    	    w2 &= 0x3ffffff;
    	    /* k = 3 */
    	    lo = Math.imul(al3, bl0);
    	    mid = Math.imul(al3, bh0);
    	    mid = (mid + Math.imul(ah3, bl0)) | 0;
    	    hi = Math.imul(ah3, bh0);
    	    lo = (lo + Math.imul(al2, bl1)) | 0;
    	    mid = (mid + Math.imul(al2, bh1)) | 0;
    	    mid = (mid + Math.imul(ah2, bl1)) | 0;
    	    hi = (hi + Math.imul(ah2, bh1)) | 0;
    	    lo = (lo + Math.imul(al1, bl2)) | 0;
    	    mid = (mid + Math.imul(al1, bh2)) | 0;
    	    mid = (mid + Math.imul(ah1, bl2)) | 0;
    	    hi = (hi + Math.imul(ah1, bh2)) | 0;
    	    lo = (lo + Math.imul(al0, bl3)) | 0;
    	    mid = (mid + Math.imul(al0, bh3)) | 0;
    	    mid = (mid + Math.imul(ah0, bl3)) | 0;
    	    hi = (hi + Math.imul(ah0, bh3)) | 0;
    	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    	    w3 &= 0x3ffffff;
    	    /* k = 4 */
    	    lo = Math.imul(al4, bl0);
    	    mid = Math.imul(al4, bh0);
    	    mid = (mid + Math.imul(ah4, bl0)) | 0;
    	    hi = Math.imul(ah4, bh0);
    	    lo = (lo + Math.imul(al3, bl1)) | 0;
    	    mid = (mid + Math.imul(al3, bh1)) | 0;
    	    mid = (mid + Math.imul(ah3, bl1)) | 0;
    	    hi = (hi + Math.imul(ah3, bh1)) | 0;
    	    lo = (lo + Math.imul(al2, bl2)) | 0;
    	    mid = (mid + Math.imul(al2, bh2)) | 0;
    	    mid = (mid + Math.imul(ah2, bl2)) | 0;
    	    hi = (hi + Math.imul(ah2, bh2)) | 0;
    	    lo = (lo + Math.imul(al1, bl3)) | 0;
    	    mid = (mid + Math.imul(al1, bh3)) | 0;
    	    mid = (mid + Math.imul(ah1, bl3)) | 0;
    	    hi = (hi + Math.imul(ah1, bh3)) | 0;
    	    lo = (lo + Math.imul(al0, bl4)) | 0;
    	    mid = (mid + Math.imul(al0, bh4)) | 0;
    	    mid = (mid + Math.imul(ah0, bl4)) | 0;
    	    hi = (hi + Math.imul(ah0, bh4)) | 0;
    	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    	    w4 &= 0x3ffffff;
    	    /* k = 5 */
    	    lo = Math.imul(al5, bl0);
    	    mid = Math.imul(al5, bh0);
    	    mid = (mid + Math.imul(ah5, bl0)) | 0;
    	    hi = Math.imul(ah5, bh0);
    	    lo = (lo + Math.imul(al4, bl1)) | 0;
    	    mid = (mid + Math.imul(al4, bh1)) | 0;
    	    mid = (mid + Math.imul(ah4, bl1)) | 0;
    	    hi = (hi + Math.imul(ah4, bh1)) | 0;
    	    lo = (lo + Math.imul(al3, bl2)) | 0;
    	    mid = (mid + Math.imul(al3, bh2)) | 0;
    	    mid = (mid + Math.imul(ah3, bl2)) | 0;
    	    hi = (hi + Math.imul(ah3, bh2)) | 0;
    	    lo = (lo + Math.imul(al2, bl3)) | 0;
    	    mid = (mid + Math.imul(al2, bh3)) | 0;
    	    mid = (mid + Math.imul(ah2, bl3)) | 0;
    	    hi = (hi + Math.imul(ah2, bh3)) | 0;
    	    lo = (lo + Math.imul(al1, bl4)) | 0;
    	    mid = (mid + Math.imul(al1, bh4)) | 0;
    	    mid = (mid + Math.imul(ah1, bl4)) | 0;
    	    hi = (hi + Math.imul(ah1, bh4)) | 0;
    	    lo = (lo + Math.imul(al0, bl5)) | 0;
    	    mid = (mid + Math.imul(al0, bh5)) | 0;
    	    mid = (mid + Math.imul(ah0, bl5)) | 0;
    	    hi = (hi + Math.imul(ah0, bh5)) | 0;
    	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    	    w5 &= 0x3ffffff;
    	    /* k = 6 */
    	    lo = Math.imul(al6, bl0);
    	    mid = Math.imul(al6, bh0);
    	    mid = (mid + Math.imul(ah6, bl0)) | 0;
    	    hi = Math.imul(ah6, bh0);
    	    lo = (lo + Math.imul(al5, bl1)) | 0;
    	    mid = (mid + Math.imul(al5, bh1)) | 0;
    	    mid = (mid + Math.imul(ah5, bl1)) | 0;
    	    hi = (hi + Math.imul(ah5, bh1)) | 0;
    	    lo = (lo + Math.imul(al4, bl2)) | 0;
    	    mid = (mid + Math.imul(al4, bh2)) | 0;
    	    mid = (mid + Math.imul(ah4, bl2)) | 0;
    	    hi = (hi + Math.imul(ah4, bh2)) | 0;
    	    lo = (lo + Math.imul(al3, bl3)) | 0;
    	    mid = (mid + Math.imul(al3, bh3)) | 0;
    	    mid = (mid + Math.imul(ah3, bl3)) | 0;
    	    hi = (hi + Math.imul(ah3, bh3)) | 0;
    	    lo = (lo + Math.imul(al2, bl4)) | 0;
    	    mid = (mid + Math.imul(al2, bh4)) | 0;
    	    mid = (mid + Math.imul(ah2, bl4)) | 0;
    	    hi = (hi + Math.imul(ah2, bh4)) | 0;
    	    lo = (lo + Math.imul(al1, bl5)) | 0;
    	    mid = (mid + Math.imul(al1, bh5)) | 0;
    	    mid = (mid + Math.imul(ah1, bl5)) | 0;
    	    hi = (hi + Math.imul(ah1, bh5)) | 0;
    	    lo = (lo + Math.imul(al0, bl6)) | 0;
    	    mid = (mid + Math.imul(al0, bh6)) | 0;
    	    mid = (mid + Math.imul(ah0, bl6)) | 0;
    	    hi = (hi + Math.imul(ah0, bh6)) | 0;
    	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    	    w6 &= 0x3ffffff;
    	    /* k = 7 */
    	    lo = Math.imul(al7, bl0);
    	    mid = Math.imul(al7, bh0);
    	    mid = (mid + Math.imul(ah7, bl0)) | 0;
    	    hi = Math.imul(ah7, bh0);
    	    lo = (lo + Math.imul(al6, bl1)) | 0;
    	    mid = (mid + Math.imul(al6, bh1)) | 0;
    	    mid = (mid + Math.imul(ah6, bl1)) | 0;
    	    hi = (hi + Math.imul(ah6, bh1)) | 0;
    	    lo = (lo + Math.imul(al5, bl2)) | 0;
    	    mid = (mid + Math.imul(al5, bh2)) | 0;
    	    mid = (mid + Math.imul(ah5, bl2)) | 0;
    	    hi = (hi + Math.imul(ah5, bh2)) | 0;
    	    lo = (lo + Math.imul(al4, bl3)) | 0;
    	    mid = (mid + Math.imul(al4, bh3)) | 0;
    	    mid = (mid + Math.imul(ah4, bl3)) | 0;
    	    hi = (hi + Math.imul(ah4, bh3)) | 0;
    	    lo = (lo + Math.imul(al3, bl4)) | 0;
    	    mid = (mid + Math.imul(al3, bh4)) | 0;
    	    mid = (mid + Math.imul(ah3, bl4)) | 0;
    	    hi = (hi + Math.imul(ah3, bh4)) | 0;
    	    lo = (lo + Math.imul(al2, bl5)) | 0;
    	    mid = (mid + Math.imul(al2, bh5)) | 0;
    	    mid = (mid + Math.imul(ah2, bl5)) | 0;
    	    hi = (hi + Math.imul(ah2, bh5)) | 0;
    	    lo = (lo + Math.imul(al1, bl6)) | 0;
    	    mid = (mid + Math.imul(al1, bh6)) | 0;
    	    mid = (mid + Math.imul(ah1, bl6)) | 0;
    	    hi = (hi + Math.imul(ah1, bh6)) | 0;
    	    lo = (lo + Math.imul(al0, bl7)) | 0;
    	    mid = (mid + Math.imul(al0, bh7)) | 0;
    	    mid = (mid + Math.imul(ah0, bl7)) | 0;
    	    hi = (hi + Math.imul(ah0, bh7)) | 0;
    	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    	    w7 &= 0x3ffffff;
    	    /* k = 8 */
    	    lo = Math.imul(al8, bl0);
    	    mid = Math.imul(al8, bh0);
    	    mid = (mid + Math.imul(ah8, bl0)) | 0;
    	    hi = Math.imul(ah8, bh0);
    	    lo = (lo + Math.imul(al7, bl1)) | 0;
    	    mid = (mid + Math.imul(al7, bh1)) | 0;
    	    mid = (mid + Math.imul(ah7, bl1)) | 0;
    	    hi = (hi + Math.imul(ah7, bh1)) | 0;
    	    lo = (lo + Math.imul(al6, bl2)) | 0;
    	    mid = (mid + Math.imul(al6, bh2)) | 0;
    	    mid = (mid + Math.imul(ah6, bl2)) | 0;
    	    hi = (hi + Math.imul(ah6, bh2)) | 0;
    	    lo = (lo + Math.imul(al5, bl3)) | 0;
    	    mid = (mid + Math.imul(al5, bh3)) | 0;
    	    mid = (mid + Math.imul(ah5, bl3)) | 0;
    	    hi = (hi + Math.imul(ah5, bh3)) | 0;
    	    lo = (lo + Math.imul(al4, bl4)) | 0;
    	    mid = (mid + Math.imul(al4, bh4)) | 0;
    	    mid = (mid + Math.imul(ah4, bl4)) | 0;
    	    hi = (hi + Math.imul(ah4, bh4)) | 0;
    	    lo = (lo + Math.imul(al3, bl5)) | 0;
    	    mid = (mid + Math.imul(al3, bh5)) | 0;
    	    mid = (mid + Math.imul(ah3, bl5)) | 0;
    	    hi = (hi + Math.imul(ah3, bh5)) | 0;
    	    lo = (lo + Math.imul(al2, bl6)) | 0;
    	    mid = (mid + Math.imul(al2, bh6)) | 0;
    	    mid = (mid + Math.imul(ah2, bl6)) | 0;
    	    hi = (hi + Math.imul(ah2, bh6)) | 0;
    	    lo = (lo + Math.imul(al1, bl7)) | 0;
    	    mid = (mid + Math.imul(al1, bh7)) | 0;
    	    mid = (mid + Math.imul(ah1, bl7)) | 0;
    	    hi = (hi + Math.imul(ah1, bh7)) | 0;
    	    lo = (lo + Math.imul(al0, bl8)) | 0;
    	    mid = (mid + Math.imul(al0, bh8)) | 0;
    	    mid = (mid + Math.imul(ah0, bl8)) | 0;
    	    hi = (hi + Math.imul(ah0, bh8)) | 0;
    	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    	    w8 &= 0x3ffffff;
    	    /* k = 9 */
    	    lo = Math.imul(al9, bl0);
    	    mid = Math.imul(al9, bh0);
    	    mid = (mid + Math.imul(ah9, bl0)) | 0;
    	    hi = Math.imul(ah9, bh0);
    	    lo = (lo + Math.imul(al8, bl1)) | 0;
    	    mid = (mid + Math.imul(al8, bh1)) | 0;
    	    mid = (mid + Math.imul(ah8, bl1)) | 0;
    	    hi = (hi + Math.imul(ah8, bh1)) | 0;
    	    lo = (lo + Math.imul(al7, bl2)) | 0;
    	    mid = (mid + Math.imul(al7, bh2)) | 0;
    	    mid = (mid + Math.imul(ah7, bl2)) | 0;
    	    hi = (hi + Math.imul(ah7, bh2)) | 0;
    	    lo = (lo + Math.imul(al6, bl3)) | 0;
    	    mid = (mid + Math.imul(al6, bh3)) | 0;
    	    mid = (mid + Math.imul(ah6, bl3)) | 0;
    	    hi = (hi + Math.imul(ah6, bh3)) | 0;
    	    lo = (lo + Math.imul(al5, bl4)) | 0;
    	    mid = (mid + Math.imul(al5, bh4)) | 0;
    	    mid = (mid + Math.imul(ah5, bl4)) | 0;
    	    hi = (hi + Math.imul(ah5, bh4)) | 0;
    	    lo = (lo + Math.imul(al4, bl5)) | 0;
    	    mid = (mid + Math.imul(al4, bh5)) | 0;
    	    mid = (mid + Math.imul(ah4, bl5)) | 0;
    	    hi = (hi + Math.imul(ah4, bh5)) | 0;
    	    lo = (lo + Math.imul(al3, bl6)) | 0;
    	    mid = (mid + Math.imul(al3, bh6)) | 0;
    	    mid = (mid + Math.imul(ah3, bl6)) | 0;
    	    hi = (hi + Math.imul(ah3, bh6)) | 0;
    	    lo = (lo + Math.imul(al2, bl7)) | 0;
    	    mid = (mid + Math.imul(al2, bh7)) | 0;
    	    mid = (mid + Math.imul(ah2, bl7)) | 0;
    	    hi = (hi + Math.imul(ah2, bh7)) | 0;
    	    lo = (lo + Math.imul(al1, bl8)) | 0;
    	    mid = (mid + Math.imul(al1, bh8)) | 0;
    	    mid = (mid + Math.imul(ah1, bl8)) | 0;
    	    hi = (hi + Math.imul(ah1, bh8)) | 0;
    	    lo = (lo + Math.imul(al0, bl9)) | 0;
    	    mid = (mid + Math.imul(al0, bh9)) | 0;
    	    mid = (mid + Math.imul(ah0, bl9)) | 0;
    	    hi = (hi + Math.imul(ah0, bh9)) | 0;
    	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    	    w9 &= 0x3ffffff;
    	    /* k = 10 */
    	    lo = Math.imul(al9, bl1);
    	    mid = Math.imul(al9, bh1);
    	    mid = (mid + Math.imul(ah9, bl1)) | 0;
    	    hi = Math.imul(ah9, bh1);
    	    lo = (lo + Math.imul(al8, bl2)) | 0;
    	    mid = (mid + Math.imul(al8, bh2)) | 0;
    	    mid = (mid + Math.imul(ah8, bl2)) | 0;
    	    hi = (hi + Math.imul(ah8, bh2)) | 0;
    	    lo = (lo + Math.imul(al7, bl3)) | 0;
    	    mid = (mid + Math.imul(al7, bh3)) | 0;
    	    mid = (mid + Math.imul(ah7, bl3)) | 0;
    	    hi = (hi + Math.imul(ah7, bh3)) | 0;
    	    lo = (lo + Math.imul(al6, bl4)) | 0;
    	    mid = (mid + Math.imul(al6, bh4)) | 0;
    	    mid = (mid + Math.imul(ah6, bl4)) | 0;
    	    hi = (hi + Math.imul(ah6, bh4)) | 0;
    	    lo = (lo + Math.imul(al5, bl5)) | 0;
    	    mid = (mid + Math.imul(al5, bh5)) | 0;
    	    mid = (mid + Math.imul(ah5, bl5)) | 0;
    	    hi = (hi + Math.imul(ah5, bh5)) | 0;
    	    lo = (lo + Math.imul(al4, bl6)) | 0;
    	    mid = (mid + Math.imul(al4, bh6)) | 0;
    	    mid = (mid + Math.imul(ah4, bl6)) | 0;
    	    hi = (hi + Math.imul(ah4, bh6)) | 0;
    	    lo = (lo + Math.imul(al3, bl7)) | 0;
    	    mid = (mid + Math.imul(al3, bh7)) | 0;
    	    mid = (mid + Math.imul(ah3, bl7)) | 0;
    	    hi = (hi + Math.imul(ah3, bh7)) | 0;
    	    lo = (lo + Math.imul(al2, bl8)) | 0;
    	    mid = (mid + Math.imul(al2, bh8)) | 0;
    	    mid = (mid + Math.imul(ah2, bl8)) | 0;
    	    hi = (hi + Math.imul(ah2, bh8)) | 0;
    	    lo = (lo + Math.imul(al1, bl9)) | 0;
    	    mid = (mid + Math.imul(al1, bh9)) | 0;
    	    mid = (mid + Math.imul(ah1, bl9)) | 0;
    	    hi = (hi + Math.imul(ah1, bh9)) | 0;
    	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    	    w10 &= 0x3ffffff;
    	    /* k = 11 */
    	    lo = Math.imul(al9, bl2);
    	    mid = Math.imul(al9, bh2);
    	    mid = (mid + Math.imul(ah9, bl2)) | 0;
    	    hi = Math.imul(ah9, bh2);
    	    lo = (lo + Math.imul(al8, bl3)) | 0;
    	    mid = (mid + Math.imul(al8, bh3)) | 0;
    	    mid = (mid + Math.imul(ah8, bl3)) | 0;
    	    hi = (hi + Math.imul(ah8, bh3)) | 0;
    	    lo = (lo + Math.imul(al7, bl4)) | 0;
    	    mid = (mid + Math.imul(al7, bh4)) | 0;
    	    mid = (mid + Math.imul(ah7, bl4)) | 0;
    	    hi = (hi + Math.imul(ah7, bh4)) | 0;
    	    lo = (lo + Math.imul(al6, bl5)) | 0;
    	    mid = (mid + Math.imul(al6, bh5)) | 0;
    	    mid = (mid + Math.imul(ah6, bl5)) | 0;
    	    hi = (hi + Math.imul(ah6, bh5)) | 0;
    	    lo = (lo + Math.imul(al5, bl6)) | 0;
    	    mid = (mid + Math.imul(al5, bh6)) | 0;
    	    mid = (mid + Math.imul(ah5, bl6)) | 0;
    	    hi = (hi + Math.imul(ah5, bh6)) | 0;
    	    lo = (lo + Math.imul(al4, bl7)) | 0;
    	    mid = (mid + Math.imul(al4, bh7)) | 0;
    	    mid = (mid + Math.imul(ah4, bl7)) | 0;
    	    hi = (hi + Math.imul(ah4, bh7)) | 0;
    	    lo = (lo + Math.imul(al3, bl8)) | 0;
    	    mid = (mid + Math.imul(al3, bh8)) | 0;
    	    mid = (mid + Math.imul(ah3, bl8)) | 0;
    	    hi = (hi + Math.imul(ah3, bh8)) | 0;
    	    lo = (lo + Math.imul(al2, bl9)) | 0;
    	    mid = (mid + Math.imul(al2, bh9)) | 0;
    	    mid = (mid + Math.imul(ah2, bl9)) | 0;
    	    hi = (hi + Math.imul(ah2, bh9)) | 0;
    	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    	    w11 &= 0x3ffffff;
    	    /* k = 12 */
    	    lo = Math.imul(al9, bl3);
    	    mid = Math.imul(al9, bh3);
    	    mid = (mid + Math.imul(ah9, bl3)) | 0;
    	    hi = Math.imul(ah9, bh3);
    	    lo = (lo + Math.imul(al8, bl4)) | 0;
    	    mid = (mid + Math.imul(al8, bh4)) | 0;
    	    mid = (mid + Math.imul(ah8, bl4)) | 0;
    	    hi = (hi + Math.imul(ah8, bh4)) | 0;
    	    lo = (lo + Math.imul(al7, bl5)) | 0;
    	    mid = (mid + Math.imul(al7, bh5)) | 0;
    	    mid = (mid + Math.imul(ah7, bl5)) | 0;
    	    hi = (hi + Math.imul(ah7, bh5)) | 0;
    	    lo = (lo + Math.imul(al6, bl6)) | 0;
    	    mid = (mid + Math.imul(al6, bh6)) | 0;
    	    mid = (mid + Math.imul(ah6, bl6)) | 0;
    	    hi = (hi + Math.imul(ah6, bh6)) | 0;
    	    lo = (lo + Math.imul(al5, bl7)) | 0;
    	    mid = (mid + Math.imul(al5, bh7)) | 0;
    	    mid = (mid + Math.imul(ah5, bl7)) | 0;
    	    hi = (hi + Math.imul(ah5, bh7)) | 0;
    	    lo = (lo + Math.imul(al4, bl8)) | 0;
    	    mid = (mid + Math.imul(al4, bh8)) | 0;
    	    mid = (mid + Math.imul(ah4, bl8)) | 0;
    	    hi = (hi + Math.imul(ah4, bh8)) | 0;
    	    lo = (lo + Math.imul(al3, bl9)) | 0;
    	    mid = (mid + Math.imul(al3, bh9)) | 0;
    	    mid = (mid + Math.imul(ah3, bl9)) | 0;
    	    hi = (hi + Math.imul(ah3, bh9)) | 0;
    	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    	    w12 &= 0x3ffffff;
    	    /* k = 13 */
    	    lo = Math.imul(al9, bl4);
    	    mid = Math.imul(al9, bh4);
    	    mid = (mid + Math.imul(ah9, bl4)) | 0;
    	    hi = Math.imul(ah9, bh4);
    	    lo = (lo + Math.imul(al8, bl5)) | 0;
    	    mid = (mid + Math.imul(al8, bh5)) | 0;
    	    mid = (mid + Math.imul(ah8, bl5)) | 0;
    	    hi = (hi + Math.imul(ah8, bh5)) | 0;
    	    lo = (lo + Math.imul(al7, bl6)) | 0;
    	    mid = (mid + Math.imul(al7, bh6)) | 0;
    	    mid = (mid + Math.imul(ah7, bl6)) | 0;
    	    hi = (hi + Math.imul(ah7, bh6)) | 0;
    	    lo = (lo + Math.imul(al6, bl7)) | 0;
    	    mid = (mid + Math.imul(al6, bh7)) | 0;
    	    mid = (mid + Math.imul(ah6, bl7)) | 0;
    	    hi = (hi + Math.imul(ah6, bh7)) | 0;
    	    lo = (lo + Math.imul(al5, bl8)) | 0;
    	    mid = (mid + Math.imul(al5, bh8)) | 0;
    	    mid = (mid + Math.imul(ah5, bl8)) | 0;
    	    hi = (hi + Math.imul(ah5, bh8)) | 0;
    	    lo = (lo + Math.imul(al4, bl9)) | 0;
    	    mid = (mid + Math.imul(al4, bh9)) | 0;
    	    mid = (mid + Math.imul(ah4, bl9)) | 0;
    	    hi = (hi + Math.imul(ah4, bh9)) | 0;
    	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    	    w13 &= 0x3ffffff;
    	    /* k = 14 */
    	    lo = Math.imul(al9, bl5);
    	    mid = Math.imul(al9, bh5);
    	    mid = (mid + Math.imul(ah9, bl5)) | 0;
    	    hi = Math.imul(ah9, bh5);
    	    lo = (lo + Math.imul(al8, bl6)) | 0;
    	    mid = (mid + Math.imul(al8, bh6)) | 0;
    	    mid = (mid + Math.imul(ah8, bl6)) | 0;
    	    hi = (hi + Math.imul(ah8, bh6)) | 0;
    	    lo = (lo + Math.imul(al7, bl7)) | 0;
    	    mid = (mid + Math.imul(al7, bh7)) | 0;
    	    mid = (mid + Math.imul(ah7, bl7)) | 0;
    	    hi = (hi + Math.imul(ah7, bh7)) | 0;
    	    lo = (lo + Math.imul(al6, bl8)) | 0;
    	    mid = (mid + Math.imul(al6, bh8)) | 0;
    	    mid = (mid + Math.imul(ah6, bl8)) | 0;
    	    hi = (hi + Math.imul(ah6, bh8)) | 0;
    	    lo = (lo + Math.imul(al5, bl9)) | 0;
    	    mid = (mid + Math.imul(al5, bh9)) | 0;
    	    mid = (mid + Math.imul(ah5, bl9)) | 0;
    	    hi = (hi + Math.imul(ah5, bh9)) | 0;
    	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    	    w14 &= 0x3ffffff;
    	    /* k = 15 */
    	    lo = Math.imul(al9, bl6);
    	    mid = Math.imul(al9, bh6);
    	    mid = (mid + Math.imul(ah9, bl6)) | 0;
    	    hi = Math.imul(ah9, bh6);
    	    lo = (lo + Math.imul(al8, bl7)) | 0;
    	    mid = (mid + Math.imul(al8, bh7)) | 0;
    	    mid = (mid + Math.imul(ah8, bl7)) | 0;
    	    hi = (hi + Math.imul(ah8, bh7)) | 0;
    	    lo = (lo + Math.imul(al7, bl8)) | 0;
    	    mid = (mid + Math.imul(al7, bh8)) | 0;
    	    mid = (mid + Math.imul(ah7, bl8)) | 0;
    	    hi = (hi + Math.imul(ah7, bh8)) | 0;
    	    lo = (lo + Math.imul(al6, bl9)) | 0;
    	    mid = (mid + Math.imul(al6, bh9)) | 0;
    	    mid = (mid + Math.imul(ah6, bl9)) | 0;
    	    hi = (hi + Math.imul(ah6, bh9)) | 0;
    	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    	    w15 &= 0x3ffffff;
    	    /* k = 16 */
    	    lo = Math.imul(al9, bl7);
    	    mid = Math.imul(al9, bh7);
    	    mid = (mid + Math.imul(ah9, bl7)) | 0;
    	    hi = Math.imul(ah9, bh7);
    	    lo = (lo + Math.imul(al8, bl8)) | 0;
    	    mid = (mid + Math.imul(al8, bh8)) | 0;
    	    mid = (mid + Math.imul(ah8, bl8)) | 0;
    	    hi = (hi + Math.imul(ah8, bh8)) | 0;
    	    lo = (lo + Math.imul(al7, bl9)) | 0;
    	    mid = (mid + Math.imul(al7, bh9)) | 0;
    	    mid = (mid + Math.imul(ah7, bl9)) | 0;
    	    hi = (hi + Math.imul(ah7, bh9)) | 0;
    	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    	    w16 &= 0x3ffffff;
    	    /* k = 17 */
    	    lo = Math.imul(al9, bl8);
    	    mid = Math.imul(al9, bh8);
    	    mid = (mid + Math.imul(ah9, bl8)) | 0;
    	    hi = Math.imul(ah9, bh8);
    	    lo = (lo + Math.imul(al8, bl9)) | 0;
    	    mid = (mid + Math.imul(al8, bh9)) | 0;
    	    mid = (mid + Math.imul(ah8, bl9)) | 0;
    	    hi = (hi + Math.imul(ah8, bh9)) | 0;
    	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    	    w17 &= 0x3ffffff;
    	    /* k = 18 */
    	    lo = Math.imul(al9, bl9);
    	    mid = Math.imul(al9, bh9);
    	    mid = (mid + Math.imul(ah9, bl9)) | 0;
    	    hi = Math.imul(ah9, bh9);
    	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    	    w18 &= 0x3ffffff;
    	    o[0] = w0;
    	    o[1] = w1;
    	    o[2] = w2;
    	    o[3] = w3;
    	    o[4] = w4;
    	    o[5] = w5;
    	    o[6] = w6;
    	    o[7] = w7;
    	    o[8] = w8;
    	    o[9] = w9;
    	    o[10] = w10;
    	    o[11] = w11;
    	    o[12] = w12;
    	    o[13] = w13;
    	    o[14] = w14;
    	    o[15] = w15;
    	    o[16] = w16;
    	    o[17] = w17;
    	    o[18] = w18;
    	    if (c !== 0) {
    	      o[19] = c;
    	      out.length++;
    	    }
    	    return out;
    	  };

    	  // Polyfill comb
    	  if (!Math.imul) {
    	    comb10MulTo = smallMulTo;
    	  }

    	  function bigMulTo (self, num, out) {
    	    out.negative = num.negative ^ self.negative;
    	    out.length = self.length + num.length;

    	    var carry = 0;
    	    var hncarry = 0;
    	    for (var k = 0; k < out.length - 1; k++) {
    	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    	      // note that ncarry could be >= 0x3ffffff
    	      var ncarry = hncarry;
    	      hncarry = 0;
    	      var rword = carry & 0x3ffffff;
    	      var maxJ = Math.min(k, num.length - 1);
    	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
    	        var i = k - j;
    	        var a = self.words[i] | 0;
    	        var b = num.words[j] | 0;
    	        var r = a * b;

    	        var lo = r & 0x3ffffff;
    	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
    	        lo = (lo + rword) | 0;
    	        rword = lo & 0x3ffffff;
    	        ncarry = (ncarry + (lo >>> 26)) | 0;

    	        hncarry += ncarry >>> 26;
    	        ncarry &= 0x3ffffff;
    	      }
    	      out.words[k] = rword;
    	      carry = ncarry;
    	      ncarry = hncarry;
    	    }
    	    if (carry !== 0) {
    	      out.words[k] = carry;
    	    } else {
    	      out.length--;
    	    }

    	    return out._strip();
    	  }

    	  function jumboMulTo (self, num, out) {
    	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    	    // var fftm = new FFTM();
    	    // return fftm.mulp(self, num, out);
    	    return bigMulTo(self, num, out);
    	  }

    	  BN.prototype.mulTo = function mulTo (num, out) {
    	    var res;
    	    var len = this.length + num.length;
    	    if (this.length === 10 && num.length === 10) {
    	      res = comb10MulTo(this, num, out);
    	    } else if (len < 63) {
    	      res = smallMulTo(this, num, out);
    	    } else if (len < 1024) {
    	      res = bigMulTo(this, num, out);
    	    } else {
    	      res = jumboMulTo(this, num, out);
    	    }

    	    return res;
    	  };

    	  // Multiply `this` by `num`
    	  BN.prototype.mul = function mul (num) {
    	    var out = new BN(null);
    	    out.words = new Array(this.length + num.length);
    	    return this.mulTo(num, out);
    	  };

    	  // Multiply employing FFT
    	  BN.prototype.mulf = function mulf (num) {
    	    var out = new BN(null);
    	    out.words = new Array(this.length + num.length);
    	    return jumboMulTo(this, num, out);
    	  };

    	  // In-place Multiplication
    	  BN.prototype.imul = function imul (num) {
    	    return this.clone().mulTo(num, this);
    	  };

    	  BN.prototype.imuln = function imuln (num) {
    	    var isNegNum = num < 0;
    	    if (isNegNum) num = -num;

    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);

    	    // Carry
    	    var carry = 0;
    	    for (var i = 0; i < this.length; i++) {
    	      var w = (this.words[i] | 0) * num;
    	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    	      carry >>= 26;
    	      carry += (w / 0x4000000) | 0;
    	      // NOTE: lo is 27bit maximum
    	      carry += lo >>> 26;
    	      this.words[i] = lo & 0x3ffffff;
    	    }

    	    if (carry !== 0) {
    	      this.words[i] = carry;
    	      this.length++;
    	    }

    	    return isNegNum ? this.ineg() : this;
    	  };

    	  BN.prototype.muln = function muln (num) {
    	    return this.clone().imuln(num);
    	  };

    	  // `this` * `this`
    	  BN.prototype.sqr = function sqr () {
    	    return this.mul(this);
    	  };

    	  // `this` * `this` in-place
    	  BN.prototype.isqr = function isqr () {
    	    return this.imul(this.clone());
    	  };

    	  // Math.pow(`this`, `num`)
    	  BN.prototype.pow = function pow (num) {
    	    var w = toBitArray(num);
    	    if (w.length === 0) return new BN(1);

    	    // Skip leading zeroes
    	    var res = this;
    	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
    	      if (w[i] !== 0) break;
    	    }

    	    if (++i < w.length) {
    	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
    	        if (w[i] === 0) continue;

    	        res = res.mul(q);
    	      }
    	    }

    	    return res;
    	  };

    	  // Shift-left in-place
    	  BN.prototype.iushln = function iushln (bits) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var r = bits % 26;
    	    var s = (bits - r) / 26;
    	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    	    var i;

    	    if (r !== 0) {
    	      var carry = 0;

    	      for (i = 0; i < this.length; i++) {
    	        var newCarry = this.words[i] & carryMask;
    	        var c = ((this.words[i] | 0) - newCarry) << r;
    	        this.words[i] = c | carry;
    	        carry = newCarry >>> (26 - r);
    	      }

    	      if (carry) {
    	        this.words[i] = carry;
    	        this.length++;
    	      }
    	    }

    	    if (s !== 0) {
    	      for (i = this.length - 1; i >= 0; i--) {
    	        this.words[i + s] = this.words[i];
    	      }

    	      for (i = 0; i < s; i++) {
    	        this.words[i] = 0;
    	      }

    	      this.length += s;
    	    }

    	    return this._strip();
    	  };

    	  BN.prototype.ishln = function ishln (bits) {
    	    // TODO(indutny): implement me
    	    assert(this.negative === 0);
    	    return this.iushln(bits);
    	  };

    	  // Shift-right in-place
    	  // NOTE: `hint` is a lowest bit before trailing zeroes
    	  // NOTE: if `extended` is present - it will be filled with destroyed bits
    	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var h;
    	    if (hint) {
    	      h = (hint - (hint % 26)) / 26;
    	    } else {
    	      h = 0;
    	    }

    	    var r = bits % 26;
    	    var s = Math.min((bits - r) / 26, this.length);
    	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    	    var maskedWords = extended;

    	    h -= s;
    	    h = Math.max(0, h);

    	    // Extended mode, copy masked part
    	    if (maskedWords) {
    	      for (var i = 0; i < s; i++) {
    	        maskedWords.words[i] = this.words[i];
    	      }
    	      maskedWords.length = s;
    	    }

    	    if (s === 0) ; else if (this.length > s) {
    	      this.length -= s;
    	      for (i = 0; i < this.length; i++) {
    	        this.words[i] = this.words[i + s];
    	      }
    	    } else {
    	      this.words[0] = 0;
    	      this.length = 1;
    	    }

    	    var carry = 0;
    	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    	      var word = this.words[i] | 0;
    	      this.words[i] = (carry << (26 - r)) | (word >>> r);
    	      carry = word & mask;
    	    }

    	    // Push carried bits as a mask
    	    if (maskedWords && carry !== 0) {
    	      maskedWords.words[maskedWords.length++] = carry;
    	    }

    	    if (this.length === 0) {
    	      this.words[0] = 0;
    	      this.length = 1;
    	    }

    	    return this._strip();
    	  };

    	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    	    // TODO(indutny): implement me
    	    assert(this.negative === 0);
    	    return this.iushrn(bits, hint, extended);
    	  };

    	  // Shift-left
    	  BN.prototype.shln = function shln (bits) {
    	    return this.clone().ishln(bits);
    	  };

    	  BN.prototype.ushln = function ushln (bits) {
    	    return this.clone().iushln(bits);
    	  };

    	  // Shift-right
    	  BN.prototype.shrn = function shrn (bits) {
    	    return this.clone().ishrn(bits);
    	  };

    	  BN.prototype.ushrn = function ushrn (bits) {
    	    return this.clone().iushrn(bits);
    	  };

    	  // Test if n bit is set
    	  BN.prototype.testn = function testn (bit) {
    	    assert(typeof bit === 'number' && bit >= 0);
    	    var r = bit % 26;
    	    var s = (bit - r) / 26;
    	    var q = 1 << r;

    	    // Fast case: bit is much higher than all existing words
    	    if (this.length <= s) return false;

    	    // Check bit and return
    	    var w = this.words[s];

    	    return !!(w & q);
    	  };

    	  // Return only lowers bits of number (in-place)
    	  BN.prototype.imaskn = function imaskn (bits) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var r = bits % 26;
    	    var s = (bits - r) / 26;

    	    assert(this.negative === 0, 'imaskn works only with positive numbers');

    	    if (this.length <= s) {
    	      return this;
    	    }

    	    if (r !== 0) {
    	      s++;
    	    }
    	    this.length = Math.min(s, this.length);

    	    if (r !== 0) {
    	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    	      this.words[this.length - 1] &= mask;
    	    }

    	    return this._strip();
    	  };

    	  // Return only lowers bits of number
    	  BN.prototype.maskn = function maskn (bits) {
    	    return this.clone().imaskn(bits);
    	  };

    	  // Add plain number `num` to `this`
    	  BN.prototype.iaddn = function iaddn (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);
    	    if (num < 0) return this.isubn(-num);

    	    // Possible sign change
    	    if (this.negative !== 0) {
    	      if (this.length === 1 && (this.words[0] | 0) <= num) {
    	        this.words[0] = num - (this.words[0] | 0);
    	        this.negative = 0;
    	        return this;
    	      }

    	      this.negative = 0;
    	      this.isubn(num);
    	      this.negative = 1;
    	      return this;
    	    }

    	    // Add without checks
    	    return this._iaddn(num);
    	  };

    	  BN.prototype._iaddn = function _iaddn (num) {
    	    this.words[0] += num;

    	    // Carry
    	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    	      this.words[i] -= 0x4000000;
    	      if (i === this.length - 1) {
    	        this.words[i + 1] = 1;
    	      } else {
    	        this.words[i + 1]++;
    	      }
    	    }
    	    this.length = Math.max(this.length, i + 1);

    	    return this;
    	  };

    	  // Subtract plain number `num` from `this`
    	  BN.prototype.isubn = function isubn (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);
    	    if (num < 0) return this.iaddn(-num);

    	    if (this.negative !== 0) {
    	      this.negative = 0;
    	      this.iaddn(num);
    	      this.negative = 1;
    	      return this;
    	    }

    	    this.words[0] -= num;

    	    if (this.length === 1 && this.words[0] < 0) {
    	      this.words[0] = -this.words[0];
    	      this.negative = 1;
    	    } else {
    	      // Carry
    	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    	        this.words[i] += 0x4000000;
    	        this.words[i + 1] -= 1;
    	      }
    	    }

    	    return this._strip();
    	  };

    	  BN.prototype.addn = function addn (num) {
    	    return this.clone().iaddn(num);
    	  };

    	  BN.prototype.subn = function subn (num) {
    	    return this.clone().isubn(num);
    	  };

    	  BN.prototype.iabs = function iabs () {
    	    this.negative = 0;

    	    return this;
    	  };

    	  BN.prototype.abs = function abs () {
    	    return this.clone().iabs();
    	  };

    	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    	    var len = num.length + shift;
    	    var i;

    	    this._expand(len);

    	    var w;
    	    var carry = 0;
    	    for (i = 0; i < num.length; i++) {
    	      w = (this.words[i + shift] | 0) + carry;
    	      var right = (num.words[i] | 0) * mul;
    	      w -= right & 0x3ffffff;
    	      carry = (w >> 26) - ((right / 0x4000000) | 0);
    	      this.words[i + shift] = w & 0x3ffffff;
    	    }
    	    for (; i < this.length - shift; i++) {
    	      w = (this.words[i + shift] | 0) + carry;
    	      carry = w >> 26;
    	      this.words[i + shift] = w & 0x3ffffff;
    	    }

    	    if (carry === 0) return this._strip();

    	    // Subtraction overflow
    	    assert(carry === -1);
    	    carry = 0;
    	    for (i = 0; i < this.length; i++) {
    	      w = -(this.words[i] | 0) + carry;
    	      carry = w >> 26;
    	      this.words[i] = w & 0x3ffffff;
    	    }
    	    this.negative = 1;

    	    return this._strip();
    	  };

    	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    	    var shift = this.length - num.length;

    	    var a = this.clone();
    	    var b = num;

    	    // Normalize
    	    var bhi = b.words[b.length - 1] | 0;
    	    var bhiBits = this._countBits(bhi);
    	    shift = 26 - bhiBits;
    	    if (shift !== 0) {
    	      b = b.ushln(shift);
    	      a.iushln(shift);
    	      bhi = b.words[b.length - 1] | 0;
    	    }

    	    // Initialize quotient
    	    var m = a.length - b.length;
    	    var q;

    	    if (mode !== 'mod') {
    	      q = new BN(null);
    	      q.length = m + 1;
    	      q.words = new Array(q.length);
    	      for (var i = 0; i < q.length; i++) {
    	        q.words[i] = 0;
    	      }
    	    }

    	    var diff = a.clone()._ishlnsubmul(b, 1, m);
    	    if (diff.negative === 0) {
    	      a = diff;
    	      if (q) {
    	        q.words[m] = 1;
    	      }
    	    }

    	    for (var j = m - 1; j >= 0; j--) {
    	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
    	        (a.words[b.length + j - 1] | 0);

    	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    	      // (0x7ffffff)
    	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    	      a._ishlnsubmul(b, qj, j);
    	      while (a.negative !== 0) {
    	        qj--;
    	        a.negative = 0;
    	        a._ishlnsubmul(b, 1, j);
    	        if (!a.isZero()) {
    	          a.negative ^= 1;
    	        }
    	      }
    	      if (q) {
    	        q.words[j] = qj;
    	      }
    	    }
    	    if (q) {
    	      q._strip();
    	    }
    	    a._strip();

    	    // Denormalize
    	    if (mode !== 'div' && shift !== 0) {
    	      a.iushrn(shift);
    	    }

    	    return {
    	      div: q || null,
    	      mod: a
    	    };
    	  };

    	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
    	  //       to `div` to request div only, or be absent to
    	  //       request both div & mod
    	  //       2) `positive` is true if unsigned mod is requested
    	  BN.prototype.divmod = function divmod (num, mode, positive) {
    	    assert(!num.isZero());

    	    if (this.isZero()) {
    	      return {
    	        div: new BN(0),
    	        mod: new BN(0)
    	      };
    	    }

    	    var div, mod, res;
    	    if (this.negative !== 0 && num.negative === 0) {
    	      res = this.neg().divmod(num, mode);

    	      if (mode !== 'mod') {
    	        div = res.div.neg();
    	      }

    	      if (mode !== 'div') {
    	        mod = res.mod.neg();
    	        if (positive && mod.negative !== 0) {
    	          mod.iadd(num);
    	        }
    	      }

    	      return {
    	        div: div,
    	        mod: mod
    	      };
    	    }

    	    if (this.negative === 0 && num.negative !== 0) {
    	      res = this.divmod(num.neg(), mode);

    	      if (mode !== 'mod') {
    	        div = res.div.neg();
    	      }

    	      return {
    	        div: div,
    	        mod: res.mod
    	      };
    	    }

    	    if ((this.negative & num.negative) !== 0) {
    	      res = this.neg().divmod(num.neg(), mode);

    	      if (mode !== 'div') {
    	        mod = res.mod.neg();
    	        if (positive && mod.negative !== 0) {
    	          mod.isub(num);
    	        }
    	      }

    	      return {
    	        div: res.div,
    	        mod: mod
    	      };
    	    }

    	    // Both numbers are positive at this point

    	    // Strip both numbers to approximate shift value
    	    if (num.length > this.length || this.cmp(num) < 0) {
    	      return {
    	        div: new BN(0),
    	        mod: this
    	      };
    	    }

    	    // Very short reduction
    	    if (num.length === 1) {
    	      if (mode === 'div') {
    	        return {
    	          div: this.divn(num.words[0]),
    	          mod: null
    	        };
    	      }

    	      if (mode === 'mod') {
    	        return {
    	          div: null,
    	          mod: new BN(this.modrn(num.words[0]))
    	        };
    	      }

    	      return {
    	        div: this.divn(num.words[0]),
    	        mod: new BN(this.modrn(num.words[0]))
    	      };
    	    }

    	    return this._wordDiv(num, mode);
    	  };

    	  // Find `this` / `num`
    	  BN.prototype.div = function div (num) {
    	    return this.divmod(num, 'div', false).div;
    	  };

    	  // Find `this` % `num`
    	  BN.prototype.mod = function mod (num) {
    	    return this.divmod(num, 'mod', false).mod;
    	  };

    	  BN.prototype.umod = function umod (num) {
    	    return this.divmod(num, 'mod', true).mod;
    	  };

    	  // Find Round(`this` / `num`)
    	  BN.prototype.divRound = function divRound (num) {
    	    var dm = this.divmod(num);

    	    // Fast case - exact division
    	    if (dm.mod.isZero()) return dm.div;

    	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    	    var half = num.ushrn(1);
    	    var r2 = num.andln(1);
    	    var cmp = mod.cmp(half);

    	    // Round down
    	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    	    // Round up
    	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    	  };

    	  BN.prototype.modrn = function modrn (num) {
    	    var isNegNum = num < 0;
    	    if (isNegNum) num = -num;

    	    assert(num <= 0x3ffffff);
    	    var p = (1 << 26) % num;

    	    var acc = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      acc = (p * acc + (this.words[i] | 0)) % num;
    	    }

    	    return isNegNum ? -acc : acc;
    	  };

    	  // WARNING: DEPRECATED
    	  BN.prototype.modn = function modn (num) {
    	    return this.modrn(num);
    	  };

    	  // In-place division by number
    	  BN.prototype.idivn = function idivn (num) {
    	    var isNegNum = num < 0;
    	    if (isNegNum) num = -num;

    	    assert(num <= 0x3ffffff);

    	    var carry = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      var w = (this.words[i] | 0) + carry * 0x4000000;
    	      this.words[i] = (w / num) | 0;
    	      carry = w % num;
    	    }

    	    this._strip();
    	    return isNegNum ? this.ineg() : this;
    	  };

    	  BN.prototype.divn = function divn (num) {
    	    return this.clone().idivn(num);
    	  };

    	  BN.prototype.egcd = function egcd (p) {
    	    assert(p.negative === 0);
    	    assert(!p.isZero());

    	    var x = this;
    	    var y = p.clone();

    	    if (x.negative !== 0) {
    	      x = x.umod(p);
    	    } else {
    	      x = x.clone();
    	    }

    	    // A * x + B * y = x
    	    var A = new BN(1);
    	    var B = new BN(0);

    	    // C * x + D * y = y
    	    var C = new BN(0);
    	    var D = new BN(1);

    	    var g = 0;

    	    while (x.isEven() && y.isEven()) {
    	      x.iushrn(1);
    	      y.iushrn(1);
    	      ++g;
    	    }

    	    var yp = y.clone();
    	    var xp = x.clone();

    	    while (!x.isZero()) {
    	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
    	      if (i > 0) {
    	        x.iushrn(i);
    	        while (i-- > 0) {
    	          if (A.isOdd() || B.isOdd()) {
    	            A.iadd(yp);
    	            B.isub(xp);
    	          }

    	          A.iushrn(1);
    	          B.iushrn(1);
    	        }
    	      }

    	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
    	      if (j > 0) {
    	        y.iushrn(j);
    	        while (j-- > 0) {
    	          if (C.isOdd() || D.isOdd()) {
    	            C.iadd(yp);
    	            D.isub(xp);
    	          }

    	          C.iushrn(1);
    	          D.iushrn(1);
    	        }
    	      }

    	      if (x.cmp(y) >= 0) {
    	        x.isub(y);
    	        A.isub(C);
    	        B.isub(D);
    	      } else {
    	        y.isub(x);
    	        C.isub(A);
    	        D.isub(B);
    	      }
    	    }

    	    return {
    	      a: C,
    	      b: D,
    	      gcd: y.iushln(g)
    	    };
    	  };

    	  // This is reduced incarnation of the binary EEA
    	  // above, designated to invert members of the
    	  // _prime_ fields F(p) at a maximal speed
    	  BN.prototype._invmp = function _invmp (p) {
    	    assert(p.negative === 0);
    	    assert(!p.isZero());

    	    var a = this;
    	    var b = p.clone();

    	    if (a.negative !== 0) {
    	      a = a.umod(p);
    	    } else {
    	      a = a.clone();
    	    }

    	    var x1 = new BN(1);
    	    var x2 = new BN(0);

    	    var delta = b.clone();

    	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
    	      if (i > 0) {
    	        a.iushrn(i);
    	        while (i-- > 0) {
    	          if (x1.isOdd()) {
    	            x1.iadd(delta);
    	          }

    	          x1.iushrn(1);
    	        }
    	      }

    	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
    	      if (j > 0) {
    	        b.iushrn(j);
    	        while (j-- > 0) {
    	          if (x2.isOdd()) {
    	            x2.iadd(delta);
    	          }

    	          x2.iushrn(1);
    	        }
    	      }

    	      if (a.cmp(b) >= 0) {
    	        a.isub(b);
    	        x1.isub(x2);
    	      } else {
    	        b.isub(a);
    	        x2.isub(x1);
    	      }
    	    }

    	    var res;
    	    if (a.cmpn(1) === 0) {
    	      res = x1;
    	    } else {
    	      res = x2;
    	    }

    	    if (res.cmpn(0) < 0) {
    	      res.iadd(p);
    	    }

    	    return res;
    	  };

    	  BN.prototype.gcd = function gcd (num) {
    	    if (this.isZero()) return num.abs();
    	    if (num.isZero()) return this.abs();

    	    var a = this.clone();
    	    var b = num.clone();
    	    a.negative = 0;
    	    b.negative = 0;

    	    // Remove common factor of two
    	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    	      a.iushrn(1);
    	      b.iushrn(1);
    	    }

    	    do {
    	      while (a.isEven()) {
    	        a.iushrn(1);
    	      }
    	      while (b.isEven()) {
    	        b.iushrn(1);
    	      }

    	      var r = a.cmp(b);
    	      if (r < 0) {
    	        // Swap `a` and `b` to make `a` always bigger than `b`
    	        var t = a;
    	        a = b;
    	        b = t;
    	      } else if (r === 0 || b.cmpn(1) === 0) {
    	        break;
    	      }

    	      a.isub(b);
    	    } while (true);

    	    return b.iushln(shift);
    	  };

    	  // Invert number in the field F(num)
    	  BN.prototype.invm = function invm (num) {
    	    return this.egcd(num).a.umod(num);
    	  };

    	  BN.prototype.isEven = function isEven () {
    	    return (this.words[0] & 1) === 0;
    	  };

    	  BN.prototype.isOdd = function isOdd () {
    	    return (this.words[0] & 1) === 1;
    	  };

    	  // And first word and num
    	  BN.prototype.andln = function andln (num) {
    	    return this.words[0] & num;
    	  };

    	  // Increment at the bit position in-line
    	  BN.prototype.bincn = function bincn (bit) {
    	    assert(typeof bit === 'number');
    	    var r = bit % 26;
    	    var s = (bit - r) / 26;
    	    var q = 1 << r;

    	    // Fast case: bit is much higher than all existing words
    	    if (this.length <= s) {
    	      this._expand(s + 1);
    	      this.words[s] |= q;
    	      return this;
    	    }

    	    // Add bit and propagate, if needed
    	    var carry = q;
    	    for (var i = s; carry !== 0 && i < this.length; i++) {
    	      var w = this.words[i] | 0;
    	      w += carry;
    	      carry = w >>> 26;
    	      w &= 0x3ffffff;
    	      this.words[i] = w;
    	    }
    	    if (carry !== 0) {
    	      this.words[i] = carry;
    	      this.length++;
    	    }
    	    return this;
    	  };

    	  BN.prototype.isZero = function isZero () {
    	    return this.length === 1 && this.words[0] === 0;
    	  };

    	  BN.prototype.cmpn = function cmpn (num) {
    	    var negative = num < 0;

    	    if (this.negative !== 0 && !negative) return -1;
    	    if (this.negative === 0 && negative) return 1;

    	    this._strip();

    	    var res;
    	    if (this.length > 1) {
    	      res = 1;
    	    } else {
    	      if (negative) {
    	        num = -num;
    	      }

    	      assert(num <= 0x3ffffff, 'Number is too big');

    	      var w = this.words[0] | 0;
    	      res = w === num ? 0 : w < num ? -1 : 1;
    	    }
    	    if (this.negative !== 0) return -res | 0;
    	    return res;
    	  };

    	  // Compare two numbers and return:
    	  // 1 - if `this` > `num`
    	  // 0 - if `this` == `num`
    	  // -1 - if `this` < `num`
    	  BN.prototype.cmp = function cmp (num) {
    	    if (this.negative !== 0 && num.negative === 0) return -1;
    	    if (this.negative === 0 && num.negative !== 0) return 1;

    	    var res = this.ucmp(num);
    	    if (this.negative !== 0) return -res | 0;
    	    return res;
    	  };

    	  // Unsigned comparison
    	  BN.prototype.ucmp = function ucmp (num) {
    	    // At this point both numbers have the same sign
    	    if (this.length > num.length) return 1;
    	    if (this.length < num.length) return -1;

    	    var res = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      var a = this.words[i] | 0;
    	      var b = num.words[i] | 0;

    	      if (a === b) continue;
    	      if (a < b) {
    	        res = -1;
    	      } else if (a > b) {
    	        res = 1;
    	      }
    	      break;
    	    }
    	    return res;
    	  };

    	  BN.prototype.gtn = function gtn (num) {
    	    return this.cmpn(num) === 1;
    	  };

    	  BN.prototype.gt = function gt (num) {
    	    return this.cmp(num) === 1;
    	  };

    	  BN.prototype.gten = function gten (num) {
    	    return this.cmpn(num) >= 0;
    	  };

    	  BN.prototype.gte = function gte (num) {
    	    return this.cmp(num) >= 0;
    	  };

    	  BN.prototype.ltn = function ltn (num) {
    	    return this.cmpn(num) === -1;
    	  };

    	  BN.prototype.lt = function lt (num) {
    	    return this.cmp(num) === -1;
    	  };

    	  BN.prototype.lten = function lten (num) {
    	    return this.cmpn(num) <= 0;
    	  };

    	  BN.prototype.lte = function lte (num) {
    	    return this.cmp(num) <= 0;
    	  };

    	  BN.prototype.eqn = function eqn (num) {
    	    return this.cmpn(num) === 0;
    	  };

    	  BN.prototype.eq = function eq (num) {
    	    return this.cmp(num) === 0;
    	  };

    	  //
    	  // A reduce context, could be using montgomery or something better, depending
    	  // on the `m` itself.
    	  //
    	  BN.red = function red (num) {
    	    return new Red(num);
    	  };

    	  BN.prototype.toRed = function toRed (ctx) {
    	    assert(!this.red, 'Already a number in reduction context');
    	    assert(this.negative === 0, 'red works only with positives');
    	    return ctx.convertTo(this)._forceRed(ctx);
    	  };

    	  BN.prototype.fromRed = function fromRed () {
    	    assert(this.red, 'fromRed works only with numbers in reduction context');
    	    return this.red.convertFrom(this);
    	  };

    	  BN.prototype._forceRed = function _forceRed (ctx) {
    	    this.red = ctx;
    	    return this;
    	  };

    	  BN.prototype.forceRed = function forceRed (ctx) {
    	    assert(!this.red, 'Already a number in reduction context');
    	    return this._forceRed(ctx);
    	  };

    	  BN.prototype.redAdd = function redAdd (num) {
    	    assert(this.red, 'redAdd works only with red numbers');
    	    return this.red.add(this, num);
    	  };

    	  BN.prototype.redIAdd = function redIAdd (num) {
    	    assert(this.red, 'redIAdd works only with red numbers');
    	    return this.red.iadd(this, num);
    	  };

    	  BN.prototype.redSub = function redSub (num) {
    	    assert(this.red, 'redSub works only with red numbers');
    	    return this.red.sub(this, num);
    	  };

    	  BN.prototype.redISub = function redISub (num) {
    	    assert(this.red, 'redISub works only with red numbers');
    	    return this.red.isub(this, num);
    	  };

    	  BN.prototype.redShl = function redShl (num) {
    	    assert(this.red, 'redShl works only with red numbers');
    	    return this.red.shl(this, num);
    	  };

    	  BN.prototype.redMul = function redMul (num) {
    	    assert(this.red, 'redMul works only with red numbers');
    	    this.red._verify2(this, num);
    	    return this.red.mul(this, num);
    	  };

    	  BN.prototype.redIMul = function redIMul (num) {
    	    assert(this.red, 'redMul works only with red numbers');
    	    this.red._verify2(this, num);
    	    return this.red.imul(this, num);
    	  };

    	  BN.prototype.redSqr = function redSqr () {
    	    assert(this.red, 'redSqr works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.sqr(this);
    	  };

    	  BN.prototype.redISqr = function redISqr () {
    	    assert(this.red, 'redISqr works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.isqr(this);
    	  };

    	  // Square root over p
    	  BN.prototype.redSqrt = function redSqrt () {
    	    assert(this.red, 'redSqrt works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.sqrt(this);
    	  };

    	  BN.prototype.redInvm = function redInvm () {
    	    assert(this.red, 'redInvm works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.invm(this);
    	  };

    	  // Return negative clone of `this` % `red modulo`
    	  BN.prototype.redNeg = function redNeg () {
    	    assert(this.red, 'redNeg works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.neg(this);
    	  };

    	  BN.prototype.redPow = function redPow (num) {
    	    assert(this.red && !num.red, 'redPow(normalNum)');
    	    this.red._verify1(this);
    	    return this.red.pow(this, num);
    	  };

    	  // Prime numbers with efficient reduction
    	  var primes = {
    	    k256: null,
    	    p224: null,
    	    p192: null,
    	    p25519: null
    	  };

    	  // Pseudo-Mersenne prime
    	  function MPrime (name, p) {
    	    // P = 2 ^ N - K
    	    this.name = name;
    	    this.p = new BN(p, 16);
    	    this.n = this.p.bitLength();
    	    this.k = new BN(1).iushln(this.n).isub(this.p);

    	    this.tmp = this._tmp();
    	  }

    	  MPrime.prototype._tmp = function _tmp () {
    	    var tmp = new BN(null);
    	    tmp.words = new Array(Math.ceil(this.n / 13));
    	    return tmp;
    	  };

    	  MPrime.prototype.ireduce = function ireduce (num) {
    	    // Assumes that `num` is less than `P^2`
    	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    	    var r = num;
    	    var rlen;

    	    do {
    	      this.split(r, this.tmp);
    	      r = this.imulK(r);
    	      r = r.iadd(this.tmp);
    	      rlen = r.bitLength();
    	    } while (rlen > this.n);

    	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    	    if (cmp === 0) {
    	      r.words[0] = 0;
    	      r.length = 1;
    	    } else if (cmp > 0) {
    	      r.isub(this.p);
    	    } else {
    	      if (r.strip !== undefined) {
    	        // r is a BN v4 instance
    	        r.strip();
    	      } else {
    	        // r is a BN v5 instance
    	        r._strip();
    	      }
    	    }

    	    return r;
    	  };

    	  MPrime.prototype.split = function split (input, out) {
    	    input.iushrn(this.n, 0, out);
    	  };

    	  MPrime.prototype.imulK = function imulK (num) {
    	    return num.imul(this.k);
    	  };

    	  function K256 () {
    	    MPrime.call(
    	      this,
    	      'k256',
    	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    	  }
    	  inherits(K256, MPrime);

    	  K256.prototype.split = function split (input, output) {
    	    // 256 = 9 * 26 + 22
    	    var mask = 0x3fffff;

    	    var outLen = Math.min(input.length, 9);
    	    for (var i = 0; i < outLen; i++) {
    	      output.words[i] = input.words[i];
    	    }
    	    output.length = outLen;

    	    if (input.length <= 9) {
    	      input.words[0] = 0;
    	      input.length = 1;
    	      return;
    	    }

    	    // Shift by 9 limbs
    	    var prev = input.words[9];
    	    output.words[output.length++] = prev & mask;

    	    for (i = 10; i < input.length; i++) {
    	      var next = input.words[i] | 0;
    	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    	      prev = next;
    	    }
    	    prev >>>= 22;
    	    input.words[i - 10] = prev;
    	    if (prev === 0 && input.length > 10) {
    	      input.length -= 10;
    	    } else {
    	      input.length -= 9;
    	    }
    	  };

    	  K256.prototype.imulK = function imulK (num) {
    	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    	    num.words[num.length] = 0;
    	    num.words[num.length + 1] = 0;
    	    num.length += 2;

    	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    	    var lo = 0;
    	    for (var i = 0; i < num.length; i++) {
    	      var w = num.words[i] | 0;
    	      lo += w * 0x3d1;
    	      num.words[i] = lo & 0x3ffffff;
    	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    	    }

    	    // Fast length reduction
    	    if (num.words[num.length - 1] === 0) {
    	      num.length--;
    	      if (num.words[num.length - 1] === 0) {
    	        num.length--;
    	      }
    	    }
    	    return num;
    	  };

    	  function P224 () {
    	    MPrime.call(
    	      this,
    	      'p224',
    	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    	  }
    	  inherits(P224, MPrime);

    	  function P192 () {
    	    MPrime.call(
    	      this,
    	      'p192',
    	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    	  }
    	  inherits(P192, MPrime);

    	  function P25519 () {
    	    // 2 ^ 255 - 19
    	    MPrime.call(
    	      this,
    	      '25519',
    	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    	  }
    	  inherits(P25519, MPrime);

    	  P25519.prototype.imulK = function imulK (num) {
    	    // K = 0x13
    	    var carry = 0;
    	    for (var i = 0; i < num.length; i++) {
    	      var hi = (num.words[i] | 0) * 0x13 + carry;
    	      var lo = hi & 0x3ffffff;
    	      hi >>>= 26;

    	      num.words[i] = lo;
    	      carry = hi;
    	    }
    	    if (carry !== 0) {
    	      num.words[num.length++] = carry;
    	    }
    	    return num;
    	  };

    	  // Exported mostly for testing purposes, use plain name instead
    	  BN._prime = function prime (name) {
    	    // Cached version of prime
    	    if (primes[name]) return primes[name];

    	    var prime;
    	    if (name === 'k256') {
    	      prime = new K256();
    	    } else if (name === 'p224') {
    	      prime = new P224();
    	    } else if (name === 'p192') {
    	      prime = new P192();
    	    } else if (name === 'p25519') {
    	      prime = new P25519();
    	    } else {
    	      throw new Error('Unknown prime ' + name);
    	    }
    	    primes[name] = prime;

    	    return prime;
    	  };

    	  //
    	  // Base reduction engine
    	  //
    	  function Red (m) {
    	    if (typeof m === 'string') {
    	      var prime = BN._prime(m);
    	      this.m = prime.p;
    	      this.prime = prime;
    	    } else {
    	      assert(m.gtn(1), 'modulus must be greater than 1');
    	      this.m = m;
    	      this.prime = null;
    	    }
    	  }

    	  Red.prototype._verify1 = function _verify1 (a) {
    	    assert(a.negative === 0, 'red works only with positives');
    	    assert(a.red, 'red works only with red numbers');
    	  };

    	  Red.prototype._verify2 = function _verify2 (a, b) {
    	    assert((a.negative | b.negative) === 0, 'red works only with positives');
    	    assert(a.red && a.red === b.red,
    	      'red works only with red numbers');
    	  };

    	  Red.prototype.imod = function imod (a) {
    	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    	    move(a, a.umod(this.m)._forceRed(this));
    	    return a;
    	  };

    	  Red.prototype.neg = function neg (a) {
    	    if (a.isZero()) {
    	      return a.clone();
    	    }

    	    return this.m.sub(a)._forceRed(this);
    	  };

    	  Red.prototype.add = function add (a, b) {
    	    this._verify2(a, b);

    	    var res = a.add(b);
    	    if (res.cmp(this.m) >= 0) {
    	      res.isub(this.m);
    	    }
    	    return res._forceRed(this);
    	  };

    	  Red.prototype.iadd = function iadd (a, b) {
    	    this._verify2(a, b);

    	    var res = a.iadd(b);
    	    if (res.cmp(this.m) >= 0) {
    	      res.isub(this.m);
    	    }
    	    return res;
    	  };

    	  Red.prototype.sub = function sub (a, b) {
    	    this._verify2(a, b);

    	    var res = a.sub(b);
    	    if (res.cmpn(0) < 0) {
    	      res.iadd(this.m);
    	    }
    	    return res._forceRed(this);
    	  };

    	  Red.prototype.isub = function isub (a, b) {
    	    this._verify2(a, b);

    	    var res = a.isub(b);
    	    if (res.cmpn(0) < 0) {
    	      res.iadd(this.m);
    	    }
    	    return res;
    	  };

    	  Red.prototype.shl = function shl (a, num) {
    	    this._verify1(a);
    	    return this.imod(a.ushln(num));
    	  };

    	  Red.prototype.imul = function imul (a, b) {
    	    this._verify2(a, b);
    	    return this.imod(a.imul(b));
    	  };

    	  Red.prototype.mul = function mul (a, b) {
    	    this._verify2(a, b);
    	    return this.imod(a.mul(b));
    	  };

    	  Red.prototype.isqr = function isqr (a) {
    	    return this.imul(a, a.clone());
    	  };

    	  Red.prototype.sqr = function sqr (a) {
    	    return this.mul(a, a);
    	  };

    	  Red.prototype.sqrt = function sqrt (a) {
    	    if (a.isZero()) return a.clone();

    	    var mod3 = this.m.andln(3);
    	    assert(mod3 % 2 === 1);

    	    // Fast case
    	    if (mod3 === 3) {
    	      var pow = this.m.add(new BN(1)).iushrn(2);
    	      return this.pow(a, pow);
    	    }

    	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    	    //
    	    // Find Q and S, that Q * 2 ^ S = (P - 1)
    	    var q = this.m.subn(1);
    	    var s = 0;
    	    while (!q.isZero() && q.andln(1) === 0) {
    	      s++;
    	      q.iushrn(1);
    	    }
    	    assert(!q.isZero());

    	    var one = new BN(1).toRed(this);
    	    var nOne = one.redNeg();

    	    // Find quadratic non-residue
    	    // NOTE: Max is such because of generalized Riemann hypothesis.
    	    var lpow = this.m.subn(1).iushrn(1);
    	    var z = this.m.bitLength();
    	    z = new BN(2 * z * z).toRed(this);

    	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
    	      z.redIAdd(nOne);
    	    }

    	    var c = this.pow(z, q);
    	    var r = this.pow(a, q.addn(1).iushrn(1));
    	    var t = this.pow(a, q);
    	    var m = s;
    	    while (t.cmp(one) !== 0) {
    	      var tmp = t;
    	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
    	        tmp = tmp.redSqr();
    	      }
    	      assert(i < m);
    	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

    	      r = r.redMul(b);
    	      c = b.redSqr();
    	      t = t.redMul(c);
    	      m = i;
    	    }

    	    return r;
    	  };

    	  Red.prototype.invm = function invm (a) {
    	    var inv = a._invmp(this.m);
    	    if (inv.negative !== 0) {
    	      inv.negative = 0;
    	      return this.imod(inv).redNeg();
    	    } else {
    	      return this.imod(inv);
    	    }
    	  };

    	  Red.prototype.pow = function pow (a, num) {
    	    if (num.isZero()) return new BN(1).toRed(this);
    	    if (num.cmpn(1) === 0) return a.clone();

    	    var windowSize = 4;
    	    var wnd = new Array(1 << windowSize);
    	    wnd[0] = new BN(1).toRed(this);
    	    wnd[1] = a;
    	    for (var i = 2; i < wnd.length; i++) {
    	      wnd[i] = this.mul(wnd[i - 1], a);
    	    }

    	    var res = wnd[0];
    	    var current = 0;
    	    var currentLen = 0;
    	    var start = num.bitLength() % 26;
    	    if (start === 0) {
    	      start = 26;
    	    }

    	    for (i = num.length - 1; i >= 0; i--) {
    	      var word = num.words[i];
    	      for (var j = start - 1; j >= 0; j--) {
    	        var bit = (word >> j) & 1;
    	        if (res !== wnd[0]) {
    	          res = this.sqr(res);
    	        }

    	        if (bit === 0 && current === 0) {
    	          currentLen = 0;
    	          continue;
    	        }

    	        current <<= 1;
    	        current |= bit;
    	        currentLen++;
    	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

    	        res = this.mul(res, wnd[current]);
    	        currentLen = 0;
    	        current = 0;
    	      }
    	      start = 26;
    	    }

    	    return res;
    	  };

    	  Red.prototype.convertTo = function convertTo (num) {
    	    var r = num.umod(this.m);

    	    return r === num ? r.clone() : r;
    	  };

    	  Red.prototype.convertFrom = function convertFrom (num) {
    	    var res = num.clone();
    	    res.red = null;
    	    return res;
    	  };

    	  //
    	  // Montgomery method engine
    	  //

    	  BN.mont = function mont (num) {
    	    return new Mont(num);
    	  };

    	  function Mont (m) {
    	    Red.call(this, m);

    	    this.shift = this.m.bitLength();
    	    if (this.shift % 26 !== 0) {
    	      this.shift += 26 - (this.shift % 26);
    	    }

    	    this.r = new BN(1).iushln(this.shift);
    	    this.r2 = this.imod(this.r.sqr());
    	    this.rinv = this.r._invmp(this.m);

    	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    	    this.minv = this.minv.umod(this.r);
    	    this.minv = this.r.sub(this.minv);
    	  }
    	  inherits(Mont, Red);

    	  Mont.prototype.convertTo = function convertTo (num) {
    	    return this.imod(num.ushln(this.shift));
    	  };

    	  Mont.prototype.convertFrom = function convertFrom (num) {
    	    var r = this.imod(num.mul(this.rinv));
    	    r.red = null;
    	    return r;
    	  };

    	  Mont.prototype.imul = function imul (a, b) {
    	    if (a.isZero() || b.isZero()) {
    	      a.words[0] = 0;
    	      a.length = 1;
    	      return a;
    	    }

    	    var t = a.imul(b);
    	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    	    var u = t.isub(c).iushrn(this.shift);
    	    var res = u;

    	    if (u.cmp(this.m) >= 0) {
    	      res = u.isub(this.m);
    	    } else if (u.cmpn(0) < 0) {
    	      res = u.iadd(this.m);
    	    }

    	    return res._forceRed(this);
    	  };

    	  Mont.prototype.mul = function mul (a, b) {
    	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    	    var t = a.mul(b);
    	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    	    var u = t.isub(c).iushrn(this.shift);
    	    var res = u;
    	    if (u.cmp(this.m) >= 0) {
    	      res = u.isub(this.m);
    	    } else if (u.cmpn(0) < 0) {
    	      res = u.iadd(this.m);
    	    }

    	    return res._forceRed(this);
    	  };

    	  Mont.prototype.invm = function invm (a) {
    	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    	    var res = this.imod(a._invmp(this.m).mul(this.r2));
    	    return res._forceRed(this);
    	  };
    	})(module, commonjsGlobal); 
    } (bn$3));

    var bnExports$1 = bn$3.exports;
    var BN$a = /*@__PURE__*/getDefaultExportFromCjs(bnExports$1);

    var lib$s = {};

    var lib$r = {};

    var _version$p = {};

    Object.defineProperty(_version$p, "__esModule", { value: true });
    _version$p.version = void 0;
    _version$p.version = "logger/5.7.0";

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.Logger = exports.ErrorCode = exports.LogLevel = void 0;
    	var _permanentCensorErrors = false;
    	var _censorErrors = false;
    	var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    	var _logLevel = LogLevels["default"];
    	var _version_1 = _version$p;
    	var _globalLogger = null;
    	function _checkNormalize() {
    	    try {
    	        var missing_1 = [];
    	        // Make sure all forms of normalization are supported
    	        ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
    	            try {
    	                if ("test".normalize(form) !== "test") {
    	                    throw new Error("bad normalize");
    	                }
    	                ;
    	            }
    	            catch (error) {
    	                missing_1.push(form);
    	            }
    	        });
    	        if (missing_1.length) {
    	            throw new Error("missing " + missing_1.join(", "));
    	        }
    	        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
    	            throw new Error("broken implementation");
    	        }
    	    }
    	    catch (error) {
    	        return error.message;
    	    }
    	    return null;
    	}
    	var _normalizeError = _checkNormalize();
    	var LogLevel;
    	(function (LogLevel) {
    	    LogLevel["DEBUG"] = "DEBUG";
    	    LogLevel["INFO"] = "INFO";
    	    LogLevel["WARNING"] = "WARNING";
    	    LogLevel["ERROR"] = "ERROR";
    	    LogLevel["OFF"] = "OFF";
    	})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    	var ErrorCode;
    	(function (ErrorCode) {
    	    ///////////////////
    	    // Generic Errors
    	    // Unknown Error
    	    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    	    // Not Implemented
    	    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    	    // Unsupported Operation
    	    //   - operation
    	    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    	    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
    	    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
    	    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
    	    // Some sort of bad response from the server
    	    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
    	    // Timeout
    	    ErrorCode["TIMEOUT"] = "TIMEOUT";
    	    ///////////////////
    	    // Operational  Errors
    	    // Buffer Overrun
    	    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    	    // Numeric Fault
    	    //   - operation: the operation being executed
    	    //   - fault: the reason this faulted
    	    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    	    ///////////////////
    	    // Argument Errors
    	    // Missing new operator to an object
    	    //  - name: The name of the class
    	    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
    	    // Invalid argument (e.g. value is incompatible with type) to a function:
    	    //   - argument: The argument name that was invalid
    	    //   - value: The value of the argument
    	    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    	    // Missing argument to a function:
    	    //   - count: The number of arguments received
    	    //   - expectedCount: The number of arguments expected
    	    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    	    // Too many arguments
    	    //   - count: The number of arguments received
    	    //   - expectedCount: The number of arguments expected
    	    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    	    ///////////////////
    	    // Blockchain Errors
    	    // Call exception
    	    //  - transaction: the transaction
    	    //  - address?: the contract address
    	    //  - args?: The arguments passed into the function
    	    //  - method?: The Solidity method signature
    	    //  - errorSignature?: The EIP848 error signature
    	    //  - errorArgs?: The EIP848 error parameters
    	    //  - reason: The reason (only for EIP848 "Error(string)")
    	    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    	    // Insufficient funds (< value + gasLimit * gasPrice)
    	    //   - transaction: the transaction attempted
    	    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    	    // Nonce has already been used
    	    //   - transaction: the transaction attempted
    	    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    	    // The replacement fee for the transaction is too low
    	    //   - transaction: the transaction attempted
    	    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    	    // The gas limit could not be estimated
    	    //   - transaction: the transaction passed to estimateGas
    	    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
    	    // The transaction was replaced by one with a higher gas price
    	    //   - reason: "cancelled", "replaced" or "repriced"
    	    //   - cancelled: true if reason == "cancelled" or reason == "replaced")
    	    //   - hash: original transaction hash
    	    //   - replacement: the full TransactionsResponse for the replacement
    	    //   - receipt: the receipt of the replacement
    	    ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    	    ///////////////////
    	    // Interaction Errors
    	    // The user rejected the action, such as signing a message or sending
    	    // a transaction
    	    ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
    	})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
    	var HEX = "0123456789abcdef";
    	var Logger = /** @class */ (function () {
    	    function Logger(version) {
    	        Object.defineProperty(this, "version", {
    	            enumerable: true,
    	            value: version,
    	            writable: false
    	        });
    	    }
    	    Logger.prototype._log = function (logLevel, args) {
    	        var level = logLevel.toLowerCase();
    	        if (LogLevels[level] == null) {
    	            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    	        }
    	        if (_logLevel > LogLevels[level]) {
    	            return;
    	        }
    	        console.log.apply(console, args);
    	    };
    	    Logger.prototype.debug = function () {
    	        var args = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            args[_i] = arguments[_i];
    	        }
    	        this._log(Logger.levels.DEBUG, args);
    	    };
    	    Logger.prototype.info = function () {
    	        var args = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            args[_i] = arguments[_i];
    	        }
    	        this._log(Logger.levels.INFO, args);
    	    };
    	    Logger.prototype.warn = function () {
    	        var args = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            args[_i] = arguments[_i];
    	        }
    	        this._log(Logger.levels.WARNING, args);
    	    };
    	    Logger.prototype.makeError = function (message, code, params) {
    	        // Errors are being censored
    	        if (_censorErrors) {
    	            return this.makeError("censored error", code, {});
    	        }
    	        if (!code) {
    	            code = Logger.errors.UNKNOWN_ERROR;
    	        }
    	        if (!params) {
    	            params = {};
    	        }
    	        var messageDetails = [];
    	        Object.keys(params).forEach(function (key) {
    	            var value = params[key];
    	            try {
    	                if (value instanceof Uint8Array) {
    	                    var hex = "";
    	                    for (var i = 0; i < value.length; i++) {
    	                        hex += HEX[value[i] >> 4];
    	                        hex += HEX[value[i] & 0x0f];
    	                    }
    	                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
    	                }
    	                else {
    	                    messageDetails.push(key + "=" + JSON.stringify(value));
    	                }
    	            }
    	            catch (error) {
    	                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
    	            }
    	        });
    	        messageDetails.push("code=" + code);
    	        messageDetails.push("version=" + this.version);
    	        var reason = message;
    	        var url = "";
    	        switch (code) {
    	            case ErrorCode.NUMERIC_FAULT: {
    	                url = "NUMERIC_FAULT";
    	                var fault = message;
    	                switch (fault) {
    	                    case "overflow":
    	                    case "underflow":
    	                    case "division-by-zero":
    	                        url += "-" + fault;
    	                        break;
    	                    case "negative-power":
    	                    case "negative-width":
    	                        url += "-unsupported";
    	                        break;
    	                    case "unbound-bitwise-result":
    	                        url += "-unbound-result";
    	                        break;
    	                }
    	                break;
    	            }
    	            case ErrorCode.CALL_EXCEPTION:
    	            case ErrorCode.INSUFFICIENT_FUNDS:
    	            case ErrorCode.MISSING_NEW:
    	            case ErrorCode.NONCE_EXPIRED:
    	            case ErrorCode.REPLACEMENT_UNDERPRICED:
    	            case ErrorCode.TRANSACTION_REPLACED:
    	            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
    	                url = code;
    	                break;
    	        }
    	        if (url) {
    	            message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
    	        }
    	        if (messageDetails.length) {
    	            message += " (" + messageDetails.join(", ") + ")";
    	        }
    	        // @TODO: Any??
    	        var error = new Error(message);
    	        error.reason = reason;
    	        error.code = code;
    	        Object.keys(params).forEach(function (key) {
    	            error[key] = params[key];
    	        });
    	        return error;
    	    };
    	    Logger.prototype.throwError = function (message, code, params) {
    	        throw this.makeError(message, code, params);
    	    };
    	    Logger.prototype.throwArgumentError = function (message, name, value) {
    	        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
    	            argument: name,
    	            value: value
    	        });
    	    };
    	    Logger.prototype.assert = function (condition, message, code, params) {
    	        if (!!condition) {
    	            return;
    	        }
    	        this.throwError(message, code, params);
    	    };
    	    Logger.prototype.assertArgument = function (condition, message, name, value) {
    	        if (!!condition) {
    	            return;
    	        }
    	        this.throwArgumentError(message, name, value);
    	    };
    	    Logger.prototype.checkNormalize = function (message) {
    	        if (_normalizeError) {
    	            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
    	                operation: "String.prototype.normalize", form: _normalizeError
    	            });
    	        }
    	    };
    	    Logger.prototype.checkSafeUint53 = function (value, message) {
    	        if (typeof (value) !== "number") {
    	            return;
    	        }
    	        if (message == null) {
    	            message = "value not safe";
    	        }
    	        if (value < 0 || value >= 0x1fffffffffffff) {
    	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
    	                operation: "checkSafeInteger",
    	                fault: "out-of-safe-range",
    	                value: value
    	            });
    	        }
    	        if (value % 1) {
    	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
    	                operation: "checkSafeInteger",
    	                fault: "non-integer",
    	                value: value
    	            });
    	        }
    	    };
    	    Logger.prototype.checkArgumentCount = function (count, expectedCount, message) {
    	        if (message) {
    	            message = ": " + message;
    	        }
    	        else {
    	            message = "";
    	        }
    	        if (count < expectedCount) {
    	            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
    	                count: count,
    	                expectedCount: expectedCount
    	            });
    	        }
    	        if (count > expectedCount) {
    	            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
    	                count: count,
    	                expectedCount: expectedCount
    	            });
    	        }
    	    };
    	    Logger.prototype.checkNew = function (target, kind) {
    	        if (target === Object || target == null) {
    	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
    	        }
    	    };
    	    Logger.prototype.checkAbstract = function (target, kind) {
    	        if (target === kind) {
    	            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    	        }
    	        else if (target === Object || target == null) {
    	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
    	        }
    	    };
    	    Logger.globalLogger = function () {
    	        if (!_globalLogger) {
    	            _globalLogger = new Logger(_version_1.version);
    	        }
    	        return _globalLogger;
    	    };
    	    Logger.setCensorship = function (censorship, permanent) {
    	        if (!censorship && permanent) {
    	            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
    	                operation: "setCensorship"
    	            });
    	        }
    	        if (_permanentCensorErrors) {
    	            if (!censorship) {
    	                return;
    	            }
    	            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
    	                operation: "setCensorship"
    	            });
    	        }
    	        _censorErrors = !!censorship;
    	        _permanentCensorErrors = !!permanent;
    	    };
    	    Logger.setLogLevel = function (logLevel) {
    	        var level = LogLevels[logLevel.toLowerCase()];
    	        if (level == null) {
    	            Logger.globalLogger().warn("invalid log level - " + logLevel);
    	            return;
    	        }
    	        _logLevel = level;
    	    };
    	    Logger.from = function (version) {
    	        return new Logger(version);
    	    };
    	    Logger.errors = ErrorCode;
    	    Logger.levels = LogLevel;
    	    return Logger;
    	}());
    	exports.Logger = Logger;
    	
    } (lib$r));

    var _version$o = {};

    Object.defineProperty(_version$o, "__esModule", { value: true });
    _version$o.version = void 0;
    _version$o.version = "bytes/5.7.0";

    Object.defineProperty(lib$s, "__esModule", { value: true });
    lib$s.joinSignature = lib$s.splitSignature = lib$s.hexZeroPad = lib$s.hexStripZeros = lib$s.hexValue = lib$s.hexConcat = lib$s.hexDataSlice = lib$s.hexDataLength = lib$s.hexlify = lib$s.isHexString = lib$s.zeroPad = lib$s.stripZeros = lib$s.concat = lib$s.arrayify = lib$s.isBytes = lib$s.isBytesLike = void 0;
    var logger_1$D = lib$r;
    var _version_1$D = _version$o;
    var logger$D = new logger_1$D.Logger(_version_1$D.version);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            var args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isBytesLike(value) {
        return ((isHexString$2(value) && !(value.length % 2)) || isBytes(value));
    }
    lib$s.isBytesLike = isBytesLike;
    function isInteger(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
            return false;
        }
        for (var i = 0; i < value.length; i++) {
            var v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    lib$s.isBytes = isBytes;
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$D.checkSafeUint53(value, "invalid arrayify value");
            var result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString$2(value)) {
            var hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0" + hex;
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger$D.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            var result = [];
            for (var i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger$D.throwArgumentError("invalid arrayify value", "value", value);
    }
    lib$s.arrayify = arrayify;
    function concat(items) {
        var objects = items.map(function (item) { return arrayify(item); });
        var length = objects.reduce(function (accum, item) { return (accum + item.length); }, 0);
        var result = new Uint8Array(length);
        objects.reduce(function (offset, object) {
            result.set(object, offset);
            return offset + object.length;
        }, 0);
        return addSlice(result);
    }
    lib$s.concat = concat;
    function stripZeros(value) {
        var result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        var start = 0;
        while (start < result.length && result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    lib$s.stripZeros = stripZeros;
    function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
            logger$D.throwArgumentError("value out of range", "value", arguments[0]);
        }
        var result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    lib$s.zeroPad = zeroPad;
    function isHexString$2(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    lib$s.isHexString = isHexString$2;
    var HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$D.checkSafeUint53(value, "invalid hexlify value");
            var hex = "";
            while (value) {
                hex = HexCharacters[value & 0xf] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = "0" + hex;
                }
                return "0x" + hex;
            }
            return "0x00";
        }
        if (typeof (value) === "bigint") {
            value = value.toString(16);
            if (value.length % 2) {
                return ("0x0" + value);
            }
            return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (isHexString$2(value)) {
            if (value.length % 2) {
                if (options.hexPad === "left") {
                    value = "0x0" + value.substring(2);
                }
                else if (options.hexPad === "right") {
                    value += "0";
                }
                else {
                    logger$D.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            return value.toLowerCase();
        }
        if (isBytes(value)) {
            var result = "0x";
            for (var i = 0; i < value.length; i++) {
                var v = value[i];
                result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
        }
        return logger$D.throwArgumentError("invalid hexlify value", "value", value);
    }
    lib$s.hexlify = hexlify;
    /*
    function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
        if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
            return "0x0" + value.substring(2);
        }
        return value;
    }
    */
    function hexDataLength(data) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString$2(data) || (data.length % 2)) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    lib$s.hexDataLength = hexDataLength;
    function hexDataSlice(data, offset, endOffset) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString$2(data) || (data.length % 2)) {
            logger$D.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
    }
    lib$s.hexDataSlice = hexDataSlice;
    function hexConcat(items) {
        var result = "0x";
        items.forEach(function (item) {
            result += hexlify(item).substring(2);
        });
        return result;
    }
    lib$s.hexConcat = hexConcat;
    function hexValue(value) {
        var trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
            return "0x0";
        }
        return trimmed;
    }
    lib$s.hexValue = hexValue;
    function hexStripZeros(value) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        if (!isHexString$2(value)) {
            logger$D.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        var offset = 0;
        while (offset < value.length && value[offset] === "0") {
            offset++;
        }
        return "0x" + value.substring(offset);
    }
    lib$s.hexStripZeros = hexStripZeros;
    function hexZeroPad(value, length) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        else if (!isHexString$2(value)) {
            logger$D.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
            logger$D.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
        }
        return value;
    }
    lib$s.hexZeroPad = hexZeroPad;
    function splitSignature(signature) {
        var result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0,
            yParityAndS: "0x",
            compact: "0x"
        };
        if (isBytesLike(signature)) {
            var bytes = arrayify(signature);
            // Get the r, s and v
            if (bytes.length === 64) {
                // EIP-2098; pull the v from the top bit of s and clear it
                result.v = 27 + (bytes[32] >> 7);
                bytes[32] &= 0x7f;
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
            }
            else if (bytes.length === 65) {
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
                result.v = bytes[64];
            }
            else {
                logger$D.throwArgumentError("invalid signature string", "signature", signature);
            }
            // Allow a recid to be used as the v
            if (result.v < 27) {
                if (result.v === 0 || result.v === 1) {
                    result.v += 27;
                }
                else {
                    logger$D.throwArgumentError("signature invalid v byte", "signature", signature);
                }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
                bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
        }
        else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
                var vs_1 = zeroPad(arrayify(result._vs), 32);
                result._vs = hexlify(vs_1);
                // Set or check the recid
                var recoveryParam = ((vs_1[0] >= 128) ? 1 : 0);
                if (result.recoveryParam == null) {
                    result.recoveryParam = recoveryParam;
                }
                else if (result.recoveryParam !== recoveryParam) {
                    logger$D.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                }
                // Set or check the s
                vs_1[0] &= 0x7f;
                var s = hexlify(vs_1);
                if (result.s == null) {
                    result.s = s;
                }
                else if (result.s !== s) {
                    logger$D.throwArgumentError("signature v mismatch _vs", "signature", signature);
                }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
                if (result.v == null) {
                    logger$D.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                }
                else if (result.v === 0 || result.v === 1) {
                    result.recoveryParam = result.v;
                }
                else {
                    result.recoveryParam = 1 - (result.v % 2);
                }
            }
            else {
                if (result.v == null) {
                    result.v = 27 + result.recoveryParam;
                }
                else {
                    var recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                    if (result.recoveryParam !== recId) {
                        logger$D.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                    }
                }
            }
            if (result.r == null || !isHexString$2(result.r)) {
                logger$D.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
                result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString$2(result.s)) {
                logger$D.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
                result.s = hexZeroPad(result.s, 32);
            }
            var vs = arrayify(result.s);
            if (vs[0] >= 128) {
                logger$D.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
                vs[0] |= 0x80;
            }
            var _vs = hexlify(vs);
            if (result._vs) {
                if (!isHexString$2(result._vs)) {
                    logger$D.throwArgumentError("signature invalid _vs", "signature", signature);
                }
                result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
                result._vs = _vs;
            }
            else if (result._vs !== _vs) {
                logger$D.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
        }
        result.yParityAndS = result._vs;
        result.compact = result.r + result.yParityAndS.substring(2);
        return result;
    }
    lib$s.splitSignature = splitSignature;
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat([
            signature.r,
            signature.s,
            (signature.recoveryParam ? "0x1c" : "0x1b")
        ]));
    }
    lib$s.joinSignature = joinSignature;

    var _version$n = {};

    Object.defineProperty(_version$n, "__esModule", { value: true });
    _version$n.version = void 0;
    _version$n.version = "bignumber/5.7.0";

    var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(bignumber, "__esModule", { value: true });
    bignumber._base16To36 = bignumber._base36To16 = bignumber.BigNumber = bignumber.isBigNumberish = void 0;
    /**
     *  BigNumber
     *
     *  A wrapper around the BN.js object. We use the BN.js library
     *  because it is used by elliptic, so it is required regardless.
     *
     */
    var bn_js_1$2 = __importDefault$b(bnExports$1);
    var BN$9 = bn_js_1$2.default.BN;
    var bytes_1$C = lib$s;
    var logger_1$C = lib$r;
    var _version_1$C = _version$n;
    var logger$C = new logger_1$C.Logger(_version_1$C.version);
    var _constructorGuard$3 = {};
    var MAX_SAFE = 0x1fffffffffffff;
    function isBigNumberish(value) {
        return (value != null) && (BigNumber.isBigNumber(value) ||
            (typeof (value) === "number" && (value % 1) === 0) ||
            (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
            (0, bytes_1$C.isHexString)(value) ||
            (typeof (value) === "bigint") ||
            (0, bytes_1$C.isBytes)(value));
    }
    bignumber.isBigNumberish = isBigNumberish;
    // Only warn about passing 10 into radix once
    var _warnedToStringRadix = false;
    var BigNumber = /** @class */ (function () {
        function BigNumber(constructorGuard, hex) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$C.throwError("cannot call constructor directly; use BigNumber.from", logger_1$C.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
        }
        BigNumber.prototype.fromTwos = function (value) {
            return toBigNumber(toBN(this).fromTwos(value));
        };
        BigNumber.prototype.toTwos = function (value) {
            return toBigNumber(toBN(this).toTwos(value));
        };
        BigNumber.prototype.abs = function () {
            if (this._hex[0] === "-") {
                return BigNumber.from(this._hex.substring(1));
            }
            return this;
        };
        BigNumber.prototype.add = function (other) {
            return toBigNumber(toBN(this).add(toBN(other)));
        };
        BigNumber.prototype.sub = function (other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
        };
        BigNumber.prototype.div = function (other) {
            var o = BigNumber.from(other);
            if (o.isZero()) {
                throwFault$1("division-by-zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
        };
        BigNumber.prototype.mul = function (other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
        };
        BigNumber.prototype.mod = function (other) {
            var value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("division-by-zero", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
        };
        BigNumber.prototype.pow = function (other) {
            var value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("negative-power", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
        };
        BigNumber.prototype.and = function (other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "and");
            }
            return toBigNumber(toBN(this).and(value));
        };
        BigNumber.prototype.or = function (other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "or");
            }
            return toBigNumber(toBN(this).or(value));
        };
        BigNumber.prototype.xor = function (other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
        };
        BigNumber.prototype.mask = function (value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
        };
        BigNumber.prototype.shl = function (value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
        };
        BigNumber.prototype.shr = function (value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
        };
        BigNumber.prototype.eq = function (other) {
            return toBN(this).eq(toBN(other));
        };
        BigNumber.prototype.lt = function (other) {
            return toBN(this).lt(toBN(other));
        };
        BigNumber.prototype.lte = function (other) {
            return toBN(this).lte(toBN(other));
        };
        BigNumber.prototype.gt = function (other) {
            return toBN(this).gt(toBN(other));
        };
        BigNumber.prototype.gte = function (other) {
            return toBN(this).gte(toBN(other));
        };
        BigNumber.prototype.isNegative = function () {
            return (this._hex[0] === "-");
        };
        BigNumber.prototype.isZero = function () {
            return toBN(this).isZero();
        };
        BigNumber.prototype.toNumber = function () {
            try {
                return toBN(this).toNumber();
            }
            catch (error) {
                throwFault$1("overflow", "toNumber", this.toString());
            }
            return null;
        };
        BigNumber.prototype.toBigInt = function () {
            try {
                return BigInt(this.toString());
            }
            catch (e) { }
            return logger$C.throwError("this platform does not support BigInt", logger_1$C.Logger.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
            });
        };
        BigNumber.prototype.toString = function () {
            // Lots of people expect this, which we do not support, so check (See: #889)
            if (arguments.length > 0) {
                if (arguments[0] === 10) {
                    if (!_warnedToStringRadix) {
                        _warnedToStringRadix = true;
                        logger$C.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                    }
                }
                else if (arguments[0] === 16) {
                    logger$C.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", logger_1$C.Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
                else {
                    logger$C.throwError("BigNumber.toString does not accept parameters", logger_1$C.Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
            }
            return toBN(this).toString(10);
        };
        BigNumber.prototype.toHexString = function () {
            return this._hex;
        };
        BigNumber.prototype.toJSON = function (key) {
            return { type: "BigNumber", hex: this.toHexString() };
        };
        BigNumber.from = function (value) {
            if (value instanceof BigNumber) {
                return value;
            }
            if (typeof (value) === "string") {
                if (value.match(/^-?0x[0-9a-f]+$/i)) {
                    return new BigNumber(_constructorGuard$3, toHex$1(value));
                }
                if (value.match(/^-?[0-9]+$/)) {
                    return new BigNumber(_constructorGuard$3, toHex$1(new BN$9(value)));
                }
                return logger$C.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
                if (value % 1) {
                    throwFault$1("underflow", "BigNumber.from", value);
                }
                if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                    throwFault$1("overflow", "BigNumber.from", value);
                }
                return BigNumber.from(String(value));
            }
            var anyValue = value;
            if (typeof (anyValue) === "bigint") {
                return BigNumber.from(anyValue.toString());
            }
            if ((0, bytes_1$C.isBytes)(anyValue)) {
                return BigNumber.from((0, bytes_1$C.hexlify)(anyValue));
            }
            if (anyValue) {
                // Hexable interface (takes priority)
                if (anyValue.toHexString) {
                    var hex = anyValue.toHexString();
                    if (typeof (hex) === "string") {
                        return BigNumber.from(hex);
                    }
                }
                else {
                    // For now, handle legacy JSON-ified values (goes away in v6)
                    var hex = anyValue._hex;
                    // New-form JSON
                    if (hex == null && anyValue.type === "BigNumber") {
                        hex = anyValue.hex;
                    }
                    if (typeof (hex) === "string") {
                        if ((0, bytes_1$C.isHexString)(hex) || (hex[0] === "-" && (0, bytes_1$C.isHexString)(hex.substring(1)))) {
                            return BigNumber.from(hex);
                        }
                    }
                }
            }
            return logger$C.throwArgumentError("invalid BigNumber value", "value", value);
        };
        BigNumber.isBigNumber = function (value) {
            return !!(value && value._isBigNumber);
        };
        return BigNumber;
    }());
    bignumber.BigNumber = BigNumber;
    // Normalize the hex string
    function toHex$1(value) {
        // For BN, call on the hex string
        if (typeof (value) !== "string") {
            return toHex$1(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have multiple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
                logger$C.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex$1(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
                return value;
            }
            // Negate the value
            return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
            return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
            value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
        }
        return value;
    }
    function toBigNumber(value) {
        return BigNumber.from(toHex$1(value));
    }
    function toBN(value) {
        var hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
            return (new BN$9("-" + hex.substring(3), 16));
        }
        return new BN$9(hex.substring(2), 16);
    }
    function throwFault$1(fault, operation, value) {
        var params = { fault: fault, operation: operation };
        if (value != null) {
            params.value = value;
        }
        return logger$C.throwError(fault, logger_1$C.Logger.errors.NUMERIC_FAULT, params);
    }
    // value should have no prefix
    function _base36To16(value) {
        return (new BN$9(value, 36)).toString(16);
    }
    bignumber._base36To16 = _base36To16;
    // value should have no prefix
    function _base16To36(value) {
        return (new BN$9(value, 16)).toString(36);
    }
    bignumber._base16To36 = _base16To36;

    var fixednumber = {};

    Object.defineProperty(fixednumber, "__esModule", { value: true });
    fixednumber.FixedNumber = fixednumber.FixedFormat = fixednumber.parseFixed = fixednumber.formatFixed = void 0;
    var bytes_1$B = lib$s;
    var logger_1$B = lib$r;
    var _version_1$B = _version$n;
    var logger$B = new logger_1$B.Logger(_version_1$B.version);
    var bignumber_1$f = bignumber;
    var _constructorGuard$2 = {};
    var Zero$2 = bignumber_1$f.BigNumber.from(0);
    var NegativeOne$2 = bignumber_1$f.BigNumber.from(-1);
    function throwFault(message, fault, operation, value) {
        var params = { fault: fault, operation: operation };
        if (value !== undefined) {
            params.value = value;
        }
        return logger$B.throwError(message, logger_1$B.Logger.errors.NUMERIC_FAULT, params);
    }
    // Constant to pull zeros from for multipliers
    var zeros = "0";
    while (zeros.length < 256) {
        zeros += zeros;
    }
    // Returns a string "1" followed by decimal "0"s
    function getMultiplier(decimals) {
        if (typeof (decimals) !== "number") {
            try {
                decimals = bignumber_1$f.BigNumber.from(decimals).toNumber();
            }
            catch (e) { }
        }
        if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return ("1" + zeros.substring(0, decimals));
        }
        return logger$B.throwArgumentError("invalid decimal size", "decimals", decimals);
    }
    function formatFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        var multiplier = getMultiplier(decimals);
        // Make sure wei is a big number (convert as necessary)
        value = bignumber_1$f.BigNumber.from(value);
        var negative = value.lt(Zero$2);
        if (negative) {
            value = value.mul(NegativeOne$2);
        }
        var fraction = value.mod(multiplier).toString();
        while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
        }
        // Strip training 0
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        var whole = value.div(multiplier).toString();
        if (multiplier.length === 1) {
            value = whole;
        }
        else {
            value = whole + "." + fraction;
        }
        if (negative) {
            value = "-" + value;
        }
        return value;
    }
    fixednumber.formatFixed = formatFixed;
    function parseFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        var multiplier = getMultiplier(decimals);
        if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
            logger$B.throwArgumentError("invalid decimal value", "value", value);
        }
        // Is it negative?
        var negative = (value.substring(0, 1) === "-");
        if (negative) {
            value = value.substring(1);
        }
        if (value === ".") {
            logger$B.throwArgumentError("missing value", "value", value);
        }
        // Split it into a whole and fractional part
        var comps = value.split(".");
        if (comps.length > 2) {
            logger$B.throwArgumentError("too many decimal points", "value", value);
        }
        var whole = comps[0], fraction = comps[1];
        if (!whole) {
            whole = "0";
        }
        if (!fraction) {
            fraction = "0";
        }
        // Trim trailing zeros
        while (fraction[fraction.length - 1] === "0") {
            fraction = fraction.substring(0, fraction.length - 1);
        }
        // Check the fraction doesn't exceed our decimals size
        if (fraction.length > multiplier.length - 1) {
            throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
        }
        // If decimals is 0, we have an empty string for fraction
        if (fraction === "") {
            fraction = "0";
        }
        // Fully pad the string with zeros to get to wei
        while (fraction.length < multiplier.length - 1) {
            fraction += "0";
        }
        var wholeValue = bignumber_1$f.BigNumber.from(whole);
        var fractionValue = bignumber_1$f.BigNumber.from(fraction);
        var wei = (wholeValue.mul(multiplier)).add(fractionValue);
        if (negative) {
            wei = wei.mul(NegativeOne$2);
        }
        return wei;
    }
    fixednumber.parseFixed = parseFixed;
    var FixedFormat = /** @class */ (function () {
        function FixedFormat(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$B.throwError("cannot use FixedFormat constructor; use FixedFormat.from", logger_1$B.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
        }
        FixedFormat.from = function (value) {
            if (value instanceof FixedFormat) {
                return value;
            }
            if (typeof (value) === "number") {
                value = "fixed128x" + value;
            }
            var signed = true;
            var width = 128;
            var decimals = 18;
            if (typeof (value) === "string") {
                if (value === "fixed") ;
                else if (value === "ufixed") {
                    signed = false;
                }
                else {
                    var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    if (!match) {
                        logger$B.throwArgumentError("invalid fixed format", "format", value);
                    }
                    signed = (match[1] !== "u");
                    width = parseInt(match[2]);
                    decimals = parseInt(match[3]);
                }
            }
            else if (value) {
                var check = function (key, type, defaultValue) {
                    if (value[key] == null) {
                        return defaultValue;
                    }
                    if (typeof (value[key]) !== type) {
                        logger$B.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                    }
                    return value[key];
                };
                signed = check("signed", "boolean", signed);
                width = check("width", "number", width);
                decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
                logger$B.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
                logger$B.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat(_constructorGuard$2, signed, width, decimals);
        };
        return FixedFormat;
    }());
    fixednumber.FixedFormat = FixedFormat;
    var FixedNumber = /** @class */ (function () {
        function FixedNumber(constructorGuard, hex, value, format) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$B.throwError("cannot use FixedNumber constructor; use FixedNumber.from", logger_1$B.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
        }
        FixedNumber.prototype._checkFormat = function (other) {
            if (this.format.name !== other.format.name) {
                logger$B.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
        };
        FixedNumber.prototype.addUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
        };
        FixedNumber.prototype.subUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
        };
        FixedNumber.prototype.mulUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
        };
        FixedNumber.prototype.divUnsafe = function (other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
        };
        FixedNumber.prototype.floor = function () {
            var comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            var result = FixedNumber.from(comps[0], this.format);
            var hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
                result = result.subUnsafe(ONE.toFormat(result.format));
            }
            return result;
        };
        FixedNumber.prototype.ceiling = function () {
            var comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            var result = FixedNumber.from(comps[0], this.format);
            var hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
                result = result.addUnsafe(ONE.toFormat(result.format));
            }
            return result;
        };
        // @TODO: Support other rounding algorithms
        FixedNumber.prototype.round = function (decimals) {
            if (decimals == null) {
                decimals = 0;
            }
            // If we are already in range, we're done
            var comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            if (decimals < 0 || decimals > 80 || (decimals % 1)) {
                logger$B.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
                return this;
            }
            var factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
            var bump = BUMP.toFormat(this.format);
            return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
        };
        FixedNumber.prototype.isZero = function () {
            return (this._value === "0.0" || this._value === "0");
        };
        FixedNumber.prototype.isNegative = function () {
            return (this._value[0] === "-");
        };
        FixedNumber.prototype.toString = function () { return this._value; };
        FixedNumber.prototype.toHexString = function (width) {
            if (width == null) {
                return this._hex;
            }
            if (width % 8) {
                logger$B.throwArgumentError("invalid byte width", "width", width);
            }
            var hex = bignumber_1$f.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return (0, bytes_1$B.hexZeroPad)(hex, width / 8);
        };
        FixedNumber.prototype.toUnsafeFloat = function () { return parseFloat(this.toString()); };
        FixedNumber.prototype.toFormat = function (format) {
            return FixedNumber.fromString(this._value, format);
        };
        FixedNumber.fromValue = function (value, decimals, format) {
            // If decimals looks more like a format, and there is no format, shift the parameters
            if (format == null && decimals != null && !(0, bignumber_1$f.isBigNumberish)(decimals)) {
                format = decimals;
                decimals = null;
            }
            if (decimals == null) {
                decimals = 0;
            }
            if (format == null) {
                format = "fixed";
            }
            return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
        };
        FixedNumber.fromString = function (value, format) {
            if (format == null) {
                format = "fixed";
            }
            var fixedFormat = FixedFormat.from(format);
            var numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero$2)) {
                throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            var hex = null;
            if (fixedFormat.signed) {
                hex = numeric.toTwos(fixedFormat.width).toHexString();
            }
            else {
                hex = numeric.toHexString();
                hex = (0, bytes_1$B.hexZeroPad)(hex, fixedFormat.width / 8);
            }
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$2, hex, decimal, fixedFormat);
        };
        FixedNumber.fromBytes = function (value, format) {
            if (format == null) {
                format = "fixed";
            }
            var fixedFormat = FixedFormat.from(format);
            if ((0, bytes_1$B.arrayify)(value).length > fixedFormat.width / 8) {
                throw new Error("overflow");
            }
            var numeric = bignumber_1$f.BigNumber.from(value);
            if (fixedFormat.signed) {
                numeric = numeric.fromTwos(fixedFormat.width);
            }
            var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$2, hex, decimal, fixedFormat);
        };
        FixedNumber.from = function (value, format) {
            if (typeof (value) === "string") {
                return FixedNumber.fromString(value, format);
            }
            if ((0, bytes_1$B.isBytes)(value)) {
                return FixedNumber.fromBytes(value, format);
            }
            try {
                return FixedNumber.fromValue(value, 0, format);
            }
            catch (error) {
                // Allow NUMERIC_FAULT to bubble up
                if (error.code !== logger_1$B.Logger.errors.INVALID_ARGUMENT) {
                    throw error;
                }
            }
            return logger$B.throwArgumentError("invalid FixedNumber value", "value", value);
        };
        FixedNumber.isFixedNumber = function (value) {
            return !!(value && value._isFixedNumber);
        };
        return FixedNumber;
    }());
    fixednumber.FixedNumber = FixedNumber;
    var ONE = FixedNumber.from(1);
    var BUMP = FixedNumber.from("0.5");

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports._base36To16 = exports._base16To36 = exports.parseFixed = exports.FixedNumber = exports.FixedFormat = exports.formatFixed = exports.BigNumber = void 0;
    	var bignumber_1 = bignumber;
    	Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return bignumber_1.BigNumber; } });
    	var fixednumber_1 = fixednumber;
    	Object.defineProperty(exports, "formatFixed", { enumerable: true, get: function () { return fixednumber_1.formatFixed; } });
    	Object.defineProperty(exports, "FixedFormat", { enumerable: true, get: function () { return fixednumber_1.FixedFormat; } });
    	Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return fixednumber_1.FixedNumber; } });
    	Object.defineProperty(exports, "parseFixed", { enumerable: true, get: function () { return fixednumber_1.parseFixed; } });
    	// Internal methods used by address
    	var bignumber_2 = bignumber;
    	Object.defineProperty(exports, "_base16To36", { enumerable: true, get: function () { return bignumber_2._base16To36; } });
    	Object.defineProperty(exports, "_base36To16", { enumerable: true, get: function () { return bignumber_2._base36To16; } });
    	
    } (lib$t));

    var lib$q = {};

    var _version$m = {};

    Object.defineProperty(_version$m, "__esModule", { value: true });
    _version$m.version = void 0;
    _version$m.version = "properties/5.7.0";

    var __awaiter$f = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$f = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(lib$q, "__esModule", { value: true });
    lib$q.Description = lib$q.deepCopy = lib$q.shallowCopy = lib$q.checkProperties = lib$q.resolveProperties = lib$q.getStatic = lib$q.defineReadOnly = void 0;
    var logger_1$A = lib$r;
    var _version_1$A = _version$m;
    var logger$A = new logger_1$A.Logger(_version_1$A.version);
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    lib$q.defineReadOnly = defineReadOnly;
    // Crawl up the constructor chain to find a static method
    function getStatic(ctor, key) {
        for (var i = 0; i < 32; i++) {
            if (ctor[key]) {
                return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
    }
    lib$q.getStatic = getStatic;
    function resolveProperties(object) {
        return __awaiter$f(this, void 0, void 0, function () {
            var promises, results;
            return __generator$f(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = Object.keys(object).map(function (key) {
                            var value = object[key];
                            return Promise.resolve(value).then(function (v) { return ({ key: key, value: v }); });
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        results = _a.sent();
                        return [2 /*return*/, results.reduce(function (accum, result) {
                                accum[(result.key)] = result.value;
                                return accum;
                            }, {})];
                }
            });
        });
    }
    lib$q.resolveProperties = resolveProperties;
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== "object") {
            logger$A.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach(function (key) {
            if (!properties[key]) {
                logger$A.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
        });
    }
    lib$q.checkProperties = checkProperties;
    function shallowCopy(object) {
        var result = {};
        for (var key in object) {
            result[key] = object[key];
        }
        return result;
    }
    lib$q.shallowCopy = shallowCopy;
    var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
        }
        if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
                return false;
            }
            var keys = Object.keys(object);
            for (var i = 0; i < keys.length; i++) {
                var value = null;
                try {
                    value = object[keys[i]];
                }
                catch (error) {
                    // If accessing a value triggers an error, it is a getter
                    // designed to do so (e.g. Result) and is therefore "frozen"
                    continue;
                }
                if (!_isFrozen(value)) {
                    return false;
                }
            }
            return true;
        }
        return logger$A.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
    }
    // Returns a new copy of object, such that no properties may be replaced.
    // New properties may be added only to objects.
    function _deepCopy(object) {
        if (_isFrozen(object)) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            return Object.freeze(object.map(function (item) { return deepCopy(item); }));
        }
        if (typeof (object) === "object") {
            var result = {};
            for (var key in object) {
                var value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value));
            }
            return result;
        }
        return logger$A.throwArgumentError("Cannot deepCopy " + typeof (object), "object", object);
    }
    function deepCopy(object) {
        return _deepCopy(object);
    }
    lib$q.deepCopy = deepCopy;
    var Description = /** @class */ (function () {
        function Description(info) {
            for (var key in info) {
                this[key] = deepCopy(info[key]);
            }
        }
        return Description;
    }());
    lib$q.Description = Description;

    var _version$l = {};

    Object.defineProperty(_version$l, "__esModule", { value: true });
    _version$l.version = void 0;
    _version$l.version = "abi/5.7.0";

    (function (exports) {
    	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.ErrorFragment = exports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;
    	var bignumber_1 = lib$t;
    	var properties_1 = lib$q;
    	var logger_1 = lib$r;
    	var _version_1 = _version$l;
    	var logger = new logger_1.Logger(_version_1.version);
    	var _constructorGuard = {};
    	var ModifiersBytes = { calldata: true, memory: true, storage: true };
    	var ModifiersNest = { calldata: true, memory: true };
    	function checkModifier(type, name) {
    	    if (type === "bytes" || type === "string") {
    	        if (ModifiersBytes[name]) {
    	            return true;
    	        }
    	    }
    	    else if (type === "address") {
    	        if (name === "payable") {
    	            return true;
    	        }
    	    }
    	    else if (type.indexOf("[") >= 0 || type === "tuple") {
    	        if (ModifiersNest[name]) {
    	            return true;
    	        }
    	    }
    	    if (ModifiersBytes[name] || name === "payable") {
    	        logger.throwArgumentError("invalid modifier", "name", name);
    	    }
    	    return false;
    	}
    	// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
    	function parseParamType(param, allowIndexed) {
    	    var originalParam = param;
    	    function throwError(i) {
    	        logger.throwArgumentError("unexpected character at position " + i, "param", param);
    	    }
    	    param = param.replace(/\s/g, " ");
    	    function newNode(parent) {
    	        var node = { type: "", name: "", parent: parent, state: { allowType: true } };
    	        if (allowIndexed) {
    	            node.indexed = false;
    	        }
    	        return node;
    	    }
    	    var parent = { type: "", name: "", state: { allowType: true } };
    	    var node = parent;
    	    for (var i = 0; i < param.length; i++) {
    	        var c = param[i];
    	        switch (c) {
    	            case "(":
    	                if (node.state.allowType && node.type === "") {
    	                    node.type = "tuple";
    	                }
    	                else if (!node.state.allowParams) {
    	                    throwError(i);
    	                }
    	                node.state.allowType = false;
    	                node.type = verifyType(node.type);
    	                node.components = [newNode(node)];
    	                node = node.components[0];
    	                break;
    	            case ")":
    	                delete node.state;
    	                if (node.name === "indexed") {
    	                    if (!allowIndexed) {
    	                        throwError(i);
    	                    }
    	                    node.indexed = true;
    	                    node.name = "";
    	                }
    	                if (checkModifier(node.type, node.name)) {
    	                    node.name = "";
    	                }
    	                node.type = verifyType(node.type);
    	                var child = node;
    	                node = node.parent;
    	                if (!node) {
    	                    throwError(i);
    	                }
    	                delete child.parent;
    	                node.state.allowParams = false;
    	                node.state.allowName = true;
    	                node.state.allowArray = true;
    	                break;
    	            case ",":
    	                delete node.state;
    	                if (node.name === "indexed") {
    	                    if (!allowIndexed) {
    	                        throwError(i);
    	                    }
    	                    node.indexed = true;
    	                    node.name = "";
    	                }
    	                if (checkModifier(node.type, node.name)) {
    	                    node.name = "";
    	                }
    	                node.type = verifyType(node.type);
    	                var sibling = newNode(node.parent);
    	                //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
    	                node.parent.components.push(sibling);
    	                delete node.parent;
    	                node = sibling;
    	                break;
    	            // Hit a space...
    	            case " ":
    	                // If reading type, the type is done and may read a param or name
    	                if (node.state.allowType) {
    	                    if (node.type !== "") {
    	                        node.type = verifyType(node.type);
    	                        delete node.state.allowType;
    	                        node.state.allowName = true;
    	                        node.state.allowParams = true;
    	                    }
    	                }
    	                // If reading name, the name is done
    	                if (node.state.allowName) {
    	                    if (node.name !== "") {
    	                        if (node.name === "indexed") {
    	                            if (!allowIndexed) {
    	                                throwError(i);
    	                            }
    	                            if (node.indexed) {
    	                                throwError(i);
    	                            }
    	                            node.indexed = true;
    	                            node.name = "";
    	                        }
    	                        else if (checkModifier(node.type, node.name)) {
    	                            node.name = "";
    	                        }
    	                        else {
    	                            node.state.allowName = false;
    	                        }
    	                    }
    	                }
    	                break;
    	            case "[":
    	                if (!node.state.allowArray) {
    	                    throwError(i);
    	                }
    	                node.type += c;
    	                node.state.allowArray = false;
    	                node.state.allowName = false;
    	                node.state.readArray = true;
    	                break;
    	            case "]":
    	                if (!node.state.readArray) {
    	                    throwError(i);
    	                }
    	                node.type += c;
    	                node.state.readArray = false;
    	                node.state.allowArray = true;
    	                node.state.allowName = true;
    	                break;
    	            default:
    	                if (node.state.allowType) {
    	                    node.type += c;
    	                    node.state.allowParams = true;
    	                    node.state.allowArray = true;
    	                }
    	                else if (node.state.allowName) {
    	                    node.name += c;
    	                    delete node.state.allowArray;
    	                }
    	                else if (node.state.readArray) {
    	                    node.type += c;
    	                }
    	                else {
    	                    throwError(i);
    	                }
    	        }
    	    }
    	    if (node.parent) {
    	        logger.throwArgumentError("unexpected eof", "param", param);
    	    }
    	    delete parent.state;
    	    if (node.name === "indexed") {
    	        if (!allowIndexed) {
    	            throwError(originalParam.length - 7);
    	        }
    	        if (node.indexed) {
    	            throwError(originalParam.length - 7);
    	        }
    	        node.indexed = true;
    	        node.name = "";
    	    }
    	    else if (checkModifier(node.type, node.name)) {
    	        node.name = "";
    	    }
    	    parent.type = verifyType(parent.type);
    	    return parent;
    	}
    	function populate(object, params) {
    	    for (var key in params) {
    	        (0, properties_1.defineReadOnly)(object, key, params[key]);
    	    }
    	}
    	exports.FormatTypes = Object.freeze({
    	    // Bare formatting, as is needed for computing a sighash of an event or function
    	    sighash: "sighash",
    	    // Human-Readable with Minimal spacing and without names (compact human-readable)
    	    minimal: "minimal",
    	    // Human-Readable with nice spacing, including all names
    	    full: "full",
    	    // JSON-format a la Solidity
    	    json: "json"
    	});
    	var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    	var ParamType = /** @class */ (function () {
    	    function ParamType(constructorGuard, params) {
    	        if (constructorGuard !== _constructorGuard) {
    	            logger.throwError("use fromString", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
    	                operation: "new ParamType()"
    	            });
    	        }
    	        populate(this, params);
    	        var match = this.type.match(paramTypeArray);
    	        if (match) {
    	            populate(this, {
    	                arrayLength: parseInt(match[2] || "-1"),
    	                arrayChildren: ParamType.fromObject({
    	                    type: match[1],
    	                    components: this.components
    	                }),
    	                baseType: "array"
    	            });
    	        }
    	        else {
    	            populate(this, {
    	                arrayLength: null,
    	                arrayChildren: null,
    	                baseType: ((this.components != null) ? "tuple" : this.type)
    	            });
    	        }
    	        this._isParamType = true;
    	        Object.freeze(this);
    	    }
    	    // Format the parameter fragment
    	    //   - sighash: "(uint256,address)"
    	    //   - minimal: "tuple(uint256,address) indexed"
    	    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
    	    ParamType.prototype.format = function (format) {
    	        if (!format) {
    	            format = exports.FormatTypes.sighash;
    	        }
    	        if (!exports.FormatTypes[format]) {
    	            logger.throwArgumentError("invalid format type", "format", format);
    	        }
    	        if (format === exports.FormatTypes.json) {
    	            var result_1 = {
    	                type: ((this.baseType === "tuple") ? "tuple" : this.type),
    	                name: (this.name || undefined)
    	            };
    	            if (typeof (this.indexed) === "boolean") {
    	                result_1.indexed = this.indexed;
    	            }
    	            if (this.components) {
    	                result_1.components = this.components.map(function (comp) { return JSON.parse(comp.format(format)); });
    	            }
    	            return JSON.stringify(result_1);
    	        }
    	        var result = "";
    	        // Array
    	        if (this.baseType === "array") {
    	            result += this.arrayChildren.format(format);
    	            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
    	        }
    	        else {
    	            if (this.baseType === "tuple") {
    	                if (format !== exports.FormatTypes.sighash) {
    	                    result += this.type;
    	                }
    	                result += "(" + this.components.map(function (comp) { return comp.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ")";
    	            }
    	            else {
    	                result += this.type;
    	            }
    	        }
    	        if (format !== exports.FormatTypes.sighash) {
    	            if (this.indexed === true) {
    	                result += " indexed";
    	            }
    	            if (format === exports.FormatTypes.full && this.name) {
    	                result += " " + this.name;
    	            }
    	        }
    	        return result;
    	    };
    	    ParamType.from = function (value, allowIndexed) {
    	        if (typeof (value) === "string") {
    	            return ParamType.fromString(value, allowIndexed);
    	        }
    	        return ParamType.fromObject(value);
    	    };
    	    ParamType.fromObject = function (value) {
    	        if (ParamType.isParamType(value)) {
    	            return value;
    	        }
    	        return new ParamType(_constructorGuard, {
    	            name: (value.name || null),
    	            type: verifyType(value.type),
    	            indexed: ((value.indexed == null) ? null : !!value.indexed),
    	            components: (value.components ? value.components.map(ParamType.fromObject) : null)
    	        });
    	    };
    	    ParamType.fromString = function (value, allowIndexed) {
    	        function ParamTypify(node) {
    	            return ParamType.fromObject({
    	                name: node.name,
    	                type: node.type,
    	                indexed: node.indexed,
    	                components: node.components
    	            });
    	        }
    	        return ParamTypify(parseParamType(value, !!allowIndexed));
    	    };
    	    ParamType.isParamType = function (value) {
    	        return !!(value != null && value._isParamType);
    	    };
    	    return ParamType;
    	}());
    	exports.ParamType = ParamType;
    	function parseParams(value, allowIndex) {
    	    return splitNesting(value).map(function (param) { return ParamType.fromString(param, allowIndex); });
    	}
    	var Fragment = /** @class */ (function () {
    	    function Fragment(constructorGuard, params) {
    	        if (constructorGuard !== _constructorGuard) {
    	            logger.throwError("use a static from method", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
    	                operation: "new Fragment()"
    	            });
    	        }
    	        populate(this, params);
    	        this._isFragment = true;
    	        Object.freeze(this);
    	    }
    	    Fragment.from = function (value) {
    	        if (Fragment.isFragment(value)) {
    	            return value;
    	        }
    	        if (typeof (value) === "string") {
    	            return Fragment.fromString(value);
    	        }
    	        return Fragment.fromObject(value);
    	    };
    	    Fragment.fromObject = function (value) {
    	        if (Fragment.isFragment(value)) {
    	            return value;
    	        }
    	        switch (value.type) {
    	            case "function":
    	                return FunctionFragment.fromObject(value);
    	            case "event":
    	                return EventFragment.fromObject(value);
    	            case "constructor":
    	                return ConstructorFragment.fromObject(value);
    	            case "error":
    	                return ErrorFragment.fromObject(value);
    	            case "fallback":
    	            case "receive":
    	                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
    	                return null;
    	        }
    	        return logger.throwArgumentError("invalid fragment object", "value", value);
    	    };
    	    Fragment.fromString = function (value) {
    	        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
    	        value = value.replace(/\s/g, " ");
    	        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
    	        value = value.trim();
    	        if (value.split(" ")[0] === "event") {
    	            return EventFragment.fromString(value.substring(5).trim());
    	        }
    	        else if (value.split(" ")[0] === "function") {
    	            return FunctionFragment.fromString(value.substring(8).trim());
    	        }
    	        else if (value.split("(")[0].trim() === "constructor") {
    	            return ConstructorFragment.fromString(value.trim());
    	        }
    	        else if (value.split(" ")[0] === "error") {
    	            return ErrorFragment.fromString(value.substring(5).trim());
    	        }
    	        return logger.throwArgumentError("unsupported fragment", "value", value);
    	    };
    	    Fragment.isFragment = function (value) {
    	        return !!(value && value._isFragment);
    	    };
    	    return Fragment;
    	}());
    	exports.Fragment = Fragment;
    	var EventFragment = /** @class */ (function (_super) {
    	    __extends(EventFragment, _super);
    	    function EventFragment() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    EventFragment.prototype.format = function (format) {
    	        if (!format) {
    	            format = exports.FormatTypes.sighash;
    	        }
    	        if (!exports.FormatTypes[format]) {
    	            logger.throwArgumentError("invalid format type", "format", format);
    	        }
    	        if (format === exports.FormatTypes.json) {
    	            return JSON.stringify({
    	                type: "event",
    	                anonymous: this.anonymous,
    	                name: this.name,
    	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
    	            });
    	        }
    	        var result = "";
    	        if (format !== exports.FormatTypes.sighash) {
    	            result += "event ";
    	        }
    	        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
    	        if (format !== exports.FormatTypes.sighash) {
    	            if (this.anonymous) {
    	                result += "anonymous ";
    	            }
    	        }
    	        return result.trim();
    	    };
    	    EventFragment.from = function (value) {
    	        if (typeof (value) === "string") {
    	            return EventFragment.fromString(value);
    	        }
    	        return EventFragment.fromObject(value);
    	    };
    	    EventFragment.fromObject = function (value) {
    	        if (EventFragment.isEventFragment(value)) {
    	            return value;
    	        }
    	        if (value.type !== "event") {
    	            logger.throwArgumentError("invalid event object", "value", value);
    	        }
    	        var params = {
    	            name: verifyIdentifier(value.name),
    	            anonymous: value.anonymous,
    	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
    	            type: "event"
    	        };
    	        return new EventFragment(_constructorGuard, params);
    	    };
    	    EventFragment.fromString = function (value) {
    	        var match = value.match(regexParen);
    	        if (!match) {
    	            logger.throwArgumentError("invalid event string", "value", value);
    	        }
    	        var anonymous = false;
    	        match[3].split(" ").forEach(function (modifier) {
    	            switch (modifier.trim()) {
    	                case "anonymous":
    	                    anonymous = true;
    	                    break;
    	                case "":
    	                    break;
    	                default:
    	                    logger.warn("unknown modifier: " + modifier);
    	            }
    	        });
    	        return EventFragment.fromObject({
    	            name: match[1].trim(),
    	            anonymous: anonymous,
    	            inputs: parseParams(match[2], true),
    	            type: "event"
    	        });
    	    };
    	    EventFragment.isEventFragment = function (value) {
    	        return (value && value._isFragment && value.type === "event");
    	    };
    	    return EventFragment;
    	}(Fragment));
    	exports.EventFragment = EventFragment;
    	function parseGas(value, params) {
    	    params.gas = null;
    	    var comps = value.split("@");
    	    if (comps.length !== 1) {
    	        if (comps.length > 2) {
    	            logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
    	        }
    	        if (!comps[1].match(/^[0-9]+$/)) {
    	            logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    	        }
    	        params.gas = bignumber_1.BigNumber.from(comps[1]);
    	        return comps[0];
    	    }
    	    return value;
    	}
    	function parseModifiers(value, params) {
    	    params.constant = false;
    	    params.payable = false;
    	    params.stateMutability = "nonpayable";
    	    value.split(" ").forEach(function (modifier) {
    	        switch (modifier.trim()) {
    	            case "constant":
    	                params.constant = true;
    	                break;
    	            case "payable":
    	                params.payable = true;
    	                params.stateMutability = "payable";
    	                break;
    	            case "nonpayable":
    	                params.payable = false;
    	                params.stateMutability = "nonpayable";
    	                break;
    	            case "pure":
    	                params.constant = true;
    	                params.stateMutability = "pure";
    	                break;
    	            case "view":
    	                params.constant = true;
    	                params.stateMutability = "view";
    	                break;
    	            case "external":
    	            case "public":
    	            case "":
    	                break;
    	            default:
    	                console.log("unknown modifier: " + modifier);
    	        }
    	    });
    	}
    	function verifyState(value) {
    	    var result = {
    	        constant: false,
    	        payable: true,
    	        stateMutability: "payable"
    	    };
    	    if (value.stateMutability != null) {
    	        result.stateMutability = value.stateMutability;
    	        // Set (and check things are consistent) the constant property
    	        result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
    	        if (value.constant != null) {
    	            if ((!!value.constant) !== result.constant) {
    	                logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
    	            }
    	        }
    	        // Set (and check things are consistent) the payable property
    	        result.payable = (result.stateMutability === "payable");
    	        if (value.payable != null) {
    	            if ((!!value.payable) !== result.payable) {
    	                logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
    	            }
    	        }
    	    }
    	    else if (value.payable != null) {
    	        result.payable = !!value.payable;
    	        // If payable we can assume non-constant; otherwise we can't assume
    	        if (value.constant == null && !result.payable && value.type !== "constructor") {
    	            logger.throwArgumentError("unable to determine stateMutability", "value", value);
    	        }
    	        result.constant = !!value.constant;
    	        if (result.constant) {
    	            result.stateMutability = "view";
    	        }
    	        else {
    	            result.stateMutability = (result.payable ? "payable" : "nonpayable");
    	        }
    	        if (result.payable && result.constant) {
    	            logger.throwArgumentError("cannot have constant payable function", "value", value);
    	        }
    	    }
    	    else if (value.constant != null) {
    	        result.constant = !!value.constant;
    	        result.payable = !result.constant;
    	        result.stateMutability = (result.constant ? "view" : "payable");
    	    }
    	    else if (value.type !== "constructor") {
    	        logger.throwArgumentError("unable to determine stateMutability", "value", value);
    	    }
    	    return result;
    	}
    	var ConstructorFragment = /** @class */ (function (_super) {
    	    __extends(ConstructorFragment, _super);
    	    function ConstructorFragment() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    ConstructorFragment.prototype.format = function (format) {
    	        if (!format) {
    	            format = exports.FormatTypes.sighash;
    	        }
    	        if (!exports.FormatTypes[format]) {
    	            logger.throwArgumentError("invalid format type", "format", format);
    	        }
    	        if (format === exports.FormatTypes.json) {
    	            return JSON.stringify({
    	                type: "constructor",
    	                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
    	                payable: this.payable,
    	                gas: (this.gas ? this.gas.toNumber() : undefined),
    	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })
    	            });
    	        }
    	        if (format === exports.FormatTypes.sighash) {
    	            logger.throwError("cannot format a constructor for sighash", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
    	                operation: "format(sighash)"
    	            });
    	        }
    	        var result = "constructor(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
    	        if (this.stateMutability && this.stateMutability !== "nonpayable") {
    	            result += this.stateMutability + " ";
    	        }
    	        return result.trim();
    	    };
    	    ConstructorFragment.from = function (value) {
    	        if (typeof (value) === "string") {
    	            return ConstructorFragment.fromString(value);
    	        }
    	        return ConstructorFragment.fromObject(value);
    	    };
    	    ConstructorFragment.fromObject = function (value) {
    	        if (ConstructorFragment.isConstructorFragment(value)) {
    	            return value;
    	        }
    	        if (value.type !== "constructor") {
    	            logger.throwArgumentError("invalid constructor object", "value", value);
    	        }
    	        var state = verifyState(value);
    	        if (state.constant) {
    	            logger.throwArgumentError("constructor cannot be constant", "value", value);
    	        }
    	        var params = {
    	            name: null,
    	            type: value.type,
    	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
    	            payable: state.payable,
    	            stateMutability: state.stateMutability,
    	            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)
    	        };
    	        return new ConstructorFragment(_constructorGuard, params);
    	    };
    	    ConstructorFragment.fromString = function (value) {
    	        var params = { type: "constructor" };
    	        value = parseGas(value, params);
    	        var parens = value.match(regexParen);
    	        if (!parens || parens[1].trim() !== "constructor") {
    	            logger.throwArgumentError("invalid constructor string", "value", value);
    	        }
    	        params.inputs = parseParams(parens[2].trim(), false);
    	        parseModifiers(parens[3].trim(), params);
    	        return ConstructorFragment.fromObject(params);
    	    };
    	    ConstructorFragment.isConstructorFragment = function (value) {
    	        return (value && value._isFragment && value.type === "constructor");
    	    };
    	    return ConstructorFragment;
    	}(Fragment));
    	exports.ConstructorFragment = ConstructorFragment;
    	var FunctionFragment = /** @class */ (function (_super) {
    	    __extends(FunctionFragment, _super);
    	    function FunctionFragment() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    FunctionFragment.prototype.format = function (format) {
    	        if (!format) {
    	            format = exports.FormatTypes.sighash;
    	        }
    	        if (!exports.FormatTypes[format]) {
    	            logger.throwArgumentError("invalid format type", "format", format);
    	        }
    	        if (format === exports.FormatTypes.json) {
    	            return JSON.stringify({
    	                type: "function",
    	                name: this.name,
    	                constant: this.constant,
    	                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
    	                payable: this.payable,
    	                gas: (this.gas ? this.gas.toNumber() : undefined),
    	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
    	                outputs: this.outputs.map(function (output) { return JSON.parse(output.format(format)); }),
    	            });
    	        }
    	        var result = "";
    	        if (format !== exports.FormatTypes.sighash) {
    	            result += "function ";
    	        }
    	        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
    	        if (format !== exports.FormatTypes.sighash) {
    	            if (this.stateMutability) {
    	                if (this.stateMutability !== "nonpayable") {
    	                    result += (this.stateMutability + " ");
    	                }
    	            }
    	            else if (this.constant) {
    	                result += "view ";
    	            }
    	            if (this.outputs && this.outputs.length) {
    	                result += "returns (" + this.outputs.map(function (output) { return output.format(format); }).join(", ") + ") ";
    	            }
    	            if (this.gas != null) {
    	                result += "@" + this.gas.toString() + " ";
    	            }
    	        }
    	        return result.trim();
    	    };
    	    FunctionFragment.from = function (value) {
    	        if (typeof (value) === "string") {
    	            return FunctionFragment.fromString(value);
    	        }
    	        return FunctionFragment.fromObject(value);
    	    };
    	    FunctionFragment.fromObject = function (value) {
    	        if (FunctionFragment.isFunctionFragment(value)) {
    	            return value;
    	        }
    	        if (value.type !== "function") {
    	            logger.throwArgumentError("invalid function object", "value", value);
    	        }
    	        var state = verifyState(value);
    	        var params = {
    	            type: value.type,
    	            name: verifyIdentifier(value.name),
    	            constant: state.constant,
    	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
    	            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
    	            payable: state.payable,
    	            stateMutability: state.stateMutability,
    	            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)
    	        };
    	        return new FunctionFragment(_constructorGuard, params);
    	    };
    	    FunctionFragment.fromString = function (value) {
    	        var params = { type: "function" };
    	        value = parseGas(value, params);
    	        var comps = value.split(" returns ");
    	        if (comps.length > 2) {
    	            logger.throwArgumentError("invalid function string", "value", value);
    	        }
    	        var parens = comps[0].match(regexParen);
    	        if (!parens) {
    	            logger.throwArgumentError("invalid function signature", "value", value);
    	        }
    	        params.name = parens[1].trim();
    	        if (params.name) {
    	            verifyIdentifier(params.name);
    	        }
    	        params.inputs = parseParams(parens[2], false);
    	        parseModifiers(parens[3].trim(), params);
    	        // We have outputs
    	        if (comps.length > 1) {
    	            var returns = comps[1].match(regexParen);
    	            if (returns[1].trim() != "" || returns[3].trim() != "") {
    	                logger.throwArgumentError("unexpected tokens", "value", value);
    	            }
    	            params.outputs = parseParams(returns[2], false);
    	        }
    	        else {
    	            params.outputs = [];
    	        }
    	        return FunctionFragment.fromObject(params);
    	    };
    	    FunctionFragment.isFunctionFragment = function (value) {
    	        return (value && value._isFragment && value.type === "function");
    	    };
    	    return FunctionFragment;
    	}(ConstructorFragment));
    	exports.FunctionFragment = FunctionFragment;
    	//export class StructFragment extends Fragment {
    	//}
    	function checkForbidden(fragment) {
    	    var sig = fragment.format();
    	    if (sig === "Error(string)" || sig === "Panic(uint256)") {
    	        logger.throwArgumentError("cannot specify user defined " + sig + " error", "fragment", fragment);
    	    }
    	    return fragment;
    	}
    	var ErrorFragment = /** @class */ (function (_super) {
    	    __extends(ErrorFragment, _super);
    	    function ErrorFragment() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    ErrorFragment.prototype.format = function (format) {
    	        if (!format) {
    	            format = exports.FormatTypes.sighash;
    	        }
    	        if (!exports.FormatTypes[format]) {
    	            logger.throwArgumentError("invalid format type", "format", format);
    	        }
    	        if (format === exports.FormatTypes.json) {
    	            return JSON.stringify({
    	                type: "error",
    	                name: this.name,
    	                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),
    	            });
    	        }
    	        var result = "";
    	        if (format !== exports.FormatTypes.sighash) {
    	            result += "error ";
    	        }
    	        result += this.name + "(" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? ", " : ",") + ") ";
    	        return result.trim();
    	    };
    	    ErrorFragment.from = function (value) {
    	        if (typeof (value) === "string") {
    	            return ErrorFragment.fromString(value);
    	        }
    	        return ErrorFragment.fromObject(value);
    	    };
    	    ErrorFragment.fromObject = function (value) {
    	        if (ErrorFragment.isErrorFragment(value)) {
    	            return value;
    	        }
    	        if (value.type !== "error") {
    	            logger.throwArgumentError("invalid error object", "value", value);
    	        }
    	        var params = {
    	            type: value.type,
    	            name: verifyIdentifier(value.name),
    	            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
    	        };
    	        return checkForbidden(new ErrorFragment(_constructorGuard, params));
    	    };
    	    ErrorFragment.fromString = function (value) {
    	        var params = { type: "error" };
    	        var parens = value.match(regexParen);
    	        if (!parens) {
    	            logger.throwArgumentError("invalid error signature", "value", value);
    	        }
    	        params.name = parens[1].trim();
    	        if (params.name) {
    	            verifyIdentifier(params.name);
    	        }
    	        params.inputs = parseParams(parens[2], false);
    	        return checkForbidden(ErrorFragment.fromObject(params));
    	    };
    	    ErrorFragment.isErrorFragment = function (value) {
    	        return (value && value._isFragment && value.type === "error");
    	    };
    	    return ErrorFragment;
    	}(Fragment));
    	exports.ErrorFragment = ErrorFragment;
    	function verifyType(type) {
    	    // These need to be transformed to their full description
    	    if (type.match(/^uint($|[^1-9])/)) {
    	        type = "uint256" + type.substring(4);
    	    }
    	    else if (type.match(/^int($|[^1-9])/)) {
    	        type = "int256" + type.substring(3);
    	    }
    	    // @TODO: more verification
    	    return type;
    	}
    	// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
    	var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    	function verifyIdentifier(value) {
    	    if (!value || !value.match(regexIdentifier)) {
    	        logger.throwArgumentError("invalid identifier \"" + value + "\"", "value", value);
    	    }
    	    return value;
    	}
    	var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    	function splitNesting(value) {
    	    value = value.trim();
    	    var result = [];
    	    var accum = "";
    	    var depth = 0;
    	    for (var offset = 0; offset < value.length; offset++) {
    	        var c = value[offset];
    	        if (c === "," && depth === 0) {
    	            result.push(accum);
    	            accum = "";
    	        }
    	        else {
    	            accum += c;
    	            if (c === "(") {
    	                depth++;
    	            }
    	            else if (c === ")") {
    	                depth--;
    	                if (depth === -1) {
    	                    logger.throwArgumentError("unbalanced parenthesis", "value", value);
    	                }
    	            }
    	        }
    	    }
    	    if (accum) {
    	        result.push(accum);
    	    }
    	    return result;
    	}
    	
    } (fragments));

    var abiCoder = {};

    var abstractCoder = {};

    Object.defineProperty(abstractCoder, "__esModule", { value: true });
    abstractCoder.Reader = abstractCoder.Writer = abstractCoder.Coder = abstractCoder.checkResultErrors = void 0;
    var bytes_1$A = lib$s;
    var bignumber_1$e = lib$t;
    var properties_1$n = lib$q;
    var logger_1$z = lib$r;
    var _version_1$z = _version$l;
    var logger$z = new logger_1$z.Logger(_version_1$z.version);
    function checkResultErrors(result) {
        // Find the first error (if any)
        var errors = [];
        var checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (var key in object) {
                var childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    abstractCoder.checkResultErrors = checkResultErrors;
    var Coder = /** @class */ (function () {
        function Coder(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        Coder.prototype._throwError = function (message, value) {
            logger$z.throwArgumentError(message, this.localName, value);
        };
        return Coder;
    }());
    abstractCoder.Coder = Coder;
    var Writer = /** @class */ (function () {
        function Writer(wordSize) {
            (0, properties_1$n.defineReadOnly)(this, "wordSize", wordSize || 32);
            this._data = [];
            this._dataLength = 0;
            this._padding = new Uint8Array(wordSize);
        }
        Object.defineProperty(Writer.prototype, "data", {
            get: function () {
                return (0, bytes_1$A.hexConcat)(this._data);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Writer.prototype, "length", {
            get: function () { return this._dataLength; },
            enumerable: false,
            configurable: true
        });
        Writer.prototype._writeData = function (data) {
            this._data.push(data);
            this._dataLength += data.length;
            return data.length;
        };
        Writer.prototype.appendWriter = function (writer) {
            return this._writeData((0, bytes_1$A.concat)(writer._data));
        };
        // Arrayish items; padded on the right to wordSize
        Writer.prototype.writeBytes = function (value) {
            var bytes = (0, bytes_1$A.arrayify)(value);
            var paddingOffset = bytes.length % this.wordSize;
            if (paddingOffset) {
                bytes = (0, bytes_1$A.concat)([bytes, this._padding.slice(paddingOffset)]);
            }
            return this._writeData(bytes);
        };
        Writer.prototype._getValue = function (value) {
            var bytes = (0, bytes_1$A.arrayify)(bignumber_1$e.BigNumber.from(value));
            if (bytes.length > this.wordSize) {
                logger$z.throwError("value out-of-bounds", logger_1$z.Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: bytes.length
                });
            }
            if (bytes.length % this.wordSize) {
                bytes = (0, bytes_1$A.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
        };
        // BigNumberish items; padded on the left to wordSize
        Writer.prototype.writeValue = function (value) {
            return this._writeData(this._getValue(value));
        };
        Writer.prototype.writeUpdatableValue = function () {
            var _this = this;
            var offset = this._data.length;
            this._data.push(this._padding);
            this._dataLength += this.wordSize;
            return function (value) {
                _this._data[offset] = _this._getValue(value);
            };
        };
        return Writer;
    }());
    abstractCoder.Writer = Writer;
    var Reader = /** @class */ (function () {
        function Reader(data, wordSize, coerceFunc, allowLoose) {
            (0, properties_1$n.defineReadOnly)(this, "_data", (0, bytes_1$A.arrayify)(data));
            (0, properties_1$n.defineReadOnly)(this, "wordSize", wordSize || 32);
            (0, properties_1$n.defineReadOnly)(this, "_coerceFunc", coerceFunc);
            (0, properties_1$n.defineReadOnly)(this, "allowLoose", allowLoose);
            this._offset = 0;
        }
        Object.defineProperty(Reader.prototype, "data", {
            get: function () { return (0, bytes_1$A.hexlify)(this._data); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Reader.prototype, "consumed", {
            get: function () { return this._offset; },
            enumerable: false,
            configurable: true
        });
        // The default Coerce function
        Reader.coerce = function (name, value) {
            var match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
                value = value.toNumber();
            }
            return value;
        };
        Reader.prototype.coerce = function (name, value) {
            if (this._coerceFunc) {
                return this._coerceFunc(name, value);
            }
            return Reader.coerce(name, value);
        };
        Reader.prototype._peekBytes = function (offset, length, loose) {
            var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
                if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                    alignedLength = length;
                }
                else {
                    logger$z.throwError("data out-of-bounds", logger_1$z.Logger.errors.BUFFER_OVERRUN, {
                        length: this._data.length,
                        offset: this._offset + alignedLength
                    });
                }
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
        };
        Reader.prototype.subReader = function (offset) {
            return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        };
        Reader.prototype.readBytes = function (length, loose) {
            var bytes = this._peekBytes(0, length, !!loose);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        };
        Reader.prototype.readValue = function () {
            return bignumber_1$e.BigNumber.from(this.readBytes(this.wordSize));
        };
        return Reader;
    }());
    abstractCoder.Reader = Reader;

    var address$1 = {};

    var lib$p = {};

    var lib$o = {};

    var sha3 = {exports: {}};

    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */

    (function (module) {
    	/*jslint bitwise: true */
    	(function () {

    	  var INPUT_ERROR = 'input is invalid type';
    	  var FINALIZE_ERROR = 'finalize already called';
    	  var WINDOW = typeof window === 'object';
    	  var root = WINDOW ? window : {};
    	  if (root.JS_SHA3_NO_WINDOW) {
    	    WINDOW = false;
    	  }
    	  var WEB_WORKER = !WINDOW && typeof self === 'object';
    	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    	  if (NODE_JS) {
    	    root = commonjsGlobal;
    	  } else if (WEB_WORKER) {
    	    root = self;
    	  }
    	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
    	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    	  var HEX_CHARS = '0123456789abcdef'.split('');
    	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
    	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
    	  var PADDING = [6, 1536, 393216, 100663296];
    	  var SHIFT = [0, 8, 16, 24];
    	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    	    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    	    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    	    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    	    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    	  var BITS = [224, 256, 384, 512];
    	  var SHAKE_BITS = [128, 256];
    	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
    	  var CSHAKE_BYTEPAD = {
    	    '128': 168,
    	    '256': 136
    	  };

    	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    	    Array.isArray = function (obj) {
    	      return Object.prototype.toString.call(obj) === '[object Array]';
    	    };
    	  }

    	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    	    ArrayBuffer.isView = function (obj) {
    	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    	    };
    	  }

    	  var createOutputMethod = function (bits, padding, outputType) {
    	    return function (message) {
    	      return new Keccak(bits, padding, bits).update(message)[outputType]();
    	    };
    	  };

    	  var createShakeOutputMethod = function (bits, padding, outputType) {
    	    return function (message, outputBits) {
    	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    	    };
    	  };

    	  var createCshakeOutputMethod = function (bits, padding, outputType) {
    	    return function (message, outputBits, n, s) {
    	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    	    };
    	  };

    	  var createKmacOutputMethod = function (bits, padding, outputType) {
    	    return function (key, message, outputBits, s) {
    	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    	    };
    	  };

    	  var createOutputMethods = function (method, createMethod, bits, padding) {
    	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    	      var type = OUTPUT_TYPES[i];
    	      method[type] = createMethod(bits, padding, type);
    	    }
    	    return method;
    	  };

    	  var createMethod = function (bits, padding) {
    	    var method = createOutputMethod(bits, padding, 'hex');
    	    method.create = function () {
    	      return new Keccak(bits, padding, bits);
    	    };
    	    method.update = function (message) {
    	      return method.create().update(message);
    	    };
    	    return createOutputMethods(method, createOutputMethod, bits, padding);
    	  };

    	  var createShakeMethod = function (bits, padding) {
    	    var method = createShakeOutputMethod(bits, padding, 'hex');
    	    method.create = function (outputBits) {
    	      return new Keccak(bits, padding, outputBits);
    	    };
    	    method.update = function (message, outputBits) {
    	      return method.create(outputBits).update(message);
    	    };
    	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    	  };

    	  var createCshakeMethod = function (bits, padding) {
    	    var w = CSHAKE_BYTEPAD[bits];
    	    var method = createCshakeOutputMethod(bits, padding, 'hex');
    	    method.create = function (outputBits, n, s) {
    	      if (!n && !s) {
    	        return methods['shake' + bits].create(outputBits);
    	      } else {
    	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
    	      }
    	    };
    	    method.update = function (message, outputBits, n, s) {
    	      return method.create(outputBits, n, s).update(message);
    	    };
    	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    	  };

    	  var createKmacMethod = function (bits, padding) {
    	    var w = CSHAKE_BYTEPAD[bits];
    	    var method = createKmacOutputMethod(bits, padding, 'hex');
    	    method.create = function (key, outputBits, s) {
    	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    	    };
    	    method.update = function (key, message, outputBits, s) {
    	      return method.create(key, outputBits, s).update(message);
    	    };
    	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    	  };

    	  var algorithms = [
    	    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    	    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    	    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    	    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    	    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
    	  ];

    	  var methods = {}, methodNames = [];

    	  for (var i = 0; i < algorithms.length; ++i) {
    	    var algorithm = algorithms[i];
    	    var bits = algorithm.bits;
    	    for (var j = 0; j < bits.length; ++j) {
    	      var methodName = algorithm.name + '_' + bits[j];
    	      methodNames.push(methodName);
    	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
    	      if (algorithm.name !== 'sha3') {
    	        var newMethodName = algorithm.name + bits[j];
    	        methodNames.push(newMethodName);
    	        methods[newMethodName] = methods[methodName];
    	      }
    	    }
    	  }

    	  function Keccak(bits, padding, outputBits) {
    	    this.blocks = [];
    	    this.s = [];
    	    this.padding = padding;
    	    this.outputBits = outputBits;
    	    this.reset = true;
    	    this.finalized = false;
    	    this.block = 0;
    	    this.start = 0;
    	    this.blockCount = (1600 - (bits << 1)) >> 5;
    	    this.byteCount = this.blockCount << 2;
    	    this.outputBlocks = outputBits >> 5;
    	    this.extraBytes = (outputBits & 31) >> 3;

    	    for (var i = 0; i < 50; ++i) {
    	      this.s[i] = 0;
    	    }
    	  }

    	  Keccak.prototype.update = function (message) {
    	    if (this.finalized) {
    	      throw new Error(FINALIZE_ERROR);
    	    }
    	    var notString, type = typeof message;
    	    if (type !== 'string') {
    	      if (type === 'object') {
    	        if (message === null) {
    	          throw new Error(INPUT_ERROR);
    	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
    	          message = new Uint8Array(message);
    	        } else if (!Array.isArray(message)) {
    	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
    	            throw new Error(INPUT_ERROR);
    	          }
    	        }
    	      } else {
    	        throw new Error(INPUT_ERROR);
    	      }
    	      notString = true;
    	    }
    	    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
    	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    	    while (index < length) {
    	      if (this.reset) {
    	        this.reset = false;
    	        blocks[0] = this.block;
    	        for (i = 1; i < blockCount + 1; ++i) {
    	          blocks[i] = 0;
    	        }
    	      }
    	      if (notString) {
    	        for (i = this.start; index < length && i < byteCount; ++index) {
    	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
    	        }
    	      } else {
    	        for (i = this.start; index < length && i < byteCount; ++index) {
    	          code = message.charCodeAt(index);
    	          if (code < 0x80) {
    	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
    	          } else if (code < 0x800) {
    	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          } else if (code < 0xd800 || code >= 0xe000) {
    	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          } else {
    	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
    	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          }
    	        }
    	      }
    	      this.lastByteIndex = i;
    	      if (i >= byteCount) {
    	        this.start = i - byteCount;
    	        this.block = blocks[blockCount];
    	        for (i = 0; i < blockCount; ++i) {
    	          s[i] ^= blocks[i];
    	        }
    	        f(s);
    	        this.reset = true;
    	      } else {
    	        this.start = i;
    	      }
    	    }
    	    return this;
    	  };

    	  Keccak.prototype.encode = function (x, right) {
    	    var o = x & 255, n = 1;
    	    var bytes = [o];
    	    x = x >> 8;
    	    o = x & 255;
    	    while (o > 0) {
    	      bytes.unshift(o);
    	      x = x >> 8;
    	      o = x & 255;
    	      ++n;
    	    }
    	    if (right) {
    	      bytes.push(n);
    	    } else {
    	      bytes.unshift(n);
    	    }
    	    this.update(bytes);
    	    return bytes.length;
    	  };

    	  Keccak.prototype.encodeString = function (str) {
    	    var notString, type = typeof str;
    	    if (type !== 'string') {
    	      if (type === 'object') {
    	        if (str === null) {
    	          throw new Error(INPUT_ERROR);
    	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
    	          str = new Uint8Array(str);
    	        } else if (!Array.isArray(str)) {
    	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
    	            throw new Error(INPUT_ERROR);
    	          }
    	        }
    	      } else {
    	        throw new Error(INPUT_ERROR);
    	      }
    	      notString = true;
    	    }
    	    var bytes = 0, length = str.length;
    	    if (notString) {
    	      bytes = length;
    	    } else {
    	      for (var i = 0; i < str.length; ++i) {
    	        var code = str.charCodeAt(i);
    	        if (code < 0x80) {
    	          bytes += 1;
    	        } else if (code < 0x800) {
    	          bytes += 2;
    	        } else if (code < 0xd800 || code >= 0xe000) {
    	          bytes += 3;
    	        } else {
    	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
    	          bytes += 4;
    	        }
    	      }
    	    }
    	    bytes += this.encode(bytes * 8);
    	    this.update(str);
    	    return bytes;
    	  };

    	  Keccak.prototype.bytepad = function (strs, w) {
    	    var bytes = this.encode(w);
    	    for (var i = 0; i < strs.length; ++i) {
    	      bytes += this.encodeString(strs[i]);
    	    }
    	    var paddingBytes = w - bytes % w;
    	    var zeros = [];
    	    zeros.length = paddingBytes;
    	    this.update(zeros);
    	    return this;
    	  };

    	  Keccak.prototype.finalize = function () {
    	    if (this.finalized) {
    	      return;
    	    }
    	    this.finalized = true;
    	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    	    blocks[i >> 2] |= this.padding[i & 3];
    	    if (this.lastByteIndex === this.byteCount) {
    	      blocks[0] = blocks[blockCount];
    	      for (i = 1; i < blockCount + 1; ++i) {
    	        blocks[i] = 0;
    	      }
    	    }
    	    blocks[blockCount - 1] |= 0x80000000;
    	    for (i = 0; i < blockCount; ++i) {
    	      s[i] ^= blocks[i];
    	    }
    	    f(s);
    	  };

    	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    	    this.finalize();

    	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
    	      extraBytes = this.extraBytes, i = 0, j = 0;
    	    var hex = '', block;
    	    while (j < outputBlocks) {
    	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
    	        block = s[i];
    	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
    	          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
    	          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
    	          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
    	      }
    	      if (j % blockCount === 0) {
    	        f(s);
    	        i = 0;
    	      }
    	    }
    	    if (extraBytes) {
    	      block = s[i];
    	      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
    	      if (extraBytes > 1) {
    	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
    	      }
    	      if (extraBytes > 2) {
    	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
    	      }
    	    }
    	    return hex;
    	  };

    	  Keccak.prototype.arrayBuffer = function () {
    	    this.finalize();

    	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
    	      extraBytes = this.extraBytes, i = 0, j = 0;
    	    var bytes = this.outputBits >> 3;
    	    var buffer;
    	    if (extraBytes) {
    	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    	    } else {
    	      buffer = new ArrayBuffer(bytes);
    	    }
    	    var array = new Uint32Array(buffer);
    	    while (j < outputBlocks) {
    	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
    	        array[j] = s[i];
    	      }
    	      if (j % blockCount === 0) {
    	        f(s);
    	      }
    	    }
    	    if (extraBytes) {
    	      array[i] = s[i];
    	      buffer = buffer.slice(0, bytes);
    	    }
    	    return buffer;
    	  };

    	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

    	  Keccak.prototype.digest = Keccak.prototype.array = function () {
    	    this.finalize();

    	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
    	      extraBytes = this.extraBytes, i = 0, j = 0;
    	    var array = [], offset, block;
    	    while (j < outputBlocks) {
    	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
    	        offset = j << 2;
    	        block = s[i];
    	        array[offset] = block & 0xFF;
    	        array[offset + 1] = (block >> 8) & 0xFF;
    	        array[offset + 2] = (block >> 16) & 0xFF;
    	        array[offset + 3] = (block >> 24) & 0xFF;
    	      }
    	      if (j % blockCount === 0) {
    	        f(s);
    	      }
    	    }
    	    if (extraBytes) {
    	      offset = j << 2;
    	      block = s[i];
    	      array[offset] = block & 0xFF;
    	      if (extraBytes > 1) {
    	        array[offset + 1] = (block >> 8) & 0xFF;
    	      }
    	      if (extraBytes > 2) {
    	        array[offset + 2] = (block >> 16) & 0xFF;
    	      }
    	    }
    	    return array;
    	  };

    	  function Kmac(bits, padding, outputBits) {
    	    Keccak.call(this, bits, padding, outputBits);
    	  }

    	  Kmac.prototype = new Keccak();

    	  Kmac.prototype.finalize = function () {
    	    this.encode(this.outputBits, true);
    	    return Keccak.prototype.finalize.call(this);
    	  };

    	  var f = function (s) {
    	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
    	      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
    	      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
    	      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    	    for (n = 0; n < 48; n += 2) {
    	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
    	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
    	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
    	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
    	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
    	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
    	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
    	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
    	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
    	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

    	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
    	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
    	      s[0] ^= h;
    	      s[1] ^= l;
    	      s[10] ^= h;
    	      s[11] ^= l;
    	      s[20] ^= h;
    	      s[21] ^= l;
    	      s[30] ^= h;
    	      s[31] ^= l;
    	      s[40] ^= h;
    	      s[41] ^= l;
    	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
    	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
    	      s[2] ^= h;
    	      s[3] ^= l;
    	      s[12] ^= h;
    	      s[13] ^= l;
    	      s[22] ^= h;
    	      s[23] ^= l;
    	      s[32] ^= h;
    	      s[33] ^= l;
    	      s[42] ^= h;
    	      s[43] ^= l;
    	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
    	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
    	      s[4] ^= h;
    	      s[5] ^= l;
    	      s[14] ^= h;
    	      s[15] ^= l;
    	      s[24] ^= h;
    	      s[25] ^= l;
    	      s[34] ^= h;
    	      s[35] ^= l;
    	      s[44] ^= h;
    	      s[45] ^= l;
    	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
    	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
    	      s[6] ^= h;
    	      s[7] ^= l;
    	      s[16] ^= h;
    	      s[17] ^= l;
    	      s[26] ^= h;
    	      s[27] ^= l;
    	      s[36] ^= h;
    	      s[37] ^= l;
    	      s[46] ^= h;
    	      s[47] ^= l;
    	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
    	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
    	      s[8] ^= h;
    	      s[9] ^= l;
    	      s[18] ^= h;
    	      s[19] ^= l;
    	      s[28] ^= h;
    	      s[29] ^= l;
    	      s[38] ^= h;
    	      s[39] ^= l;
    	      s[48] ^= h;
    	      s[49] ^= l;

    	      b0 = s[0];
    	      b1 = s[1];
    	      b32 = (s[11] << 4) | (s[10] >>> 28);
    	      b33 = (s[10] << 4) | (s[11] >>> 28);
    	      b14 = (s[20] << 3) | (s[21] >>> 29);
    	      b15 = (s[21] << 3) | (s[20] >>> 29);
    	      b46 = (s[31] << 9) | (s[30] >>> 23);
    	      b47 = (s[30] << 9) | (s[31] >>> 23);
    	      b28 = (s[40] << 18) | (s[41] >>> 14);
    	      b29 = (s[41] << 18) | (s[40] >>> 14);
    	      b20 = (s[2] << 1) | (s[3] >>> 31);
    	      b21 = (s[3] << 1) | (s[2] >>> 31);
    	      b2 = (s[13] << 12) | (s[12] >>> 20);
    	      b3 = (s[12] << 12) | (s[13] >>> 20);
    	      b34 = (s[22] << 10) | (s[23] >>> 22);
    	      b35 = (s[23] << 10) | (s[22] >>> 22);
    	      b16 = (s[33] << 13) | (s[32] >>> 19);
    	      b17 = (s[32] << 13) | (s[33] >>> 19);
    	      b48 = (s[42] << 2) | (s[43] >>> 30);
    	      b49 = (s[43] << 2) | (s[42] >>> 30);
    	      b40 = (s[5] << 30) | (s[4] >>> 2);
    	      b41 = (s[4] << 30) | (s[5] >>> 2);
    	      b22 = (s[14] << 6) | (s[15] >>> 26);
    	      b23 = (s[15] << 6) | (s[14] >>> 26);
    	      b4 = (s[25] << 11) | (s[24] >>> 21);
    	      b5 = (s[24] << 11) | (s[25] >>> 21);
    	      b36 = (s[34] << 15) | (s[35] >>> 17);
    	      b37 = (s[35] << 15) | (s[34] >>> 17);
    	      b18 = (s[45] << 29) | (s[44] >>> 3);
    	      b19 = (s[44] << 29) | (s[45] >>> 3);
    	      b10 = (s[6] << 28) | (s[7] >>> 4);
    	      b11 = (s[7] << 28) | (s[6] >>> 4);
    	      b42 = (s[17] << 23) | (s[16] >>> 9);
    	      b43 = (s[16] << 23) | (s[17] >>> 9);
    	      b24 = (s[26] << 25) | (s[27] >>> 7);
    	      b25 = (s[27] << 25) | (s[26] >>> 7);
    	      b6 = (s[36] << 21) | (s[37] >>> 11);
    	      b7 = (s[37] << 21) | (s[36] >>> 11);
    	      b38 = (s[47] << 24) | (s[46] >>> 8);
    	      b39 = (s[46] << 24) | (s[47] >>> 8);
    	      b30 = (s[8] << 27) | (s[9] >>> 5);
    	      b31 = (s[9] << 27) | (s[8] >>> 5);
    	      b12 = (s[18] << 20) | (s[19] >>> 12);
    	      b13 = (s[19] << 20) | (s[18] >>> 12);
    	      b44 = (s[29] << 7) | (s[28] >>> 25);
    	      b45 = (s[28] << 7) | (s[29] >>> 25);
    	      b26 = (s[38] << 8) | (s[39] >>> 24);
    	      b27 = (s[39] << 8) | (s[38] >>> 24);
    	      b8 = (s[48] << 14) | (s[49] >>> 18);
    	      b9 = (s[49] << 14) | (s[48] >>> 18);

    	      s[0] = b0 ^ (~b2 & b4);
    	      s[1] = b1 ^ (~b3 & b5);
    	      s[10] = b10 ^ (~b12 & b14);
    	      s[11] = b11 ^ (~b13 & b15);
    	      s[20] = b20 ^ (~b22 & b24);
    	      s[21] = b21 ^ (~b23 & b25);
    	      s[30] = b30 ^ (~b32 & b34);
    	      s[31] = b31 ^ (~b33 & b35);
    	      s[40] = b40 ^ (~b42 & b44);
    	      s[41] = b41 ^ (~b43 & b45);
    	      s[2] = b2 ^ (~b4 & b6);
    	      s[3] = b3 ^ (~b5 & b7);
    	      s[12] = b12 ^ (~b14 & b16);
    	      s[13] = b13 ^ (~b15 & b17);
    	      s[22] = b22 ^ (~b24 & b26);
    	      s[23] = b23 ^ (~b25 & b27);
    	      s[32] = b32 ^ (~b34 & b36);
    	      s[33] = b33 ^ (~b35 & b37);
    	      s[42] = b42 ^ (~b44 & b46);
    	      s[43] = b43 ^ (~b45 & b47);
    	      s[4] = b4 ^ (~b6 & b8);
    	      s[5] = b5 ^ (~b7 & b9);
    	      s[14] = b14 ^ (~b16 & b18);
    	      s[15] = b15 ^ (~b17 & b19);
    	      s[24] = b24 ^ (~b26 & b28);
    	      s[25] = b25 ^ (~b27 & b29);
    	      s[34] = b34 ^ (~b36 & b38);
    	      s[35] = b35 ^ (~b37 & b39);
    	      s[44] = b44 ^ (~b46 & b48);
    	      s[45] = b45 ^ (~b47 & b49);
    	      s[6] = b6 ^ (~b8 & b0);
    	      s[7] = b7 ^ (~b9 & b1);
    	      s[16] = b16 ^ (~b18 & b10);
    	      s[17] = b17 ^ (~b19 & b11);
    	      s[26] = b26 ^ (~b28 & b20);
    	      s[27] = b27 ^ (~b29 & b21);
    	      s[36] = b36 ^ (~b38 & b30);
    	      s[37] = b37 ^ (~b39 & b31);
    	      s[46] = b46 ^ (~b48 & b40);
    	      s[47] = b47 ^ (~b49 & b41);
    	      s[8] = b8 ^ (~b0 & b2);
    	      s[9] = b9 ^ (~b1 & b3);
    	      s[18] = b18 ^ (~b10 & b12);
    	      s[19] = b19 ^ (~b11 & b13);
    	      s[28] = b28 ^ (~b20 & b22);
    	      s[29] = b29 ^ (~b21 & b23);
    	      s[38] = b38 ^ (~b30 & b32);
    	      s[39] = b39 ^ (~b31 & b33);
    	      s[48] = b48 ^ (~b40 & b42);
    	      s[49] = b49 ^ (~b41 & b43);

    	      s[0] ^= RC[n];
    	      s[1] ^= RC[n + 1];
    	    }
    	  };

    	  if (COMMON_JS) {
    	    module.exports = methods;
    	  } else {
    	    for (i = 0; i < methodNames.length; ++i) {
    	      root[methodNames[i]] = methods[methodNames[i]];
    	    }
    	  }
    	})(); 
    } (sha3));

    var sha3Exports = sha3.exports;

    var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(lib$o, "__esModule", { value: true });
    lib$o.keccak256 = void 0;
    var js_sha3_1 = __importDefault$a(sha3Exports);
    var bytes_1$z = lib$s;
    function keccak256$1(data) {
        return '0x' + js_sha3_1.default.keccak_256((0, bytes_1$z.arrayify)(data));
    }
    lib$o.keccak256 = keccak256$1;

    var lib$n = {};

    var _version$k = {};

    Object.defineProperty(_version$k, "__esModule", { value: true });
    _version$k.version = void 0;
    _version$k.version = "rlp/5.7.0";

    Object.defineProperty(lib$n, "__esModule", { value: true });
    lib$n.decode = lib$n.encode = void 0;
    //See: https://github.com/ethereum/wiki/wiki/RLP
    var bytes_1$y = lib$s;
    var logger_1$y = lib$r;
    var _version_1$y = _version$k;
    var logger$y = new logger_1$y.Logger(_version_1$y.version);
    function arrayifyInteger(value) {
        var result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        var result = 0;
        for (var i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            var payload_1 = [];
            object.forEach(function (child) {
                payload_1 = payload_1.concat(_encode(child));
            });
            if (payload_1.length <= 55) {
                payload_1.unshift(0xc0 + payload_1.length);
                return payload_1;
            }
            var length_1 = arrayifyInteger(payload_1.length);
            length_1.unshift(0xf7 + length_1.length);
            return length_1.concat(payload_1);
        }
        if (!(0, bytes_1$y.isBytesLike)(object)) {
            logger$y.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        var data = Array.prototype.slice.call((0, bytes_1$y.arrayify)(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        var length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode$6(object) {
        return (0, bytes_1$y.hexlify)(_encode(object));
    }
    lib$n.encode = encode$6;
    function _decodeChildren(data, offset, childOffset, length) {
        var result = [];
        while (childOffset < offset + 1 + length) {
            var decoded = _decode$1(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                logger$y.throwError("child data too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode$1(data, offset) {
        if (data.length === 0) {
            logger$y.throwError("data too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            var lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                logger$y.throwError("data short segment too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
            }
            var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length_2 > data.length) {
                logger$y.throwError("data long segment too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);
        }
        else if (data[offset] >= 0xc0) {
            var length_3 = data[offset] - 0xc0;
            if (offset + 1 + length_3 > data.length) {
                logger$y.throwError("data array too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length_3);
        }
        else if (data[offset] >= 0xb8) {
            var lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                logger$y.throwError("data array too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
            }
            var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length_4 > data.length) {
                logger$y.throwError("data array too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
            }
            var result = (0, bytes_1$y.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));
            return { consumed: (1 + lengthLength + length_4), result: result };
        }
        else if (data[offset] >= 0x80) {
            var length_5 = data[offset] - 0x80;
            if (offset + 1 + length_5 > data.length) {
                logger$y.throwError("data too short", logger_1$y.Logger.errors.BUFFER_OVERRUN, {});
            }
            var result = (0, bytes_1$y.hexlify)(data.slice(offset + 1, offset + 1 + length_5));
            return { consumed: (1 + length_5), result: result };
        }
        return { consumed: 1, result: (0, bytes_1$y.hexlify)(data[offset]) };
    }
    function decode$3(data) {
        var bytes = (0, bytes_1$y.arrayify)(data);
        var decoded = _decode$1(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            logger$y.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
    }
    lib$n.decode = decode$3;

    var _version$j = {};

    Object.defineProperty(_version$j, "__esModule", { value: true });
    _version$j.version = void 0;
    _version$j.version = "address/5.7.0";

    Object.defineProperty(lib$p, "__esModule", { value: true });
    lib$p.getCreate2Address = lib$p.getContractAddress = lib$p.getIcapAddress = lib$p.isAddress = lib$p.getAddress = void 0;
    var bytes_1$x = lib$s;
    var bignumber_1$d = lib$t;
    var keccak256_1$7 = lib$o;
    var rlp_1 = lib$n;
    var logger_1$x = lib$r;
    var _version_1$x = _version$j;
    var logger$x = new logger_1$x.Logger(_version_1$x.version);
    function getChecksumAddress(address) {
        if (!(0, bytes_1$x.isHexString)(address, 20)) {
            logger$x.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        var chars = address.substring(2).split("");
        var expanded = new Uint8Array(40);
        for (var i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        var hashed = (0, bytes_1$x.arrayify)((0, keccak256_1$7.keccak256)(expanded));
        for (var i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // Shims for environments that are missing some required constants and functions
    var MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    var ibanLookup = {};
    for (var i$3 = 0; i$3 < 10; i$3++) {
        ibanLookup[String(i$3)] = String(i$3);
    }
    for (var i$3 = 0; i$3 < 26; i$3++) {
        ibanLookup[String.fromCharCode(65 + i$3)] = String(10 + i$3);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        var expanded = address.split("").map(function (c) { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            var block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        var checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    function getAddress(address) {
        var result = null;
        if (typeof (address) !== "string") {
            logger$x.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
                address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                logger$x.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                logger$x.throwArgumentError("bad icap checksum", "address", address);
            }
            result = (0, bignumber_1$d._base36To16)(address.substring(4));
            while (result.length < 40) {
                result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
        }
        else {
            logger$x.throwArgumentError("invalid address", "address", address);
        }
        return result;
    }
    lib$p.getAddress = getAddress;
    function isAddress(address) {
        try {
            getAddress(address);
            return true;
        }
        catch (error) { }
        return false;
    }
    lib$p.isAddress = isAddress;
    function getIcapAddress(address) {
        var base36 = (0, bignumber_1$d._base16To36)(getAddress(address).substring(2)).toUpperCase();
        while (base36.length < 30) {
            base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    lib$p.getIcapAddress = getIcapAddress;
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        var from = null;
        try {
            from = getAddress(transaction.from);
        }
        catch (error) {
            logger$x.throwArgumentError("missing from address", "transaction", transaction);
        }
        var nonce = (0, bytes_1$x.stripZeros)((0, bytes_1$x.arrayify)(bignumber_1$d.BigNumber.from(transaction.nonce).toHexString()));
        return getAddress((0, bytes_1$x.hexDataSlice)((0, keccak256_1$7.keccak256)((0, rlp_1.encode)([from, nonce])), 12));
    }
    lib$p.getContractAddress = getContractAddress;
    function getCreate2Address(from, salt, initCodeHash) {
        if ((0, bytes_1$x.hexDataLength)(salt) !== 32) {
            logger$x.throwArgumentError("salt must be 32 bytes", "salt", salt);
        }
        if ((0, bytes_1$x.hexDataLength)(initCodeHash) !== 32) {
            logger$x.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
        }
        return getAddress((0, bytes_1$x.hexDataSlice)((0, keccak256_1$7.keccak256)((0, bytes_1$x.concat)(["0xff", getAddress(from), salt, initCodeHash])), 12));
    }
    lib$p.getCreate2Address = getCreate2Address;

    var __extends$B = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(address$1, "__esModule", { value: true });
    address$1.AddressCoder = void 0;
    var address_1$8 = lib$p;
    var bytes_1$w = lib$s;
    var abstract_coder_1$9 = abstractCoder;
    var AddressCoder = /** @class */ (function (_super) {
        __extends$B(AddressCoder, _super);
        function AddressCoder(localName) {
            return _super.call(this, "address", "address", localName, false) || this;
        }
        AddressCoder.prototype.defaultValue = function () {
            return "0x0000000000000000000000000000000000000000";
        };
        AddressCoder.prototype.encode = function (writer, value) {
            try {
                value = (0, address_1$8.getAddress)(value);
            }
            catch (error) {
                this._throwError(error.message, value);
            }
            return writer.writeValue(value);
        };
        AddressCoder.prototype.decode = function (reader) {
            return (0, address_1$8.getAddress)((0, bytes_1$w.hexZeroPad)(reader.readValue().toHexString(), 20));
        };
        return AddressCoder;
    }(abstract_coder_1$9.Coder));
    address$1.AddressCoder = AddressCoder;

    var array = {};

    var anonymous = {};

    var __extends$A = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(anonymous, "__esModule", { value: true });
    anonymous.AnonymousCoder = void 0;
    var abstract_coder_1$8 = abstractCoder;
    // Clones the functionality of an existing Coder, but without a localName
    var AnonymousCoder = /** @class */ (function (_super) {
        __extends$A(AnonymousCoder, _super);
        function AnonymousCoder(coder) {
            var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;
            _this.coder = coder;
            return _this;
        }
        AnonymousCoder.prototype.defaultValue = function () {
            return this.coder.defaultValue();
        };
        AnonymousCoder.prototype.encode = function (writer, value) {
            return this.coder.encode(writer, value);
        };
        AnonymousCoder.prototype.decode = function (reader) {
            return this.coder.decode(reader);
        };
        return AnonymousCoder;
    }(abstract_coder_1$8.Coder));
    anonymous.AnonymousCoder = AnonymousCoder;

    var __extends$z = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(array, "__esModule", { value: true });
    array.ArrayCoder = array.unpack = array.pack = void 0;
    var logger_1$w = lib$r;
    var _version_1$w = _version$l;
    var logger$w = new logger_1$w.Logger(_version_1$w.version);
    var abstract_coder_1$7 = abstractCoder;
    var anonymous_1 = anonymous;
    function pack$1(writer, coders, values) {
        var arrayValues = null;
        if (Array.isArray(values)) {
            arrayValues = values;
        }
        else if (values && typeof (values) === "object") {
            var unique_1 = {};
            arrayValues = coders.map(function (coder) {
                var name = coder.localName;
                if (!name) {
                    logger$w.throwError("cannot encode object for signature with missing names", logger_1$w.Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                if (unique_1[name]) {
                    logger$w.throwError("cannot encode object for signature with duplicate names", logger_1$w.Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                unique_1[name] = true;
                return values[name];
            });
        }
        else {
            logger$w.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== arrayValues.length) {
            logger$w.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        var staticWriter = new abstract_coder_1$7.Writer(writer.wordSize);
        var dynamicWriter = new abstract_coder_1$7.Writer(writer.wordSize);
        var updateFuncs = [];
        coders.forEach(function (coder, index) {
            var value = arrayValues[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                var dynamicOffset_1 = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                var updateFunc_1 = staticWriter.writeUpdatableValue();
                updateFuncs.push(function (baseOffset) {
                    updateFunc_1(baseOffset + dynamicOffset_1);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach(function (func) { func(staticWriter.length); });
        var length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
    }
    array.pack = pack$1;
    function unpack(reader, coders) {
        var values = [];
        // A reader anchored to this base
        var baseReader = reader.subReader(0);
        coders.forEach(function (coder) {
            var value = null;
            if (coder.dynamic) {
                var offset = reader.readValue();
                var offsetReader = baseReader.subReader(offset.toNumber());
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === logger_1$w.Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === logger_1$w.Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value != undefined) {
                values.push(value);
            }
        });
        // We only output named properties for uniquely named coders
        var uniqueNames = coders.reduce(function (accum, coder) {
            var name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        // Add any named parameters (i.e. tuples)
        coders.forEach(function (coder, index) {
            var name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            var value = values[index];
            if (value instanceof Error) {
                Object.defineProperty(values, name, {
                    enumerable: true,
                    get: function () { throw value; }
                });
            }
            else {
                values[name] = value;
            }
        });
        var _loop_1 = function (i) {
            var value = values[i];
            if (value instanceof Error) {
                Object.defineProperty(values, i, {
                    enumerable: true,
                    get: function () { throw value; }
                });
            }
        };
        for (var i = 0; i < values.length; i++) {
            _loop_1(i);
        }
        return Object.freeze(values);
    }
    array.unpack = unpack;
    var ArrayCoder = /** @class */ (function (_super) {
        __extends$z(ArrayCoder, _super);
        function ArrayCoder(coder, length, localName) {
            var _this = this;
            var type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            var dynamic = (length === -1 || coder.dynamic);
            _this = _super.call(this, "array", type, localName, dynamic) || this;
            _this.coder = coder;
            _this.length = length;
            return _this;
        }
        ArrayCoder.prototype.defaultValue = function () {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            var defaultChild = this.coder.defaultValue();
            var result = [];
            for (var i = 0; i < this.length; i++) {
                result.push(defaultChild);
            }
            return result;
        };
        ArrayCoder.prototype.encode = function (writer, value) {
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            var count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            logger$w.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            var coders = [];
            for (var i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack$1(writer, coders, value);
        };
        ArrayCoder.prototype.decode = function (reader) {
            var count = this.length;
            if (count === -1) {
                count = reader.readValue().toNumber();
                // Check that there is *roughly* enough data to ensure
                // stray random data is not being read as a length. Each
                // slot requires at least 32 bytes for their value (or 32
                // bytes as a link to the data). This could use a much
                // tighter bound, but we are erroring on the side of safety.
                if (count * 32 > reader._data.length) {
                    logger$w.throwError("insufficient data length", logger_1$w.Logger.errors.BUFFER_OVERRUN, {
                        length: reader._data.length,
                        count: count
                    });
                }
            }
            var coders = [];
            for (var i = 0; i < count; i++) {
                coders.push(new anonymous_1.AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
        };
        return ArrayCoder;
    }(abstract_coder_1$7.Coder));
    array.ArrayCoder = ArrayCoder;

    var boolean = {};

    var __extends$y = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(boolean, "__esModule", { value: true });
    boolean.BooleanCoder = void 0;
    var abstract_coder_1$6 = abstractCoder;
    var BooleanCoder = /** @class */ (function (_super) {
        __extends$y(BooleanCoder, _super);
        function BooleanCoder(localName) {
            return _super.call(this, "bool", "bool", localName, false) || this;
        }
        BooleanCoder.prototype.defaultValue = function () {
            return false;
        };
        BooleanCoder.prototype.encode = function (writer, value) {
            return writer.writeValue(value ? 1 : 0);
        };
        BooleanCoder.prototype.decode = function (reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
        };
        return BooleanCoder;
    }(abstract_coder_1$6.Coder));
    boolean.BooleanCoder = BooleanCoder;

    var bytes$1 = {};

    var __extends$x = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(bytes$1, "__esModule", { value: true });
    bytes$1.BytesCoder = bytes$1.DynamicBytesCoder = void 0;
    var bytes_1$v = lib$s;
    var abstract_coder_1$5 = abstractCoder;
    var DynamicBytesCoder = /** @class */ (function (_super) {
        __extends$x(DynamicBytesCoder, _super);
        function DynamicBytesCoder(type, localName) {
            return _super.call(this, type, type, localName, true) || this;
        }
        DynamicBytesCoder.prototype.defaultValue = function () {
            return "0x";
        };
        DynamicBytesCoder.prototype.encode = function (writer, value) {
            value = (0, bytes_1$v.arrayify)(value);
            var length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        };
        DynamicBytesCoder.prototype.decode = function (reader) {
            return reader.readBytes(reader.readValue().toNumber(), true);
        };
        return DynamicBytesCoder;
    }(abstract_coder_1$5.Coder));
    bytes$1.DynamicBytesCoder = DynamicBytesCoder;
    var BytesCoder = /** @class */ (function (_super) {
        __extends$x(BytesCoder, _super);
        function BytesCoder(localName) {
            return _super.call(this, "bytes", localName) || this;
        }
        BytesCoder.prototype.decode = function (reader) {
            return reader.coerce(this.name, (0, bytes_1$v.hexlify)(_super.prototype.decode.call(this, reader)));
        };
        return BytesCoder;
    }(DynamicBytesCoder));
    bytes$1.BytesCoder = BytesCoder;

    var fixedBytes = {};

    var __extends$w = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(fixedBytes, "__esModule", { value: true });
    fixedBytes.FixedBytesCoder = void 0;
    var bytes_1$u = lib$s;
    var abstract_coder_1$4 = abstractCoder;
    // @TODO: Merge this with bytes
    var FixedBytesCoder = /** @class */ (function (_super) {
        __extends$w(FixedBytesCoder, _super);
        function FixedBytesCoder(size, localName) {
            var _this = this;
            var name = "bytes" + String(size);
            _this = _super.call(this, name, name, localName, false) || this;
            _this.size = size;
            return _this;
        }
        FixedBytesCoder.prototype.defaultValue = function () {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
        };
        FixedBytesCoder.prototype.encode = function (writer, value) {
            var data = (0, bytes_1$u.arrayify)(value);
            if (data.length !== this.size) {
                this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
        };
        FixedBytesCoder.prototype.decode = function (reader) {
            return reader.coerce(this.name, (0, bytes_1$u.hexlify)(reader.readBytes(this.size)));
        };
        return FixedBytesCoder;
    }(abstract_coder_1$4.Coder));
    fixedBytes.FixedBytesCoder = FixedBytesCoder;

    var _null = {};

    var __extends$v = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(_null, "__esModule", { value: true });
    _null.NullCoder = void 0;
    var abstract_coder_1$3 = abstractCoder;
    var NullCoder = /** @class */ (function (_super) {
        __extends$v(NullCoder, _super);
        function NullCoder(localName) {
            return _super.call(this, "null", "", localName, false) || this;
        }
        NullCoder.prototype.defaultValue = function () {
            return null;
        };
        NullCoder.prototype.encode = function (writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes([]);
        };
        NullCoder.prototype.decode = function (reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
        };
        return NullCoder;
    }(abstract_coder_1$3.Coder));
    _null.NullCoder = NullCoder;

    var number = {};

    var lib$m = {};

    var addresses = {};

    Object.defineProperty(addresses, "__esModule", { value: true });
    addresses.AddressZero = void 0;
    addresses.AddressZero = "0x0000000000000000000000000000000000000000";

    var bignumbers = {};

    Object.defineProperty(bignumbers, "__esModule", { value: true });
    bignumbers.MaxInt256 = bignumbers.MinInt256 = bignumbers.MaxUint256 = bignumbers.WeiPerEther = bignumbers.Two = bignumbers.One = bignumbers.Zero = bignumbers.NegativeOne = void 0;
    var bignumber_1$c = lib$t;
    var NegativeOne$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(-1));
    bignumbers.NegativeOne = NegativeOne$1;
    var Zero$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(0));
    bignumbers.Zero = Zero$1;
    var One$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(1));
    bignumbers.One = One$1;
    var Two = ( /*#__PURE__*/bignumber_1$c.BigNumber.from(2));
    bignumbers.Two = Two;
    var WeiPerEther = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("1000000000000000000"));
    bignumbers.WeiPerEther = WeiPerEther;
    var MaxUint256$1 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    bignumbers.MaxUint256 = MaxUint256$1;
    var MinInt256 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
    bignumbers.MinInt256 = MinInt256;
    var MaxInt256 = ( /*#__PURE__*/bignumber_1$c.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    bignumbers.MaxInt256 = MaxInt256;

    var hashes = {};

    Object.defineProperty(hashes, "__esModule", { value: true });
    hashes.HashZero = void 0;
    hashes.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

    var strings = {};

    Object.defineProperty(strings, "__esModule", { value: true });
    strings.EtherSymbol = void 0;
    // NFKC (composed)             // (decomposed)
    strings.EtherSymbol = "\u039e"; // "\uD835\uDF63";

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.EtherSymbol = exports.HashZero = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = exports.AddressZero = void 0;
    	var addresses_1 = addresses;
    	Object.defineProperty(exports, "AddressZero", { enumerable: true, get: function () { return addresses_1.AddressZero; } });
    	var bignumbers_1 = bignumbers;
    	Object.defineProperty(exports, "NegativeOne", { enumerable: true, get: function () { return bignumbers_1.NegativeOne; } });
    	Object.defineProperty(exports, "Zero", { enumerable: true, get: function () { return bignumbers_1.Zero; } });
    	Object.defineProperty(exports, "One", { enumerable: true, get: function () { return bignumbers_1.One; } });
    	Object.defineProperty(exports, "Two", { enumerable: true, get: function () { return bignumbers_1.Two; } });
    	Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function () { return bignumbers_1.WeiPerEther; } });
    	Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function () { return bignumbers_1.MaxUint256; } });
    	Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function () { return bignumbers_1.MinInt256; } });
    	Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function () { return bignumbers_1.MaxInt256; } });
    	var hashes_1 = hashes;
    	Object.defineProperty(exports, "HashZero", { enumerable: true, get: function () { return hashes_1.HashZero; } });
    	var strings_1 = strings;
    	Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function () { return strings_1.EtherSymbol; } });
    	
    } (lib$m));

    var __extends$u = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(number, "__esModule", { value: true });
    number.NumberCoder = void 0;
    var bignumber_1$b = lib$t;
    var constants_1$3 = lib$m;
    var abstract_coder_1$2 = abstractCoder;
    var NumberCoder = /** @class */ (function (_super) {
        __extends$u(NumberCoder, _super);
        function NumberCoder(size, signed, localName) {
            var _this = this;
            var name = ((signed ? "int" : "uint") + (size * 8));
            _this = _super.call(this, name, name, localName, false) || this;
            _this.size = size;
            _this.signed = signed;
            return _this;
        }
        NumberCoder.prototype.defaultValue = function () {
            return 0;
        };
        NumberCoder.prototype.encode = function (writer, value) {
            var v = bignumber_1$b.BigNumber.from(value);
            // Check bounds are safe for encoding
            var maxUintValue = constants_1$3.MaxUint256.mask(writer.wordSize * 8);
            if (this.signed) {
                var bounds = maxUintValue.mask(this.size * 8 - 1);
                if (v.gt(bounds) || v.lt(bounds.add(constants_1$3.One).mul(constants_1$3.NegativeOne))) {
                    this._throwError("value out-of-bounds", value);
                }
            }
            else if (v.lt(constants_1$3.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
                this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
        };
        NumberCoder.prototype.decode = function (reader) {
            var value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
        };
        return NumberCoder;
    }(abstract_coder_1$2.Coder));
    number.NumberCoder = NumberCoder;

    var string = {};

    var lib$l = {};

    var bytes32$1 = {};

    var utf8$1 = {};

    var _version$i = {};

    Object.defineProperty(_version$i, "__esModule", { value: true });
    _version$i.version = void 0;
    _version$i.version = "strings/5.7.0";

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.toUtf8CodePoints = exports.toUtf8String = exports._toUtf8String = exports._toEscapedUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = void 0;
    	var bytes_1 = lib$s;
    	var logger_1 = lib$r;
    	var _version_1 = _version$i;
    	var logger = new logger_1.Logger(_version_1.version);
    	///////////////////////////////
    	var UnicodeNormalizationForm;
    	(function (UnicodeNormalizationForm) {
    	    UnicodeNormalizationForm["current"] = "";
    	    UnicodeNormalizationForm["NFC"] = "NFC";
    	    UnicodeNormalizationForm["NFD"] = "NFD";
    	    UnicodeNormalizationForm["NFKC"] = "NFKC";
    	    UnicodeNormalizationForm["NFKD"] = "NFKD";
    	})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
    	var Utf8ErrorReason;
    	(function (Utf8ErrorReason) {
    	    // A continuation byte was present where there was nothing to continue
    	    // - offset = the index the codepoint began in
    	    Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    	    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
    	    // - offset = the index the codepoint began in
    	    Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
    	    // The string is too short to process the expected codepoint
    	    // - offset = the index the codepoint began in
    	    Utf8ErrorReason["OVERRUN"] = "string overrun";
    	    // A missing continuation byte was expected but not found
    	    // - offset = the index the continuation byte was expected at
    	    Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
    	    // The computed code point is outside the range for UTF-8
    	    // - offset       = start of this codepoint
    	    // - badCodepoint = the computed codepoint; outside the UTF-8 range
    	    Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
    	    // UTF-8 strings may not contain UTF-16 surrogate pairs
    	    // - offset       = start of this codepoint
    	    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
    	    Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
    	    // The string is an overlong representation
    	    // - offset       = start of this codepoint
    	    // - badCodepoint = the computed codepoint; already bounds checked
    	    Utf8ErrorReason["OVERLONG"] = "overlong representation";
    	})(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));
    	function errorFunc(reason, offset, bytes, output, badCodepoint) {
    	    return logger.throwArgumentError("invalid codepoint at offset " + offset + "; " + reason, "bytes", bytes);
    	}
    	function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    	    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
    	    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    	        var i = 0;
    	        for (var o = offset + 1; o < bytes.length; o++) {
    	            if (bytes[o] >> 6 !== 0x02) {
    	                break;
    	            }
    	            i++;
    	        }
    	        return i;
    	    }
    	    // This byte runs us past the end of the string, so just jump to the end
    	    // (but the first byte was read already read and therefore skipped)
    	    if (reason === Utf8ErrorReason.OVERRUN) {
    	        return bytes.length - offset - 1;
    	    }
    	    // Nothing to skip
    	    return 0;
    	}
    	function replaceFunc(reason, offset, bytes, output, badCodepoint) {
    	    // Overlong representations are otherwise "valid" code points; just non-deistingtished
    	    if (reason === Utf8ErrorReason.OVERLONG) {
    	        output.push(badCodepoint);
    	        return 0;
    	    }
    	    // Put the replacement character into the output
    	    output.push(0xfffd);
    	    // Otherwise, process as if ignoring errors
    	    return ignoreFunc(reason, offset, bytes);
    	}
    	// Common error handing strategies
    	exports.Utf8ErrorFuncs = Object.freeze({
    	    error: errorFunc,
    	    ignore: ignoreFunc,
    	    replace: replaceFunc
    	});
    	// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    	function getUtf8CodePoints(bytes, onError) {
    	    if (onError == null) {
    	        onError = exports.Utf8ErrorFuncs.error;
    	    }
    	    bytes = (0, bytes_1.arrayify)(bytes);
    	    var result = [];
    	    var i = 0;
    	    // Invalid bytes are ignored
    	    while (i < bytes.length) {
    	        var c = bytes[i++];
    	        // 0xxx xxxx
    	        if (c >> 7 === 0) {
    	            result.push(c);
    	            continue;
    	        }
    	        // Multibyte; how many bytes left for this character?
    	        var extraLength = null;
    	        var overlongMask = null;
    	        // 110x xxxx 10xx xxxx
    	        if ((c & 0xe0) === 0xc0) {
    	            extraLength = 1;
    	            overlongMask = 0x7f;
    	            // 1110 xxxx 10xx xxxx 10xx xxxx
    	        }
    	        else if ((c & 0xf0) === 0xe0) {
    	            extraLength = 2;
    	            overlongMask = 0x7ff;
    	            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
    	        }
    	        else if ((c & 0xf8) === 0xf0) {
    	            extraLength = 3;
    	            overlongMask = 0xffff;
    	        }
    	        else {
    	            if ((c & 0xc0) === 0x80) {
    	                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
    	            }
    	            else {
    	                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
    	            }
    	            continue;
    	        }
    	        // Do we have enough bytes in our data?
    	        if (i - 1 + extraLength >= bytes.length) {
    	            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
    	            continue;
    	        }
    	        // Remove the length prefix from the char
    	        var res = c & ((1 << (8 - extraLength - 1)) - 1);
    	        for (var j = 0; j < extraLength; j++) {
    	            var nextChar = bytes[i];
    	            // Invalid continuation byte
    	            if ((nextChar & 0xc0) != 0x80) {
    	                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
    	                res = null;
    	                break;
    	            }
    	            res = (res << 6) | (nextChar & 0x3f);
    	            i++;
    	        }
    	        // See above loop for invalid continuation byte
    	        if (res === null) {
    	            continue;
    	        }
    	        // Maximum code point
    	        if (res > 0x10ffff) {
    	            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
    	            continue;
    	        }
    	        // Reserved for UTF-16 surrogate halves
    	        if (res >= 0xd800 && res <= 0xdfff) {
    	            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
    	            continue;
    	        }
    	        // Check for overlong sequences (more bytes than needed)
    	        if (res <= overlongMask) {
    	            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
    	            continue;
    	        }
    	        result.push(res);
    	    }
    	    return result;
    	}
    	// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    	function toUtf8Bytes(str, form) {
    	    if (form === void 0) { form = UnicodeNormalizationForm.current; }
    	    if (form != UnicodeNormalizationForm.current) {
    	        logger.checkNormalize();
    	        str = str.normalize(form);
    	    }
    	    var result = [];
    	    for (var i = 0; i < str.length; i++) {
    	        var c = str.charCodeAt(i);
    	        if (c < 0x80) {
    	            result.push(c);
    	        }
    	        else if (c < 0x800) {
    	            result.push((c >> 6) | 0xc0);
    	            result.push((c & 0x3f) | 0x80);
    	        }
    	        else if ((c & 0xfc00) == 0xd800) {
    	            i++;
    	            var c2 = str.charCodeAt(i);
    	            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
    	                throw new Error("invalid utf-8 string");
    	            }
    	            // Surrogate Pair
    	            var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
    	            result.push((pair >> 18) | 0xf0);
    	            result.push(((pair >> 12) & 0x3f) | 0x80);
    	            result.push(((pair >> 6) & 0x3f) | 0x80);
    	            result.push((pair & 0x3f) | 0x80);
    	        }
    	        else {
    	            result.push((c >> 12) | 0xe0);
    	            result.push(((c >> 6) & 0x3f) | 0x80);
    	            result.push((c & 0x3f) | 0x80);
    	        }
    	    }
    	    return (0, bytes_1.arrayify)(result);
    	}
    	exports.toUtf8Bytes = toUtf8Bytes;
    	function escapeChar(value) {
    	    var hex = ("0000" + value.toString(16));
    	    return "\\u" + hex.substring(hex.length - 4);
    	}
    	function _toEscapedUtf8String(bytes, onError) {
    	    return '"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {
    	        if (codePoint < 256) {
    	            switch (codePoint) {
    	                case 8: return "\\b";
    	                case 9: return "\\t";
    	                case 10: return "\\n";
    	                case 13: return "\\r";
    	                case 34: return "\\\"";
    	                case 92: return "\\\\";
    	            }
    	            if (codePoint >= 32 && codePoint < 127) {
    	                return String.fromCharCode(codePoint);
    	            }
    	        }
    	        if (codePoint <= 0xffff) {
    	            return escapeChar(codePoint);
    	        }
    	        codePoint -= 0x10000;
    	        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
    	    }).join("") + '"';
    	}
    	exports._toEscapedUtf8String = _toEscapedUtf8String;
    	function _toUtf8String(codePoints) {
    	    return codePoints.map(function (codePoint) {
    	        if (codePoint <= 0xffff) {
    	            return String.fromCharCode(codePoint);
    	        }
    	        codePoint -= 0x10000;
    	        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
    	    }).join("");
    	}
    	exports._toUtf8String = _toUtf8String;
    	function toUtf8String(bytes, onError) {
    	    return _toUtf8String(getUtf8CodePoints(bytes, onError));
    	}
    	exports.toUtf8String = toUtf8String;
    	function toUtf8CodePoints(str, form) {
    	    if (form === void 0) { form = UnicodeNormalizationForm.current; }
    	    return getUtf8CodePoints(toUtf8Bytes(str, form));
    	}
    	exports.toUtf8CodePoints = toUtf8CodePoints;
    	
    } (utf8$1));

    Object.defineProperty(bytes32$1, "__esModule", { value: true });
    bytes32$1.parseBytes32String = bytes32$1.formatBytes32String = void 0;
    var constants_1$2 = lib$m;
    var bytes_1$t = lib$s;
    var utf8_1$1 = utf8$1;
    function formatBytes32String(text) {
        // Get the bytes
        var bytes = (0, utf8_1$1.toUtf8Bytes)(text);
        // Check we have room for null-termination
        if (bytes.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
        }
        // Zero-pad (implicitly null-terminates)
        return (0, bytes_1$t.hexlify)((0, bytes_1$t.concat)([bytes, constants_1$2.HashZero]).slice(0, 32));
    }
    bytes32$1.formatBytes32String = formatBytes32String;
    function parseBytes32String(bytes) {
        var data = (0, bytes_1$t.arrayify)(bytes);
        // Must be 32 bytes with a null-termination
        if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
        }
        if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
        }
        // Find the null termination
        var length = 31;
        while (data[length - 1] === 0) {
            length--;
        }
        // Determine the string value
        return (0, utf8_1$1.toUtf8String)(data.slice(0, length));
    }
    bytes32$1.parseBytes32String = parseBytes32String;

    var idna = {};

    Object.defineProperty(idna, "__esModule", { value: true });
    idna.nameprep = idna._nameprepTableC = idna._nameprepTableB2 = idna._nameprepTableA1 = void 0;
    var utf8_1 = utf8$1;
    function bytes2(data) {
        if ((data.length % 4) !== 0) {
            throw new Error("bad data");
        }
        var result = [];
        for (var i = 0; i < data.length; i += 4) {
            result.push(parseInt(data.substring(i, i + 4), 16));
        }
        return result;
    }
    function createTable(data, func) {
        if (!func) {
            func = function (value) { return [parseInt(value, 16)]; };
        }
        var lo = 0;
        var result = {};
        data.split(",").forEach(function (pair) {
            var comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
        });
        return result;
    }
    function createRangeTable(data) {
        var hi = 0;
        return data.split(",").map(function (v) {
            var comps = v.split("-");
            if (comps.length === 1) {
                comps[1] = "0";
            }
            else if (comps[1] === "") {
                comps[1] = "1";
            }
            var lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return { l: lo, h: hi };
        });
    }
    function matchMap(value, ranges) {
        var lo = 0;
        for (var i = 0; i < ranges.length; i++) {
            var range = ranges[i];
            lo += range.l;
            if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
                if (range.e && range.e.indexOf(value - lo) !== -1) {
                    continue;
                }
                return range;
            }
        }
        return null;
    }
    var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    // @TODO: Make this relative...
    var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function (v) { return parseInt(v, 16); });
    var Table_B_2_ranges = [
        { h: 25, s: 32, l: 65 },
        { h: 30, s: 32, e: [23], l: 127 },
        { h: 54, s: 1, e: [48], l: 64, d: 2 },
        { h: 14, s: 1, l: 57, d: 2 },
        { h: 44, s: 1, l: 17, d: 2 },
        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
        { h: 16, s: 1, l: 68, d: 2 },
        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
        { h: 26, s: 32, e: [17], l: 435 },
        { h: 22, s: 1, l: 71, d: 2 },
        { h: 15, s: 80, l: 40 },
        { h: 31, s: 32, l: 16 },
        { h: 32, s: 1, l: 80, d: 2 },
        { h: 52, s: 1, l: 42, d: 2 },
        { h: 12, s: 1, l: 55, d: 2 },
        { h: 40, s: 1, e: [38], l: 15, d: 2 },
        { h: 14, s: 1, l: 48, d: 2 },
        { h: 37, s: 48, l: 49 },
        { h: 148, s: 1, l: 6351, d: 2 },
        { h: 88, s: 1, l: 160, d: 2 },
        { h: 15, s: 16, l: 704 },
        { h: 25, s: 26, l: 854 },
        { h: 25, s: 32, l: 55915 },
        { h: 37, s: 40, l: 1247 },
        { h: 25, s: -119711, l: 53248 },
        { h: 25, s: -119763, l: 52 },
        { h: 25, s: -119815, l: 52 },
        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
        { h: 25, s: -119919, l: 52 },
        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
        { h: 25, s: -120075, l: 52 },
        { h: 25, s: -120127, l: 52 },
        { h: 25, s: -120179, l: 52 },
        { h: 25, s: -120231, l: 52 },
        { h: 25, s: -120283, l: 52 },
        { h: 25, s: -120335, l: 52 },
        { h: 24, s: -119543, e: [17], l: 56 },
        { h: 24, s: -119601, e: [17], l: 58 },
        { h: 24, s: -119659, e: [17], l: 58 },
        { h: 24, s: -119717, e: [17], l: 58 },
        { h: 24, s: -119775, e: [17], l: 58 }
    ];
    var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
    function flatten(values) {
        return values.reduce(function (accum, value) {
            value.forEach(function (value) { accum.push(value); });
            return accum;
        }, []);
    }
    function _nameprepTableA1(codepoint) {
        return !!matchMap(codepoint, Table_A_1_ranges);
    }
    idna._nameprepTableA1 = _nameprepTableA1;
    function _nameprepTableB2(codepoint) {
        var range = matchMap(codepoint, Table_B_2_ranges);
        if (range) {
            return [codepoint + range.s];
        }
        var codes = Table_B_2_lut_abs[codepoint];
        if (codes) {
            return codes;
        }
        var shift = Table_B_2_lut_rel[codepoint];
        if (shift) {
            return [codepoint + shift[0]];
        }
        var complex = Table_B_2_complex[codepoint];
        if (complex) {
            return complex;
        }
        return null;
    }
    idna._nameprepTableB2 = _nameprepTableB2;
    function _nameprepTableC(codepoint) {
        return !!matchMap(codepoint, Table_C_ranges);
    }
    idna._nameprepTableC = _nameprepTableC;
    function nameprep(value) {
        // This allows platforms with incomplete normalize to bypass
        // it for very basic names which the built-in toLowerCase
        // will certainly handle correctly
        if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
            return value.toLowerCase();
        }
        // Get the code points (keeping the current normalization)
        var codes = (0, utf8_1.toUtf8CodePoints)(value);
        codes = flatten(codes.map(function (code) {
            // Substitute Table B.1 (Maps to Nothing)
            if (Table_B_1_flags.indexOf(code) >= 0) {
                return [];
            }
            if (code >= 0xfe00 && code <= 0xfe0f) {
                return [];
            }
            // Substitute Table B.2 (Case Folding)
            var codesTableB2 = _nameprepTableB2(code);
            if (codesTableB2) {
                return codesTableB2;
            }
            // No Substitution
            return [code];
        }));
        // Normalize using form KC
        codes = (0, utf8_1.toUtf8CodePoints)((0, utf8_1._toUtf8String)(codes), utf8_1.UnicodeNormalizationForm.NFKC);
        // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
        codes.forEach(function (code) {
            if (_nameprepTableC(code)) {
                throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }
        });
        // Prohibit Unassigned Code Points (Table A.1)
        codes.forEach(function (code) {
            if (_nameprepTableA1(code)) {
                throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            }
        });
        // IDNA extras
        var name = (0, utf8_1._toUtf8String)(codes);
        // IDNA: 4.2.3.1
        if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
            throw new Error("invalid hyphen");
        }
        return name;
    }
    idna.nameprep = nameprep;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.nameprep = exports.parseBytes32String = exports.formatBytes32String = exports.UnicodeNormalizationForm = exports.Utf8ErrorReason = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = void 0;
    	var bytes32_1 = bytes32$1;
    	Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return bytes32_1.formatBytes32String; } });
    	Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return bytes32_1.parseBytes32String; } });
    	var idna_1 = idna;
    	Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return idna_1.nameprep; } });
    	var utf8_1 = utf8$1;
    	Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return utf8_1._toEscapedUtf8String; } });
    	Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return utf8_1.toUtf8Bytes; } });
    	Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return utf8_1.toUtf8CodePoints; } });
    	Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return utf8_1.toUtf8String; } });
    	Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return utf8_1.UnicodeNormalizationForm; } });
    	Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return utf8_1.Utf8ErrorFuncs; } });
    	Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return utf8_1.Utf8ErrorReason; } });
    	
    } (lib$l));

    var __extends$t = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(string, "__esModule", { value: true });
    string.StringCoder = void 0;
    var strings_1$f = lib$l;
    var bytes_1$s = bytes$1;
    var StringCoder = /** @class */ (function (_super) {
        __extends$t(StringCoder, _super);
        function StringCoder(localName) {
            return _super.call(this, "string", localName) || this;
        }
        StringCoder.prototype.defaultValue = function () {
            return "";
        };
        StringCoder.prototype.encode = function (writer, value) {
            return _super.prototype.encode.call(this, writer, (0, strings_1$f.toUtf8Bytes)(value));
        };
        StringCoder.prototype.decode = function (reader) {
            return (0, strings_1$f.toUtf8String)(_super.prototype.decode.call(this, reader));
        };
        return StringCoder;
    }(bytes_1$s.DynamicBytesCoder));
    string.StringCoder = StringCoder;

    var tuple = {};

    var __extends$s = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(tuple, "__esModule", { value: true });
    tuple.TupleCoder = void 0;
    var abstract_coder_1$1 = abstractCoder;
    var array_1$1 = array;
    var TupleCoder = /** @class */ (function (_super) {
        __extends$s(TupleCoder, _super);
        function TupleCoder(coders, localName) {
            var _this = this;
            var dynamic = false;
            var types = [];
            coders.forEach(function (coder) {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            var type = ("tuple(" + types.join(",") + ")");
            _this = _super.call(this, "tuple", type, localName, dynamic) || this;
            _this.coders = coders;
            return _this;
        }
        TupleCoder.prototype.defaultValue = function () {
            var values = [];
            this.coders.forEach(function (coder) {
                values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            var uniqueNames = this.coders.reduce(function (accum, coder) {
                var name = coder.localName;
                if (name) {
                    if (!accum[name]) {
                        accum[name] = 0;
                    }
                    accum[name]++;
                }
                return accum;
            }, {});
            // Add named values
            this.coders.forEach(function (coder, index) {
                var name = coder.localName;
                if (!name || uniqueNames[name] !== 1) {
                    return;
                }
                if (name === "length") {
                    name = "_length";
                }
                if (values[name] != null) {
                    return;
                }
                values[name] = values[index];
            });
            return Object.freeze(values);
        };
        TupleCoder.prototype.encode = function (writer, value) {
            return (0, array_1$1.pack)(writer, this.coders, value);
        };
        TupleCoder.prototype.decode = function (reader) {
            return reader.coerce(this.name, (0, array_1$1.unpack)(reader, this.coders));
        };
        return TupleCoder;
    }(abstract_coder_1$1.Coder));
    tuple.TupleCoder = TupleCoder;

    Object.defineProperty(abiCoder, "__esModule", { value: true });
    abiCoder.defaultAbiCoder = abiCoder.AbiCoder = void 0;
    // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
    var bytes_1$r = lib$s;
    var properties_1$m = lib$q;
    var logger_1$v = lib$r;
    var _version_1$v = _version$l;
    var logger$v = new logger_1$v.Logger(_version_1$v.version);
    var abstract_coder_1 = abstractCoder;
    var address_1$7 = address$1;
    var array_1 = array;
    var boolean_1 = boolean;
    var bytes_2 = bytes$1;
    var fixed_bytes_1 = fixedBytes;
    var null_1 = _null;
    var number_1 = number;
    var string_1 = string;
    var tuple_1 = tuple;
    var fragments_1 = fragments;
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var AbiCoder = /** @class */ (function () {
        function AbiCoder(coerceFunc) {
            (0, properties_1$m.defineReadOnly)(this, "coerceFunc", coerceFunc || null);
        }
        AbiCoder.prototype._getCoder = function (param) {
            var _this = this;
            switch (param.baseType) {
                case "address":
                    return new address_1$7.AddressCoder(param.name);
                case "bool":
                    return new boolean_1.BooleanCoder(param.name);
                case "string":
                    return new string_1.StringCoder(param.name);
                case "bytes":
                    return new bytes_2.BytesCoder(param.name);
                case "array":
                    return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                case "tuple":
                    return new tuple_1.TupleCoder((param.components || []).map(function (component) {
                        return _this._getCoder(component);
                    }), param.name);
                case "":
                    return new null_1.NullCoder(param.name);
            }
            // u?int[0-9]*
            var match = param.type.match(paramTypeNumber);
            if (match) {
                var size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    logger$v.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                }
                return new number_1.NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                var size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    logger$v.throwArgumentError("invalid bytes length", "param", param);
                }
                return new fixed_bytes_1.FixedBytesCoder(size, param.name);
            }
            return logger$v.throwArgumentError("invalid type", "type", param.type);
        };
        AbiCoder.prototype._getWordSize = function () { return 32; };
        AbiCoder.prototype._getReader = function (data, allowLoose) {
            return new abstract_coder_1.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        };
        AbiCoder.prototype._getWriter = function () {
            return new abstract_coder_1.Writer(this._getWordSize());
        };
        AbiCoder.prototype.getDefaultValue = function (types) {
            var _this = this;
            var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
            var coder = new tuple_1.TupleCoder(coders, "_");
            return coder.defaultValue();
        };
        AbiCoder.prototype.encode = function (types, values) {
            var _this = this;
            if (types.length !== values.length) {
                logger$v.throwError("types/values length mismatch", logger_1$v.Logger.errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
            var coder = (new tuple_1.TupleCoder(coders, "_"));
            var writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
        };
        AbiCoder.prototype.decode = function (types, data, loose) {
            var _this = this;
            var coders = types.map(function (type) { return _this._getCoder(fragments_1.ParamType.from(type)); });
            var coder = new tuple_1.TupleCoder(coders, "_");
            return coder.decode(this._getReader((0, bytes_1$r.arrayify)(data), loose));
        };
        return AbiCoder;
    }());
    abiCoder.AbiCoder = AbiCoder;
    abiCoder.defaultAbiCoder = new AbiCoder();

    var _interface = {};

    var lib$k = {};

    var id$1 = {};

    Object.defineProperty(id$1, "__esModule", { value: true });
    id$1.id = void 0;
    var keccak256_1$6 = lib$o;
    var strings_1$e = lib$l;
    function id(text) {
        return (0, keccak256_1$6.keccak256)((0, strings_1$e.toUtf8Bytes)(text));
    }
    id$1.id = id;

    var namehash$1 = {};

    var _version$h = {};

    Object.defineProperty(_version$h, "__esModule", { value: true });
    _version$h.version = void 0;
    _version$h.version = "hash/5.7.0";

    var lib$j = {};

    var include = {};

    var lib$i = {};

    var browserBase64 = {};

    Object.defineProperty(browserBase64, "__esModule", { value: true });
    browserBase64.encode = browserBase64.decode = void 0;
    var bytes_1$q = lib$s;
    function decode$2(textData) {
        textData = atob(textData);
        var data = [];
        for (var i = 0; i < textData.length; i++) {
            data.push(textData.charCodeAt(i));
        }
        return (0, bytes_1$q.arrayify)(data);
    }
    browserBase64.decode = decode$2;
    function encode$5(data) {
        data = (0, bytes_1$q.arrayify)(data);
        var textData = "";
        for (var i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
        }
        return btoa(textData);
    }
    browserBase64.encode = encode$5;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.encode = exports.decode = void 0;
    	var base64_1 = browserBase64;
    	Object.defineProperty(exports, "decode", { enumerable: true, get: function () { return base64_1.decode; } });
    	Object.defineProperty(exports, "encode", { enumerable: true, get: function () { return base64_1.encode; } });
    	
    } (lib$i));

    var decoder = {};

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    Object.defineProperty(decoder, "__esModule", { value: true });
    decoder.read_emoji_trie = decoder.read_zero_terminated_array = decoder.read_mapped_map = decoder.read_member_array = decoder.signed = decoder.read_compressed_payload = decoder.read_payload = decoder.decode_arithmetic = void 0;
    // https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js
    function flat(array, depth) {
        if (depth == null) {
            depth = 1;
        }
        var result = [];
        var forEach = result.forEach;
        var flatDeep = function (arr, depth) {
            forEach.call(arr, function (val) {
                if (depth > 0 && Array.isArray(val)) {
                    flatDeep(val, depth - 1);
                }
                else {
                    result.push(val);
                }
            });
        };
        flatDeep(array, depth);
        return result;
    }
    function fromEntries(array) {
        var result = {};
        for (var i = 0; i < array.length; i++) {
            var value = array[i];
            result[value[0]] = value[1];
        }
        return result;
    }
    function decode_arithmetic(bytes) {
        var pos = 0;
        function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
        // decode the frequency table
        var symbol_count = u16();
        var total = 1;
        var acc = [0, 1]; // first symbol has frequency 1
        for (var i = 1; i < symbol_count; i++) {
            acc.push(total += u16());
        }
        // skip the sized-payload that the last 3 symbols index into
        var skip = u16();
        var pos_payload = pos;
        pos += skip;
        var read_width = 0;
        var read_buffer = 0;
        function read_bit() {
            if (read_width == 0) {
                // this will read beyond end of buffer
                // but (undefined|0) => zero pad
                read_buffer = (read_buffer << 8) | bytes[pos++];
                read_width = 8;
            }
            return (read_buffer >> --read_width) & 1;
        }
        var N = 31;
        var FULL = Math.pow(2, N);
        var HALF = FULL >>> 1;
        var QRTR = HALF >> 1;
        var MASK = FULL - 1;
        // fill register
        var register = 0;
        for (var i = 0; i < N; i++)
            register = (register << 1) | read_bit();
        var symbols = [];
        var low = 0;
        var range = FULL; // treat like a float
        while (true) {
            var value = Math.floor((((register - low + 1) * total) - 1) / range);
            var start = 0;
            var end = symbol_count;
            while (end - start > 1) { // binary search
                var mid = (start + end) >>> 1;
                if (value < acc[mid]) {
                    end = mid;
                }
                else {
                    start = mid;
                }
            }
            if (start == 0)
                break; // first symbol is end mark
            symbols.push(start);
            var a = low + Math.floor(range * acc[start] / total);
            var b = low + Math.floor(range * acc[start + 1] / total) - 1;
            while (((a ^ b) & HALF) == 0) {
                register = (register << 1) & MASK | read_bit();
                a = (a << 1) & MASK;
                b = (b << 1) & MASK | 1;
            }
            while (a & ~b & QRTR) {
                register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
                a = (a << 1) ^ HALF;
                b = ((b ^ HALF) << 1) | HALF | 1;
            }
            low = a;
            range = 1 + b - a;
        }
        var offset = symbol_count - 4;
        return symbols.map(function (x) {
            switch (x - offset) {
                case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
                case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
                case 1: return offset + bytes[pos_payload++];
                default: return x - 1;
            }
        });
    }
    decoder.decode_arithmetic = decode_arithmetic;
    // returns an iterator which returns the next symbol
    function read_payload(v) {
        var pos = 0;
        return function () { return v[pos++]; };
    }
    decoder.read_payload = read_payload;
    function read_compressed_payload(bytes) {
        return read_payload(decode_arithmetic(bytes));
    }
    decoder.read_compressed_payload = read_compressed_payload;
    // eg. [0,1,2,3...] => [0,-1,1,-2,...]
    function signed(i) {
        return (i & 1) ? (~i >> 1) : (i >> 1);
    }
    decoder.signed = signed;
    function read_counts(n, next) {
        var v = Array(n);
        for (var i = 0; i < n; i++)
            v[i] = 1 + next();
        return v;
    }
    function read_ascending(n, next) {
        var v = Array(n);
        for (var i = 0, x = -1; i < n; i++)
            v[i] = x += 1 + next();
        return v;
    }
    function read_deltas(n, next) {
        var v = Array(n);
        for (var i = 0, x = 0; i < n; i++)
            v[i] = x += signed(next());
        return v;
    }
    function read_member_array(next, lookup) {
        var v = read_ascending(next(), next);
        var n = next();
        var vX = read_ascending(n, next);
        var vN = read_counts(n, next);
        for (var i = 0; i < n; i++) {
            for (var j = 0; j < vN[i]; j++) {
                v.push(vX[i] + j);
            }
        }
        return lookup ? v.map(function (x) { return lookup[x]; }) : v;
    }
    decoder.read_member_array = read_member_array;
    // returns array of 
    // [x, ys] => single replacement rule
    // [x, ys, n, dx, dx] => linear map
    function read_mapped_map(next) {
        var ret = [];
        while (true) {
            var w = next();
            if (w == 0)
                break;
            ret.push(read_linear_table(w, next));
        }
        while (true) {
            var w = next() - 1;
            if (w < 0)
                break;
            ret.push(read_replacement_table(w, next));
        }
        return fromEntries(flat(ret));
    }
    decoder.read_mapped_map = read_mapped_map;
    function read_zero_terminated_array(next) {
        var v = [];
        while (true) {
            var i = next();
            if (i == 0)
                break;
            v.push(i);
        }
        return v;
    }
    decoder.read_zero_terminated_array = read_zero_terminated_array;
    function read_transposed(n, w, next) {
        var m = Array(n).fill(undefined).map(function () { return []; });
        for (var i = 0; i < w; i++) {
            read_deltas(n, next).forEach(function (x, j) { return m[j].push(x); });
        }
        return m;
    }
    function read_linear_table(w, next) {
        var dx = 1 + next();
        var dy = next();
        var vN = read_zero_terminated_array(next);
        var m = read_transposed(vN.length, 1 + w, next);
        return flat(m.map(function (v, i) {
            var x = v[0], ys = v.slice(1);
            //let [x, ...ys] = v;
            //return Array(vN[i]).fill().map((_, j) => {
            return Array(vN[i]).fill(undefined).map(function (_, j) {
                var j_dy = j * dy;
                return [x + j * dx, ys.map(function (y) { return y + j_dy; })];
            });
        }));
    }
    function read_replacement_table(w, next) {
        var n = 1 + next();
        var m = read_transposed(n, 1 + w, next);
        return m.map(function (v) { return [v[0], v.slice(1)]; });
    }
    function read_emoji_trie(next) {
        var sorted = read_member_array(next).sort(function (a, b) { return a - b; });
        return read();
        function read() {
            var branches = [];
            while (true) {
                var keys = read_member_array(next, sorted);
                if (keys.length == 0)
                    break;
                branches.push({ set: new Set(keys), node: read() });
            }
            branches.sort(function (a, b) { return b.set.size - a.set.size; }); // sort by likelihood
            var temp = next();
            var valid = temp % 3;
            temp = (temp / 3) | 0;
            var fe0f = !!(temp & 1);
            temp >>= 1;
            var save = temp == 1;
            var check = temp == 2;
            return { branches: branches, valid: valid, fe0f: fe0f, save: save, check: check };
        }
    }
    decoder.read_emoji_trie = read_emoji_trie;

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    Object.defineProperty(include, "__esModule", { value: true });
    include.getData = void 0;
    var base64_1$2 = lib$i;
    var decoder_js_1$1 = decoder;
    function getData() {
        return (0, decoder_js_1$1.read_compressed_payload)((0, base64_1$2.decode)(''));
    }
    include.getData = getData;

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    Object.defineProperty(lib$j, "__esModule", { value: true });
    lib$j.ens_normalize = lib$j.ens_normalize_post_check = void 0;
    var strings_1$d = lib$l;
    var include_js_1 = include;
    var r$5 = (0, include_js_1.getData)();
    var decoder_js_1 = decoder;
    // @TODO: This should be lazily loaded
    var VALID = new Set((0, decoder_js_1.read_member_array)(r$5));
    var IGNORED = new Set((0, decoder_js_1.read_member_array)(r$5));
    var MAPPED = (0, decoder_js_1.read_mapped_map)(r$5);
    var EMOJI_ROOT = (0, decoder_js_1.read_emoji_trie)(r$5);
    //const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));
    //const STOP = 0x2E;
    var HYPHEN = 0x2D;
    var UNDERSCORE = 0x5F;
    function explode_cp(name) {
        return (0, strings_1$d.toUtf8CodePoints)(name);
    }
    function filter_fe0f(cps) {
        return cps.filter(function (cp) { return cp != 0xFE0F; });
    }
    function ens_normalize_post_check(name) {
        for (var _i = 0, _a = name.split('.'); _i < _a.length; _i++) {
            var label = _a[_i];
            var cps = explode_cp(label);
            try {
                for (var i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {
                    if (cps[i] !== UNDERSCORE) {
                        throw new Error("underscore only allowed at start");
                    }
                }
                if (cps.length >= 4 && cps.every(function (cp) { return cp < 0x80; }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
                    throw new Error("invalid label extension");
                }
            }
            catch (err) {
                throw new Error("Invalid label \"" + label + "\": " + err.message);
            }
        }
        return name;
    }
    lib$j.ens_normalize_post_check = ens_normalize_post_check;
    function ens_normalize(name) {
        return ens_normalize_post_check(normalize(name, filter_fe0f));
    }
    lib$j.ens_normalize = ens_normalize;
    function normalize(name, emoji_filter) {
        var input = explode_cp(name).reverse(); // flip for pop
        var output = [];
        while (input.length) {
            var emoji = consume_emoji_reversed(input);
            if (emoji) {
                output.push.apply(output, emoji_filter(emoji));
                continue;
            }
            var cp = input.pop();
            if (VALID.has(cp)) {
                output.push(cp);
                continue;
            }
            if (IGNORED.has(cp)) {
                continue;
            }
            var cps = MAPPED[cp];
            if (cps) {
                output.push.apply(output, cps);
                continue;
            }
            throw new Error("Disallowed codepoint: 0x" + cp.toString(16).toUpperCase());
        }
        return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));
    }
    function nfc(s) {
        return s.normalize('NFC');
    }
    function consume_emoji_reversed(cps, eaten) {
        var _a;
        var node = EMOJI_ROOT;
        var emoji;
        var saved;
        var stack = [];
        var pos = cps.length;
        if (eaten)
            eaten.length = 0; // clear input buffer (if needed)
        var _loop_1 = function () {
            var cp = cps[--pos];
            node = (_a = node.branches.find(function (x) { return x.set.has(cp); })) === null || _a === void 0 ? void 0 : _a.node;
            if (!node)
                return "break";
            if (node.save) { // remember
                saved = cp;
            }
            else if (node.check) { // check exclusion
                if (cp === saved)
                    return "break";
            }
            stack.push(cp);
            if (node.fe0f) {
                stack.push(0xFE0F);
                if (pos > 0 && cps[pos - 1] == 0xFE0F)
                    pos--; // consume optional FE0F
            }
            if (node.valid) { // this is a valid emoji (so far)
                emoji = stack.slice(); // copy stack
                if (node.valid == 2)
                    emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)
                if (eaten)
                    eaten.push.apply(eaten, cps.slice(pos).reverse()); // copy input (if needed)
                cps.length = pos; // truncate
            }
        };
        while (pos) {
            var state_1 = _loop_1();
            if (state_1 === "break")
                break;
        }
        return emoji;
    }

    Object.defineProperty(namehash$1, "__esModule", { value: true });
    namehash$1.dnsEncode = namehash$1.namehash = namehash$1.isValidName = namehash$1.ensNormalize = void 0;
    var bytes_1$p = lib$s;
    var strings_1$c = lib$l;
    var keccak256_1$5 = lib$o;
    var logger_1$u = lib$r;
    var _version_1$u = _version$h;
    var logger$u = new logger_1$u.Logger(_version_1$u.version);
    var lib_1 = lib$j;
    var Zeros$1 = new Uint8Array(32);
    Zeros$1.fill(0);
    function checkComponent(comp) {
        if (comp.length === 0) {
            throw new Error("invalid ENS name; empty component");
        }
        return comp;
    }
    function ensNameSplit(name) {
        var bytes = (0, strings_1$c.toUtf8Bytes)((0, lib_1.ens_normalize)(name));
        var comps = [];
        if (name.length === 0) {
            return comps;
        }
        var last = 0;
        for (var i = 0; i < bytes.length; i++) {
            var d = bytes[i];
            // A separator (i.e. "."); copy this component
            if (d === 0x2e) {
                comps.push(checkComponent(bytes.slice(last, i)));
                last = i + 1;
            }
        }
        // There was a stray separator at the end of the name
        if (last >= bytes.length) {
            throw new Error("invalid ENS name; empty component");
        }
        comps.push(checkComponent(bytes.slice(last)));
        return comps;
    }
    function ensNormalize(name) {
        return ensNameSplit(name).map(function (comp) { return (0, strings_1$c.toUtf8String)(comp); }).join(".");
    }
    namehash$1.ensNormalize = ensNormalize;
    function isValidName(name) {
        try {
            return (ensNameSplit(name).length !== 0);
        }
        catch (error) { }
        return false;
    }
    namehash$1.isValidName = isValidName;
    function namehash(name) {
        /* istanbul ignore if */
        if (typeof (name) !== "string") {
            logger$u.throwArgumentError("invalid ENS name; not a string", "name", name);
        }
        var result = Zeros$1;
        var comps = ensNameSplit(name);
        while (comps.length) {
            result = (0, keccak256_1$5.keccak256)((0, bytes_1$p.concat)([result, (0, keccak256_1$5.keccak256)(comps.pop())]));
        }
        return (0, bytes_1$p.hexlify)(result);
    }
    namehash$1.namehash = namehash;
    function dnsEncode(name) {
        return (0, bytes_1$p.hexlify)((0, bytes_1$p.concat)(ensNameSplit(name).map(function (comp) {
            // DNS does not allow components over 63 bytes in length
            if (comp.length > 63) {
                throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
            }
            var bytes = new Uint8Array(comp.length + 1);
            bytes.set(comp, 1);
            bytes[0] = bytes.length - 1;
            return bytes;
        }))) + "00";
    }
    namehash$1.dnsEncode = dnsEncode;

    var message = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.hashMessage = exports.messagePrefix = void 0;
    	var bytes_1 = lib$s;
    	var keccak256_1 = lib$o;
    	var strings_1 = lib$l;
    	exports.messagePrefix = "\x19Ethereum Signed Message:\n";
    	function hashMessage(message) {
    	    if (typeof (message) === "string") {
    	        message = (0, strings_1.toUtf8Bytes)(message);
    	    }
    	    return (0, keccak256_1.keccak256)((0, bytes_1.concat)([
    	        (0, strings_1.toUtf8Bytes)(exports.messagePrefix),
    	        (0, strings_1.toUtf8Bytes)(String(message.length)),
    	        message
    	    ]));
    	}
    	exports.hashMessage = hashMessage;
    	
    } (message));

    var typedData = {};

    var __awaiter$e = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$e = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(typedData, "__esModule", { value: true });
    typedData.TypedDataEncoder = void 0;
    var address_1$6 = lib$p;
    var bignumber_1$a = lib$t;
    var bytes_1$o = lib$s;
    var keccak256_1$4 = lib$o;
    var properties_1$l = lib$q;
    var logger_1$t = lib$r;
    var _version_1$t = _version$h;
    var logger$t = new logger_1$t.Logger(_version_1$t.version);
    var id_1 = id$1;
    var padding = new Uint8Array(32);
    padding.fill(0);
    var NegativeOne = bignumber_1$a.BigNumber.from(-1);
    var Zero = bignumber_1$a.BigNumber.from(0);
    var One = bignumber_1$a.BigNumber.from(1);
    var MaxUint256 = bignumber_1$a.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
        var bytes = (0, bytes_1$o.arrayify)(value);
        var padOffset = bytes.length % 32;
        if (padOffset) {
            return (0, bytes_1$o.hexConcat)([bytes, padding.slice(padOffset)]);
        }
        return (0, bytes_1$o.hexlify)(bytes);
    }
    var hexTrue = (0, bytes_1$o.hexZeroPad)(One.toHexString(), 32);
    var hexFalse = (0, bytes_1$o.hexZeroPad)(Zero.toHexString(), 32);
    var domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
    };
    var domainFieldNames = [
        "name", "version", "chainId", "verifyingContract", "salt"
    ];
    function checkString(key) {
        return function (value) {
            if (typeof (value) !== "string") {
                logger$t.throwArgumentError("invalid domain value for " + JSON.stringify(key), "domain." + key, value);
            }
            return value;
        };
    }
    var domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (value) {
            try {
                return bignumber_1$a.BigNumber.from(value).toString();
            }
            catch (error) { }
            return logger$t.throwArgumentError("invalid domain value for \"chainId\"", "domain.chainId", value);
        },
        verifyingContract: function (value) {
            try {
                return (0, address_1$6.getAddress)(value).toLowerCase();
            }
            catch (error) { }
            return logger$t.throwArgumentError("invalid domain value \"verifyingContract\"", "domain.verifyingContract", value);
        },
        salt: function (value) {
            try {
                var bytes = (0, bytes_1$o.arrayify)(value);
                if (bytes.length !== 32) {
                    throw new Error("bad length");
                }
                return (0, bytes_1$o.hexlify)(bytes);
            }
            catch (error) { }
            return logger$t.throwArgumentError("invalid domain value \"salt\"", "domain.salt", value);
        }
    };
    function getBaseEncoder(type) {
        // intXX and uintXX
        {
            var match = type.match(/^(u?)int(\d*)$/);
            if (match) {
                var signed = (match[1] === "");
                var width = parseInt(match[2] || "256");
                if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                    logger$t.throwArgumentError("invalid numeric width", "type", type);
                }
                var boundsUpper_1 = MaxUint256.mask(signed ? (width - 1) : width);
                var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;
                return function (value) {
                    var v = bignumber_1$a.BigNumber.from(value);
                    if (v.lt(boundsLower_1) || v.gt(boundsUpper_1)) {
                        logger$t.throwArgumentError("value out-of-bounds for " + type, "value", value);
                    }
                    return (0, bytes_1$o.hexZeroPad)(v.toTwos(256).toHexString(), 32);
                };
            }
        }
        // bytesXX
        {
            var match = type.match(/^bytes(\d+)$/);
            if (match) {
                var width_1 = parseInt(match[1]);
                if (width_1 === 0 || width_1 > 32 || match[1] !== String(width_1)) {
                    logger$t.throwArgumentError("invalid bytes width", "type", type);
                }
                return function (value) {
                    var bytes = (0, bytes_1$o.arrayify)(value);
                    if (bytes.length !== width_1) {
                        logger$t.throwArgumentError("invalid length for " + type, "value", value);
                    }
                    return hexPadRight(value);
                };
            }
        }
        switch (type) {
            case "address": return function (value) {
                return (0, bytes_1$o.hexZeroPad)((0, address_1$6.getAddress)(value), 32);
            };
            case "bool": return function (value) {
                return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
                return (0, keccak256_1$4.keccak256)(value);
            };
            case "string": return function (value) {
                return (0, id_1.id)(value);
            };
        }
        return null;
    }
    function encodeType(name, fields) {
        return name + "(" + fields.map(function (_a) {
            var name = _a.name, type = _a.type;
            return (type + " " + name);
        }).join(",") + ")";
    }
    var TypedDataEncoder = /** @class */ (function () {
        function TypedDataEncoder(types) {
            (0, properties_1$l.defineReadOnly)(this, "types", Object.freeze((0, properties_1$l.deepCopy)(types)));
            (0, properties_1$l.defineReadOnly)(this, "_encoderCache", {});
            (0, properties_1$l.defineReadOnly)(this, "_types", {});
            // Link struct types to their direct child structs
            var links = {};
            // Link structs to structs which contain them as a child
            var parents = {};
            // Link all subtypes within a given struct
            var subtypes = {};
            Object.keys(types).forEach(function (type) {
                links[type] = {};
                parents[type] = [];
                subtypes[type] = {};
            });
            var _loop_1 = function (name_1) {
                var uniqueNames = {};
                types[name_1].forEach(function (field) {
                    // Check each field has a unique name
                    if (uniqueNames[field.name]) {
                        logger$t.throwArgumentError("duplicate variable name " + JSON.stringify(field.name) + " in " + JSON.stringify(name_1), "types", types);
                    }
                    uniqueNames[field.name] = true;
                    // Get the base type (drop any array specifiers)
                    var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                    if (baseType === name_1) {
                        logger$t.throwArgumentError("circular type reference to " + JSON.stringify(baseType), "types", types);
                    }
                    // Is this a base encoding type?
                    var encoder = getBaseEncoder(baseType);
                    if (encoder) {
                        return;
                    }
                    if (!parents[baseType]) {
                        logger$t.throwArgumentError("unknown type " + JSON.stringify(baseType), "types", types);
                    }
                    // Add linkage
                    parents[baseType].push(name_1);
                    links[name_1][baseType] = true;
                });
            };
            for (var name_1 in types) {
                _loop_1(name_1);
            }
            // Deduce the primary type
            var primaryTypes = Object.keys(parents).filter(function (n) { return (parents[n].length === 0); });
            if (primaryTypes.length === 0) {
                logger$t.throwArgumentError("missing primary type", "types", types);
            }
            else if (primaryTypes.length > 1) {
                logger$t.throwArgumentError("ambiguous primary types or unused types: " + primaryTypes.map(function (t) { return (JSON.stringify(t)); }).join(", "), "types", types);
            }
            (0, properties_1$l.defineReadOnly)(this, "primaryType", primaryTypes[0]);
            // Check for circular type references
            function checkCircular(type, found) {
                if (found[type]) {
                    logger$t.throwArgumentError("circular type reference to " + JSON.stringify(type), "types", types);
                }
                found[type] = true;
                Object.keys(links[type]).forEach(function (child) {
                    if (!parents[child]) {
                        return;
                    }
                    // Recursively check children
                    checkCircular(child, found);
                    // Mark all ancestors as having this decendant
                    Object.keys(found).forEach(function (subtype) {
                        subtypes[subtype][child] = true;
                    });
                });
                delete found[type];
            }
            checkCircular(this.primaryType, {});
            // Compute each fully describe type
            for (var name_2 in subtypes) {
                var st = Object.keys(subtypes[name_2]);
                st.sort();
                this._types[name_2] = encodeType(name_2, types[name_2]) + st.map(function (t) { return encodeType(t, types[t]); }).join("");
            }
        }
        TypedDataEncoder.prototype.getEncoder = function (type) {
            var encoder = this._encoderCache[type];
            if (!encoder) {
                encoder = this._encoderCache[type] = this._getEncoder(type);
            }
            return encoder;
        };
        TypedDataEncoder.prototype._getEncoder = function (type) {
            var _this = this;
            // Basic encoder type (address, bool, uint256, etc)
            {
                var encoder = getBaseEncoder(type);
                if (encoder) {
                    return encoder;
                }
            }
            // Array
            var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                var subtype_1 = match[1];
                var subEncoder_1 = this.getEncoder(subtype_1);
                var length_1 = parseInt(match[3]);
                return function (value) {
                    if (length_1 >= 0 && value.length !== length_1) {
                        logger$t.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                    }
                    var result = value.map(subEncoder_1);
                    if (_this._types[subtype_1]) {
                        result = result.map(keccak256_1$4.keccak256);
                    }
                    return (0, keccak256_1$4.keccak256)((0, bytes_1$o.hexConcat)(result));
                };
            }
            // Struct
            var fields = this.types[type];
            if (fields) {
                var encodedType_1 = (0, id_1.id)(this._types[type]);
                return function (value) {
                    var values = fields.map(function (_a) {
                        var name = _a.name, type = _a.type;
                        var result = _this.getEncoder(type)(value[name]);
                        if (_this._types[type]) {
                            return (0, keccak256_1$4.keccak256)(result);
                        }
                        return result;
                    });
                    values.unshift(encodedType_1);
                    return (0, bytes_1$o.hexConcat)(values);
                };
            }
            return logger$t.throwArgumentError("unknown type: " + type, "type", type);
        };
        TypedDataEncoder.prototype.encodeType = function (name) {
            var result = this._types[name];
            if (!result) {
                logger$t.throwArgumentError("unknown type: " + JSON.stringify(name), "name", name);
            }
            return result;
        };
        TypedDataEncoder.prototype.encodeData = function (type, value) {
            return this.getEncoder(type)(value);
        };
        TypedDataEncoder.prototype.hashStruct = function (name, value) {
            return (0, keccak256_1$4.keccak256)(this.encodeData(name, value));
        };
        TypedDataEncoder.prototype.encode = function (value) {
            return this.encodeData(this.primaryType, value);
        };
        TypedDataEncoder.prototype.hash = function (value) {
            return this.hashStruct(this.primaryType, value);
        };
        TypedDataEncoder.prototype._visit = function (type, value, callback) {
            var _this = this;
            // Basic encoder type (address, bool, uint256, etc)
            {
                var encoder = getBaseEncoder(type);
                if (encoder) {
                    return callback(type, value);
                }
            }
            // Array
            var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                var subtype_2 = match[1];
                var length_2 = parseInt(match[3]);
                if (length_2 >= 0 && value.length !== length_2) {
                    logger$t.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                return value.map(function (v) { return _this._visit(subtype_2, v, callback); });
            }
            // Struct
            var fields = this.types[type];
            if (fields) {
                return fields.reduce(function (accum, _a) {
                    var name = _a.name, type = _a.type;
                    accum[name] = _this._visit(type, value[name], callback);
                    return accum;
                }, {});
            }
            return logger$t.throwArgumentError("unknown type: " + type, "type", type);
        };
        TypedDataEncoder.prototype.visit = function (value, callback) {
            return this._visit(this.primaryType, value, callback);
        };
        TypedDataEncoder.from = function (types) {
            return new TypedDataEncoder(types);
        };
        TypedDataEncoder.getPrimaryType = function (types) {
            return TypedDataEncoder.from(types).primaryType;
        };
        TypedDataEncoder.hashStruct = function (name, types, value) {
            return TypedDataEncoder.from(types).hashStruct(name, value);
        };
        TypedDataEncoder.hashDomain = function (domain) {
            var domainFields = [];
            for (var name_3 in domain) {
                var type = domainFieldTypes[name_3];
                if (!type) {
                    logger$t.throwArgumentError("invalid typed-data domain key: " + JSON.stringify(name_3), "domain", domain);
                }
                domainFields.push({ name: name_3, type: type });
            }
            domainFields.sort(function (a, b) {
                return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        };
        TypedDataEncoder.encode = function (domain, types, value) {
            return (0, bytes_1$o.hexConcat)([
                "0x1901",
                TypedDataEncoder.hashDomain(domain),
                TypedDataEncoder.from(types).hash(value)
            ]);
        };
        TypedDataEncoder.hash = function (domain, types, value) {
            return (0, keccak256_1$4.keccak256)(TypedDataEncoder.encode(domain, types, value));
        };
        // Replaces all address types with ENS names with their looked up address
        TypedDataEncoder.resolveNames = function (domain, types, value, resolveName) {
            return __awaiter$e(this, void 0, void 0, function () {
                var ensCache, encoder, _a, _b, _i, name_4, _c, _d;
                return __generator$e(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            // Make a copy to isolate it from the object passed in
                            domain = (0, properties_1$l.shallowCopy)(domain);
                            ensCache = {};
                            // Do we need to look up the domain's verifyingContract?
                            if (domain.verifyingContract && !(0, bytes_1$o.isHexString)(domain.verifyingContract, 20)) {
                                ensCache[domain.verifyingContract] = "0x";
                            }
                            encoder = TypedDataEncoder.from(types);
                            // Get a list of all the addresses
                            encoder.visit(value, function (type, value) {
                                if (type === "address" && !(0, bytes_1$o.isHexString)(value, 20)) {
                                    ensCache[value] = "0x";
                                }
                                return value;
                            });
                            _a = [];
                            for (_b in ensCache)
                                _a.push(_b);
                            _i = 0;
                            _e.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            name_4 = _a[_i];
                            _c = ensCache;
                            _d = name_4;
                            return [4 /*yield*/, resolveName(name_4)];
                        case 2:
                            _c[_d] = _e.sent();
                            _e.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            // Replace the domain verifyingContract if needed
                            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                                domain.verifyingContract = ensCache[domain.verifyingContract];
                            }
                            // Replace all ENS names with their address
                            value = encoder.visit(value, function (type, value) {
                                if (type === "address" && ensCache[value]) {
                                    return ensCache[value];
                                }
                                return value;
                            });
                            return [2 /*return*/, { domain: domain, value: value }];
                    }
                });
            });
        };
        TypedDataEncoder.getPayload = function (domain, types, value) {
            // Validate the domain fields
            TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            var domainValues = {};
            var domainTypes = [];
            domainFieldNames.forEach(function (name) {
                var value = domain[name];
                if (value == null) {
                    return;
                }
                domainValues[name] = domainChecks[name](value);
                domainTypes.push({ name: name, type: domainFieldTypes[name] });
            });
            var encoder = TypedDataEncoder.from(types);
            var typesWithDomain = (0, properties_1$l.shallowCopy)(types);
            if (typesWithDomain.EIP712Domain) {
                logger$t.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
            }
            else {
                typesWithDomain.EIP712Domain = domainTypes;
            }
            // Validate the data structures and types
            encoder.encode(value);
            return {
                types: typesWithDomain,
                domain: domainValues,
                primaryType: encoder.primaryType,
                message: encoder.visit(value, function (type, value) {
                    // bytes
                    if (type.match(/^bytes(\d*)/)) {
                        return (0, bytes_1$o.hexlify)((0, bytes_1$o.arrayify)(value));
                    }
                    // uint or int
                    if (type.match(/^u?int/)) {
                        return bignumber_1$a.BigNumber.from(value).toString();
                    }
                    switch (type) {
                        case "address":
                            return value.toLowerCase();
                        case "bool":
                            return !!value;
                        case "string":
                            if (typeof (value) !== "string") {
                                logger$t.throwArgumentError("invalid string", "value", value);
                            }
                            return value;
                    }
                    return logger$t.throwArgumentError("unsupported type", "type", type);
                })
            };
        };
        return TypedDataEncoder;
    }());
    typedData.TypedDataEncoder = TypedDataEncoder;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports._TypedDataEncoder = exports.hashMessage = exports.messagePrefix = exports.ensNormalize = exports.isValidName = exports.namehash = exports.dnsEncode = exports.id = void 0;
    	var id_1 = id$1;
    	Object.defineProperty(exports, "id", { enumerable: true, get: function () { return id_1.id; } });
    	var namehash_1 = namehash$1;
    	Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return namehash_1.dnsEncode; } });
    	Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return namehash_1.isValidName; } });
    	Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return namehash_1.namehash; } });
    	var message_1 = message;
    	Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return message_1.hashMessage; } });
    	Object.defineProperty(exports, "messagePrefix", { enumerable: true, get: function () { return message_1.messagePrefix; } });
    	var namehash_2 = namehash$1;
    	Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function () { return namehash_2.ensNormalize; } });
    	var typed_data_1 = typedData;
    	Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return typed_data_1.TypedDataEncoder; } });
    	
    } (lib$k));

    (function (exports) {
    	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    	    var extendStatics = function (d, b) {
    	        extendStatics = Object.setPrototypeOf ||
    	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    	        return extendStatics(d, b);
    	    };
    	    return function (d, b) {
    	        if (typeof b !== "function" && b !== null)
    	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;
    	var address_1 = lib$p;
    	var bignumber_1 = lib$t;
    	var bytes_1 = lib$s;
    	var hash_1 = lib$k;
    	var keccak256_1 = lib$o;
    	var properties_1 = lib$q;
    	var abi_coder_1 = abiCoder;
    	var abstract_coder_1 = abstractCoder;
    	Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abstract_coder_1.checkResultErrors; } });
    	var fragments_1 = fragments;
    	var logger_1 = lib$r;
    	var _version_1 = _version$l;
    	var logger = new logger_1.Logger(_version_1.version);
    	var LogDescription = /** @class */ (function (_super) {
    	    __extends(LogDescription, _super);
    	    function LogDescription() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return LogDescription;
    	}(properties_1.Description));
    	exports.LogDescription = LogDescription;
    	var TransactionDescription = /** @class */ (function (_super) {
    	    __extends(TransactionDescription, _super);
    	    function TransactionDescription() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return TransactionDescription;
    	}(properties_1.Description));
    	exports.TransactionDescription = TransactionDescription;
    	var ErrorDescription = /** @class */ (function (_super) {
    	    __extends(ErrorDescription, _super);
    	    function ErrorDescription() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    return ErrorDescription;
    	}(properties_1.Description));
    	exports.ErrorDescription = ErrorDescription;
    	var Indexed = /** @class */ (function (_super) {
    	    __extends(Indexed, _super);
    	    function Indexed() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    Indexed.isIndexed = function (value) {
    	        return !!(value && value._isIndexed);
    	    };
    	    return Indexed;
    	}(properties_1.Description));
    	exports.Indexed = Indexed;
    	var BuiltinErrors = {
    	    "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
    	    "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    	};
    	function wrapAccessError(property, error) {
    	    var wrap = new Error("deferred error during ABI decoding triggered accessing " + property);
    	    wrap.error = error;
    	    return wrap;
    	}
    	/*
    	function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
    	    params.reduce((accum, param) => {
    	        if (param.name) {
    	            if (accum[param.name]) {
    	                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
    	            }
    	            accum[param.name] = true;
    	        }
    	        return accum;
    	    }, <{ [ name: string ]: boolean }>{ });
    	}
    	*/
    	var Interface = /** @class */ (function () {
    	    function Interface(fragments) {
    	        var _newTarget = this.constructor;
    	        var _this = this;
    	        var abi = [];
    	        if (typeof (fragments) === "string") {
    	            abi = JSON.parse(fragments);
    	        }
    	        else {
    	            abi = fragments;
    	        }
    	        (0, properties_1.defineReadOnly)(this, "fragments", abi.map(function (fragment) {
    	            return fragments_1.Fragment.from(fragment);
    	        }).filter(function (fragment) { return (fragment != null); }));
    	        (0, properties_1.defineReadOnly)(this, "_abiCoder", (0, properties_1.getStatic)(_newTarget, "getAbiCoder")());
    	        (0, properties_1.defineReadOnly)(this, "functions", {});
    	        (0, properties_1.defineReadOnly)(this, "errors", {});
    	        (0, properties_1.defineReadOnly)(this, "events", {});
    	        (0, properties_1.defineReadOnly)(this, "structs", {});
    	        // Add all fragments by their signature
    	        this.fragments.forEach(function (fragment) {
    	            var bucket = null;
    	            switch (fragment.type) {
    	                case "constructor":
    	                    if (_this.deploy) {
    	                        logger.warn("duplicate definition - constructor");
    	                        return;
    	                    }
    	                    //checkNames(fragment, "input", fragment.inputs);
    	                    (0, properties_1.defineReadOnly)(_this, "deploy", fragment);
    	                    return;
    	                case "function":
    	                    //checkNames(fragment, "input", fragment.inputs);
    	                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
    	                    bucket = _this.functions;
    	                    break;
    	                case "event":
    	                    //checkNames(fragment, "input", fragment.inputs);
    	                    bucket = _this.events;
    	                    break;
    	                case "error":
    	                    bucket = _this.errors;
    	                    break;
    	                default:
    	                    return;
    	            }
    	            var signature = fragment.format();
    	            if (bucket[signature]) {
    	                logger.warn("duplicate definition - " + signature);
    	                return;
    	            }
    	            bucket[signature] = fragment;
    	        });
    	        // If we do not have a constructor add a default
    	        if (!this.deploy) {
    	            (0, properties_1.defineReadOnly)(this, "deploy", fragments_1.ConstructorFragment.from({
    	                payable: false,
    	                type: "constructor"
    	            }));
    	        }
    	        (0, properties_1.defineReadOnly)(this, "_isInterface", true);
    	    }
    	    Interface.prototype.format = function (format) {
    	        if (!format) {
    	            format = fragments_1.FormatTypes.full;
    	        }
    	        if (format === fragments_1.FormatTypes.sighash) {
    	            logger.throwArgumentError("interface does not support formatting sighash", "format", format);
    	        }
    	        var abi = this.fragments.map(function (fragment) { return fragment.format(format); });
    	        // We need to re-bundle the JSON fragments a bit
    	        if (format === fragments_1.FormatTypes.json) {
    	            return JSON.stringify(abi.map(function (j) { return JSON.parse(j); }));
    	        }
    	        return abi;
    	    };
    	    // Sub-classes can override these to handle other blockchains
    	    Interface.getAbiCoder = function () {
    	        return abi_coder_1.defaultAbiCoder;
    	    };
    	    Interface.getAddress = function (address) {
    	        return (0, address_1.getAddress)(address);
    	    };
    	    Interface.getSighash = function (fragment) {
    	        return (0, bytes_1.hexDataSlice)((0, hash_1.id)(fragment.format()), 0, 4);
    	    };
    	    Interface.getEventTopic = function (eventFragment) {
    	        return (0, hash_1.id)(eventFragment.format());
    	    };
    	    // Find a function definition by any means necessary (unless it is ambiguous)
    	    Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {
    	        if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
    	            for (var name_1 in this.functions) {
    	                if (nameOrSignatureOrSighash === this.getSighash(name_1)) {
    	                    return this.functions[name_1];
    	                }
    	            }
    	            logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
    	        }
    	        // It is a bare name, look up the function (will return null if ambiguous)
    	        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
    	            var name_2 = nameOrSignatureOrSighash.trim();
    	            var matching = Object.keys(this.functions).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_2); });
    	            if (matching.length === 0) {
    	                logger.throwArgumentError("no matching function", "name", name_2);
    	            }
    	            else if (matching.length > 1) {
    	                logger.throwArgumentError("multiple matching functions", "name", name_2);
    	            }
    	            return this.functions[matching[0]];
    	        }
    	        // Normalize the signature and lookup the function
    	        var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    	        if (!result) {
    	            logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
    	        }
    	        return result;
    	    };
    	    // Find an event definition by any means necessary (unless it is ambiguous)
    	    Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {
    	        if ((0, bytes_1.isHexString)(nameOrSignatureOrTopic)) {
    	            var topichash = nameOrSignatureOrTopic.toLowerCase();
    	            for (var name_3 in this.events) {
    	                if (topichash === this.getEventTopic(name_3)) {
    	                    return this.events[name_3];
    	                }
    	            }
    	            logger.throwArgumentError("no matching event", "topichash", topichash);
    	        }
    	        // It is a bare name, look up the function (will return null if ambiguous)
    	        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
    	            var name_4 = nameOrSignatureOrTopic.trim();
    	            var matching = Object.keys(this.events).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_4); });
    	            if (matching.length === 0) {
    	                logger.throwArgumentError("no matching event", "name", name_4);
    	            }
    	            else if (matching.length > 1) {
    	                logger.throwArgumentError("multiple matching events", "name", name_4);
    	            }
    	            return this.events[matching[0]];
    	        }
    	        // Normalize the signature and lookup the function
    	        var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];
    	        if (!result) {
    	            logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
    	        }
    	        return result;
    	    };
    	    // Find a function definition by any means necessary (unless it is ambiguous)
    	    Interface.prototype.getError = function (nameOrSignatureOrSighash) {
    	        if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
    	            var getSighash = (0, properties_1.getStatic)(this.constructor, "getSighash");
    	            for (var name_5 in this.errors) {
    	                var error = this.errors[name_5];
    	                if (nameOrSignatureOrSighash === getSighash(error)) {
    	                    return this.errors[name_5];
    	                }
    	            }
    	            logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
    	        }
    	        // It is a bare name, look up the function (will return null if ambiguous)
    	        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
    	            var name_6 = nameOrSignatureOrSighash.trim();
    	            var matching = Object.keys(this.errors).filter(function (f) { return (f.split("(" /* fix:) */)[0] === name_6); });
    	            if (matching.length === 0) {
    	                logger.throwArgumentError("no matching error", "name", name_6);
    	            }
    	            else if (matching.length > 1) {
    	                logger.throwArgumentError("multiple matching errors", "name", name_6);
    	            }
    	            return this.errors[matching[0]];
    	        }
    	        // Normalize the signature and lookup the function
    	        var result = this.errors[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    	        if (!result) {
    	            logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
    	        }
    	        return result;
    	    };
    	    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
    	    Interface.prototype.getSighash = function (fragment) {
    	        if (typeof (fragment) === "string") {
    	            try {
    	                fragment = this.getFunction(fragment);
    	            }
    	            catch (error) {
    	                try {
    	                    fragment = this.getError(fragment);
    	                }
    	                catch (_) {
    	                    throw error;
    	                }
    	            }
    	        }
    	        return (0, properties_1.getStatic)(this.constructor, "getSighash")(fragment);
    	    };
    	    // Get the topic (the bytes32 hash) used by Solidity to identify an event
    	    Interface.prototype.getEventTopic = function (eventFragment) {
    	        if (typeof (eventFragment) === "string") {
    	            eventFragment = this.getEvent(eventFragment);
    	        }
    	        return (0, properties_1.getStatic)(this.constructor, "getEventTopic")(eventFragment);
    	    };
    	    Interface.prototype._decodeParams = function (params, data) {
    	        return this._abiCoder.decode(params, data);
    	    };
    	    Interface.prototype._encodeParams = function (params, values) {
    	        return this._abiCoder.encode(params, values);
    	    };
    	    Interface.prototype.encodeDeploy = function (values) {
    	        return this._encodeParams(this.deploy.inputs, values || []);
    	    };
    	    Interface.prototype.decodeErrorResult = function (fragment, data) {
    	        if (typeof (fragment) === "string") {
    	            fragment = this.getError(fragment);
    	        }
    	        var bytes = (0, bytes_1.arrayify)(data);
    	        if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
    	            logger.throwArgumentError("data signature does not match error " + fragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
    	        }
    	        return this._decodeParams(fragment.inputs, bytes.slice(4));
    	    };
    	    Interface.prototype.encodeErrorResult = function (fragment, values) {
    	        if (typeof (fragment) === "string") {
    	            fragment = this.getError(fragment);
    	        }
    	        return (0, bytes_1.hexlify)((0, bytes_1.concat)([
    	            this.getSighash(fragment),
    	            this._encodeParams(fragment.inputs, values || [])
    	        ]));
    	    };
    	    // Decode the data for a function call (e.g. tx.data)
    	    Interface.prototype.decodeFunctionData = function (functionFragment, data) {
    	        if (typeof (functionFragment) === "string") {
    	            functionFragment = this.getFunction(functionFragment);
    	        }
    	        var bytes = (0, bytes_1.arrayify)(data);
    	        if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
    	            logger.throwArgumentError("data signature does not match function " + functionFragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
    	        }
    	        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
    	    };
    	    // Encode the data for a function call (e.g. tx.data)
    	    Interface.prototype.encodeFunctionData = function (functionFragment, values) {
    	        if (typeof (functionFragment) === "string") {
    	            functionFragment = this.getFunction(functionFragment);
    	        }
    	        return (0, bytes_1.hexlify)((0, bytes_1.concat)([
    	            this.getSighash(functionFragment),
    	            this._encodeParams(functionFragment.inputs, values || [])
    	        ]));
    	    };
    	    // Decode the result from a function call (e.g. from eth_call)
    	    Interface.prototype.decodeFunctionResult = function (functionFragment, data) {
    	        if (typeof (functionFragment) === "string") {
    	            functionFragment = this.getFunction(functionFragment);
    	        }
    	        var bytes = (0, bytes_1.arrayify)(data);
    	        var reason = null;
    	        var message = "";
    	        var errorArgs = null;
    	        var errorName = null;
    	        var errorSignature = null;
    	        switch (bytes.length % this._abiCoder._getWordSize()) {
    	            case 0:
    	                try {
    	                    return this._abiCoder.decode(functionFragment.outputs, bytes);
    	                }
    	                catch (error) { }
    	                break;
    	            case 4: {
    	                var selector = (0, bytes_1.hexlify)(bytes.slice(0, 4));
    	                var builtin = BuiltinErrors[selector];
    	                if (builtin) {
    	                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
    	                    errorName = builtin.name;
    	                    errorSignature = builtin.signature;
    	                    if (builtin.reason) {
    	                        reason = errorArgs[0];
    	                    }
    	                    if (errorName === "Error") {
    	                        message = "; VM Exception while processing transaction: reverted with reason string " + JSON.stringify(errorArgs[0]);
    	                    }
    	                    else if (errorName === "Panic") {
    	                        message = "; VM Exception while processing transaction: reverted with panic code " + errorArgs[0];
    	                    }
    	                }
    	                else {
    	                    try {
    	                        var error = this.getError(selector);
    	                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
    	                        errorName = error.name;
    	                        errorSignature = error.format();
    	                    }
    	                    catch (error) { }
    	                }
    	                break;
    	            }
    	        }
    	        return logger.throwError("call revert exception" + message, logger_1.Logger.errors.CALL_EXCEPTION, {
    	            method: functionFragment.format(),
    	            data: (0, bytes_1.hexlify)(data),
    	            errorArgs: errorArgs,
    	            errorName: errorName,
    	            errorSignature: errorSignature,
    	            reason: reason
    	        });
    	    };
    	    // Encode the result for a function call (e.g. for eth_call)
    	    Interface.prototype.encodeFunctionResult = function (functionFragment, values) {
    	        if (typeof (functionFragment) === "string") {
    	            functionFragment = this.getFunction(functionFragment);
    	        }
    	        return (0, bytes_1.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));
    	    };
    	    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
    	    Interface.prototype.encodeFilterTopics = function (eventFragment, values) {
    	        var _this = this;
    	        if (typeof (eventFragment) === "string") {
    	            eventFragment = this.getEvent(eventFragment);
    	        }
    	        if (values.length > eventFragment.inputs.length) {
    	            logger.throwError("too many arguments for " + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {
    	                argument: "values",
    	                value: values
    	            });
    	        }
    	        var topics = [];
    	        if (!eventFragment.anonymous) {
    	            topics.push(this.getEventTopic(eventFragment));
    	        }
    	        var encodeTopic = function (param, value) {
    	            if (param.type === "string") {
    	                return (0, hash_1.id)(value);
    	            }
    	            else if (param.type === "bytes") {
    	                return (0, keccak256_1.keccak256)((0, bytes_1.hexlify)(value));
    	            }
    	            if (param.type === "bool" && typeof (value) === "boolean") {
    	                value = (value ? "0x01" : "0x00");
    	            }
    	            if (param.type.match(/^u?int/)) {
    	                value = bignumber_1.BigNumber.from(value).toHexString();
    	            }
    	            // Check addresses are valid
    	            if (param.type === "address") {
    	                _this._abiCoder.encode(["address"], [value]);
    	            }
    	            return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);
    	        };
    	        values.forEach(function (value, index) {
    	            var param = eventFragment.inputs[index];
    	            if (!param.indexed) {
    	                if (value != null) {
    	                    logger.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
    	                }
    	                return;
    	            }
    	            if (value == null) {
    	                topics.push(null);
    	            }
    	            else if (param.baseType === "array" || param.baseType === "tuple") {
    	                logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
    	            }
    	            else if (Array.isArray(value)) {
    	                topics.push(value.map(function (value) { return encodeTopic(param, value); }));
    	            }
    	            else {
    	                topics.push(encodeTopic(param, value));
    	            }
    	        });
    	        // Trim off trailing nulls
    	        while (topics.length && topics[topics.length - 1] === null) {
    	            topics.pop();
    	        }
    	        return topics;
    	    };
    	    Interface.prototype.encodeEventLog = function (eventFragment, values) {
    	        var _this = this;
    	        if (typeof (eventFragment) === "string") {
    	            eventFragment = this.getEvent(eventFragment);
    	        }
    	        var topics = [];
    	        var dataTypes = [];
    	        var dataValues = [];
    	        if (!eventFragment.anonymous) {
    	            topics.push(this.getEventTopic(eventFragment));
    	        }
    	        if (values.length !== eventFragment.inputs.length) {
    	            logger.throwArgumentError("event arguments/values mismatch", "values", values);
    	        }
    	        eventFragment.inputs.forEach(function (param, index) {
    	            var value = values[index];
    	            if (param.indexed) {
    	                if (param.type === "string") {
    	                    topics.push((0, hash_1.id)(value));
    	                }
    	                else if (param.type === "bytes") {
    	                    topics.push((0, keccak256_1.keccak256)(value));
    	                }
    	                else if (param.baseType === "tuple" || param.baseType === "array") {
    	                    // @TODO
    	                    throw new Error("not implemented");
    	                }
    	                else {
    	                    topics.push(_this._abiCoder.encode([param.type], [value]));
    	                }
    	            }
    	            else {
    	                dataTypes.push(param);
    	                dataValues.push(value);
    	            }
    	        });
    	        return {
    	            data: this._abiCoder.encode(dataTypes, dataValues),
    	            topics: topics
    	        };
    	    };
    	    // Decode a filter for the event and the search criteria
    	    Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {
    	        if (typeof (eventFragment) === "string") {
    	            eventFragment = this.getEvent(eventFragment);
    	        }
    	        if (topics != null && !eventFragment.anonymous) {
    	            var topicHash = this.getEventTopic(eventFragment);
    	            if (!(0, bytes_1.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
    	                logger.throwError("fragment/topic mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
    	            }
    	            topics = topics.slice(1);
    	        }
    	        var indexed = [];
    	        var nonIndexed = [];
    	        var dynamic = [];
    	        eventFragment.inputs.forEach(function (param, index) {
    	            if (param.indexed) {
    	                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
    	                    indexed.push(fragments_1.ParamType.fromObject({ type: "bytes32", name: param.name }));
    	                    dynamic.push(true);
    	                }
    	                else {
    	                    indexed.push(param);
    	                    dynamic.push(false);
    	                }
    	            }
    	            else {
    	                nonIndexed.push(param);
    	                dynamic.push(false);
    	            }
    	        });
    	        var resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, (0, bytes_1.concat)(topics)) : null;
    	        var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
    	        var result = [];
    	        var nonIndexedIndex = 0, indexedIndex = 0;
    	        eventFragment.inputs.forEach(function (param, index) {
    	            if (param.indexed) {
    	                if (resultIndexed == null) {
    	                    result[index] = new Indexed({ _isIndexed: true, hash: null });
    	                }
    	                else if (dynamic[index]) {
    	                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
    	                }
    	                else {
    	                    try {
    	                        result[index] = resultIndexed[indexedIndex++];
    	                    }
    	                    catch (error) {
    	                        result[index] = error;
    	                    }
    	                }
    	            }
    	            else {
    	                try {
    	                    result[index] = resultNonIndexed[nonIndexedIndex++];
    	                }
    	                catch (error) {
    	                    result[index] = error;
    	                }
    	            }
    	            // Add the keyword argument if named and safe
    	            if (param.name && result[param.name] == null) {
    	                var value_1 = result[index];
    	                // Make error named values throw on access
    	                if (value_1 instanceof Error) {
    	                    Object.defineProperty(result, param.name, {
    	                        enumerable: true,
    	                        get: function () { throw wrapAccessError("property " + JSON.stringify(param.name), value_1); }
    	                    });
    	                }
    	                else {
    	                    result[param.name] = value_1;
    	                }
    	            }
    	        });
    	        var _loop_1 = function (i) {
    	            var value = result[i];
    	            if (value instanceof Error) {
    	                Object.defineProperty(result, i, {
    	                    enumerable: true,
    	                    get: function () { throw wrapAccessError("index " + i, value); }
    	                });
    	            }
    	        };
    	        // Make all error indexed values throw on access
    	        for (var i = 0; i < result.length; i++) {
    	            _loop_1(i);
    	        }
    	        return Object.freeze(result);
    	    };
    	    // Given a transaction, find the matching function fragment (if any) and
    	    // determine all its properties and call parameters
    	    Interface.prototype.parseTransaction = function (tx) {
    	        var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
    	        if (!fragment) {
    	            return null;
    	        }
    	        return new TransactionDescription({
    	            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
    	            functionFragment: fragment,
    	            name: fragment.name,
    	            signature: fragment.format(),
    	            sighash: this.getSighash(fragment),
    	            value: bignumber_1.BigNumber.from(tx.value || "0"),
    	        });
    	    };
    	    // @TODO
    	    //parseCallResult(data: BytesLike): ??
    	    // Given an event log, find the matching event fragment (if any) and
    	    // determine all its properties and values
    	    Interface.prototype.parseLog = function (log) {
    	        var fragment = this.getEvent(log.topics[0]);
    	        if (!fragment || fragment.anonymous) {
    	            return null;
    	        }
    	        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
    	        //        Probably not, because just because it is the only event in the ABI does
    	        //        not mean we have the full ABI; maybe just a fragment?
    	        return new LogDescription({
    	            eventFragment: fragment,
    	            name: fragment.name,
    	            signature: fragment.format(),
    	            topic: this.getEventTopic(fragment),
    	            args: this.decodeEventLog(fragment, log.data, log.topics)
    	        });
    	    };
    	    Interface.prototype.parseError = function (data) {
    	        var hexData = (0, bytes_1.hexlify)(data);
    	        var fragment = this.getError(hexData.substring(0, 10).toLowerCase());
    	        if (!fragment) {
    	            return null;
    	        }
    	        return new ErrorDescription({
    	            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
    	            errorFragment: fragment,
    	            name: fragment.name,
    	            signature: fragment.format(),
    	            sighash: this.getSighash(fragment),
    	        });
    	    };
    	    /*
    	    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
    	        if (Interface.isInterface(value)) {
    	            return value;
    	        }
    	        if (typeof(value) === "string") {
    	            return new Interface(JSON.parse(value));
    	        }
    	        return new Interface(value);
    	    }
    	    */
    	    Interface.isInterface = function (value) {
    	        return !!(value && value._isInterface);
    	    };
    	    return Interface;
    	}());
    	exports.Interface = Interface;
    	
    } (_interface));

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = exports.Indexed = exports.Interface = exports.defaultAbiCoder = exports.AbiCoder = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;
    	var fragments_1 = fragments;
    	Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return fragments_1.ConstructorFragment; } });
    	Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return fragments_1.ErrorFragment; } });
    	Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return fragments_1.EventFragment; } });
    	Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return fragments_1.FormatTypes; } });
    	Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return fragments_1.Fragment; } });
    	Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return fragments_1.FunctionFragment; } });
    	Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return fragments_1.ParamType; } });
    	var abi_coder_1 = abiCoder;
    	Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_coder_1.AbiCoder; } });
    	Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_coder_1.defaultAbiCoder; } });
    	var interface_1 = _interface;
    	Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return interface_1.checkResultErrors; } });
    	Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return interface_1.Indexed; } });
    	Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return interface_1.Interface; } });
    	Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return interface_1.LogDescription; } });
    	Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return interface_1.TransactionDescription; } });
    	
    } (lib$u));

    var lib$h = {};

    var _version$g = {};

    Object.defineProperty(_version$g, "__esModule", { value: true });
    _version$g.version = void 0;
    _version$g.version = "abstract-provider/5.7.0";

    var __extends$r = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$d = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$d = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(lib$h, "__esModule", { value: true });
    lib$h.Provider = lib$h.TransactionOrderForkEvent = lib$h.TransactionForkEvent = lib$h.BlockForkEvent = lib$h.ForkEvent = void 0;
    var bignumber_1$9 = lib$t;
    var bytes_1$n = lib$s;
    var properties_1$k = lib$q;
    var logger_1$s = lib$r;
    var _version_1$s = _version$g;
    var logger$s = new logger_1$s.Logger(_version_1$s.version);
    //export type CallTransactionable = {
    //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
    //};
    var ForkEvent = /** @class */ (function (_super) {
        __extends$r(ForkEvent, _super);
        function ForkEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ForkEvent.isForkEvent = function (value) {
            return !!(value && value._isForkEvent);
        };
        return ForkEvent;
    }(properties_1$k.Description));
    lib$h.ForkEvent = ForkEvent;
    var BlockForkEvent = /** @class */ (function (_super) {
        __extends$r(BlockForkEvent, _super);
        function BlockForkEvent(blockHash, expiry) {
            var _this = this;
            if (!(0, bytes_1$n.isHexString)(blockHash, 32)) {
                logger$s.throwArgumentError("invalid blockHash", "blockHash", blockHash);
            }
            _this = _super.call(this, {
                _isForkEvent: true,
                _isBlockForkEvent: true,
                expiry: (expiry || 0),
                blockHash: blockHash
            }) || this;
            return _this;
        }
        return BlockForkEvent;
    }(ForkEvent));
    lib$h.BlockForkEvent = BlockForkEvent;
    var TransactionForkEvent = /** @class */ (function (_super) {
        __extends$r(TransactionForkEvent, _super);
        function TransactionForkEvent(hash, expiry) {
            var _this = this;
            if (!(0, bytes_1$n.isHexString)(hash, 32)) {
                logger$s.throwArgumentError("invalid transaction hash", "hash", hash);
            }
            _this = _super.call(this, {
                _isForkEvent: true,
                _isTransactionForkEvent: true,
                expiry: (expiry || 0),
                hash: hash
            }) || this;
            return _this;
        }
        return TransactionForkEvent;
    }(ForkEvent));
    lib$h.TransactionForkEvent = TransactionForkEvent;
    var TransactionOrderForkEvent = /** @class */ (function (_super) {
        __extends$r(TransactionOrderForkEvent, _super);
        function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {
            var _this = this;
            if (!(0, bytes_1$n.isHexString)(beforeHash, 32)) {
                logger$s.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
            }
            if (!(0, bytes_1$n.isHexString)(afterHash, 32)) {
                logger$s.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
            }
            _this = _super.call(this, {
                _isForkEvent: true,
                _isTransactionOrderForkEvent: true,
                expiry: (expiry || 0),
                beforeHash: beforeHash,
                afterHash: afterHash
            }) || this;
            return _this;
        }
        return TransactionOrderForkEvent;
    }(ForkEvent));
    lib$h.TransactionOrderForkEvent = TransactionOrderForkEvent;
    ///////////////////////////////
    // Exported Abstracts
    var Provider = /** @class */ (function () {
        function Provider() {
            var _newTarget = this.constructor;
            logger$s.checkAbstract(_newTarget, Provider);
            (0, properties_1$k.defineReadOnly)(this, "_isProvider", true);
        }
        Provider.prototype.getFeeData = function () {
            return __awaiter$d(this, void 0, void 0, function () {
                var _a, block, gasPrice, lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas;
                return __generator$d(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, (0, properties_1$k.resolveProperties)({
                                block: this.getBlock("latest"),
                                gasPrice: this.getGasPrice().catch(function (error) {
                                    // @TODO: Why is this now failing on Calaveras?
                                    //console.log(error);
                                    return null;
                                })
                            })];
                        case 1:
                            _a = _b.sent(), block = _a.block, gasPrice = _a.gasPrice;
                            lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
                            if (block && block.baseFeePerGas) {
                                // We may want to compute this more accurately in the future,
                                // using the formula "check if the base fee is correct".
                                // See: https://eips.ethereum.org/EIPS/eip-1559
                                lastBaseFeePerGas = block.baseFeePerGas;
                                maxPriorityFeePerGas = bignumber_1$9.BigNumber.from("1500000000");
                                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                            }
                            return [2 /*return*/, { lastBaseFeePerGas: lastBaseFeePerGas, maxFeePerGas: maxFeePerGas, maxPriorityFeePerGas: maxPriorityFeePerGas, gasPrice: gasPrice }];
                    }
                });
            });
        };
        // Alias for "on"
        Provider.prototype.addListener = function (eventName, listener) {
            return this.on(eventName, listener);
        };
        // Alias for "off"
        Provider.prototype.removeListener = function (eventName, listener) {
            return this.off(eventName, listener);
        };
        Provider.isProvider = function (value) {
            return !!(value && value._isProvider);
        };
        return Provider;
    }());
    lib$h.Provider = Provider;

    var lib$g = {};

    var _version$f = {};

    Object.defineProperty(_version$f, "__esModule", { value: true });
    _version$f.version = void 0;
    _version$f.version = "abstract-signer/5.7.0";

    var __extends$q = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$c = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$c = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(lib$g, "__esModule", { value: true });
    lib$g.VoidSigner = lib$g.Signer = void 0;
    var properties_1$j = lib$q;
    var logger_1$r = lib$r;
    var _version_1$r = _version$f;
    var logger$r = new logger_1$r.Logger(_version_1$r.version);
    var allowedTransactionKeys$2 = [
        "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
    ];
    var forwardErrors = [
        logger_1$r.Logger.errors.INSUFFICIENT_FUNDS,
        logger_1$r.Logger.errors.NONCE_EXPIRED,
        logger_1$r.Logger.errors.REPLACEMENT_UNDERPRICED,
    ];
    var Signer = /** @class */ (function () {
        ///////////////////
        // Sub-classes MUST call super
        function Signer() {
            var _newTarget = this.constructor;
            logger$r.checkAbstract(_newTarget, Signer);
            (0, properties_1$j.defineReadOnly)(this, "_isSigner", true);
        }
        ///////////////////
        // Sub-classes MAY override these
        Signer.prototype.getBalance = function (blockTag) {
            return __awaiter$c(this, void 0, void 0, function () {
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getBalance");
                            return [4 /*yield*/, this.provider.getBalance(this.getAddress(), blockTag)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.getTransactionCount = function (blockTag) {
            return __awaiter$c(this, void 0, void 0, function () {
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getTransactionCount");
                            return [4 /*yield*/, this.provider.getTransactionCount(this.getAddress(), blockTag)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Populates "from" if unspecified, and estimates the gas for the transaction
        Signer.prototype.estimateGas = function (transaction) {
            return __awaiter$c(this, void 0, void 0, function () {
                var tx;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("estimateGas");
                            return [4 /*yield*/, (0, properties_1$j.resolveProperties)(this.checkTransaction(transaction))];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, this.provider.estimateGas(tx)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Populates "from" if unspecified, and calls with the transaction
        Signer.prototype.call = function (transaction, blockTag) {
            return __awaiter$c(this, void 0, void 0, function () {
                var tx;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("call");
                            return [4 /*yield*/, (0, properties_1$j.resolveProperties)(this.checkTransaction(transaction))];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, this.provider.call(tx, blockTag)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Populates all fields in a transaction, signs it and sends it to the network
        Signer.prototype.sendTransaction = function (transaction) {
            return __awaiter$c(this, void 0, void 0, function () {
                var tx, signedTx;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("sendTransaction");
                            return [4 /*yield*/, this.populateTransaction(transaction)];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, this.signTransaction(tx)];
                        case 2:
                            signedTx = _a.sent();
                            return [4 /*yield*/, this.provider.sendTransaction(signedTx)];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.getChainId = function () {
            return __awaiter$c(this, void 0, void 0, function () {
                var network;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getChainId");
                            return [4 /*yield*/, this.provider.getNetwork()];
                        case 1:
                            network = _a.sent();
                            return [2 /*return*/, network.chainId];
                    }
                });
            });
        };
        Signer.prototype.getGasPrice = function () {
            return __awaiter$c(this, void 0, void 0, function () {
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getGasPrice");
                            return [4 /*yield*/, this.provider.getGasPrice()];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.getFeeData = function () {
            return __awaiter$c(this, void 0, void 0, function () {
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("getFeeData");
                            return [4 /*yield*/, this.provider.getFeeData()];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        Signer.prototype.resolveName = function (name) {
            return __awaiter$c(this, void 0, void 0, function () {
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._checkProvider("resolveName");
                            return [4 /*yield*/, this.provider.resolveName(name)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        // Checks a transaction does not contain invalid keys and if
        // no "from" is provided, populates it.
        // - does NOT require a provider
        // - adds "from" is not present
        // - returns a COPY (safe to mutate the result)
        // By default called from: (overriding these prevents it)
        //   - call
        //   - estimateGas
        //   - populateTransaction (and therefor sendTransaction)
        Signer.prototype.checkTransaction = function (transaction) {
            for (var key in transaction) {
                if (allowedTransactionKeys$2.indexOf(key) === -1) {
                    logger$r.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
                }
            }
            var tx = (0, properties_1$j.shallowCopy)(transaction);
            if (tx.from == null) {
                tx.from = this.getAddress();
            }
            else {
                // Make sure any provided address matches this signer
                tx.from = Promise.all([
                    Promise.resolve(tx.from),
                    this.getAddress()
                ]).then(function (result) {
                    if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                        logger$r.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                    return result[0];
                });
            }
            return tx;
        };
        // Populates ALL keys for a transaction and checks that "from" matches
        // this Signer. Should be used by sendTransaction but NOT by signTransaction.
        // By default called from: (overriding these prevents it)
        //   - sendTransaction
        //
        // Notes:
        //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
        Signer.prototype.populateTransaction = function (transaction) {
            return __awaiter$c(this, void 0, void 0, function () {
                var tx, hasEip1559, feeData, gasPrice;
                var _this = this;
                return __generator$c(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, properties_1$j.resolveProperties)(this.checkTransaction(transaction))];
                        case 1:
                            tx = _a.sent();
                            if (tx.to != null) {
                                tx.to = Promise.resolve(tx.to).then(function (to) { return __awaiter$c(_this, void 0, void 0, function () {
                                    var address;
                                    return __generator$c(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (to == null) {
                                                    return [2 /*return*/, null];
                                                }
                                                return [4 /*yield*/, this.resolveName(to)];
                                            case 1:
                                                address = _a.sent();
                                                if (address == null) {
                                                    logger$r.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                                                }
                                                return [2 /*return*/, address];
                                        }
                                    });
                                }); });
                                // Prevent this error from causing an UnhandledPromiseException
                                tx.to.catch(function (error) { });
                            }
                            hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
                            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                                logger$r.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                            }
                            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                                logger$r.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                            }
                            if (!((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null))) return [3 /*break*/, 2];
                            // Fully-formed EIP-1559 transaction (skip getFeeData)
                            tx.type = 2;
                            return [3 /*break*/, 5];
                        case 2:
                            if (!(tx.type === 0 || tx.type === 1)) return [3 /*break*/, 3];
                            // Explicit Legacy or EIP-2930 transaction
                            // Populate missing gasPrice
                            if (tx.gasPrice == null) {
                                tx.gasPrice = this.getGasPrice();
                            }
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.getFeeData()];
                        case 4:
                            feeData = _a.sent();
                            if (tx.type == null) {
                                // We need to auto-detect the intended type of this transaction...
                                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                                    // The network supports EIP-1559!
                                    // Upgrade transaction from null to eip-1559
                                    tx.type = 2;
                                    if (tx.gasPrice != null) {
                                        gasPrice = tx.gasPrice;
                                        delete tx.gasPrice;
                                        tx.maxFeePerGas = gasPrice;
                                        tx.maxPriorityFeePerGas = gasPrice;
                                    }
                                    else {
                                        // Populate missing fee data
                                        if (tx.maxFeePerGas == null) {
                                            tx.maxFeePerGas = feeData.maxFeePerGas;
                                        }
                                        if (tx.maxPriorityFeePerGas == null) {
                                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                        }
                                    }
                                }
                                else if (feeData.gasPrice != null) {
                                    // Network doesn't support EIP-1559...
                                    // ...but they are trying to use EIP-1559 properties
                                    if (hasEip1559) {
                                        logger$r.throwError("network does not support EIP-1559", logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, {
                                            operation: "populateTransaction"
                                        });
                                    }
                                    // Populate missing fee data
                                    if (tx.gasPrice == null) {
                                        tx.gasPrice = feeData.gasPrice;
                                    }
                                    // Explicitly set untyped transaction to legacy
                                    tx.type = 0;
                                }
                                else {
                                    // getFeeData has failed us.
                                    logger$r.throwError("failed to get consistent fee data", logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, {
                                        operation: "signer.getFeeData"
                                    });
                                }
                            }
                            else if (tx.type === 2) {
                                // Explicitly using EIP-1559
                                // Populate missing fee data
                                if (tx.maxFeePerGas == null) {
                                    tx.maxFeePerGas = feeData.maxFeePerGas;
                                }
                                if (tx.maxPriorityFeePerGas == null) {
                                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                }
                            }
                            _a.label = 5;
                        case 5:
                            if (tx.nonce == null) {
                                tx.nonce = this.getTransactionCount("pending");
                            }
                            if (tx.gasLimit == null) {
                                tx.gasLimit = this.estimateGas(tx).catch(function (error) {
                                    if (forwardErrors.indexOf(error.code) >= 0) {
                                        throw error;
                                    }
                                    return logger$r.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$r.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                                        error: error,
                                        tx: tx
                                    });
                                });
                            }
                            if (tx.chainId == null) {
                                tx.chainId = this.getChainId();
                            }
                            else {
                                tx.chainId = Promise.all([
                                    Promise.resolve(tx.chainId),
                                    this.getChainId()
                                ]).then(function (results) {
                                    if (results[1] !== 0 && results[0] !== results[1]) {
                                        logger$r.throwArgumentError("chainId address mismatch", "transaction", transaction);
                                    }
                                    return results[0];
                                });
                            }
                            return [4 /*yield*/, (0, properties_1$j.resolveProperties)(tx)];
                        case 6: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        ///////////////////
        // Sub-classes SHOULD leave these alone
        Signer.prototype._checkProvider = function (operation) {
            if (!this.provider) {
                logger$r.throwError("missing provider", logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: (operation || "_checkProvider")
                });
            }
        };
        Signer.isSigner = function (value) {
            return !!(value && value._isSigner);
        };
        return Signer;
    }());
    lib$g.Signer = Signer;
    var VoidSigner = /** @class */ (function (_super) {
        __extends$q(VoidSigner, _super);
        function VoidSigner(address, provider) {
            var _this = _super.call(this) || this;
            (0, properties_1$j.defineReadOnly)(_this, "address", address);
            (0, properties_1$j.defineReadOnly)(_this, "provider", provider || null);
            return _this;
        }
        VoidSigner.prototype.getAddress = function () {
            return Promise.resolve(this.address);
        };
        VoidSigner.prototype._fail = function (message, operation) {
            return Promise.resolve().then(function () {
                logger$r.throwError(message, logger_1$r.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
            });
        };
        VoidSigner.prototype.signMessage = function (message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
        };
        VoidSigner.prototype.signTransaction = function (transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
        };
        VoidSigner.prototype._signTypedData = function (domain, types, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
        };
        VoidSigner.prototype.connect = function (provider) {
            return new VoidSigner(this.address, provider);
        };
        return VoidSigner;
    }(Signer));
    lib$g.VoidSigner = VoidSigner;

    var lib$f = {};

    var lib$e = {};

    var elliptic$3 = {};

    var elliptic$2 = {};

    var name = "elliptic";
    var version$2 = "6.5.4";
    var description = "EC cryptography";
    var main = "lib/elliptic.js";
    var files = [
    	"lib"
    ];
    var scripts = {
    	lint: "eslint lib test",
    	"lint:fix": "npm run lint -- --fix",
    	unit: "istanbul test _mocha --reporter=spec test/index.js",
    	test: "npm run lint && npm run unit",
    	version: "grunt dist && git add dist/"
    };
    var repository = {
    	type: "git",
    	url: "git@github.com:indutny/elliptic"
    };
    var keywords = [
    	"EC",
    	"Elliptic",
    	"curve",
    	"Cryptography"
    ];
    var author = "Fedor Indutny <fedor@indutny.com>";
    var license = "MIT";
    var bugs = {
    	url: "https://github.com/indutny/elliptic/issues"
    };
    var homepage = "https://github.com/indutny/elliptic";
    var devDependencies = {
    	brfs: "^2.0.2",
    	coveralls: "^3.1.0",
    	eslint: "^7.6.0",
    	grunt: "^1.2.1",
    	"grunt-browserify": "^5.3.0",
    	"grunt-cli": "^1.3.2",
    	"grunt-contrib-connect": "^3.0.0",
    	"grunt-contrib-copy": "^1.0.0",
    	"grunt-contrib-uglify": "^5.0.0",
    	"grunt-mocha-istanbul": "^5.0.2",
    	"grunt-saucelabs": "^9.0.1",
    	istanbul: "^0.4.5",
    	mocha: "^8.0.1"
    };
    var dependencies = {
    	"bn.js": "^4.11.9",
    	brorand: "^1.1.0",
    	"hash.js": "^1.0.0",
    	"hmac-drbg": "^1.0.1",
    	inherits: "^2.0.4",
    	"minimalistic-assert": "^1.0.1",
    	"minimalistic-crypto-utils": "^1.0.1"
    };
    var require$$0$4 = {
    	name: name,
    	version: version$2,
    	description: description,
    	main: main,
    	files: files,
    	scripts: scripts,
    	repository: repository,
    	keywords: keywords,
    	author: author,
    	license: license,
    	bugs: bugs,
    	homepage: homepage,
    	devDependencies: devDependencies,
    	dependencies: dependencies
    };

    var utils$z = {};

    var bn$2 = {exports: {}};

    bn$2.exports;

    (function (module) {
    	(function (module, exports) {

    	  // Utils
    	  function assert (val, msg) {
    	    if (!val) throw new Error(msg || 'Assertion failed');
    	  }

    	  // Could use `inherits` module, but don't want to move from single file
    	  // architecture yet.
    	  function inherits (ctor, superCtor) {
    	    ctor.super_ = superCtor;
    	    var TempCtor = function () {};
    	    TempCtor.prototype = superCtor.prototype;
    	    ctor.prototype = new TempCtor();
    	    ctor.prototype.constructor = ctor;
    	  }

    	  // BN

    	  function BN (number, base, endian) {
    	    if (BN.isBN(number)) {
    	      return number;
    	    }

    	    this.negative = 0;
    	    this.words = null;
    	    this.length = 0;

    	    // Reduction context
    	    this.red = null;

    	    if (number !== null) {
    	      if (base === 'le' || base === 'be') {
    	        endian = base;
    	        base = 10;
    	      }

    	      this._init(number || 0, base || 10, endian || 'be');
    	    }
    	  }
    	  if (typeof module === 'object') {
    	    module.exports = BN;
    	  } else {
    	    exports.BN = BN;
    	  }

    	  BN.BN = BN;
    	  BN.wordSize = 26;

    	  var Buffer;
    	  try {
    	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
    	      Buffer = window.Buffer;
    	    } else {
    	      Buffer = require$$0$5.Buffer;
    	    }
    	  } catch (e) {
    	  }

    	  BN.isBN = function isBN (num) {
    	    if (num instanceof BN) {
    	      return true;
    	    }

    	    return num !== null && typeof num === 'object' &&
    	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    	  };

    	  BN.max = function max (left, right) {
    	    if (left.cmp(right) > 0) return left;
    	    return right;
    	  };

    	  BN.min = function min (left, right) {
    	    if (left.cmp(right) < 0) return left;
    	    return right;
    	  };

    	  BN.prototype._init = function init (number, base, endian) {
    	    if (typeof number === 'number') {
    	      return this._initNumber(number, base, endian);
    	    }

    	    if (typeof number === 'object') {
    	      return this._initArray(number, base, endian);
    	    }

    	    if (base === 'hex') {
    	      base = 16;
    	    }
    	    assert(base === (base | 0) && base >= 2 && base <= 36);

    	    number = number.toString().replace(/\s+/g, '');
    	    var start = 0;
    	    if (number[0] === '-') {
    	      start++;
    	      this.negative = 1;
    	    }

    	    if (start < number.length) {
    	      if (base === 16) {
    	        this._parseHex(number, start, endian);
    	      } else {
    	        this._parseBase(number, base, start);
    	        if (endian === 'le') {
    	          this._initArray(this.toArray(), base, endian);
    	        }
    	      }
    	    }
    	  };

    	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    	    if (number < 0) {
    	      this.negative = 1;
    	      number = -number;
    	    }
    	    if (number < 0x4000000) {
    	      this.words = [ number & 0x3ffffff ];
    	      this.length = 1;
    	    } else if (number < 0x10000000000000) {
    	      this.words = [
    	        number & 0x3ffffff,
    	        (number / 0x4000000) & 0x3ffffff
    	      ];
    	      this.length = 2;
    	    } else {
    	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
    	      this.words = [
    	        number & 0x3ffffff,
    	        (number / 0x4000000) & 0x3ffffff,
    	        1
    	      ];
    	      this.length = 3;
    	    }

    	    if (endian !== 'le') return;

    	    // Reverse the bytes
    	    this._initArray(this.toArray(), base, endian);
    	  };

    	  BN.prototype._initArray = function _initArray (number, base, endian) {
    	    // Perhaps a Uint8Array
    	    assert(typeof number.length === 'number');
    	    if (number.length <= 0) {
    	      this.words = [ 0 ];
    	      this.length = 1;
    	      return this;
    	    }

    	    this.length = Math.ceil(number.length / 3);
    	    this.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      this.words[i] = 0;
    	    }

    	    var j, w;
    	    var off = 0;
    	    if (endian === 'be') {
    	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
    	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
    	        this.words[j] |= (w << off) & 0x3ffffff;
    	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
    	        off += 24;
    	        if (off >= 26) {
    	          off -= 26;
    	          j++;
    	        }
    	      }
    	    } else if (endian === 'le') {
    	      for (i = 0, j = 0; i < number.length; i += 3) {
    	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
    	        this.words[j] |= (w << off) & 0x3ffffff;
    	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
    	        off += 24;
    	        if (off >= 26) {
    	          off -= 26;
    	          j++;
    	        }
    	      }
    	    }
    	    return this.strip();
    	  };

    	  function parseHex4Bits (string, index) {
    	    var c = string.charCodeAt(index);
    	    // 'A' - 'F'
    	    if (c >= 65 && c <= 70) {
    	      return c - 55;
    	    // 'a' - 'f'
    	    } else if (c >= 97 && c <= 102) {
    	      return c - 87;
    	    // '0' - '9'
    	    } else {
    	      return (c - 48) & 0xf;
    	    }
    	  }

    	  function parseHexByte (string, lowerBound, index) {
    	    var r = parseHex4Bits(string, index);
    	    if (index - 1 >= lowerBound) {
    	      r |= parseHex4Bits(string, index - 1) << 4;
    	    }
    	    return r;
    	  }

    	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    	    // Create possibly bigger array to ensure that it fits the number
    	    this.length = Math.ceil((number.length - start) / 6);
    	    this.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      this.words[i] = 0;
    	    }

    	    // 24-bits chunks
    	    var off = 0;
    	    var j = 0;

    	    var w;
    	    if (endian === 'be') {
    	      for (i = number.length - 1; i >= start; i -= 2) {
    	        w = parseHexByte(number, start, i) << off;
    	        this.words[j] |= w & 0x3ffffff;
    	        if (off >= 18) {
    	          off -= 18;
    	          j += 1;
    	          this.words[j] |= w >>> 26;
    	        } else {
    	          off += 8;
    	        }
    	      }
    	    } else {
    	      var parseLength = number.length - start;
    	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
    	        w = parseHexByte(number, start, i) << off;
    	        this.words[j] |= w & 0x3ffffff;
    	        if (off >= 18) {
    	          off -= 18;
    	          j += 1;
    	          this.words[j] |= w >>> 26;
    	        } else {
    	          off += 8;
    	        }
    	      }
    	    }

    	    this.strip();
    	  };

    	  function parseBase (str, start, end, mul) {
    	    var r = 0;
    	    var len = Math.min(str.length, end);
    	    for (var i = start; i < len; i++) {
    	      var c = str.charCodeAt(i) - 48;

    	      r *= mul;

    	      // 'a'
    	      if (c >= 49) {
    	        r += c - 49 + 0xa;

    	      // 'A'
    	      } else if (c >= 17) {
    	        r += c - 17 + 0xa;

    	      // '0' - '9'
    	      } else {
    	        r += c;
    	      }
    	    }
    	    return r;
    	  }

    	  BN.prototype._parseBase = function _parseBase (number, base, start) {
    	    // Initialize as zero
    	    this.words = [ 0 ];
    	    this.length = 1;

    	    // Find length of limb in base
    	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
    	      limbLen++;
    	    }
    	    limbLen--;
    	    limbPow = (limbPow / base) | 0;

    	    var total = number.length - start;
    	    var mod = total % limbLen;
    	    var end = Math.min(total, total - mod) + start;

    	    var word = 0;
    	    for (var i = start; i < end; i += limbLen) {
    	      word = parseBase(number, i, i + limbLen, base);

    	      this.imuln(limbPow);
    	      if (this.words[0] + word < 0x4000000) {
    	        this.words[0] += word;
    	      } else {
    	        this._iaddn(word);
    	      }
    	    }

    	    if (mod !== 0) {
    	      var pow = 1;
    	      word = parseBase(number, i, number.length, base);

    	      for (i = 0; i < mod; i++) {
    	        pow *= base;
    	      }

    	      this.imuln(pow);
    	      if (this.words[0] + word < 0x4000000) {
    	        this.words[0] += word;
    	      } else {
    	        this._iaddn(word);
    	      }
    	    }

    	    this.strip();
    	  };

    	  BN.prototype.copy = function copy (dest) {
    	    dest.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      dest.words[i] = this.words[i];
    	    }
    	    dest.length = this.length;
    	    dest.negative = this.negative;
    	    dest.red = this.red;
    	  };

    	  BN.prototype.clone = function clone () {
    	    var r = new BN(null);
    	    this.copy(r);
    	    return r;
    	  };

    	  BN.prototype._expand = function _expand (size) {
    	    while (this.length < size) {
    	      this.words[this.length++] = 0;
    	    }
    	    return this;
    	  };

    	  // Remove leading `0` from `this`
    	  BN.prototype.strip = function strip () {
    	    while (this.length > 1 && this.words[this.length - 1] === 0) {
    	      this.length--;
    	    }
    	    return this._normSign();
    	  };

    	  BN.prototype._normSign = function _normSign () {
    	    // -0 = 0
    	    if (this.length === 1 && this.words[0] === 0) {
    	      this.negative = 0;
    	    }
    	    return this;
    	  };

    	  BN.prototype.inspect = function inspect () {
    	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    	  };

    	  /*

    	  var zeros = [];
    	  var groupSizes = [];
    	  var groupBases = [];

    	  var s = '';
    	  var i = -1;
    	  while (++i < BN.wordSize) {
    	    zeros[i] = s;
    	    s += '0';
    	  }
    	  groupSizes[0] = 0;
    	  groupSizes[1] = 0;
    	  groupBases[0] = 0;
    	  groupBases[1] = 0;
    	  var base = 2 - 1;
    	  while (++base < 36 + 1) {
    	    var groupSize = 0;
    	    var groupBase = 1;
    	    while (groupBase < (1 << BN.wordSize) / base) {
    	      groupBase *= base;
    	      groupSize += 1;
    	    }
    	    groupSizes[base] = groupSize;
    	    groupBases[base] = groupBase;
    	  }

    	  */

    	  var zeros = [
    	    '',
    	    '0',
    	    '00',
    	    '000',
    	    '0000',
    	    '00000',
    	    '000000',
    	    '0000000',
    	    '00000000',
    	    '000000000',
    	    '0000000000',
    	    '00000000000',
    	    '000000000000',
    	    '0000000000000',
    	    '00000000000000',
    	    '000000000000000',
    	    '0000000000000000',
    	    '00000000000000000',
    	    '000000000000000000',
    	    '0000000000000000000',
    	    '00000000000000000000',
    	    '000000000000000000000',
    	    '0000000000000000000000',
    	    '00000000000000000000000',
    	    '000000000000000000000000',
    	    '0000000000000000000000000'
    	  ];

    	  var groupSizes = [
    	    0, 0,
    	    25, 16, 12, 11, 10, 9, 8,
    	    8, 7, 7, 7, 7, 6, 6,
    	    6, 6, 6, 6, 6, 5, 5,
    	    5, 5, 5, 5, 5, 5, 5,
    	    5, 5, 5, 5, 5, 5, 5
    	  ];

    	  var groupBases = [
    	    0, 0,
    	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    	  ];

    	  BN.prototype.toString = function toString (base, padding) {
    	    base = base || 10;
    	    padding = padding | 0 || 1;

    	    var out;
    	    if (base === 16 || base === 'hex') {
    	      out = '';
    	      var off = 0;
    	      var carry = 0;
    	      for (var i = 0; i < this.length; i++) {
    	        var w = this.words[i];
    	        var word = (((w << off) | carry) & 0xffffff).toString(16);
    	        carry = (w >>> (24 - off)) & 0xffffff;
    	        if (carry !== 0 || i !== this.length - 1) {
    	          out = zeros[6 - word.length] + word + out;
    	        } else {
    	          out = word + out;
    	        }
    	        off += 2;
    	        if (off >= 26) {
    	          off -= 26;
    	          i--;
    	        }
    	      }
    	      if (carry !== 0) {
    	        out = carry.toString(16) + out;
    	      }
    	      while (out.length % padding !== 0) {
    	        out = '0' + out;
    	      }
    	      if (this.negative !== 0) {
    	        out = '-' + out;
    	      }
    	      return out;
    	    }

    	    if (base === (base | 0) && base >= 2 && base <= 36) {
    	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    	      var groupSize = groupSizes[base];
    	      // var groupBase = Math.pow(base, groupSize);
    	      var groupBase = groupBases[base];
    	      out = '';
    	      var c = this.clone();
    	      c.negative = 0;
    	      while (!c.isZero()) {
    	        var r = c.modn(groupBase).toString(base);
    	        c = c.idivn(groupBase);

    	        if (!c.isZero()) {
    	          out = zeros[groupSize - r.length] + r + out;
    	        } else {
    	          out = r + out;
    	        }
    	      }
    	      if (this.isZero()) {
    	        out = '0' + out;
    	      }
    	      while (out.length % padding !== 0) {
    	        out = '0' + out;
    	      }
    	      if (this.negative !== 0) {
    	        out = '-' + out;
    	      }
    	      return out;
    	    }

    	    assert(false, 'Base should be between 2 and 36');
    	  };

    	  BN.prototype.toNumber = function toNumber () {
    	    var ret = this.words[0];
    	    if (this.length === 2) {
    	      ret += this.words[1] * 0x4000000;
    	    } else if (this.length === 3 && this.words[2] === 0x01) {
    	      // NOTE: at this stage it is known that the top bit is set
    	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    	    } else if (this.length > 2) {
    	      assert(false, 'Number can only safely store up to 53 bits');
    	    }
    	    return (this.negative !== 0) ? -ret : ret;
    	  };

    	  BN.prototype.toJSON = function toJSON () {
    	    return this.toString(16);
    	  };

    	  BN.prototype.toBuffer = function toBuffer (endian, length) {
    	    assert(typeof Buffer !== 'undefined');
    	    return this.toArrayLike(Buffer, endian, length);
    	  };

    	  BN.prototype.toArray = function toArray (endian, length) {
    	    return this.toArrayLike(Array, endian, length);
    	  };

    	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    	    var byteLength = this.byteLength();
    	    var reqLength = length || Math.max(1, byteLength);
    	    assert(byteLength <= reqLength, 'byte array longer than desired length');
    	    assert(reqLength > 0, 'Requested array length <= 0');

    	    this.strip();
    	    var littleEndian = endian === 'le';
    	    var res = new ArrayType(reqLength);

    	    var b, i;
    	    var q = this.clone();
    	    if (!littleEndian) {
    	      // Assume big-endian
    	      for (i = 0; i < reqLength - byteLength; i++) {
    	        res[i] = 0;
    	      }

    	      for (i = 0; !q.isZero(); i++) {
    	        b = q.andln(0xff);
    	        q.iushrn(8);

    	        res[reqLength - i - 1] = b;
    	      }
    	    } else {
    	      for (i = 0; !q.isZero(); i++) {
    	        b = q.andln(0xff);
    	        q.iushrn(8);

    	        res[i] = b;
    	      }

    	      for (; i < reqLength; i++) {
    	        res[i] = 0;
    	      }
    	    }

    	    return res;
    	  };

    	  if (Math.clz32) {
    	    BN.prototype._countBits = function _countBits (w) {
    	      return 32 - Math.clz32(w);
    	    };
    	  } else {
    	    BN.prototype._countBits = function _countBits (w) {
    	      var t = w;
    	      var r = 0;
    	      if (t >= 0x1000) {
    	        r += 13;
    	        t >>>= 13;
    	      }
    	      if (t >= 0x40) {
    	        r += 7;
    	        t >>>= 7;
    	      }
    	      if (t >= 0x8) {
    	        r += 4;
    	        t >>>= 4;
    	      }
    	      if (t >= 0x02) {
    	        r += 2;
    	        t >>>= 2;
    	      }
    	      return r + t;
    	    };
    	  }

    	  BN.prototype._zeroBits = function _zeroBits (w) {
    	    // Short-cut
    	    if (w === 0) return 26;

    	    var t = w;
    	    var r = 0;
    	    if ((t & 0x1fff) === 0) {
    	      r += 13;
    	      t >>>= 13;
    	    }
    	    if ((t & 0x7f) === 0) {
    	      r += 7;
    	      t >>>= 7;
    	    }
    	    if ((t & 0xf) === 0) {
    	      r += 4;
    	      t >>>= 4;
    	    }
    	    if ((t & 0x3) === 0) {
    	      r += 2;
    	      t >>>= 2;
    	    }
    	    if ((t & 0x1) === 0) {
    	      r++;
    	    }
    	    return r;
    	  };

    	  // Return number of used bits in a BN
    	  BN.prototype.bitLength = function bitLength () {
    	    var w = this.words[this.length - 1];
    	    var hi = this._countBits(w);
    	    return (this.length - 1) * 26 + hi;
    	  };

    	  function toBitArray (num) {
    	    var w = new Array(num.bitLength());

    	    for (var bit = 0; bit < w.length; bit++) {
    	      var off = (bit / 26) | 0;
    	      var wbit = bit % 26;

    	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    	    }

    	    return w;
    	  }

    	  // Number of trailing zero bits
    	  BN.prototype.zeroBits = function zeroBits () {
    	    if (this.isZero()) return 0;

    	    var r = 0;
    	    for (var i = 0; i < this.length; i++) {
    	      var b = this._zeroBits(this.words[i]);
    	      r += b;
    	      if (b !== 26) break;
    	    }
    	    return r;
    	  };

    	  BN.prototype.byteLength = function byteLength () {
    	    return Math.ceil(this.bitLength() / 8);
    	  };

    	  BN.prototype.toTwos = function toTwos (width) {
    	    if (this.negative !== 0) {
    	      return this.abs().inotn(width).iaddn(1);
    	    }
    	    return this.clone();
    	  };

    	  BN.prototype.fromTwos = function fromTwos (width) {
    	    if (this.testn(width - 1)) {
    	      return this.notn(width).iaddn(1).ineg();
    	    }
    	    return this.clone();
    	  };

    	  BN.prototype.isNeg = function isNeg () {
    	    return this.negative !== 0;
    	  };

    	  // Return negative clone of `this`
    	  BN.prototype.neg = function neg () {
    	    return this.clone().ineg();
    	  };

    	  BN.prototype.ineg = function ineg () {
    	    if (!this.isZero()) {
    	      this.negative ^= 1;
    	    }

    	    return this;
    	  };

    	  // Or `num` with `this` in-place
    	  BN.prototype.iuor = function iuor (num) {
    	    while (this.length < num.length) {
    	      this.words[this.length++] = 0;
    	    }

    	    for (var i = 0; i < num.length; i++) {
    	      this.words[i] = this.words[i] | num.words[i];
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.ior = function ior (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuor(num);
    	  };

    	  // Or `num` with `this`
    	  BN.prototype.or = function or (num) {
    	    if (this.length > num.length) return this.clone().ior(num);
    	    return num.clone().ior(this);
    	  };

    	  BN.prototype.uor = function uor (num) {
    	    if (this.length > num.length) return this.clone().iuor(num);
    	    return num.clone().iuor(this);
    	  };

    	  // And `num` with `this` in-place
    	  BN.prototype.iuand = function iuand (num) {
    	    // b = min-length(num, this)
    	    var b;
    	    if (this.length > num.length) {
    	      b = num;
    	    } else {
    	      b = this;
    	    }

    	    for (var i = 0; i < b.length; i++) {
    	      this.words[i] = this.words[i] & num.words[i];
    	    }

    	    this.length = b.length;

    	    return this.strip();
    	  };

    	  BN.prototype.iand = function iand (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuand(num);
    	  };

    	  // And `num` with `this`
    	  BN.prototype.and = function and (num) {
    	    if (this.length > num.length) return this.clone().iand(num);
    	    return num.clone().iand(this);
    	  };

    	  BN.prototype.uand = function uand (num) {
    	    if (this.length > num.length) return this.clone().iuand(num);
    	    return num.clone().iuand(this);
    	  };

    	  // Xor `num` with `this` in-place
    	  BN.prototype.iuxor = function iuxor (num) {
    	    // a.length > b.length
    	    var a;
    	    var b;
    	    if (this.length > num.length) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    for (var i = 0; i < b.length; i++) {
    	      this.words[i] = a.words[i] ^ b.words[i];
    	    }

    	    if (this !== a) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    this.length = a.length;

    	    return this.strip();
    	  };

    	  BN.prototype.ixor = function ixor (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuxor(num);
    	  };

    	  // Xor `num` with `this`
    	  BN.prototype.xor = function xor (num) {
    	    if (this.length > num.length) return this.clone().ixor(num);
    	    return num.clone().ixor(this);
    	  };

    	  BN.prototype.uxor = function uxor (num) {
    	    if (this.length > num.length) return this.clone().iuxor(num);
    	    return num.clone().iuxor(this);
    	  };

    	  // Not ``this`` with ``width`` bitwidth
    	  BN.prototype.inotn = function inotn (width) {
    	    assert(typeof width === 'number' && width >= 0);

    	    var bytesNeeded = Math.ceil(width / 26) | 0;
    	    var bitsLeft = width % 26;

    	    // Extend the buffer with leading zeroes
    	    this._expand(bytesNeeded);

    	    if (bitsLeft > 0) {
    	      bytesNeeded--;
    	    }

    	    // Handle complete words
    	    for (var i = 0; i < bytesNeeded; i++) {
    	      this.words[i] = ~this.words[i] & 0x3ffffff;
    	    }

    	    // Handle the residue
    	    if (bitsLeft > 0) {
    	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    	    }

    	    // And remove leading zeroes
    	    return this.strip();
    	  };

    	  BN.prototype.notn = function notn (width) {
    	    return this.clone().inotn(width);
    	  };

    	  // Set `bit` of `this`
    	  BN.prototype.setn = function setn (bit, val) {
    	    assert(typeof bit === 'number' && bit >= 0);

    	    var off = (bit / 26) | 0;
    	    var wbit = bit % 26;

    	    this._expand(off + 1);

    	    if (val) {
    	      this.words[off] = this.words[off] | (1 << wbit);
    	    } else {
    	      this.words[off] = this.words[off] & ~(1 << wbit);
    	    }

    	    return this.strip();
    	  };

    	  // Add `num` to `this` in-place
    	  BN.prototype.iadd = function iadd (num) {
    	    var r;

    	    // negative + positive
    	    if (this.negative !== 0 && num.negative === 0) {
    	      this.negative = 0;
    	      r = this.isub(num);
    	      this.negative ^= 1;
    	      return this._normSign();

    	    // positive + negative
    	    } else if (this.negative === 0 && num.negative !== 0) {
    	      num.negative = 0;
    	      r = this.isub(num);
    	      num.negative = 1;
    	      return r._normSign();
    	    }

    	    // a.length > b.length
    	    var a, b;
    	    if (this.length > num.length) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    var carry = 0;
    	    for (var i = 0; i < b.length; i++) {
    	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
    	      this.words[i] = r & 0x3ffffff;
    	      carry = r >>> 26;
    	    }
    	    for (; carry !== 0 && i < a.length; i++) {
    	      r = (a.words[i] | 0) + carry;
    	      this.words[i] = r & 0x3ffffff;
    	      carry = r >>> 26;
    	    }

    	    this.length = a.length;
    	    if (carry !== 0) {
    	      this.words[this.length] = carry;
    	      this.length++;
    	    // Copy the rest of the words
    	    } else if (a !== this) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    return this;
    	  };

    	  // Add `num` to `this`
    	  BN.prototype.add = function add (num) {
    	    var res;
    	    if (num.negative !== 0 && this.negative === 0) {
    	      num.negative = 0;
    	      res = this.sub(num);
    	      num.negative ^= 1;
    	      return res;
    	    } else if (num.negative === 0 && this.negative !== 0) {
    	      this.negative = 0;
    	      res = num.sub(this);
    	      this.negative = 1;
    	      return res;
    	    }

    	    if (this.length > num.length) return this.clone().iadd(num);

    	    return num.clone().iadd(this);
    	  };

    	  // Subtract `num` from `this` in-place
    	  BN.prototype.isub = function isub (num) {
    	    // this - (-num) = this + num
    	    if (num.negative !== 0) {
    	      num.negative = 0;
    	      var r = this.iadd(num);
    	      num.negative = 1;
    	      return r._normSign();

    	    // -this - num = -(this + num)
    	    } else if (this.negative !== 0) {
    	      this.negative = 0;
    	      this.iadd(num);
    	      this.negative = 1;
    	      return this._normSign();
    	    }

    	    // At this point both numbers are positive
    	    var cmp = this.cmp(num);

    	    // Optimization - zeroify
    	    if (cmp === 0) {
    	      this.negative = 0;
    	      this.length = 1;
    	      this.words[0] = 0;
    	      return this;
    	    }

    	    // a > b
    	    var a, b;
    	    if (cmp > 0) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    var carry = 0;
    	    for (var i = 0; i < b.length; i++) {
    	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
    	      carry = r >> 26;
    	      this.words[i] = r & 0x3ffffff;
    	    }
    	    for (; carry !== 0 && i < a.length; i++) {
    	      r = (a.words[i] | 0) + carry;
    	      carry = r >> 26;
    	      this.words[i] = r & 0x3ffffff;
    	    }

    	    // Copy rest of the words
    	    if (carry === 0 && i < a.length && a !== this) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    this.length = Math.max(this.length, i);

    	    if (a !== this) {
    	      this.negative = 1;
    	    }

    	    return this.strip();
    	  };

    	  // Subtract `num` from `this`
    	  BN.prototype.sub = function sub (num) {
    	    return this.clone().isub(num);
    	  };

    	  function smallMulTo (self, num, out) {
    	    out.negative = num.negative ^ self.negative;
    	    var len = (self.length + num.length) | 0;
    	    out.length = len;
    	    len = (len - 1) | 0;

    	    // Peel one iteration (compiler can't do it, because of code complexity)
    	    var a = self.words[0] | 0;
    	    var b = num.words[0] | 0;
    	    var r = a * b;

    	    var lo = r & 0x3ffffff;
    	    var carry = (r / 0x4000000) | 0;
    	    out.words[0] = lo;

    	    for (var k = 1; k < len; k++) {
    	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    	      // note that ncarry could be >= 0x3ffffff
    	      var ncarry = carry >>> 26;
    	      var rword = carry & 0x3ffffff;
    	      var maxJ = Math.min(k, num.length - 1);
    	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
    	        var i = (k - j) | 0;
    	        a = self.words[i] | 0;
    	        b = num.words[j] | 0;
    	        r = a * b + rword;
    	        ncarry += (r / 0x4000000) | 0;
    	        rword = r & 0x3ffffff;
    	      }
    	      out.words[k] = rword | 0;
    	      carry = ncarry | 0;
    	    }
    	    if (carry !== 0) {
    	      out.words[k] = carry | 0;
    	    } else {
    	      out.length--;
    	    }

    	    return out.strip();
    	  }

    	  // TODO(indutny): it may be reasonable to omit it for users who don't need
    	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    	  // multiplication (like elliptic secp256k1).
    	  var comb10MulTo = function comb10MulTo (self, num, out) {
    	    var a = self.words;
    	    var b = num.words;
    	    var o = out.words;
    	    var c = 0;
    	    var lo;
    	    var mid;
    	    var hi;
    	    var a0 = a[0] | 0;
    	    var al0 = a0 & 0x1fff;
    	    var ah0 = a0 >>> 13;
    	    var a1 = a[1] | 0;
    	    var al1 = a1 & 0x1fff;
    	    var ah1 = a1 >>> 13;
    	    var a2 = a[2] | 0;
    	    var al2 = a2 & 0x1fff;
    	    var ah2 = a2 >>> 13;
    	    var a3 = a[3] | 0;
    	    var al3 = a3 & 0x1fff;
    	    var ah3 = a3 >>> 13;
    	    var a4 = a[4] | 0;
    	    var al4 = a4 & 0x1fff;
    	    var ah4 = a4 >>> 13;
    	    var a5 = a[5] | 0;
    	    var al5 = a5 & 0x1fff;
    	    var ah5 = a5 >>> 13;
    	    var a6 = a[6] | 0;
    	    var al6 = a6 & 0x1fff;
    	    var ah6 = a6 >>> 13;
    	    var a7 = a[7] | 0;
    	    var al7 = a7 & 0x1fff;
    	    var ah7 = a7 >>> 13;
    	    var a8 = a[8] | 0;
    	    var al8 = a8 & 0x1fff;
    	    var ah8 = a8 >>> 13;
    	    var a9 = a[9] | 0;
    	    var al9 = a9 & 0x1fff;
    	    var ah9 = a9 >>> 13;
    	    var b0 = b[0] | 0;
    	    var bl0 = b0 & 0x1fff;
    	    var bh0 = b0 >>> 13;
    	    var b1 = b[1] | 0;
    	    var bl1 = b1 & 0x1fff;
    	    var bh1 = b1 >>> 13;
    	    var b2 = b[2] | 0;
    	    var bl2 = b2 & 0x1fff;
    	    var bh2 = b2 >>> 13;
    	    var b3 = b[3] | 0;
    	    var bl3 = b3 & 0x1fff;
    	    var bh3 = b3 >>> 13;
    	    var b4 = b[4] | 0;
    	    var bl4 = b4 & 0x1fff;
    	    var bh4 = b4 >>> 13;
    	    var b5 = b[5] | 0;
    	    var bl5 = b5 & 0x1fff;
    	    var bh5 = b5 >>> 13;
    	    var b6 = b[6] | 0;
    	    var bl6 = b6 & 0x1fff;
    	    var bh6 = b6 >>> 13;
    	    var b7 = b[7] | 0;
    	    var bl7 = b7 & 0x1fff;
    	    var bh7 = b7 >>> 13;
    	    var b8 = b[8] | 0;
    	    var bl8 = b8 & 0x1fff;
    	    var bh8 = b8 >>> 13;
    	    var b9 = b[9] | 0;
    	    var bl9 = b9 & 0x1fff;
    	    var bh9 = b9 >>> 13;

    	    out.negative = self.negative ^ num.negative;
    	    out.length = 19;
    	    /* k = 0 */
    	    lo = Math.imul(al0, bl0);
    	    mid = Math.imul(al0, bh0);
    	    mid = (mid + Math.imul(ah0, bl0)) | 0;
    	    hi = Math.imul(ah0, bh0);
    	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    	    w0 &= 0x3ffffff;
    	    /* k = 1 */
    	    lo = Math.imul(al1, bl0);
    	    mid = Math.imul(al1, bh0);
    	    mid = (mid + Math.imul(ah1, bl0)) | 0;
    	    hi = Math.imul(ah1, bh0);
    	    lo = (lo + Math.imul(al0, bl1)) | 0;
    	    mid = (mid + Math.imul(al0, bh1)) | 0;
    	    mid = (mid + Math.imul(ah0, bl1)) | 0;
    	    hi = (hi + Math.imul(ah0, bh1)) | 0;
    	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    	    w1 &= 0x3ffffff;
    	    /* k = 2 */
    	    lo = Math.imul(al2, bl0);
    	    mid = Math.imul(al2, bh0);
    	    mid = (mid + Math.imul(ah2, bl0)) | 0;
    	    hi = Math.imul(ah2, bh0);
    	    lo = (lo + Math.imul(al1, bl1)) | 0;
    	    mid = (mid + Math.imul(al1, bh1)) | 0;
    	    mid = (mid + Math.imul(ah1, bl1)) | 0;
    	    hi = (hi + Math.imul(ah1, bh1)) | 0;
    	    lo = (lo + Math.imul(al0, bl2)) | 0;
    	    mid = (mid + Math.imul(al0, bh2)) | 0;
    	    mid = (mid + Math.imul(ah0, bl2)) | 0;
    	    hi = (hi + Math.imul(ah0, bh2)) | 0;
    	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    	    w2 &= 0x3ffffff;
    	    /* k = 3 */
    	    lo = Math.imul(al3, bl0);
    	    mid = Math.imul(al3, bh0);
    	    mid = (mid + Math.imul(ah3, bl0)) | 0;
    	    hi = Math.imul(ah3, bh0);
    	    lo = (lo + Math.imul(al2, bl1)) | 0;
    	    mid = (mid + Math.imul(al2, bh1)) | 0;
    	    mid = (mid + Math.imul(ah2, bl1)) | 0;
    	    hi = (hi + Math.imul(ah2, bh1)) | 0;
    	    lo = (lo + Math.imul(al1, bl2)) | 0;
    	    mid = (mid + Math.imul(al1, bh2)) | 0;
    	    mid = (mid + Math.imul(ah1, bl2)) | 0;
    	    hi = (hi + Math.imul(ah1, bh2)) | 0;
    	    lo = (lo + Math.imul(al0, bl3)) | 0;
    	    mid = (mid + Math.imul(al0, bh3)) | 0;
    	    mid = (mid + Math.imul(ah0, bl3)) | 0;
    	    hi = (hi + Math.imul(ah0, bh3)) | 0;
    	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    	    w3 &= 0x3ffffff;
    	    /* k = 4 */
    	    lo = Math.imul(al4, bl0);
    	    mid = Math.imul(al4, bh0);
    	    mid = (mid + Math.imul(ah4, bl0)) | 0;
    	    hi = Math.imul(ah4, bh0);
    	    lo = (lo + Math.imul(al3, bl1)) | 0;
    	    mid = (mid + Math.imul(al3, bh1)) | 0;
    	    mid = (mid + Math.imul(ah3, bl1)) | 0;
    	    hi = (hi + Math.imul(ah3, bh1)) | 0;
    	    lo = (lo + Math.imul(al2, bl2)) | 0;
    	    mid = (mid + Math.imul(al2, bh2)) | 0;
    	    mid = (mid + Math.imul(ah2, bl2)) | 0;
    	    hi = (hi + Math.imul(ah2, bh2)) | 0;
    	    lo = (lo + Math.imul(al1, bl3)) | 0;
    	    mid = (mid + Math.imul(al1, bh3)) | 0;
    	    mid = (mid + Math.imul(ah1, bl3)) | 0;
    	    hi = (hi + Math.imul(ah1, bh3)) | 0;
    	    lo = (lo + Math.imul(al0, bl4)) | 0;
    	    mid = (mid + Math.imul(al0, bh4)) | 0;
    	    mid = (mid + Math.imul(ah0, bl4)) | 0;
    	    hi = (hi + Math.imul(ah0, bh4)) | 0;
    	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    	    w4 &= 0x3ffffff;
    	    /* k = 5 */
    	    lo = Math.imul(al5, bl0);
    	    mid = Math.imul(al5, bh0);
    	    mid = (mid + Math.imul(ah5, bl0)) | 0;
    	    hi = Math.imul(ah5, bh0);
    	    lo = (lo + Math.imul(al4, bl1)) | 0;
    	    mid = (mid + Math.imul(al4, bh1)) | 0;
    	    mid = (mid + Math.imul(ah4, bl1)) | 0;
    	    hi = (hi + Math.imul(ah4, bh1)) | 0;
    	    lo = (lo + Math.imul(al3, bl2)) | 0;
    	    mid = (mid + Math.imul(al3, bh2)) | 0;
    	    mid = (mid + Math.imul(ah3, bl2)) | 0;
    	    hi = (hi + Math.imul(ah3, bh2)) | 0;
    	    lo = (lo + Math.imul(al2, bl3)) | 0;
    	    mid = (mid + Math.imul(al2, bh3)) | 0;
    	    mid = (mid + Math.imul(ah2, bl3)) | 0;
    	    hi = (hi + Math.imul(ah2, bh3)) | 0;
    	    lo = (lo + Math.imul(al1, bl4)) | 0;
    	    mid = (mid + Math.imul(al1, bh4)) | 0;
    	    mid = (mid + Math.imul(ah1, bl4)) | 0;
    	    hi = (hi + Math.imul(ah1, bh4)) | 0;
    	    lo = (lo + Math.imul(al0, bl5)) | 0;
    	    mid = (mid + Math.imul(al0, bh5)) | 0;
    	    mid = (mid + Math.imul(ah0, bl5)) | 0;
    	    hi = (hi + Math.imul(ah0, bh5)) | 0;
    	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    	    w5 &= 0x3ffffff;
    	    /* k = 6 */
    	    lo = Math.imul(al6, bl0);
    	    mid = Math.imul(al6, bh0);
    	    mid = (mid + Math.imul(ah6, bl0)) | 0;
    	    hi = Math.imul(ah6, bh0);
    	    lo = (lo + Math.imul(al5, bl1)) | 0;
    	    mid = (mid + Math.imul(al5, bh1)) | 0;
    	    mid = (mid + Math.imul(ah5, bl1)) | 0;
    	    hi = (hi + Math.imul(ah5, bh1)) | 0;
    	    lo = (lo + Math.imul(al4, bl2)) | 0;
    	    mid = (mid + Math.imul(al4, bh2)) | 0;
    	    mid = (mid + Math.imul(ah4, bl2)) | 0;
    	    hi = (hi + Math.imul(ah4, bh2)) | 0;
    	    lo = (lo + Math.imul(al3, bl3)) | 0;
    	    mid = (mid + Math.imul(al3, bh3)) | 0;
    	    mid = (mid + Math.imul(ah3, bl3)) | 0;
    	    hi = (hi + Math.imul(ah3, bh3)) | 0;
    	    lo = (lo + Math.imul(al2, bl4)) | 0;
    	    mid = (mid + Math.imul(al2, bh4)) | 0;
    	    mid = (mid + Math.imul(ah2, bl4)) | 0;
    	    hi = (hi + Math.imul(ah2, bh4)) | 0;
    	    lo = (lo + Math.imul(al1, bl5)) | 0;
    	    mid = (mid + Math.imul(al1, bh5)) | 0;
    	    mid = (mid + Math.imul(ah1, bl5)) | 0;
    	    hi = (hi + Math.imul(ah1, bh5)) | 0;
    	    lo = (lo + Math.imul(al0, bl6)) | 0;
    	    mid = (mid + Math.imul(al0, bh6)) | 0;
    	    mid = (mid + Math.imul(ah0, bl6)) | 0;
    	    hi = (hi + Math.imul(ah0, bh6)) | 0;
    	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    	    w6 &= 0x3ffffff;
    	    /* k = 7 */
    	    lo = Math.imul(al7, bl0);
    	    mid = Math.imul(al7, bh0);
    	    mid = (mid + Math.imul(ah7, bl0)) | 0;
    	    hi = Math.imul(ah7, bh0);
    	    lo = (lo + Math.imul(al6, bl1)) | 0;
    	    mid = (mid + Math.imul(al6, bh1)) | 0;
    	    mid = (mid + Math.imul(ah6, bl1)) | 0;
    	    hi = (hi + Math.imul(ah6, bh1)) | 0;
    	    lo = (lo + Math.imul(al5, bl2)) | 0;
    	    mid = (mid + Math.imul(al5, bh2)) | 0;
    	    mid = (mid + Math.imul(ah5, bl2)) | 0;
    	    hi = (hi + Math.imul(ah5, bh2)) | 0;
    	    lo = (lo + Math.imul(al4, bl3)) | 0;
    	    mid = (mid + Math.imul(al4, bh3)) | 0;
    	    mid = (mid + Math.imul(ah4, bl3)) | 0;
    	    hi = (hi + Math.imul(ah4, bh3)) | 0;
    	    lo = (lo + Math.imul(al3, bl4)) | 0;
    	    mid = (mid + Math.imul(al3, bh4)) | 0;
    	    mid = (mid + Math.imul(ah3, bl4)) | 0;
    	    hi = (hi + Math.imul(ah3, bh4)) | 0;
    	    lo = (lo + Math.imul(al2, bl5)) | 0;
    	    mid = (mid + Math.imul(al2, bh5)) | 0;
    	    mid = (mid + Math.imul(ah2, bl5)) | 0;
    	    hi = (hi + Math.imul(ah2, bh5)) | 0;
    	    lo = (lo + Math.imul(al1, bl6)) | 0;
    	    mid = (mid + Math.imul(al1, bh6)) | 0;
    	    mid = (mid + Math.imul(ah1, bl6)) | 0;
    	    hi = (hi + Math.imul(ah1, bh6)) | 0;
    	    lo = (lo + Math.imul(al0, bl7)) | 0;
    	    mid = (mid + Math.imul(al0, bh7)) | 0;
    	    mid = (mid + Math.imul(ah0, bl7)) | 0;
    	    hi = (hi + Math.imul(ah0, bh7)) | 0;
    	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    	    w7 &= 0x3ffffff;
    	    /* k = 8 */
    	    lo = Math.imul(al8, bl0);
    	    mid = Math.imul(al8, bh0);
    	    mid = (mid + Math.imul(ah8, bl0)) | 0;
    	    hi = Math.imul(ah8, bh0);
    	    lo = (lo + Math.imul(al7, bl1)) | 0;
    	    mid = (mid + Math.imul(al7, bh1)) | 0;
    	    mid = (mid + Math.imul(ah7, bl1)) | 0;
    	    hi = (hi + Math.imul(ah7, bh1)) | 0;
    	    lo = (lo + Math.imul(al6, bl2)) | 0;
    	    mid = (mid + Math.imul(al6, bh2)) | 0;
    	    mid = (mid + Math.imul(ah6, bl2)) | 0;
    	    hi = (hi + Math.imul(ah6, bh2)) | 0;
    	    lo = (lo + Math.imul(al5, bl3)) | 0;
    	    mid = (mid + Math.imul(al5, bh3)) | 0;
    	    mid = (mid + Math.imul(ah5, bl3)) | 0;
    	    hi = (hi + Math.imul(ah5, bh3)) | 0;
    	    lo = (lo + Math.imul(al4, bl4)) | 0;
    	    mid = (mid + Math.imul(al4, bh4)) | 0;
    	    mid = (mid + Math.imul(ah4, bl4)) | 0;
    	    hi = (hi + Math.imul(ah4, bh4)) | 0;
    	    lo = (lo + Math.imul(al3, bl5)) | 0;
    	    mid = (mid + Math.imul(al3, bh5)) | 0;
    	    mid = (mid + Math.imul(ah3, bl5)) | 0;
    	    hi = (hi + Math.imul(ah3, bh5)) | 0;
    	    lo = (lo + Math.imul(al2, bl6)) | 0;
    	    mid = (mid + Math.imul(al2, bh6)) | 0;
    	    mid = (mid + Math.imul(ah2, bl6)) | 0;
    	    hi = (hi + Math.imul(ah2, bh6)) | 0;
    	    lo = (lo + Math.imul(al1, bl7)) | 0;
    	    mid = (mid + Math.imul(al1, bh7)) | 0;
    	    mid = (mid + Math.imul(ah1, bl7)) | 0;
    	    hi = (hi + Math.imul(ah1, bh7)) | 0;
    	    lo = (lo + Math.imul(al0, bl8)) | 0;
    	    mid = (mid + Math.imul(al0, bh8)) | 0;
    	    mid = (mid + Math.imul(ah0, bl8)) | 0;
    	    hi = (hi + Math.imul(ah0, bh8)) | 0;
    	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    	    w8 &= 0x3ffffff;
    	    /* k = 9 */
    	    lo = Math.imul(al9, bl0);
    	    mid = Math.imul(al9, bh0);
    	    mid = (mid + Math.imul(ah9, bl0)) | 0;
    	    hi = Math.imul(ah9, bh0);
    	    lo = (lo + Math.imul(al8, bl1)) | 0;
    	    mid = (mid + Math.imul(al8, bh1)) | 0;
    	    mid = (mid + Math.imul(ah8, bl1)) | 0;
    	    hi = (hi + Math.imul(ah8, bh1)) | 0;
    	    lo = (lo + Math.imul(al7, bl2)) | 0;
    	    mid = (mid + Math.imul(al7, bh2)) | 0;
    	    mid = (mid + Math.imul(ah7, bl2)) | 0;
    	    hi = (hi + Math.imul(ah7, bh2)) | 0;
    	    lo = (lo + Math.imul(al6, bl3)) | 0;
    	    mid = (mid + Math.imul(al6, bh3)) | 0;
    	    mid = (mid + Math.imul(ah6, bl3)) | 0;
    	    hi = (hi + Math.imul(ah6, bh3)) | 0;
    	    lo = (lo + Math.imul(al5, bl4)) | 0;
    	    mid = (mid + Math.imul(al5, bh4)) | 0;
    	    mid = (mid + Math.imul(ah5, bl4)) | 0;
    	    hi = (hi + Math.imul(ah5, bh4)) | 0;
    	    lo = (lo + Math.imul(al4, bl5)) | 0;
    	    mid = (mid + Math.imul(al4, bh5)) | 0;
    	    mid = (mid + Math.imul(ah4, bl5)) | 0;
    	    hi = (hi + Math.imul(ah4, bh5)) | 0;
    	    lo = (lo + Math.imul(al3, bl6)) | 0;
    	    mid = (mid + Math.imul(al3, bh6)) | 0;
    	    mid = (mid + Math.imul(ah3, bl6)) | 0;
    	    hi = (hi + Math.imul(ah3, bh6)) | 0;
    	    lo = (lo + Math.imul(al2, bl7)) | 0;
    	    mid = (mid + Math.imul(al2, bh7)) | 0;
    	    mid = (mid + Math.imul(ah2, bl7)) | 0;
    	    hi = (hi + Math.imul(ah2, bh7)) | 0;
    	    lo = (lo + Math.imul(al1, bl8)) | 0;
    	    mid = (mid + Math.imul(al1, bh8)) | 0;
    	    mid = (mid + Math.imul(ah1, bl8)) | 0;
    	    hi = (hi + Math.imul(ah1, bh8)) | 0;
    	    lo = (lo + Math.imul(al0, bl9)) | 0;
    	    mid = (mid + Math.imul(al0, bh9)) | 0;
    	    mid = (mid + Math.imul(ah0, bl9)) | 0;
    	    hi = (hi + Math.imul(ah0, bh9)) | 0;
    	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    	    w9 &= 0x3ffffff;
    	    /* k = 10 */
    	    lo = Math.imul(al9, bl1);
    	    mid = Math.imul(al9, bh1);
    	    mid = (mid + Math.imul(ah9, bl1)) | 0;
    	    hi = Math.imul(ah9, bh1);
    	    lo = (lo + Math.imul(al8, bl2)) | 0;
    	    mid = (mid + Math.imul(al8, bh2)) | 0;
    	    mid = (mid + Math.imul(ah8, bl2)) | 0;
    	    hi = (hi + Math.imul(ah8, bh2)) | 0;
    	    lo = (lo + Math.imul(al7, bl3)) | 0;
    	    mid = (mid + Math.imul(al7, bh3)) | 0;
    	    mid = (mid + Math.imul(ah7, bl3)) | 0;
    	    hi = (hi + Math.imul(ah7, bh3)) | 0;
    	    lo = (lo + Math.imul(al6, bl4)) | 0;
    	    mid = (mid + Math.imul(al6, bh4)) | 0;
    	    mid = (mid + Math.imul(ah6, bl4)) | 0;
    	    hi = (hi + Math.imul(ah6, bh4)) | 0;
    	    lo = (lo + Math.imul(al5, bl5)) | 0;
    	    mid = (mid + Math.imul(al5, bh5)) | 0;
    	    mid = (mid + Math.imul(ah5, bl5)) | 0;
    	    hi = (hi + Math.imul(ah5, bh5)) | 0;
    	    lo = (lo + Math.imul(al4, bl6)) | 0;
    	    mid = (mid + Math.imul(al4, bh6)) | 0;
    	    mid = (mid + Math.imul(ah4, bl6)) | 0;
    	    hi = (hi + Math.imul(ah4, bh6)) | 0;
    	    lo = (lo + Math.imul(al3, bl7)) | 0;
    	    mid = (mid + Math.imul(al3, bh7)) | 0;
    	    mid = (mid + Math.imul(ah3, bl7)) | 0;
    	    hi = (hi + Math.imul(ah3, bh7)) | 0;
    	    lo = (lo + Math.imul(al2, bl8)) | 0;
    	    mid = (mid + Math.imul(al2, bh8)) | 0;
    	    mid = (mid + Math.imul(ah2, bl8)) | 0;
    	    hi = (hi + Math.imul(ah2, bh8)) | 0;
    	    lo = (lo + Math.imul(al1, bl9)) | 0;
    	    mid = (mid + Math.imul(al1, bh9)) | 0;
    	    mid = (mid + Math.imul(ah1, bl9)) | 0;
    	    hi = (hi + Math.imul(ah1, bh9)) | 0;
    	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    	    w10 &= 0x3ffffff;
    	    /* k = 11 */
    	    lo = Math.imul(al9, bl2);
    	    mid = Math.imul(al9, bh2);
    	    mid = (mid + Math.imul(ah9, bl2)) | 0;
    	    hi = Math.imul(ah9, bh2);
    	    lo = (lo + Math.imul(al8, bl3)) | 0;
    	    mid = (mid + Math.imul(al8, bh3)) | 0;
    	    mid = (mid + Math.imul(ah8, bl3)) | 0;
    	    hi = (hi + Math.imul(ah8, bh3)) | 0;
    	    lo = (lo + Math.imul(al7, bl4)) | 0;
    	    mid = (mid + Math.imul(al7, bh4)) | 0;
    	    mid = (mid + Math.imul(ah7, bl4)) | 0;
    	    hi = (hi + Math.imul(ah7, bh4)) | 0;
    	    lo = (lo + Math.imul(al6, bl5)) | 0;
    	    mid = (mid + Math.imul(al6, bh5)) | 0;
    	    mid = (mid + Math.imul(ah6, bl5)) | 0;
    	    hi = (hi + Math.imul(ah6, bh5)) | 0;
    	    lo = (lo + Math.imul(al5, bl6)) | 0;
    	    mid = (mid + Math.imul(al5, bh6)) | 0;
    	    mid = (mid + Math.imul(ah5, bl6)) | 0;
    	    hi = (hi + Math.imul(ah5, bh6)) | 0;
    	    lo = (lo + Math.imul(al4, bl7)) | 0;
    	    mid = (mid + Math.imul(al4, bh7)) | 0;
    	    mid = (mid + Math.imul(ah4, bl7)) | 0;
    	    hi = (hi + Math.imul(ah4, bh7)) | 0;
    	    lo = (lo + Math.imul(al3, bl8)) | 0;
    	    mid = (mid + Math.imul(al3, bh8)) | 0;
    	    mid = (mid + Math.imul(ah3, bl8)) | 0;
    	    hi = (hi + Math.imul(ah3, bh8)) | 0;
    	    lo = (lo + Math.imul(al2, bl9)) | 0;
    	    mid = (mid + Math.imul(al2, bh9)) | 0;
    	    mid = (mid + Math.imul(ah2, bl9)) | 0;
    	    hi = (hi + Math.imul(ah2, bh9)) | 0;
    	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    	    w11 &= 0x3ffffff;
    	    /* k = 12 */
    	    lo = Math.imul(al9, bl3);
    	    mid = Math.imul(al9, bh3);
    	    mid = (mid + Math.imul(ah9, bl3)) | 0;
    	    hi = Math.imul(ah9, bh3);
    	    lo = (lo + Math.imul(al8, bl4)) | 0;
    	    mid = (mid + Math.imul(al8, bh4)) | 0;
    	    mid = (mid + Math.imul(ah8, bl4)) | 0;
    	    hi = (hi + Math.imul(ah8, bh4)) | 0;
    	    lo = (lo + Math.imul(al7, bl5)) | 0;
    	    mid = (mid + Math.imul(al7, bh5)) | 0;
    	    mid = (mid + Math.imul(ah7, bl5)) | 0;
    	    hi = (hi + Math.imul(ah7, bh5)) | 0;
    	    lo = (lo + Math.imul(al6, bl6)) | 0;
    	    mid = (mid + Math.imul(al6, bh6)) | 0;
    	    mid = (mid + Math.imul(ah6, bl6)) | 0;
    	    hi = (hi + Math.imul(ah6, bh6)) | 0;
    	    lo = (lo + Math.imul(al5, bl7)) | 0;
    	    mid = (mid + Math.imul(al5, bh7)) | 0;
    	    mid = (mid + Math.imul(ah5, bl7)) | 0;
    	    hi = (hi + Math.imul(ah5, bh7)) | 0;
    	    lo = (lo + Math.imul(al4, bl8)) | 0;
    	    mid = (mid + Math.imul(al4, bh8)) | 0;
    	    mid = (mid + Math.imul(ah4, bl8)) | 0;
    	    hi = (hi + Math.imul(ah4, bh8)) | 0;
    	    lo = (lo + Math.imul(al3, bl9)) | 0;
    	    mid = (mid + Math.imul(al3, bh9)) | 0;
    	    mid = (mid + Math.imul(ah3, bl9)) | 0;
    	    hi = (hi + Math.imul(ah3, bh9)) | 0;
    	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    	    w12 &= 0x3ffffff;
    	    /* k = 13 */
    	    lo = Math.imul(al9, bl4);
    	    mid = Math.imul(al9, bh4);
    	    mid = (mid + Math.imul(ah9, bl4)) | 0;
    	    hi = Math.imul(ah9, bh4);
    	    lo = (lo + Math.imul(al8, bl5)) | 0;
    	    mid = (mid + Math.imul(al8, bh5)) | 0;
    	    mid = (mid + Math.imul(ah8, bl5)) | 0;
    	    hi = (hi + Math.imul(ah8, bh5)) | 0;
    	    lo = (lo + Math.imul(al7, bl6)) | 0;
    	    mid = (mid + Math.imul(al7, bh6)) | 0;
    	    mid = (mid + Math.imul(ah7, bl6)) | 0;
    	    hi = (hi + Math.imul(ah7, bh6)) | 0;
    	    lo = (lo + Math.imul(al6, bl7)) | 0;
    	    mid = (mid + Math.imul(al6, bh7)) | 0;
    	    mid = (mid + Math.imul(ah6, bl7)) | 0;
    	    hi = (hi + Math.imul(ah6, bh7)) | 0;
    	    lo = (lo + Math.imul(al5, bl8)) | 0;
    	    mid = (mid + Math.imul(al5, bh8)) | 0;
    	    mid = (mid + Math.imul(ah5, bl8)) | 0;
    	    hi = (hi + Math.imul(ah5, bh8)) | 0;
    	    lo = (lo + Math.imul(al4, bl9)) | 0;
    	    mid = (mid + Math.imul(al4, bh9)) | 0;
    	    mid = (mid + Math.imul(ah4, bl9)) | 0;
    	    hi = (hi + Math.imul(ah4, bh9)) | 0;
    	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    	    w13 &= 0x3ffffff;
    	    /* k = 14 */
    	    lo = Math.imul(al9, bl5);
    	    mid = Math.imul(al9, bh5);
    	    mid = (mid + Math.imul(ah9, bl5)) | 0;
    	    hi = Math.imul(ah9, bh5);
    	    lo = (lo + Math.imul(al8, bl6)) | 0;
    	    mid = (mid + Math.imul(al8, bh6)) | 0;
    	    mid = (mid + Math.imul(ah8, bl6)) | 0;
    	    hi = (hi + Math.imul(ah8, bh6)) | 0;
    	    lo = (lo + Math.imul(al7, bl7)) | 0;
    	    mid = (mid + Math.imul(al7, bh7)) | 0;
    	    mid = (mid + Math.imul(ah7, bl7)) | 0;
    	    hi = (hi + Math.imul(ah7, bh7)) | 0;
    	    lo = (lo + Math.imul(al6, bl8)) | 0;
    	    mid = (mid + Math.imul(al6, bh8)) | 0;
    	    mid = (mid + Math.imul(ah6, bl8)) | 0;
    	    hi = (hi + Math.imul(ah6, bh8)) | 0;
    	    lo = (lo + Math.imul(al5, bl9)) | 0;
    	    mid = (mid + Math.imul(al5, bh9)) | 0;
    	    mid = (mid + Math.imul(ah5, bl9)) | 0;
    	    hi = (hi + Math.imul(ah5, bh9)) | 0;
    	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    	    w14 &= 0x3ffffff;
    	    /* k = 15 */
    	    lo = Math.imul(al9, bl6);
    	    mid = Math.imul(al9, bh6);
    	    mid = (mid + Math.imul(ah9, bl6)) | 0;
    	    hi = Math.imul(ah9, bh6);
    	    lo = (lo + Math.imul(al8, bl7)) | 0;
    	    mid = (mid + Math.imul(al8, bh7)) | 0;
    	    mid = (mid + Math.imul(ah8, bl7)) | 0;
    	    hi = (hi + Math.imul(ah8, bh7)) | 0;
    	    lo = (lo + Math.imul(al7, bl8)) | 0;
    	    mid = (mid + Math.imul(al7, bh8)) | 0;
    	    mid = (mid + Math.imul(ah7, bl8)) | 0;
    	    hi = (hi + Math.imul(ah7, bh8)) | 0;
    	    lo = (lo + Math.imul(al6, bl9)) | 0;
    	    mid = (mid + Math.imul(al6, bh9)) | 0;
    	    mid = (mid + Math.imul(ah6, bl9)) | 0;
    	    hi = (hi + Math.imul(ah6, bh9)) | 0;
    	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    	    w15 &= 0x3ffffff;
    	    /* k = 16 */
    	    lo = Math.imul(al9, bl7);
    	    mid = Math.imul(al9, bh7);
    	    mid = (mid + Math.imul(ah9, bl7)) | 0;
    	    hi = Math.imul(ah9, bh7);
    	    lo = (lo + Math.imul(al8, bl8)) | 0;
    	    mid = (mid + Math.imul(al8, bh8)) | 0;
    	    mid = (mid + Math.imul(ah8, bl8)) | 0;
    	    hi = (hi + Math.imul(ah8, bh8)) | 0;
    	    lo = (lo + Math.imul(al7, bl9)) | 0;
    	    mid = (mid + Math.imul(al7, bh9)) | 0;
    	    mid = (mid + Math.imul(ah7, bl9)) | 0;
    	    hi = (hi + Math.imul(ah7, bh9)) | 0;
    	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    	    w16 &= 0x3ffffff;
    	    /* k = 17 */
    	    lo = Math.imul(al9, bl8);
    	    mid = Math.imul(al9, bh8);
    	    mid = (mid + Math.imul(ah9, bl8)) | 0;
    	    hi = Math.imul(ah9, bh8);
    	    lo = (lo + Math.imul(al8, bl9)) | 0;
    	    mid = (mid + Math.imul(al8, bh9)) | 0;
    	    mid = (mid + Math.imul(ah8, bl9)) | 0;
    	    hi = (hi + Math.imul(ah8, bh9)) | 0;
    	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    	    w17 &= 0x3ffffff;
    	    /* k = 18 */
    	    lo = Math.imul(al9, bl9);
    	    mid = Math.imul(al9, bh9);
    	    mid = (mid + Math.imul(ah9, bl9)) | 0;
    	    hi = Math.imul(ah9, bh9);
    	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    	    w18 &= 0x3ffffff;
    	    o[0] = w0;
    	    o[1] = w1;
    	    o[2] = w2;
    	    o[3] = w3;
    	    o[4] = w4;
    	    o[5] = w5;
    	    o[6] = w6;
    	    o[7] = w7;
    	    o[8] = w8;
    	    o[9] = w9;
    	    o[10] = w10;
    	    o[11] = w11;
    	    o[12] = w12;
    	    o[13] = w13;
    	    o[14] = w14;
    	    o[15] = w15;
    	    o[16] = w16;
    	    o[17] = w17;
    	    o[18] = w18;
    	    if (c !== 0) {
    	      o[19] = c;
    	      out.length++;
    	    }
    	    return out;
    	  };

    	  // Polyfill comb
    	  if (!Math.imul) {
    	    comb10MulTo = smallMulTo;
    	  }

    	  function bigMulTo (self, num, out) {
    	    out.negative = num.negative ^ self.negative;
    	    out.length = self.length + num.length;

    	    var carry = 0;
    	    var hncarry = 0;
    	    for (var k = 0; k < out.length - 1; k++) {
    	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    	      // note that ncarry could be >= 0x3ffffff
    	      var ncarry = hncarry;
    	      hncarry = 0;
    	      var rword = carry & 0x3ffffff;
    	      var maxJ = Math.min(k, num.length - 1);
    	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
    	        var i = k - j;
    	        var a = self.words[i] | 0;
    	        var b = num.words[j] | 0;
    	        var r = a * b;

    	        var lo = r & 0x3ffffff;
    	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
    	        lo = (lo + rword) | 0;
    	        rword = lo & 0x3ffffff;
    	        ncarry = (ncarry + (lo >>> 26)) | 0;

    	        hncarry += ncarry >>> 26;
    	        ncarry &= 0x3ffffff;
    	      }
    	      out.words[k] = rword;
    	      carry = ncarry;
    	      ncarry = hncarry;
    	    }
    	    if (carry !== 0) {
    	      out.words[k] = carry;
    	    } else {
    	      out.length--;
    	    }

    	    return out.strip();
    	  }

    	  function jumboMulTo (self, num, out) {
    	    var fftm = new FFTM();
    	    return fftm.mulp(self, num, out);
    	  }

    	  BN.prototype.mulTo = function mulTo (num, out) {
    	    var res;
    	    var len = this.length + num.length;
    	    if (this.length === 10 && num.length === 10) {
    	      res = comb10MulTo(this, num, out);
    	    } else if (len < 63) {
    	      res = smallMulTo(this, num, out);
    	    } else if (len < 1024) {
    	      res = bigMulTo(this, num, out);
    	    } else {
    	      res = jumboMulTo(this, num, out);
    	    }

    	    return res;
    	  };

    	  // Cooley-Tukey algorithm for FFT
    	  // slightly revisited to rely on looping instead of recursion

    	  function FFTM (x, y) {
    	    this.x = x;
    	    this.y = y;
    	  }

    	  FFTM.prototype.makeRBT = function makeRBT (N) {
    	    var t = new Array(N);
    	    var l = BN.prototype._countBits(N) - 1;
    	    for (var i = 0; i < N; i++) {
    	      t[i] = this.revBin(i, l, N);
    	    }

    	    return t;
    	  };

    	  // Returns binary-reversed representation of `x`
    	  FFTM.prototype.revBin = function revBin (x, l, N) {
    	    if (x === 0 || x === N - 1) return x;

    	    var rb = 0;
    	    for (var i = 0; i < l; i++) {
    	      rb |= (x & 1) << (l - i - 1);
    	      x >>= 1;
    	    }

    	    return rb;
    	  };

    	  // Performs "tweedling" phase, therefore 'emulating'
    	  // behaviour of the recursive algorithm
    	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    	    for (var i = 0; i < N; i++) {
    	      rtws[i] = rws[rbt[i]];
    	      itws[i] = iws[rbt[i]];
    	    }
    	  };

    	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    	    this.permute(rbt, rws, iws, rtws, itws, N);

    	    for (var s = 1; s < N; s <<= 1) {
    	      var l = s << 1;

    	      var rtwdf = Math.cos(2 * Math.PI / l);
    	      var itwdf = Math.sin(2 * Math.PI / l);

    	      for (var p = 0; p < N; p += l) {
    	        var rtwdf_ = rtwdf;
    	        var itwdf_ = itwdf;

    	        for (var j = 0; j < s; j++) {
    	          var re = rtws[p + j];
    	          var ie = itws[p + j];

    	          var ro = rtws[p + j + s];
    	          var io = itws[p + j + s];

    	          var rx = rtwdf_ * ro - itwdf_ * io;

    	          io = rtwdf_ * io + itwdf_ * ro;
    	          ro = rx;

    	          rtws[p + j] = re + ro;
    	          itws[p + j] = ie + io;

    	          rtws[p + j + s] = re - ro;
    	          itws[p + j + s] = ie - io;

    	          /* jshint maxdepth : false */
    	          if (j !== l) {
    	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

    	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
    	            rtwdf_ = rx;
    	          }
    	        }
    	      }
    	    }
    	  };

    	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    	    var N = Math.max(m, n) | 1;
    	    var odd = N & 1;
    	    var i = 0;
    	    for (N = N / 2 | 0; N; N = N >>> 1) {
    	      i++;
    	    }

    	    return 1 << i + 1 + odd;
    	  };

    	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    	    if (N <= 1) return;

    	    for (var i = 0; i < N / 2; i++) {
    	      var t = rws[i];

    	      rws[i] = rws[N - i - 1];
    	      rws[N - i - 1] = t;

    	      t = iws[i];

    	      iws[i] = -iws[N - i - 1];
    	      iws[N - i - 1] = -t;
    	    }
    	  };

    	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    	    var carry = 0;
    	    for (var i = 0; i < N / 2; i++) {
    	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
    	        Math.round(ws[2 * i] / N) +
    	        carry;

    	      ws[i] = w & 0x3ffffff;

    	      if (w < 0x4000000) {
    	        carry = 0;
    	      } else {
    	        carry = w / 0x4000000 | 0;
    	      }
    	    }

    	    return ws;
    	  };

    	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    	    var carry = 0;
    	    for (var i = 0; i < len; i++) {
    	      carry = carry + (ws[i] | 0);

    	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
    	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    	    }

    	    // Pad with zeroes
    	    for (i = 2 * len; i < N; ++i) {
    	      rws[i] = 0;
    	    }

    	    assert(carry === 0);
    	    assert((carry & ~0x1fff) === 0);
    	  };

    	  FFTM.prototype.stub = function stub (N) {
    	    var ph = new Array(N);
    	    for (var i = 0; i < N; i++) {
    	      ph[i] = 0;
    	    }

    	    return ph;
    	  };

    	  FFTM.prototype.mulp = function mulp (x, y, out) {
    	    var N = 2 * this.guessLen13b(x.length, y.length);

    	    var rbt = this.makeRBT(N);

    	    var _ = this.stub(N);

    	    var rws = new Array(N);
    	    var rwst = new Array(N);
    	    var iwst = new Array(N);

    	    var nrws = new Array(N);
    	    var nrwst = new Array(N);
    	    var niwst = new Array(N);

    	    var rmws = out.words;
    	    rmws.length = N;

    	    this.convert13b(x.words, x.length, rws, N);
    	    this.convert13b(y.words, y.length, nrws, N);

    	    this.transform(rws, _, rwst, iwst, N, rbt);
    	    this.transform(nrws, _, nrwst, niwst, N, rbt);

    	    for (var i = 0; i < N; i++) {
    	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
    	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
    	      rwst[i] = rx;
    	    }

    	    this.conjugate(rwst, iwst, N);
    	    this.transform(rwst, iwst, rmws, _, N, rbt);
    	    this.conjugate(rmws, _, N);
    	    this.normalize13b(rmws, N);

    	    out.negative = x.negative ^ y.negative;
    	    out.length = x.length + y.length;
    	    return out.strip();
    	  };

    	  // Multiply `this` by `num`
    	  BN.prototype.mul = function mul (num) {
    	    var out = new BN(null);
    	    out.words = new Array(this.length + num.length);
    	    return this.mulTo(num, out);
    	  };

    	  // Multiply employing FFT
    	  BN.prototype.mulf = function mulf (num) {
    	    var out = new BN(null);
    	    out.words = new Array(this.length + num.length);
    	    return jumboMulTo(this, num, out);
    	  };

    	  // In-place Multiplication
    	  BN.prototype.imul = function imul (num) {
    	    return this.clone().mulTo(num, this);
    	  };

    	  BN.prototype.imuln = function imuln (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);

    	    // Carry
    	    var carry = 0;
    	    for (var i = 0; i < this.length; i++) {
    	      var w = (this.words[i] | 0) * num;
    	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    	      carry >>= 26;
    	      carry += (w / 0x4000000) | 0;
    	      // NOTE: lo is 27bit maximum
    	      carry += lo >>> 26;
    	      this.words[i] = lo & 0x3ffffff;
    	    }

    	    if (carry !== 0) {
    	      this.words[i] = carry;
    	      this.length++;
    	    }

    	    return this;
    	  };

    	  BN.prototype.muln = function muln (num) {
    	    return this.clone().imuln(num);
    	  };

    	  // `this` * `this`
    	  BN.prototype.sqr = function sqr () {
    	    return this.mul(this);
    	  };

    	  // `this` * `this` in-place
    	  BN.prototype.isqr = function isqr () {
    	    return this.imul(this.clone());
    	  };

    	  // Math.pow(`this`, `num`)
    	  BN.prototype.pow = function pow (num) {
    	    var w = toBitArray(num);
    	    if (w.length === 0) return new BN(1);

    	    // Skip leading zeroes
    	    var res = this;
    	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
    	      if (w[i] !== 0) break;
    	    }

    	    if (++i < w.length) {
    	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
    	        if (w[i] === 0) continue;

    	        res = res.mul(q);
    	      }
    	    }

    	    return res;
    	  };

    	  // Shift-left in-place
    	  BN.prototype.iushln = function iushln (bits) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var r = bits % 26;
    	    var s = (bits - r) / 26;
    	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    	    var i;

    	    if (r !== 0) {
    	      var carry = 0;

    	      for (i = 0; i < this.length; i++) {
    	        var newCarry = this.words[i] & carryMask;
    	        var c = ((this.words[i] | 0) - newCarry) << r;
    	        this.words[i] = c | carry;
    	        carry = newCarry >>> (26 - r);
    	      }

    	      if (carry) {
    	        this.words[i] = carry;
    	        this.length++;
    	      }
    	    }

    	    if (s !== 0) {
    	      for (i = this.length - 1; i >= 0; i--) {
    	        this.words[i + s] = this.words[i];
    	      }

    	      for (i = 0; i < s; i++) {
    	        this.words[i] = 0;
    	      }

    	      this.length += s;
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.ishln = function ishln (bits) {
    	    // TODO(indutny): implement me
    	    assert(this.negative === 0);
    	    return this.iushln(bits);
    	  };

    	  // Shift-right in-place
    	  // NOTE: `hint` is a lowest bit before trailing zeroes
    	  // NOTE: if `extended` is present - it will be filled with destroyed bits
    	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var h;
    	    if (hint) {
    	      h = (hint - (hint % 26)) / 26;
    	    } else {
    	      h = 0;
    	    }

    	    var r = bits % 26;
    	    var s = Math.min((bits - r) / 26, this.length);
    	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    	    var maskedWords = extended;

    	    h -= s;
    	    h = Math.max(0, h);

    	    // Extended mode, copy masked part
    	    if (maskedWords) {
    	      for (var i = 0; i < s; i++) {
    	        maskedWords.words[i] = this.words[i];
    	      }
    	      maskedWords.length = s;
    	    }

    	    if (s === 0) ; else if (this.length > s) {
    	      this.length -= s;
    	      for (i = 0; i < this.length; i++) {
    	        this.words[i] = this.words[i + s];
    	      }
    	    } else {
    	      this.words[0] = 0;
    	      this.length = 1;
    	    }

    	    var carry = 0;
    	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    	      var word = this.words[i] | 0;
    	      this.words[i] = (carry << (26 - r)) | (word >>> r);
    	      carry = word & mask;
    	    }

    	    // Push carried bits as a mask
    	    if (maskedWords && carry !== 0) {
    	      maskedWords.words[maskedWords.length++] = carry;
    	    }

    	    if (this.length === 0) {
    	      this.words[0] = 0;
    	      this.length = 1;
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    	    // TODO(indutny): implement me
    	    assert(this.negative === 0);
    	    return this.iushrn(bits, hint, extended);
    	  };

    	  // Shift-left
    	  BN.prototype.shln = function shln (bits) {
    	    return this.clone().ishln(bits);
    	  };

    	  BN.prototype.ushln = function ushln (bits) {
    	    return this.clone().iushln(bits);
    	  };

    	  // Shift-right
    	  BN.prototype.shrn = function shrn (bits) {
    	    return this.clone().ishrn(bits);
    	  };

    	  BN.prototype.ushrn = function ushrn (bits) {
    	    return this.clone().iushrn(bits);
    	  };

    	  // Test if n bit is set
    	  BN.prototype.testn = function testn (bit) {
    	    assert(typeof bit === 'number' && bit >= 0);
    	    var r = bit % 26;
    	    var s = (bit - r) / 26;
    	    var q = 1 << r;

    	    // Fast case: bit is much higher than all existing words
    	    if (this.length <= s) return false;

    	    // Check bit and return
    	    var w = this.words[s];

    	    return !!(w & q);
    	  };

    	  // Return only lowers bits of number (in-place)
    	  BN.prototype.imaskn = function imaskn (bits) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var r = bits % 26;
    	    var s = (bits - r) / 26;

    	    assert(this.negative === 0, 'imaskn works only with positive numbers');

    	    if (this.length <= s) {
    	      return this;
    	    }

    	    if (r !== 0) {
    	      s++;
    	    }
    	    this.length = Math.min(s, this.length);

    	    if (r !== 0) {
    	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    	      this.words[this.length - 1] &= mask;
    	    }

    	    return this.strip();
    	  };

    	  // Return only lowers bits of number
    	  BN.prototype.maskn = function maskn (bits) {
    	    return this.clone().imaskn(bits);
    	  };

    	  // Add plain number `num` to `this`
    	  BN.prototype.iaddn = function iaddn (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);
    	    if (num < 0) return this.isubn(-num);

    	    // Possible sign change
    	    if (this.negative !== 0) {
    	      if (this.length === 1 && (this.words[0] | 0) < num) {
    	        this.words[0] = num - (this.words[0] | 0);
    	        this.negative = 0;
    	        return this;
    	      }

    	      this.negative = 0;
    	      this.isubn(num);
    	      this.negative = 1;
    	      return this;
    	    }

    	    // Add without checks
    	    return this._iaddn(num);
    	  };

    	  BN.prototype._iaddn = function _iaddn (num) {
    	    this.words[0] += num;

    	    // Carry
    	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    	      this.words[i] -= 0x4000000;
    	      if (i === this.length - 1) {
    	        this.words[i + 1] = 1;
    	      } else {
    	        this.words[i + 1]++;
    	      }
    	    }
    	    this.length = Math.max(this.length, i + 1);

    	    return this;
    	  };

    	  // Subtract plain number `num` from `this`
    	  BN.prototype.isubn = function isubn (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);
    	    if (num < 0) return this.iaddn(-num);

    	    if (this.negative !== 0) {
    	      this.negative = 0;
    	      this.iaddn(num);
    	      this.negative = 1;
    	      return this;
    	    }

    	    this.words[0] -= num;

    	    if (this.length === 1 && this.words[0] < 0) {
    	      this.words[0] = -this.words[0];
    	      this.negative = 1;
    	    } else {
    	      // Carry
    	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    	        this.words[i] += 0x4000000;
    	        this.words[i + 1] -= 1;
    	      }
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.addn = function addn (num) {
    	    return this.clone().iaddn(num);
    	  };

    	  BN.prototype.subn = function subn (num) {
    	    return this.clone().isubn(num);
    	  };

    	  BN.prototype.iabs = function iabs () {
    	    this.negative = 0;

    	    return this;
    	  };

    	  BN.prototype.abs = function abs () {
    	    return this.clone().iabs();
    	  };

    	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    	    var len = num.length + shift;
    	    var i;

    	    this._expand(len);

    	    var w;
    	    var carry = 0;
    	    for (i = 0; i < num.length; i++) {
    	      w = (this.words[i + shift] | 0) + carry;
    	      var right = (num.words[i] | 0) * mul;
    	      w -= right & 0x3ffffff;
    	      carry = (w >> 26) - ((right / 0x4000000) | 0);
    	      this.words[i + shift] = w & 0x3ffffff;
    	    }
    	    for (; i < this.length - shift; i++) {
    	      w = (this.words[i + shift] | 0) + carry;
    	      carry = w >> 26;
    	      this.words[i + shift] = w & 0x3ffffff;
    	    }

    	    if (carry === 0) return this.strip();

    	    // Subtraction overflow
    	    assert(carry === -1);
    	    carry = 0;
    	    for (i = 0; i < this.length; i++) {
    	      w = -(this.words[i] | 0) + carry;
    	      carry = w >> 26;
    	      this.words[i] = w & 0x3ffffff;
    	    }
    	    this.negative = 1;

    	    return this.strip();
    	  };

    	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    	    var shift = this.length - num.length;

    	    var a = this.clone();
    	    var b = num;

    	    // Normalize
    	    var bhi = b.words[b.length - 1] | 0;
    	    var bhiBits = this._countBits(bhi);
    	    shift = 26 - bhiBits;
    	    if (shift !== 0) {
    	      b = b.ushln(shift);
    	      a.iushln(shift);
    	      bhi = b.words[b.length - 1] | 0;
    	    }

    	    // Initialize quotient
    	    var m = a.length - b.length;
    	    var q;

    	    if (mode !== 'mod') {
    	      q = new BN(null);
    	      q.length = m + 1;
    	      q.words = new Array(q.length);
    	      for (var i = 0; i < q.length; i++) {
    	        q.words[i] = 0;
    	      }
    	    }

    	    var diff = a.clone()._ishlnsubmul(b, 1, m);
    	    if (diff.negative === 0) {
    	      a = diff;
    	      if (q) {
    	        q.words[m] = 1;
    	      }
    	    }

    	    for (var j = m - 1; j >= 0; j--) {
    	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
    	        (a.words[b.length + j - 1] | 0);

    	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    	      // (0x7ffffff)
    	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    	      a._ishlnsubmul(b, qj, j);
    	      while (a.negative !== 0) {
    	        qj--;
    	        a.negative = 0;
    	        a._ishlnsubmul(b, 1, j);
    	        if (!a.isZero()) {
    	          a.negative ^= 1;
    	        }
    	      }
    	      if (q) {
    	        q.words[j] = qj;
    	      }
    	    }
    	    if (q) {
    	      q.strip();
    	    }
    	    a.strip();

    	    // Denormalize
    	    if (mode !== 'div' && shift !== 0) {
    	      a.iushrn(shift);
    	    }

    	    return {
    	      div: q || null,
    	      mod: a
    	    };
    	  };

    	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
    	  //       to `div` to request div only, or be absent to
    	  //       request both div & mod
    	  //       2) `positive` is true if unsigned mod is requested
    	  BN.prototype.divmod = function divmod (num, mode, positive) {
    	    assert(!num.isZero());

    	    if (this.isZero()) {
    	      return {
    	        div: new BN(0),
    	        mod: new BN(0)
    	      };
    	    }

    	    var div, mod, res;
    	    if (this.negative !== 0 && num.negative === 0) {
    	      res = this.neg().divmod(num, mode);

    	      if (mode !== 'mod') {
    	        div = res.div.neg();
    	      }

    	      if (mode !== 'div') {
    	        mod = res.mod.neg();
    	        if (positive && mod.negative !== 0) {
    	          mod.iadd(num);
    	        }
    	      }

    	      return {
    	        div: div,
    	        mod: mod
    	      };
    	    }

    	    if (this.negative === 0 && num.negative !== 0) {
    	      res = this.divmod(num.neg(), mode);

    	      if (mode !== 'mod') {
    	        div = res.div.neg();
    	      }

    	      return {
    	        div: div,
    	        mod: res.mod
    	      };
    	    }

    	    if ((this.negative & num.negative) !== 0) {
    	      res = this.neg().divmod(num.neg(), mode);

    	      if (mode !== 'div') {
    	        mod = res.mod.neg();
    	        if (positive && mod.negative !== 0) {
    	          mod.isub(num);
    	        }
    	      }

    	      return {
    	        div: res.div,
    	        mod: mod
    	      };
    	    }

    	    // Both numbers are positive at this point

    	    // Strip both numbers to approximate shift value
    	    if (num.length > this.length || this.cmp(num) < 0) {
    	      return {
    	        div: new BN(0),
    	        mod: this
    	      };
    	    }

    	    // Very short reduction
    	    if (num.length === 1) {
    	      if (mode === 'div') {
    	        return {
    	          div: this.divn(num.words[0]),
    	          mod: null
    	        };
    	      }

    	      if (mode === 'mod') {
    	        return {
    	          div: null,
    	          mod: new BN(this.modn(num.words[0]))
    	        };
    	      }

    	      return {
    	        div: this.divn(num.words[0]),
    	        mod: new BN(this.modn(num.words[0]))
    	      };
    	    }

    	    return this._wordDiv(num, mode);
    	  };

    	  // Find `this` / `num`
    	  BN.prototype.div = function div (num) {
    	    return this.divmod(num, 'div', false).div;
    	  };

    	  // Find `this` % `num`
    	  BN.prototype.mod = function mod (num) {
    	    return this.divmod(num, 'mod', false).mod;
    	  };

    	  BN.prototype.umod = function umod (num) {
    	    return this.divmod(num, 'mod', true).mod;
    	  };

    	  // Find Round(`this` / `num`)
    	  BN.prototype.divRound = function divRound (num) {
    	    var dm = this.divmod(num);

    	    // Fast case - exact division
    	    if (dm.mod.isZero()) return dm.div;

    	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    	    var half = num.ushrn(1);
    	    var r2 = num.andln(1);
    	    var cmp = mod.cmp(half);

    	    // Round down
    	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    	    // Round up
    	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    	  };

    	  BN.prototype.modn = function modn (num) {
    	    assert(num <= 0x3ffffff);
    	    var p = (1 << 26) % num;

    	    var acc = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      acc = (p * acc + (this.words[i] | 0)) % num;
    	    }

    	    return acc;
    	  };

    	  // In-place division by number
    	  BN.prototype.idivn = function idivn (num) {
    	    assert(num <= 0x3ffffff);

    	    var carry = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      var w = (this.words[i] | 0) + carry * 0x4000000;
    	      this.words[i] = (w / num) | 0;
    	      carry = w % num;
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.divn = function divn (num) {
    	    return this.clone().idivn(num);
    	  };

    	  BN.prototype.egcd = function egcd (p) {
    	    assert(p.negative === 0);
    	    assert(!p.isZero());

    	    var x = this;
    	    var y = p.clone();

    	    if (x.negative !== 0) {
    	      x = x.umod(p);
    	    } else {
    	      x = x.clone();
    	    }

    	    // A * x + B * y = x
    	    var A = new BN(1);
    	    var B = new BN(0);

    	    // C * x + D * y = y
    	    var C = new BN(0);
    	    var D = new BN(1);

    	    var g = 0;

    	    while (x.isEven() && y.isEven()) {
    	      x.iushrn(1);
    	      y.iushrn(1);
    	      ++g;
    	    }

    	    var yp = y.clone();
    	    var xp = x.clone();

    	    while (!x.isZero()) {
    	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
    	      if (i > 0) {
    	        x.iushrn(i);
    	        while (i-- > 0) {
    	          if (A.isOdd() || B.isOdd()) {
    	            A.iadd(yp);
    	            B.isub(xp);
    	          }

    	          A.iushrn(1);
    	          B.iushrn(1);
    	        }
    	      }

    	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
    	      if (j > 0) {
    	        y.iushrn(j);
    	        while (j-- > 0) {
    	          if (C.isOdd() || D.isOdd()) {
    	            C.iadd(yp);
    	            D.isub(xp);
    	          }

    	          C.iushrn(1);
    	          D.iushrn(1);
    	        }
    	      }

    	      if (x.cmp(y) >= 0) {
    	        x.isub(y);
    	        A.isub(C);
    	        B.isub(D);
    	      } else {
    	        y.isub(x);
    	        C.isub(A);
    	        D.isub(B);
    	      }
    	    }

    	    return {
    	      a: C,
    	      b: D,
    	      gcd: y.iushln(g)
    	    };
    	  };

    	  // This is reduced incarnation of the binary EEA
    	  // above, designated to invert members of the
    	  // _prime_ fields F(p) at a maximal speed
    	  BN.prototype._invmp = function _invmp (p) {
    	    assert(p.negative === 0);
    	    assert(!p.isZero());

    	    var a = this;
    	    var b = p.clone();

    	    if (a.negative !== 0) {
    	      a = a.umod(p);
    	    } else {
    	      a = a.clone();
    	    }

    	    var x1 = new BN(1);
    	    var x2 = new BN(0);

    	    var delta = b.clone();

    	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
    	      if (i > 0) {
    	        a.iushrn(i);
    	        while (i-- > 0) {
    	          if (x1.isOdd()) {
    	            x1.iadd(delta);
    	          }

    	          x1.iushrn(1);
    	        }
    	      }

    	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
    	      if (j > 0) {
    	        b.iushrn(j);
    	        while (j-- > 0) {
    	          if (x2.isOdd()) {
    	            x2.iadd(delta);
    	          }

    	          x2.iushrn(1);
    	        }
    	      }

    	      if (a.cmp(b) >= 0) {
    	        a.isub(b);
    	        x1.isub(x2);
    	      } else {
    	        b.isub(a);
    	        x2.isub(x1);
    	      }
    	    }

    	    var res;
    	    if (a.cmpn(1) === 0) {
    	      res = x1;
    	    } else {
    	      res = x2;
    	    }

    	    if (res.cmpn(0) < 0) {
    	      res.iadd(p);
    	    }

    	    return res;
    	  };

    	  BN.prototype.gcd = function gcd (num) {
    	    if (this.isZero()) return num.abs();
    	    if (num.isZero()) return this.abs();

    	    var a = this.clone();
    	    var b = num.clone();
    	    a.negative = 0;
    	    b.negative = 0;

    	    // Remove common factor of two
    	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    	      a.iushrn(1);
    	      b.iushrn(1);
    	    }

    	    do {
    	      while (a.isEven()) {
    	        a.iushrn(1);
    	      }
    	      while (b.isEven()) {
    	        b.iushrn(1);
    	      }

    	      var r = a.cmp(b);
    	      if (r < 0) {
    	        // Swap `a` and `b` to make `a` always bigger than `b`
    	        var t = a;
    	        a = b;
    	        b = t;
    	      } else if (r === 0 || b.cmpn(1) === 0) {
    	        break;
    	      }

    	      a.isub(b);
    	    } while (true);

    	    return b.iushln(shift);
    	  };

    	  // Invert number in the field F(num)
    	  BN.prototype.invm = function invm (num) {
    	    return this.egcd(num).a.umod(num);
    	  };

    	  BN.prototype.isEven = function isEven () {
    	    return (this.words[0] & 1) === 0;
    	  };

    	  BN.prototype.isOdd = function isOdd () {
    	    return (this.words[0] & 1) === 1;
    	  };

    	  // And first word and num
    	  BN.prototype.andln = function andln (num) {
    	    return this.words[0] & num;
    	  };

    	  // Increment at the bit position in-line
    	  BN.prototype.bincn = function bincn (bit) {
    	    assert(typeof bit === 'number');
    	    var r = bit % 26;
    	    var s = (bit - r) / 26;
    	    var q = 1 << r;

    	    // Fast case: bit is much higher than all existing words
    	    if (this.length <= s) {
    	      this._expand(s + 1);
    	      this.words[s] |= q;
    	      return this;
    	    }

    	    // Add bit and propagate, if needed
    	    var carry = q;
    	    for (var i = s; carry !== 0 && i < this.length; i++) {
    	      var w = this.words[i] | 0;
    	      w += carry;
    	      carry = w >>> 26;
    	      w &= 0x3ffffff;
    	      this.words[i] = w;
    	    }
    	    if (carry !== 0) {
    	      this.words[i] = carry;
    	      this.length++;
    	    }
    	    return this;
    	  };

    	  BN.prototype.isZero = function isZero () {
    	    return this.length === 1 && this.words[0] === 0;
    	  };

    	  BN.prototype.cmpn = function cmpn (num) {
    	    var negative = num < 0;

    	    if (this.negative !== 0 && !negative) return -1;
    	    if (this.negative === 0 && negative) return 1;

    	    this.strip();

    	    var res;
    	    if (this.length > 1) {
    	      res = 1;
    	    } else {
    	      if (negative) {
    	        num = -num;
    	      }

    	      assert(num <= 0x3ffffff, 'Number is too big');

    	      var w = this.words[0] | 0;
    	      res = w === num ? 0 : w < num ? -1 : 1;
    	    }
    	    if (this.negative !== 0) return -res | 0;
    	    return res;
    	  };

    	  // Compare two numbers and return:
    	  // 1 - if `this` > `num`
    	  // 0 - if `this` == `num`
    	  // -1 - if `this` < `num`
    	  BN.prototype.cmp = function cmp (num) {
    	    if (this.negative !== 0 && num.negative === 0) return -1;
    	    if (this.negative === 0 && num.negative !== 0) return 1;

    	    var res = this.ucmp(num);
    	    if (this.negative !== 0) return -res | 0;
    	    return res;
    	  };

    	  // Unsigned comparison
    	  BN.prototype.ucmp = function ucmp (num) {
    	    // At this point both numbers have the same sign
    	    if (this.length > num.length) return 1;
    	    if (this.length < num.length) return -1;

    	    var res = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      var a = this.words[i] | 0;
    	      var b = num.words[i] | 0;

    	      if (a === b) continue;
    	      if (a < b) {
    	        res = -1;
    	      } else if (a > b) {
    	        res = 1;
    	      }
    	      break;
    	    }
    	    return res;
    	  };

    	  BN.prototype.gtn = function gtn (num) {
    	    return this.cmpn(num) === 1;
    	  };

    	  BN.prototype.gt = function gt (num) {
    	    return this.cmp(num) === 1;
    	  };

    	  BN.prototype.gten = function gten (num) {
    	    return this.cmpn(num) >= 0;
    	  };

    	  BN.prototype.gte = function gte (num) {
    	    return this.cmp(num) >= 0;
    	  };

    	  BN.prototype.ltn = function ltn (num) {
    	    return this.cmpn(num) === -1;
    	  };

    	  BN.prototype.lt = function lt (num) {
    	    return this.cmp(num) === -1;
    	  };

    	  BN.prototype.lten = function lten (num) {
    	    return this.cmpn(num) <= 0;
    	  };

    	  BN.prototype.lte = function lte (num) {
    	    return this.cmp(num) <= 0;
    	  };

    	  BN.prototype.eqn = function eqn (num) {
    	    return this.cmpn(num) === 0;
    	  };

    	  BN.prototype.eq = function eq (num) {
    	    return this.cmp(num) === 0;
    	  };

    	  //
    	  // A reduce context, could be using montgomery or something better, depending
    	  // on the `m` itself.
    	  //
    	  BN.red = function red (num) {
    	    return new Red(num);
    	  };

    	  BN.prototype.toRed = function toRed (ctx) {
    	    assert(!this.red, 'Already a number in reduction context');
    	    assert(this.negative === 0, 'red works only with positives');
    	    return ctx.convertTo(this)._forceRed(ctx);
    	  };

    	  BN.prototype.fromRed = function fromRed () {
    	    assert(this.red, 'fromRed works only with numbers in reduction context');
    	    return this.red.convertFrom(this);
    	  };

    	  BN.prototype._forceRed = function _forceRed (ctx) {
    	    this.red = ctx;
    	    return this;
    	  };

    	  BN.prototype.forceRed = function forceRed (ctx) {
    	    assert(!this.red, 'Already a number in reduction context');
    	    return this._forceRed(ctx);
    	  };

    	  BN.prototype.redAdd = function redAdd (num) {
    	    assert(this.red, 'redAdd works only with red numbers');
    	    return this.red.add(this, num);
    	  };

    	  BN.prototype.redIAdd = function redIAdd (num) {
    	    assert(this.red, 'redIAdd works only with red numbers');
    	    return this.red.iadd(this, num);
    	  };

    	  BN.prototype.redSub = function redSub (num) {
    	    assert(this.red, 'redSub works only with red numbers');
    	    return this.red.sub(this, num);
    	  };

    	  BN.prototype.redISub = function redISub (num) {
    	    assert(this.red, 'redISub works only with red numbers');
    	    return this.red.isub(this, num);
    	  };

    	  BN.prototype.redShl = function redShl (num) {
    	    assert(this.red, 'redShl works only with red numbers');
    	    return this.red.shl(this, num);
    	  };

    	  BN.prototype.redMul = function redMul (num) {
    	    assert(this.red, 'redMul works only with red numbers');
    	    this.red._verify2(this, num);
    	    return this.red.mul(this, num);
    	  };

    	  BN.prototype.redIMul = function redIMul (num) {
    	    assert(this.red, 'redMul works only with red numbers');
    	    this.red._verify2(this, num);
    	    return this.red.imul(this, num);
    	  };

    	  BN.prototype.redSqr = function redSqr () {
    	    assert(this.red, 'redSqr works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.sqr(this);
    	  };

    	  BN.prototype.redISqr = function redISqr () {
    	    assert(this.red, 'redISqr works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.isqr(this);
    	  };

    	  // Square root over p
    	  BN.prototype.redSqrt = function redSqrt () {
    	    assert(this.red, 'redSqrt works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.sqrt(this);
    	  };

    	  BN.prototype.redInvm = function redInvm () {
    	    assert(this.red, 'redInvm works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.invm(this);
    	  };

    	  // Return negative clone of `this` % `red modulo`
    	  BN.prototype.redNeg = function redNeg () {
    	    assert(this.red, 'redNeg works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.neg(this);
    	  };

    	  BN.prototype.redPow = function redPow (num) {
    	    assert(this.red && !num.red, 'redPow(normalNum)');
    	    this.red._verify1(this);
    	    return this.red.pow(this, num);
    	  };

    	  // Prime numbers with efficient reduction
    	  var primes = {
    	    k256: null,
    	    p224: null,
    	    p192: null,
    	    p25519: null
    	  };

    	  // Pseudo-Mersenne prime
    	  function MPrime (name, p) {
    	    // P = 2 ^ N - K
    	    this.name = name;
    	    this.p = new BN(p, 16);
    	    this.n = this.p.bitLength();
    	    this.k = new BN(1).iushln(this.n).isub(this.p);

    	    this.tmp = this._tmp();
    	  }

    	  MPrime.prototype._tmp = function _tmp () {
    	    var tmp = new BN(null);
    	    tmp.words = new Array(Math.ceil(this.n / 13));
    	    return tmp;
    	  };

    	  MPrime.prototype.ireduce = function ireduce (num) {
    	    // Assumes that `num` is less than `P^2`
    	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    	    var r = num;
    	    var rlen;

    	    do {
    	      this.split(r, this.tmp);
    	      r = this.imulK(r);
    	      r = r.iadd(this.tmp);
    	      rlen = r.bitLength();
    	    } while (rlen > this.n);

    	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    	    if (cmp === 0) {
    	      r.words[0] = 0;
    	      r.length = 1;
    	    } else if (cmp > 0) {
    	      r.isub(this.p);
    	    } else {
    	      if (r.strip !== undefined) {
    	        // r is BN v4 instance
    	        r.strip();
    	      } else {
    	        // r is BN v5 instance
    	        r._strip();
    	      }
    	    }

    	    return r;
    	  };

    	  MPrime.prototype.split = function split (input, out) {
    	    input.iushrn(this.n, 0, out);
    	  };

    	  MPrime.prototype.imulK = function imulK (num) {
    	    return num.imul(this.k);
    	  };

    	  function K256 () {
    	    MPrime.call(
    	      this,
    	      'k256',
    	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    	  }
    	  inherits(K256, MPrime);

    	  K256.prototype.split = function split (input, output) {
    	    // 256 = 9 * 26 + 22
    	    var mask = 0x3fffff;

    	    var outLen = Math.min(input.length, 9);
    	    for (var i = 0; i < outLen; i++) {
    	      output.words[i] = input.words[i];
    	    }
    	    output.length = outLen;

    	    if (input.length <= 9) {
    	      input.words[0] = 0;
    	      input.length = 1;
    	      return;
    	    }

    	    // Shift by 9 limbs
    	    var prev = input.words[9];
    	    output.words[output.length++] = prev & mask;

    	    for (i = 10; i < input.length; i++) {
    	      var next = input.words[i] | 0;
    	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    	      prev = next;
    	    }
    	    prev >>>= 22;
    	    input.words[i - 10] = prev;
    	    if (prev === 0 && input.length > 10) {
    	      input.length -= 10;
    	    } else {
    	      input.length -= 9;
    	    }
    	  };

    	  K256.prototype.imulK = function imulK (num) {
    	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    	    num.words[num.length] = 0;
    	    num.words[num.length + 1] = 0;
    	    num.length += 2;

    	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    	    var lo = 0;
    	    for (var i = 0; i < num.length; i++) {
    	      var w = num.words[i] | 0;
    	      lo += w * 0x3d1;
    	      num.words[i] = lo & 0x3ffffff;
    	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    	    }

    	    // Fast length reduction
    	    if (num.words[num.length - 1] === 0) {
    	      num.length--;
    	      if (num.words[num.length - 1] === 0) {
    	        num.length--;
    	      }
    	    }
    	    return num;
    	  };

    	  function P224 () {
    	    MPrime.call(
    	      this,
    	      'p224',
    	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    	  }
    	  inherits(P224, MPrime);

    	  function P192 () {
    	    MPrime.call(
    	      this,
    	      'p192',
    	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    	  }
    	  inherits(P192, MPrime);

    	  function P25519 () {
    	    // 2 ^ 255 - 19
    	    MPrime.call(
    	      this,
    	      '25519',
    	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    	  }
    	  inherits(P25519, MPrime);

    	  P25519.prototype.imulK = function imulK (num) {
    	    // K = 0x13
    	    var carry = 0;
    	    for (var i = 0; i < num.length; i++) {
    	      var hi = (num.words[i] | 0) * 0x13 + carry;
    	      var lo = hi & 0x3ffffff;
    	      hi >>>= 26;

    	      num.words[i] = lo;
    	      carry = hi;
    	    }
    	    if (carry !== 0) {
    	      num.words[num.length++] = carry;
    	    }
    	    return num;
    	  };

    	  // Exported mostly for testing purposes, use plain name instead
    	  BN._prime = function prime (name) {
    	    // Cached version of prime
    	    if (primes[name]) return primes[name];

    	    var prime;
    	    if (name === 'k256') {
    	      prime = new K256();
    	    } else if (name === 'p224') {
    	      prime = new P224();
    	    } else if (name === 'p192') {
    	      prime = new P192();
    	    } else if (name === 'p25519') {
    	      prime = new P25519();
    	    } else {
    	      throw new Error('Unknown prime ' + name);
    	    }
    	    primes[name] = prime;

    	    return prime;
    	  };

    	  //
    	  // Base reduction engine
    	  //
    	  function Red (m) {
    	    if (typeof m === 'string') {
    	      var prime = BN._prime(m);
    	      this.m = prime.p;
    	      this.prime = prime;
    	    } else {
    	      assert(m.gtn(1), 'modulus must be greater than 1');
    	      this.m = m;
    	      this.prime = null;
    	    }
    	  }

    	  Red.prototype._verify1 = function _verify1 (a) {
    	    assert(a.negative === 0, 'red works only with positives');
    	    assert(a.red, 'red works only with red numbers');
    	  };

    	  Red.prototype._verify2 = function _verify2 (a, b) {
    	    assert((a.negative | b.negative) === 0, 'red works only with positives');
    	    assert(a.red && a.red === b.red,
    	      'red works only with red numbers');
    	  };

    	  Red.prototype.imod = function imod (a) {
    	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    	    return a.umod(this.m)._forceRed(this);
    	  };

    	  Red.prototype.neg = function neg (a) {
    	    if (a.isZero()) {
    	      return a.clone();
    	    }

    	    return this.m.sub(a)._forceRed(this);
    	  };

    	  Red.prototype.add = function add (a, b) {
    	    this._verify2(a, b);

    	    var res = a.add(b);
    	    if (res.cmp(this.m) >= 0) {
    	      res.isub(this.m);
    	    }
    	    return res._forceRed(this);
    	  };

    	  Red.prototype.iadd = function iadd (a, b) {
    	    this._verify2(a, b);

    	    var res = a.iadd(b);
    	    if (res.cmp(this.m) >= 0) {
    	      res.isub(this.m);
    	    }
    	    return res;
    	  };

    	  Red.prototype.sub = function sub (a, b) {
    	    this._verify2(a, b);

    	    var res = a.sub(b);
    	    if (res.cmpn(0) < 0) {
    	      res.iadd(this.m);
    	    }
    	    return res._forceRed(this);
    	  };

    	  Red.prototype.isub = function isub (a, b) {
    	    this._verify2(a, b);

    	    var res = a.isub(b);
    	    if (res.cmpn(0) < 0) {
    	      res.iadd(this.m);
    	    }
    	    return res;
    	  };

    	  Red.prototype.shl = function shl (a, num) {
    	    this._verify1(a);
    	    return this.imod(a.ushln(num));
    	  };

    	  Red.prototype.imul = function imul (a, b) {
    	    this._verify2(a, b);
    	    return this.imod(a.imul(b));
    	  };

    	  Red.prototype.mul = function mul (a, b) {
    	    this._verify2(a, b);
    	    return this.imod(a.mul(b));
    	  };

    	  Red.prototype.isqr = function isqr (a) {
    	    return this.imul(a, a.clone());
    	  };

    	  Red.prototype.sqr = function sqr (a) {
    	    return this.mul(a, a);
    	  };

    	  Red.prototype.sqrt = function sqrt (a) {
    	    if (a.isZero()) return a.clone();

    	    var mod3 = this.m.andln(3);
    	    assert(mod3 % 2 === 1);

    	    // Fast case
    	    if (mod3 === 3) {
    	      var pow = this.m.add(new BN(1)).iushrn(2);
    	      return this.pow(a, pow);
    	    }

    	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    	    //
    	    // Find Q and S, that Q * 2 ^ S = (P - 1)
    	    var q = this.m.subn(1);
    	    var s = 0;
    	    while (!q.isZero() && q.andln(1) === 0) {
    	      s++;
    	      q.iushrn(1);
    	    }
    	    assert(!q.isZero());

    	    var one = new BN(1).toRed(this);
    	    var nOne = one.redNeg();

    	    // Find quadratic non-residue
    	    // NOTE: Max is such because of generalized Riemann hypothesis.
    	    var lpow = this.m.subn(1).iushrn(1);
    	    var z = this.m.bitLength();
    	    z = new BN(2 * z * z).toRed(this);

    	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
    	      z.redIAdd(nOne);
    	    }

    	    var c = this.pow(z, q);
    	    var r = this.pow(a, q.addn(1).iushrn(1));
    	    var t = this.pow(a, q);
    	    var m = s;
    	    while (t.cmp(one) !== 0) {
    	      var tmp = t;
    	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
    	        tmp = tmp.redSqr();
    	      }
    	      assert(i < m);
    	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

    	      r = r.redMul(b);
    	      c = b.redSqr();
    	      t = t.redMul(c);
    	      m = i;
    	    }

    	    return r;
    	  };

    	  Red.prototype.invm = function invm (a) {
    	    var inv = a._invmp(this.m);
    	    if (inv.negative !== 0) {
    	      inv.negative = 0;
    	      return this.imod(inv).redNeg();
    	    } else {
    	      return this.imod(inv);
    	    }
    	  };

    	  Red.prototype.pow = function pow (a, num) {
    	    if (num.isZero()) return new BN(1).toRed(this);
    	    if (num.cmpn(1) === 0) return a.clone();

    	    var windowSize = 4;
    	    var wnd = new Array(1 << windowSize);
    	    wnd[0] = new BN(1).toRed(this);
    	    wnd[1] = a;
    	    for (var i = 2; i < wnd.length; i++) {
    	      wnd[i] = this.mul(wnd[i - 1], a);
    	    }

    	    var res = wnd[0];
    	    var current = 0;
    	    var currentLen = 0;
    	    var start = num.bitLength() % 26;
    	    if (start === 0) {
    	      start = 26;
    	    }

    	    for (i = num.length - 1; i >= 0; i--) {
    	      var word = num.words[i];
    	      for (var j = start - 1; j >= 0; j--) {
    	        var bit = (word >> j) & 1;
    	        if (res !== wnd[0]) {
    	          res = this.sqr(res);
    	        }

    	        if (bit === 0 && current === 0) {
    	          currentLen = 0;
    	          continue;
    	        }

    	        current <<= 1;
    	        current |= bit;
    	        currentLen++;
    	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

    	        res = this.mul(res, wnd[current]);
    	        currentLen = 0;
    	        current = 0;
    	      }
    	      start = 26;
    	    }

    	    return res;
    	  };

    	  Red.prototype.convertTo = function convertTo (num) {
    	    var r = num.umod(this.m);

    	    return r === num ? r.clone() : r;
    	  };

    	  Red.prototype.convertFrom = function convertFrom (num) {
    	    var res = num.clone();
    	    res.red = null;
    	    return res;
    	  };

    	  //
    	  // Montgomery method engine
    	  //

    	  BN.mont = function mont (num) {
    	    return new Mont(num);
    	  };

    	  function Mont (m) {
    	    Red.call(this, m);

    	    this.shift = this.m.bitLength();
    	    if (this.shift % 26 !== 0) {
    	      this.shift += 26 - (this.shift % 26);
    	    }

    	    this.r = new BN(1).iushln(this.shift);
    	    this.r2 = this.imod(this.r.sqr());
    	    this.rinv = this.r._invmp(this.m);

    	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    	    this.minv = this.minv.umod(this.r);
    	    this.minv = this.r.sub(this.minv);
    	  }
    	  inherits(Mont, Red);

    	  Mont.prototype.convertTo = function convertTo (num) {
    	    return this.imod(num.ushln(this.shift));
    	  };

    	  Mont.prototype.convertFrom = function convertFrom (num) {
    	    var r = this.imod(num.mul(this.rinv));
    	    r.red = null;
    	    return r;
    	  };

    	  Mont.prototype.imul = function imul (a, b) {
    	    if (a.isZero() || b.isZero()) {
    	      a.words[0] = 0;
    	      a.length = 1;
    	      return a;
    	    }

    	    var t = a.imul(b);
    	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    	    var u = t.isub(c).iushrn(this.shift);
    	    var res = u;

    	    if (u.cmp(this.m) >= 0) {
    	      res = u.isub(this.m);
    	    } else if (u.cmpn(0) < 0) {
    	      res = u.iadd(this.m);
    	    }

    	    return res._forceRed(this);
    	  };

    	  Mont.prototype.mul = function mul (a, b) {
    	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    	    var t = a.mul(b);
    	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    	    var u = t.isub(c).iushrn(this.shift);
    	    var res = u;
    	    if (u.cmp(this.m) >= 0) {
    	      res = u.isub(this.m);
    	    } else if (u.cmpn(0) < 0) {
    	      res = u.iadd(this.m);
    	    }

    	    return res._forceRed(this);
    	  };

    	  Mont.prototype.invm = function invm (a) {
    	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    	    var res = this.imod(a._invmp(this.m).mul(this.r2));
    	    return res._forceRed(this);
    	  };
    	})(module, commonjsGlobal); 
    } (bn$2));

    var bnExports = bn$2.exports;

    var minimalisticAssert = assert$j;

    function assert$j(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$j.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils$y = {};

    (function (exports) {

    	var utils = exports;

    	function toArray(msg, enc) {
    	  if (Array.isArray(msg))
    	    return msg.slice();
    	  if (!msg)
    	    return [];
    	  var res = [];
    	  if (typeof msg !== 'string') {
    	    for (var i = 0; i < msg.length; i++)
    	      res[i] = msg[i] | 0;
    	    return res;
    	  }
    	  if (enc === 'hex') {
    	    msg = msg.replace(/[^a-z0-9]+/ig, '');
    	    if (msg.length % 2 !== 0)
    	      msg = '0' + msg;
    	    for (var i = 0; i < msg.length; i += 2)
    	      res.push(parseInt(msg[i] + msg[i + 1], 16));
    	  } else {
    	    for (var i = 0; i < msg.length; i++) {
    	      var c = msg.charCodeAt(i);
    	      var hi = c >> 8;
    	      var lo = c & 0xff;
    	      if (hi)
    	        res.push(hi, lo);
    	      else
    	        res.push(lo);
    	    }
    	  }
    	  return res;
    	}
    	utils.toArray = toArray;

    	function zero2(word) {
    	  if (word.length === 1)
    	    return '0' + word;
    	  else
    	    return word;
    	}
    	utils.zero2 = zero2;

    	function toHex(msg) {
    	  var res = '';
    	  for (var i = 0; i < msg.length; i++)
    	    res += zero2(msg[i].toString(16));
    	  return res;
    	}
    	utils.toHex = toHex;

    	utils.encode = function encode(arr, enc) {
    	  if (enc === 'hex')
    	    return toHex(arr);
    	  else
    	    return arr;
    	}; 
    } (utils$y));

    (function (exports) {

    	var utils = exports;
    	var BN = bnExports;
    	var minAssert = minimalisticAssert;
    	var minUtils = utils$y;

    	utils.assert = minAssert;
    	utils.toArray = minUtils.toArray;
    	utils.zero2 = minUtils.zero2;
    	utils.toHex = minUtils.toHex;
    	utils.encode = minUtils.encode;

    	// Represent num in a w-NAF form
    	function getNAF(num, w, bits) {
    	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    	  naf.fill(0);

    	  var ws = 1 << (w + 1);
    	  var k = num.clone();

    	  for (var i = 0; i < naf.length; i++) {
    	    var z;
    	    var mod = k.andln(ws - 1);
    	    if (k.isOdd()) {
    	      if (mod > (ws >> 1) - 1)
    	        z = (ws >> 1) - mod;
    	      else
    	        z = mod;
    	      k.isubn(z);
    	    } else {
    	      z = 0;
    	    }

    	    naf[i] = z;
    	    k.iushrn(1);
    	  }

    	  return naf;
    	}
    	utils.getNAF = getNAF;

    	// Represent k1, k2 in a Joint Sparse Form
    	function getJSF(k1, k2) {
    	  var jsf = [
    	    [],
    	    [],
    	  ];

    	  k1 = k1.clone();
    	  k2 = k2.clone();
    	  var d1 = 0;
    	  var d2 = 0;
    	  var m8;
    	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    	    // First phase
    	    var m14 = (k1.andln(3) + d1) & 3;
    	    var m24 = (k2.andln(3) + d2) & 3;
    	    if (m14 === 3)
    	      m14 = -1;
    	    if (m24 === 3)
    	      m24 = -1;
    	    var u1;
    	    if ((m14 & 1) === 0) {
    	      u1 = 0;
    	    } else {
    	      m8 = (k1.andln(7) + d1) & 7;
    	      if ((m8 === 3 || m8 === 5) && m24 === 2)
    	        u1 = -m14;
    	      else
    	        u1 = m14;
    	    }
    	    jsf[0].push(u1);

    	    var u2;
    	    if ((m24 & 1) === 0) {
    	      u2 = 0;
    	    } else {
    	      m8 = (k2.andln(7) + d2) & 7;
    	      if ((m8 === 3 || m8 === 5) && m14 === 2)
    	        u2 = -m24;
    	      else
    	        u2 = m24;
    	    }
    	    jsf[1].push(u2);

    	    // Second phase
    	    if (2 * d1 === u1 + 1)
    	      d1 = 1 - d1;
    	    if (2 * d2 === u2 + 1)
    	      d2 = 1 - d2;
    	    k1.iushrn(1);
    	    k2.iushrn(1);
    	  }

    	  return jsf;
    	}
    	utils.getJSF = getJSF;

    	function cachedProperty(obj, name, computer) {
    	  var key = '_' + name;
    	  obj.prototype[name] = function cachedProperty() {
    	    return this[key] !== undefined ? this[key] :
    	      this[key] = computer.call(this);
    	  };
    	}
    	utils.cachedProperty = cachedProperty;

    	function parseBytes(bytes) {
    	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    	    bytes;
    	}
    	utils.parseBytes = parseBytes;

    	function intFromLE(bytes) {
    	  return new BN(bytes, 'hex', 'le');
    	}
    	utils.intFromLE = intFromLE; 
    } (utils$z));

    var brorand = {exports: {}};

    var _polyfillNode_crypto = {};

    var _polyfillNode_crypto$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        default: _polyfillNode_crypto
    });

    var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_crypto$1);

    var r$4;

    brorand.exports = function rand(len) {
      if (!r$4)
        r$4 = new Rand(null);

      return r$4.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }
    brorand.exports.Rand = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };

    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);

      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };

    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };

      // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function() {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto$3 = require$$0$3;
        if (typeof crypto$3.randomBytes !== 'function')
          throw new Error('Not supported');

        Rand.prototype._rand = function _rand(n) {
          return crypto$3.randomBytes(n);
        };
      } catch (e) {
      }
    }

    var brorandExports = brorand.exports;

    var curve = {};

    var BN$8 = bnExports;
    var utils$x = utils$z;
    var getNAF = utils$x.getNAF;
    var getJSF = utils$x.getJSF;
    var assert$i = utils$x.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN$8(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? BN$8.red(conf.prime) : BN$8.mont(this.p);

      // Useful for many curves
      this.zero = new BN$8(0).toRed(this.red);
      this.one = new BN$8(1).toRed(this.red);
      this.two = new BN$8(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new BN$8(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base$2 = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$i(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$i(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils$x.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$i(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$i(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils$x.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits$k;
    if (typeof Object.create === 'function'){
      inherits$k = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits$k = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$l = inherits$k;

    var _polyfillNode_inherits = /*#__PURE__*/Object.freeze({
        __proto__: null,
        default: inherits$l
    });

    var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_inherits);

    var utils$w = utils$z;
    var BN$7 = bnExports;
    var inherits$j = require$$0$2;
    var Base$5 = base$2;

    var assert$h = utils$w.assert;

    function ShortCurve(conf) {
      Base$5.call(this, 'short', conf);

      this.a = new BN$7(conf.a, 16).toRed(this.red);
      this.b = new BN$7(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits$j(ShortCurve, Base$5);
    var short = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN$7(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN$7(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$h(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN$7(vec.a, 16),
            b: new BN$7(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : BN$7.mont(num);
      var tinv = new BN$7(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new BN$7(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN$7(1);
      var y1 = new BN$7(0);
      var x2 = new BN$7(0);
      var y2 = new BN$7(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN$7(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point$2(curve, x, y, isRed) {
      Base$5.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN$7(x, 16);
        this.y = new BN$7(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits$j(Point$2, Base$5.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point$2(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point$2.fromJSON(this, obj, red);
    };

    Point$2.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point$2.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point$2.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point$2.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point$2.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point$2.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point$2.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point$2.prototype.mul = function mul(k) {
      k = new BN$7(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point$2.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point$2.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point$2.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      Base$5.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN$7(0);
      } else {
        this.x = new BN$7(x, 16);
        this.y = new BN$7(y, 16);
        this.z = new BN$7(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits$j(JPoint, Base$5.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN$7(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    var BN$6 = bnExports;
    var inherits$i = require$$0$2;
    var Base$4 = base$2;

    var utils$v = utils$z;

    function MontCurve(conf) {
      Base$4.call(this, 'mont', conf);

      this.a = new BN$6(conf.a, 16).toRed(this.red);
      this.b = new BN$6(conf.b, 16).toRed(this.red);
      this.i4 = new BN$6(4).toRed(this.red).redInvm();
      this.two = new BN$6(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits$i(MontCurve, Base$4);
    var mont = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();

      return y.redSqr().cmp(rhs) === 0;
    };

    function Point$1(curve, x, z) {
      Base$4.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN$6(x, 16);
        this.z = new BN$6(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits$i(Point$1, Base$4.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils$v.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point$1(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point$1.fromJSON(this, obj);
    };

    Point$1.prototype.precompute = function precompute() {
      // No-op
    };

    Point$1.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point$1.fromJSON = function fromJSON(curve, obj) {
      return new Point$1(curve, obj[0], obj[1] || curve.one);
    };

    Point$1.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point$1.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point$1.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A

      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A

      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };

    Point$1.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point$1.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point$1.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();

      return this.x.fromRed();
    };

    var utils$u = utils$z;
    var BN$5 = bnExports;
    var inherits$h = require$$0$2;
    var Base$3 = base$2;

    var assert$g = utils$u.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;

      Base$3.call(this, 'edwards', conf);

      this.a = new BN$5(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN$5(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN$5(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);

      assert$g(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits$h(EdwardsCurve, Base$3);
    var edwards = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };

    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN$5(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN$5(y, 16);
      if (!y.red)
        y = y.toRed(this.red);

      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;

      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();

      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

      return lhs.cmp(rhs) === 0;
    };

    function Point(curve, x, y, z, t) {
      Base$3.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN$5(x, 16);
        this.y = new BN$5(y, 16);
        this.z = z ? new BN$5(z, 16) : this.curve.one;
        this.t = t && new BN$5(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits$h(Point, Base$3.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
        (this.zOne && this.y.cmp(this.curve.c) === 0));
    };

    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S

      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();

      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          h = this.z.redSqr();
          // J = F - 2 * H
          j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };

    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M

      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S

      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;

      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };

    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };

    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;

      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg());
    };

    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point.prototype.eq = function eq(other) {
      return this === other ||
             this.getX().cmp(other.getX()) === 0 &&
             this.getY().cmp(other.getY()) === 0;
    };

    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;

    (function (exports) {

    	var curve = exports;

    	curve.base = base$2;
    	curve.short = short;
    	curve.mont = mont;
    	curve.edwards = edwards; 
    } (curve));

    var curves$2 = {};

    var hash$4 = {};

    var utils$t = {};

    var assert$f = minimalisticAssert;
    var inherits$g = require$$0$2;

    utils$t.inherits = inherits$g;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray$1(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    utils$t.toArray = toArray$1;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils$t.toHex = toHex;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    utils$t.htonl = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    utils$t.toHex32 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils$t.zero2 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    utils$t.zero8 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      assert$f(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    utils$t.join32 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    utils$t.split32 = split32;

    function rotr32$1(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    utils$t.rotr32 = rotr32$1;

    function rotl32$2(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    utils$t.rotl32 = rotl32$2;

    function sum32$3(a, b) {
      return (a + b) >>> 0;
    }
    utils$t.sum32 = sum32$3;

    function sum32_3$1(a, b, c) {
      return (a + b + c) >>> 0;
    }
    utils$t.sum32_3 = sum32_3$1;

    function sum32_4$2(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    utils$t.sum32_4 = sum32_4$2;

    function sum32_5$2(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    utils$t.sum32_5 = sum32_5$2;

    function sum64$1(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    utils$t.sum64 = sum64$1;

    function sum64_hi$1(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    utils$t.sum64_hi = sum64_hi$1;

    function sum64_lo$1(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    utils$t.sum64_lo = sum64_lo$1;

    function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    utils$t.sum64_4_hi = sum64_4_hi$1;

    function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    utils$t.sum64_4_lo = sum64_4_lo$1;

    function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    utils$t.sum64_5_hi = sum64_5_hi$1;

    function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    utils$t.sum64_5_lo = sum64_5_lo$1;

    function rotr64_hi$1(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    utils$t.rotr64_hi = rotr64_hi$1;

    function rotr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    utils$t.rotr64_lo = rotr64_lo$1;

    function shr64_hi$1(ah, al, num) {
      return ah >>> num;
    }
    utils$t.shr64_hi = shr64_hi$1;

    function shr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    utils$t.shr64_lo = shr64_lo$1;

    var common$5 = {};

    var utils$s = utils$t;
    var assert$e = minimalisticAssert;

    function BlockHash$4() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    common$5.BlockHash = BlockHash$4;

    BlockHash$4.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$s.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$s.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$4.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert$e(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$4.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var sha$3 = {};

    var common$4 = {};

    var utils$r = utils$t;
    var rotr32 = utils$r.rotr32;

    function ft_1$1(s, x, y, z) {
      if (s === 0)
        return ch32$1(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32$1(x, y, z);
    }
    common$4.ft_1 = ft_1$1;

    function ch32$1(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    common$4.ch32 = ch32$1;

    function maj32$1(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    common$4.maj32 = maj32$1;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    common$4.p32 = p32;

    function s0_256$1(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    common$4.s0_256 = s0_256$1;

    function s1_256$1(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    common$4.s1_256 = s1_256$1;

    function g0_256$1(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    common$4.g0_256 = g0_256$1;

    function g1_256$1(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    common$4.g1_256 = g1_256$1;

    var utils$q = utils$t;
    var common$3 = common$5;
    var shaCommon$1 = common$4;

    var rotl32$1 = utils$q.rotl32;
    var sum32$2 = utils$q.sum32;
    var sum32_5$1 = utils$q.sum32_5;
    var ft_1 = shaCommon$1.ft_1;
    var BlockHash$3 = common$3.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$3.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$q.inherits(SHA1, BlockHash$3);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$q.toHex32(this.h, 'big');
      else
        return utils$q.split32(this.h, 'big');
    };

    var utils$p = utils$t;
    var common$2 = common$5;
    var shaCommon = common$4;
    var assert$d = minimalisticAssert;

    var sum32$1 = utils$p.sum32;
    var sum32_4$1 = utils$p.sum32_4;
    var sum32_5 = utils$p.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;

    var BlockHash$2 = common$2.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256$1() {
      if (!(this instanceof SHA256$1))
        return new SHA256$1();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$p.inherits(SHA256$1, BlockHash$2);
    var _256 = SHA256$1;

    SHA256$1.blockSize = 512;
    SHA256$1.outSize = 256;
    SHA256$1.hmacStrength = 192;
    SHA256$1.padLength = 64;

    SHA256$1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      assert$d(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
      this.h[5] = sum32$1(this.h[5], f);
      this.h[6] = sum32$1(this.h[6], g);
      this.h[7] = sum32$1(this.h[7], h);
    };

    SHA256$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$p.toHex32(this.h, 'big');
      else
        return utils$p.split32(this.h, 'big');
    };

    var utils$o = utils$t;
    var SHA256 = _256;

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      SHA256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$o.inherits(SHA224, SHA256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$o.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$o.split32(this.h.slice(0, 7), 'big');
    };

    var utils$n = utils$t;
    var common$1 = common$5;
    var assert$c = minimalisticAssert;

    var rotr64_hi = utils$n.rotr64_hi;
    var rotr64_lo = utils$n.rotr64_lo;
    var shr64_hi = utils$n.shr64_hi;
    var shr64_lo = utils$n.shr64_lo;
    var sum64 = utils$n.sum64;
    var sum64_hi = utils$n.sum64_hi;
    var sum64_lo = utils$n.sum64_lo;
    var sum64_4_hi = utils$n.sum64_4_hi;
    var sum64_4_lo = utils$n.sum64_4_lo;
    var sum64_5_hi = utils$n.sum64_5_hi;
    var sum64_5_lo = utils$n.sum64_5_lo;

    var BlockHash$1 = common$1.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512$2() {
      if (!(this instanceof SHA512$2))
        return new SHA512$2();

      BlockHash$1.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$n.inherits(SHA512$2, BlockHash$1);
    var _512 = SHA512$2;

    SHA512$2.blockSize = 1024;
    SHA512$2.outSize = 512;
    SHA512$2.hmacStrength = 192;
    SHA512$2.padLength = 128;

    SHA512$2.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512$2.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      assert$c(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512$2.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$n.toHex32(this.h, 'big');
      else
        return utils$n.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    var utils$m = utils$t;

    var SHA512$1 = _512;

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      SHA512$1.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$m.inherits(SHA384, SHA512$1);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$m.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$m.split32(this.h.slice(0, 12), 'big');
    };

    sha$3.sha1 = _1;
    sha$3.sha224 = _224;
    sha$3.sha256 = _256;
    sha$3.sha384 = _384;
    sha$3.sha512 = _512;

    var ripemd = {};

    var utils$l = utils$t;
    var common = common$5;

    var rotl32 = utils$l.rotl32;
    var sum32 = utils$l.sum32;
    var sum32_3 = utils$l.sum32_3;
    var sum32_4 = utils$l.sum32_4;
    var BlockHash = common.BlockHash;

    function RIPEMD160$3() {
      if (!(this instanceof RIPEMD160$3))
        return new RIPEMD160$3();

      BlockHash.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$l.inherits(RIPEMD160$3, BlockHash);
    ripemd.ripemd160 = RIPEMD160$3;

    RIPEMD160$3.blockSize = 512;
    RIPEMD160$3.outSize = 160;
    RIPEMD160$3.hmacStrength = 192;
    RIPEMD160$3.padLength = 64;

    RIPEMD160$3.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f$2(j, B, C, D), msg[r$3[j] + start], K$6(j)),
            s$1[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f$2(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160$3.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$l.toHex32(this.h, 'little');
      else
        return utils$l.split32(this.h, 'little');
    };

    function f$2(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K$6(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r$3 = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s$1 = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var utils$k = utils$t;
    var assert$b = minimalisticAssert;

    function Hmac$2(hash, key, enc) {
      if (!(this instanceof Hmac$2))
        return new Hmac$2(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$k.toArray(key, enc));
    }
    var hmac = Hmac$2;

    Hmac$2.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert$b(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac$2.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac$2.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    (function (exports) {
    	var hash = exports;

    	hash.utils = utils$t;
    	hash.common = common$5;
    	hash.sha = sha$3;
    	hash.ripemd = ripemd;
    	hash.hmac = hmac;

    	// Proxy hash functions to the main object
    	hash.sha1 = hash.sha.sha1;
    	hash.sha256 = hash.sha.sha256;
    	hash.sha224 = hash.sha.sha224;
    	hash.sha384 = hash.sha.sha384;
    	hash.sha512 = hash.sha.sha512;
    	hash.ripemd160 = hash.ripemd.ripemd160; 
    } (hash$4));

    var secp256k1$2;
    var hasRequiredSecp256k1;

    function requireSecp256k1 () {
    	if (hasRequiredSecp256k1) return secp256k1$2;
    	hasRequiredSecp256k1 = 1;
    	secp256k1$2 = {
    	  doubles: {
    	    step: 4,
    	    points: [
    	      [
    	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
    	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
    	      ],
    	      [
    	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
    	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
    	      ],
    	      [
    	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
    	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
    	      ],
    	      [
    	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
    	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
    	      ],
    	      [
    	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
    	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
    	      ],
    	      [
    	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
    	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
    	      ],
    	      [
    	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
    	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
    	      ],
    	      [
    	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
    	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
    	      ],
    	      [
    	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
    	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
    	      ],
    	      [
    	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
    	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
    	      ],
    	      [
    	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
    	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
    	      ],
    	      [
    	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
    	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
    	      ],
    	      [
    	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
    	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
    	      ],
    	      [
    	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
    	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
    	      ],
    	      [
    	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
    	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
    	      ],
    	      [
    	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
    	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
    	      ],
    	      [
    	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
    	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
    	      ],
    	      [
    	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
    	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
    	      ],
    	      [
    	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
    	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
    	      ],
    	      [
    	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
    	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
    	      ],
    	      [
    	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
    	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
    	      ],
    	      [
    	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
    	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
    	      ],
    	      [
    	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
    	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
    	      ],
    	      [
    	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
    	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
    	      ],
    	      [
    	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
    	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
    	      ],
    	      [
    	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
    	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
    	      ],
    	      [
    	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
    	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
    	      ],
    	      [
    	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
    	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
    	      ],
    	      [
    	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
    	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
    	      ],
    	      [
    	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
    	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
    	      ],
    	      [
    	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
    	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
    	      ],
    	      [
    	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
    	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
    	      ],
    	      [
    	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
    	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
    	      ],
    	      [
    	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
    	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
    	      ],
    	      [
    	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
    	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
    	      ],
    	      [
    	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
    	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
    	      ],
    	      [
    	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
    	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
    	      ],
    	      [
    	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
    	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
    	      ],
    	      [
    	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
    	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
    	      ],
    	      [
    	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
    	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
    	      ],
    	      [
    	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
    	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
    	      ],
    	      [
    	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
    	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
    	      ],
    	      [
    	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
    	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
    	      ],
    	      [
    	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
    	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
    	      ],
    	      [
    	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
    	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
    	      ],
    	      [
    	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
    	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
    	      ],
    	      [
    	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
    	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
    	      ],
    	      [
    	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
    	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
    	      ],
    	      [
    	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
    	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
    	      ],
    	      [
    	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
    	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
    	      ],
    	      [
    	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
    	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
    	      ],
    	      [
    	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
    	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
    	      ],
    	      [
    	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
    	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
    	      ],
    	      [
    	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
    	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
    	      ],
    	      [
    	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
    	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
    	      ],
    	      [
    	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
    	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
    	      ],
    	      [
    	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
    	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
    	      ],
    	      [
    	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
    	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
    	      ],
    	      [
    	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
    	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
    	      ],
    	      [
    	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
    	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
    	      ],
    	      [
    	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
    	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
    	      ],
    	      [
    	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
    	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
    	      ],
    	      [
    	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
    	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
    	      ],
    	      [
    	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
    	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
    	      ],
    	      [
    	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
    	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
    	      ],
    	    ],
    	  },
    	  naf: {
    	    wnd: 7,
    	    points: [
    	      [
    	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
    	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
    	      ],
    	      [
    	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
    	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
    	      ],
    	      [
    	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
    	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
    	      ],
    	      [
    	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
    	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
    	      ],
    	      [
    	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
    	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
    	      ],
    	      [
    	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
    	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
    	      ],
    	      [
    	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
    	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
    	      ],
    	      [
    	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
    	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
    	      ],
    	      [
    	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
    	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
    	      ],
    	      [
    	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
    	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
    	      ],
    	      [
    	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
    	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
    	      ],
    	      [
    	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
    	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
    	      ],
    	      [
    	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
    	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
    	      ],
    	      [
    	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
    	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
    	      ],
    	      [
    	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
    	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
    	      ],
    	      [
    	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
    	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
    	      ],
    	      [
    	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
    	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
    	      ],
    	      [
    	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
    	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
    	      ],
    	      [
    	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
    	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
    	      ],
    	      [
    	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
    	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
    	      ],
    	      [
    	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
    	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
    	      ],
    	      [
    	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
    	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
    	      ],
    	      [
    	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
    	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
    	      ],
    	      [
    	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
    	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
    	      ],
    	      [
    	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
    	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
    	      ],
    	      [
    	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
    	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
    	      ],
    	      [
    	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
    	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
    	      ],
    	      [
    	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
    	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
    	      ],
    	      [
    	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
    	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
    	      ],
    	      [
    	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
    	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
    	      ],
    	      [
    	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
    	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
    	      ],
    	      [
    	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
    	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
    	      ],
    	      [
    	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
    	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
    	      ],
    	      [
    	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
    	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
    	      ],
    	      [
    	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
    	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
    	      ],
    	      [
    	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
    	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
    	      ],
    	      [
    	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
    	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
    	      ],
    	      [
    	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
    	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
    	      ],
    	      [
    	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
    	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
    	      ],
    	      [
    	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
    	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
    	      ],
    	      [
    	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
    	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
    	      ],
    	      [
    	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
    	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
    	      ],
    	      [
    	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
    	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
    	      ],
    	      [
    	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
    	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
    	      ],
    	      [
    	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
    	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
    	      ],
    	      [
    	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
    	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
    	      ],
    	      [
    	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
    	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
    	      ],
    	      [
    	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
    	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
    	      ],
    	      [
    	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
    	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
    	      ],
    	      [
    	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
    	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
    	      ],
    	      [
    	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
    	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
    	      ],
    	      [
    	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
    	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
    	      ],
    	      [
    	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
    	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
    	      ],
    	      [
    	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
    	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
    	      ],
    	      [
    	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
    	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
    	      ],
    	      [
    	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
    	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
    	      ],
    	      [
    	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
    	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
    	      ],
    	      [
    	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
    	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
    	      ],
    	      [
    	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
    	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
    	      ],
    	      [
    	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
    	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
    	      ],
    	      [
    	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
    	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
    	      ],
    	      [
    	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
    	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
    	      ],
    	      [
    	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
    	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
    	      ],
    	      [
    	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
    	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
    	      ],
    	      [
    	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
    	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
    	      ],
    	      [
    	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
    	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
    	      ],
    	      [
    	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
    	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
    	      ],
    	      [
    	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
    	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
    	      ],
    	      [
    	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
    	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
    	      ],
    	      [
    	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
    	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
    	      ],
    	      [
    	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
    	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
    	      ],
    	      [
    	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
    	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
    	      ],
    	      [
    	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
    	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
    	      ],
    	      [
    	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
    	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
    	      ],
    	      [
    	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
    	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
    	      ],
    	      [
    	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
    	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
    	      ],
    	      [
    	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
    	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
    	      ],
    	      [
    	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
    	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
    	      ],
    	      [
    	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
    	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
    	      ],
    	      [
    	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
    	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
    	      ],
    	      [
    	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
    	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
    	      ],
    	      [
    	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
    	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
    	      ],
    	      [
    	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
    	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
    	      ],
    	      [
    	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
    	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
    	      ],
    	      [
    	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
    	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
    	      ],
    	      [
    	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
    	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
    	      ],
    	      [
    	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
    	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
    	      ],
    	      [
    	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
    	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
    	      ],
    	      [
    	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
    	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
    	      ],
    	      [
    	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
    	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
    	      ],
    	      [
    	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
    	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
    	      ],
    	      [
    	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
    	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
    	      ],
    	      [
    	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
    	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
    	      ],
    	      [
    	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
    	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
    	      ],
    	      [
    	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
    	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
    	      ],
    	      [
    	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
    	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
    	      ],
    	      [
    	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
    	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
    	      ],
    	      [
    	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
    	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
    	      ],
    	      [
    	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
    	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
    	      ],
    	      [
    	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
    	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
    	      ],
    	      [
    	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
    	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
    	      ],
    	      [
    	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
    	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
    	      ],
    	      [
    	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
    	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
    	      ],
    	      [
    	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
    	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
    	      ],
    	      [
    	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
    	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
    	      ],
    	      [
    	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
    	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
    	      ],
    	      [
    	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
    	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
    	      ],
    	      [
    	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
    	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
    	      ],
    	      [
    	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
    	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
    	      ],
    	      [
    	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
    	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
    	      ],
    	      [
    	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
    	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
    	      ],
    	      [
    	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
    	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
    	      ],
    	      [
    	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
    	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
    	      ],
    	      [
    	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
    	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
    	      ],
    	      [
    	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
    	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
    	      ],
    	      [
    	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
    	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
    	      ],
    	      [
    	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
    	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
    	      ],
    	      [
    	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
    	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
    	      ],
    	      [
    	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
    	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
    	      ],
    	      [
    	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
    	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
    	      ],
    	      [
    	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
    	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
    	      ],
    	      [
    	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
    	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
    	      ],
    	      [
    	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
    	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
    	      ],
    	      [
    	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
    	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
    	      ],
    	      [
    	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
    	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
    	      ],
    	      [
    	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
    	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
    	      ],
    	      [
    	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
    	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
    	      ],
    	    ],
    	  },
    	};
    	return secp256k1$2;
    }

    (function (exports) {

    	var curves = exports;

    	var hash = hash$4;
    	var curve$1 = curve;
    	var utils = utils$z;

    	var assert = utils.assert;

    	function PresetCurve(options) {
    	  if (options.type === 'short')
    	    this.curve = new curve$1.short(options);
    	  else if (options.type === 'edwards')
    	    this.curve = new curve$1.edwards(options);
    	  else
    	    this.curve = new curve$1.mont(options);
    	  this.g = this.curve.g;
    	  this.n = this.curve.n;
    	  this.hash = options.hash;

    	  assert(this.g.validate(), 'Invalid curve');
    	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    	}
    	curves.PresetCurve = PresetCurve;

    	function defineCurve(name, options) {
    	  Object.defineProperty(curves, name, {
    	    configurable: true,
    	    enumerable: true,
    	    get: function() {
    	      var curve = new PresetCurve(options);
    	      Object.defineProperty(curves, name, {
    	        configurable: true,
    	        enumerable: true,
    	        value: curve,
    	      });
    	      return curve;
    	    },
    	  });
    	}

    	defineCurve('p192', {
    	  type: 'short',
    	  prime: 'p192',
    	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
    	  ],
    	});

    	defineCurve('p224', {
    	  type: 'short',
    	  prime: 'p224',
    	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
    	  ],
    	});

    	defineCurve('p256', {
    	  type: 'short',
    	  prime: null,
    	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
    	  ],
    	});

    	defineCurve('p384', {
    	  type: 'short',
    	  prime: null,
    	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'fffffffe ffffffff 00000000 00000000 ffffffff',
    	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'fffffffe ffffffff 00000000 00000000 fffffffc',
    	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
    	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
    	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    	  hash: hash.sha384,
    	  gRed: false,
    	  g: [
    	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    	    '5502f25d bf55296c 3a545e38 72760ab7',
    	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
    	  ],
    	});

    	defineCurve('p521', {
    	  type: 'short',
    	  prime: null,
    	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
    	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
    	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
    	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
    	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
    	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    	  hash: hash.sha512,
    	  gRed: false,
    	  g: [
    	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
    	  ],
    	});

    	defineCurve('curve25519', {
    	  type: 'mont',
    	  prime: 'p25519',
    	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    	  a: '76d06',
    	  b: '1',
    	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '9',
    	  ],
    	});

    	defineCurve('ed25519', {
    	  type: 'edwards',
    	  prime: 'p25519',
    	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    	  a: '-1',
    	  c: '1',
    	  // -121665 * (121666^(-1)) (mod P)
    	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    	    // 4/5
    	    '6666666666666666666666666666666666666666666666666666666666666658',
    	  ],
    	});

    	var pre;
    	try {
    	  pre = requireSecp256k1();
    	} catch (e) {
    	  pre = undefined;
    	}

    	defineCurve('secp256k1', {
    	  type: 'short',
    	  prime: 'k256',
    	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    	  a: '0',
    	  b: '7',
    	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    	  h: '1',
    	  hash: hash.sha256,

    	  // Precomputed endomorphism
    	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    	  basis: [
    	    {
    	      a: '3086d221a7d46bcde86c90e49284eb15',
    	      b: '-e4437ed6010e88286f547fa90abfe4c3',
    	    },
    	    {
    	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
    	      b: '3086d221a7d46bcde86c90e49284eb15',
    	    },
    	  ],

    	  gRed: false,
    	  g: [
    	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    	    pre,
    	  ],
    	}); 
    } (curves$2));

    var hash$3 = hash$4;
    var utils$j = utils$y;
    var assert$a = minimalisticAssert;

    function HmacDRBG$1(options) {
      if (!(this instanceof HmacDRBG$1))
        return new HmacDRBG$1(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils$j.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils$j.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils$j.toArray(options.pers, options.persEnc || 'hex');
      assert$a(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG$1;

    HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG$1.prototype._hmac = function hmac() {
      return new hash$3.hmac(this.hash, this.K);
    };

    HmacDRBG$1.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils$j.toArray(entropy, entropyEnc);
      add = utils$j.toArray(add, addEnc);

      assert$a(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils$j.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils$j.encode(res, enc);
    };

    var BN$4 = bnExports;
    var utils$i = utils$z;
    var assert$9 = utils$i.assert;

    function KeyPair$3(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key$1 = KeyPair$3;

    KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair$3)
        return pub;

      return new KeyPair$3(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair$3)
        return priv;

      return new KeyPair$3(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair$3.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN$4(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$9(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$9(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair$3.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$9(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair$3.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair$3.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair$3.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };

    var BN$3 = bnExports;

    var utils$h = utils$z;
    var assert$8 = utils$h.assert;

    function Signature$3(options, enc) {
      if (options instanceof Signature$3)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$8(options.r && options.s, 'Signature without r or s');
      this.r = new BN$3(options.r, 16);
      this.s = new BN$3(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature$2 = Signature$3;

    function Position() {
      this.place = 0;
    }

    function getLength$1(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature$3.prototype._importDER = function _importDER(data, enc) {
      data = utils$h.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength$1(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength$1(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength$1(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new BN$3(r);
      this.s = new BN$3(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature$3.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils$h.encode(res, enc);
    };

    var BN$2 = bnExports;
    var HmacDRBG = hmacDrbg;
    var utils$g = utils$z;
    var curves$1 = curves$2;
    var rand = brorandExports;
    var assert$7 = utils$g.assert;

    var KeyPair$2 = key$1;
    var Signature$2 = signature$2;

    function EC$2(options) {
      if (!(this instanceof EC$2))
        return new EC$2(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$7(Object.prototype.hasOwnProperty.call(curves$1, options),
          'Unknown curve ' + options);

        options = curves$1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves$1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec$1 = EC$2;

    EC$2.prototype.keyPair = function keyPair(options) {
      return new KeyPair$2(this, options);
    };

    EC$2.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair$2.fromPrivate(this, priv, enc);
    };

    EC$2.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair$2.fromPublic(this, pub, enc);
    };

    EC$2.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN$2(2));
      for (;;) {
        var priv = new BN$2(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC$2.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC$2.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN$2(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new BN$2(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new BN$2(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC$2.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN$2(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature$2(signature, 'hex');

      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC$2.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert$7((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature$2(signature, enc);

      var n = this.n;
      var e = new BN$2(msg);
      var r = signature.r;
      var s = signature.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC$2.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature$2(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var utils$f = utils$z;
    var assert$6 = utils$f.assert;
    var parseBytes$2 = utils$f.parseBytes;
    var cachedProperty$1 = utils$f.cachedProperty;

    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair$1(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes$2(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes$2(params.pub);
    }

    KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair$1)
        return pub;
      return new KeyPair$1(eddsa, { pub: pub });
    };

    KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair$1)
        return secret;
      return new KeyPair$1(eddsa, { secret: secret });
    };

    KeyPair$1.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });

    cachedProperty$1(KeyPair$1, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });

    cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;

      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;

      return a;
    });

    cachedProperty$1(KeyPair$1, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });

    cachedProperty$1(KeyPair$1, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });

    cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair$1.prototype.sign = function sign(message) {
      assert$6(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair$1.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair$1.prototype.getSecret = function getSecret(enc) {
      assert$6(this._secret, 'KeyPair is public only');
      return utils$f.encode(this.secret(), enc);
    };

    KeyPair$1.prototype.getPublic = function getPublic(enc) {
      return utils$f.encode(this.pubBytes(), enc);
    };

    var key = KeyPair$1;

    var BN$1 = bnExports;
    var utils$e = utils$z;
    var assert$5 = utils$e.assert;
    var cachedProperty = utils$e.cachedProperty;
    var parseBytes$1 = utils$e.parseBytes;

    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature$1(eddsa, sig) {
      this.eddsa = eddsa;

      if (typeof sig !== 'object')
        sig = parseBytes$1(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength),
        };
      }

      assert$5(sig.R && sig.S, 'Signature without R or S');

      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN$1)
        this._S = sig.S;

      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty(Signature$1, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });

    cachedProperty(Signature$1, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });

    cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });

    cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature$1.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature$1.prototype.toHex = function toHex() {
      return utils$e.encode(this.toBytes(), 'hex').toUpperCase();
    };

    var signature$1 = Signature$1;

    var hash$2 = hash$4;
    var curves = curves$2;
    var utils$d = utils$z;
    var assert$4 = utils$d.assert;
    var parseBytes = utils$d.parseBytes;
    var KeyPair = key;
    var Signature = signature$1;

    function EDDSA(curve) {
      assert$4(curve === 'ed25519', 'only tested with ed25519 so far');

      if (!(this instanceof EDDSA))
        return new EDDSA(curve);

      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);

      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash$2.sha512;
    }

    var eddsa = EDDSA;

    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
        .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };

    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils$d.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };

    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils$d.parseBytes(bytes);

      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

      var y = utils$d.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils$d.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };

    (function (exports) {

    	var elliptic = exports;

    	elliptic.version = require$$0$4.version;
    	elliptic.utils = utils$z;
    	elliptic.rand = brorandExports;
    	elliptic.curve = curve;
    	elliptic.curves = curves$2;

    	// Protocols
    	elliptic.ec = ec$1;
    	elliptic.eddsa = eddsa; 
    } (elliptic$2));

    var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(elliptic$3, "__esModule", { value: true });
    elliptic$3.EC = void 0;
    var elliptic_1$1 = __importDefault$9(elliptic$2);
    var EC$1 = elliptic_1$1.default.ec;
    elliptic$3.EC = EC$1;

    var _version$e = {};

    Object.defineProperty(_version$e, "__esModule", { value: true });
    _version$e.version = void 0;
    _version$e.version = "signing-key/5.7.0";

    Object.defineProperty(lib$e, "__esModule", { value: true });
    lib$e.computePublicKey = lib$e.recoverPublicKey = lib$e.SigningKey = void 0;
    var elliptic_1 = elliptic$3;
    var bytes_1$m = lib$s;
    var properties_1$i = lib$q;
    var logger_1$q = lib$r;
    var _version_1$q = _version$e;
    var logger$q = new logger_1$q.Logger(_version_1$q.version);
    var _curve = null;
    function getCurve() {
        if (!_curve) {
            _curve = new elliptic_1.EC("secp256k1");
        }
        return _curve;
    }
    var SigningKey = /** @class */ (function () {
        function SigningKey(privateKey) {
            (0, properties_1$i.defineReadOnly)(this, "curve", "secp256k1");
            (0, properties_1$i.defineReadOnly)(this, "privateKey", (0, bytes_1$m.hexlify)(privateKey));
            if ((0, bytes_1$m.hexDataLength)(this.privateKey) !== 32) {
                logger$q.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
            }
            var keyPair = getCurve().keyFromPrivate((0, bytes_1$m.arrayify)(this.privateKey));
            (0, properties_1$i.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            (0, properties_1$i.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            (0, properties_1$i.defineReadOnly)(this, "_isSigningKey", true);
        }
        SigningKey.prototype._addPoint = function (other) {
            var p0 = getCurve().keyFromPublic((0, bytes_1$m.arrayify)(this.publicKey));
            var p1 = getCurve().keyFromPublic((0, bytes_1$m.arrayify)(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        };
        SigningKey.prototype.signDigest = function (digest) {
            var keyPair = getCurve().keyFromPrivate((0, bytes_1$m.arrayify)(this.privateKey));
            var digestBytes = (0, bytes_1$m.arrayify)(digest);
            if (digestBytes.length !== 32) {
                logger$q.throwArgumentError("bad digest length", "digest", digest);
            }
            var signature = keyPair.sign(digestBytes, { canonical: true });
            return (0, bytes_1$m.splitSignature)({
                recoveryParam: signature.recoveryParam,
                r: (0, bytes_1$m.hexZeroPad)("0x" + signature.r.toString(16), 32),
                s: (0, bytes_1$m.hexZeroPad)("0x" + signature.s.toString(16), 32),
            });
        };
        SigningKey.prototype.computeSharedSecret = function (otherKey) {
            var keyPair = getCurve().keyFromPrivate((0, bytes_1$m.arrayify)(this.privateKey));
            var otherKeyPair = getCurve().keyFromPublic((0, bytes_1$m.arrayify)(computePublicKey(otherKey)));
            return (0, bytes_1$m.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        };
        SigningKey.isSigningKey = function (value) {
            return !!(value && value._isSigningKey);
        };
        return SigningKey;
    }());
    lib$e.SigningKey = SigningKey;
    function recoverPublicKey(digest, signature) {
        var sig = (0, bytes_1$m.splitSignature)(signature);
        var rs = { r: (0, bytes_1$m.arrayify)(sig.r), s: (0, bytes_1$m.arrayify)(sig.s) };
        return "0x" + getCurve().recoverPubKey((0, bytes_1$m.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    lib$e.recoverPublicKey = recoverPublicKey;
    function computePublicKey(key, compressed) {
        var bytes = (0, bytes_1$m.arrayify)(key);
        if (bytes.length === 32) {
            var signingKey = new SigningKey(bytes);
            if (compressed) {
                return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
        }
        else if (bytes.length === 33) {
            if (compressed) {
                return (0, bytes_1$m.hexlify)(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        }
        else if (bytes.length === 65) {
            if (!compressed) {
                return (0, bytes_1$m.hexlify)(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger$q.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }
    lib$e.computePublicKey = computePublicKey;

    var _version$d = {};

    Object.defineProperty(_version$d, "__esModule", { value: true });
    _version$d.version = void 0;
    _version$d.version = "transactions/5.7.0";

    (function (exports) {
    	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.parse = exports.serialize = exports.accessListify = exports.recoverAddress = exports.computeAddress = exports.TransactionTypes = void 0;
    	var address_1 = lib$p;
    	var bignumber_1 = lib$t;
    	var bytes_1 = lib$s;
    	var constants_1 = lib$m;
    	var keccak256_1 = lib$o;
    	var properties_1 = lib$q;
    	var RLP = __importStar(lib$n);
    	var signing_key_1 = lib$e;
    	var logger_1 = lib$r;
    	var _version_1 = _version$d;
    	var logger = new logger_1.Logger(_version_1.version);
    	(function (TransactionTypes) {
    	    TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
    	    TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
    	    TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
    	})(exports.TransactionTypes || (exports.TransactionTypes = {}));
    	///////////////////////////////
    	function handleAddress(value) {
    	    if (value === "0x") {
    	        return null;
    	    }
    	    return (0, address_1.getAddress)(value);
    	}
    	function handleNumber(value) {
    	    if (value === "0x") {
    	        return constants_1.Zero;
    	    }
    	    return bignumber_1.BigNumber.from(value);
    	}
    	// Legacy Transaction Fields
    	var transactionFields = [
    	    { name: "nonce", maxLength: 32, numeric: true },
    	    { name: "gasPrice", maxLength: 32, numeric: true },
    	    { name: "gasLimit", maxLength: 32, numeric: true },
    	    { name: "to", length: 20 },
    	    { name: "value", maxLength: 32, numeric: true },
    	    { name: "data" },
    	];
    	var allowedTransactionKeys = {
    	    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
    	};
    	function computeAddress(key) {
    	    var publicKey = (0, signing_key_1.computePublicKey)(key);
    	    return (0, address_1.getAddress)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.hexDataSlice)(publicKey, 1)), 12));
    	}
    	exports.computeAddress = computeAddress;
    	function recoverAddress(digest, signature) {
    	    return computeAddress((0, signing_key_1.recoverPublicKey)((0, bytes_1.arrayify)(digest), signature));
    	}
    	exports.recoverAddress = recoverAddress;
    	function formatNumber(value, name) {
    	    var result = (0, bytes_1.stripZeros)(bignumber_1.BigNumber.from(value).toHexString());
    	    if (result.length > 32) {
    	        logger.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
    	    }
    	    return result;
    	}
    	function accessSetify(addr, storageKeys) {
    	    return {
    	        address: (0, address_1.getAddress)(addr),
    	        storageKeys: (storageKeys || []).map(function (storageKey, index) {
    	            if ((0, bytes_1.hexDataLength)(storageKey) !== 32) {
    	                logger.throwArgumentError("invalid access list storageKey", "accessList[" + addr + ":" + index + "]", storageKey);
    	            }
    	            return storageKey.toLowerCase();
    	        })
    	    };
    	}
    	function accessListify(value) {
    	    if (Array.isArray(value)) {
    	        return value.map(function (set, index) {
    	            if (Array.isArray(set)) {
    	                if (set.length > 2) {
    	                    logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[" + index + "]", set);
    	                }
    	                return accessSetify(set[0], set[1]);
    	            }
    	            return accessSetify(set.address, set.storageKeys);
    	        });
    	    }
    	    var result = Object.keys(value).map(function (addr) {
    	        var storageKeys = value[addr].reduce(function (accum, storageKey) {
    	            accum[storageKey] = true;
    	            return accum;
    	        }, {});
    	        return accessSetify(addr, Object.keys(storageKeys).sort());
    	    });
    	    result.sort(function (a, b) { return (a.address.localeCompare(b.address)); });
    	    return result;
    	}
    	exports.accessListify = accessListify;
    	function formatAccessList(value) {
    	    return accessListify(value).map(function (set) { return [set.address, set.storageKeys]; });
    	}
    	function _serializeEip1559(transaction, signature) {
    	    // If there is an explicit gasPrice, make sure it matches the
    	    // EIP-1559 fees; otherwise they may not understand what they
    	    // think they are setting in terms of fee.
    	    if (transaction.gasPrice != null) {
    	        var gasPrice = bignumber_1.BigNumber.from(transaction.gasPrice);
    	        var maxFeePerGas = bignumber_1.BigNumber.from(transaction.maxFeePerGas || 0);
    	        if (!gasPrice.eq(maxFeePerGas)) {
    	            logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
    	                gasPrice: gasPrice,
    	                maxFeePerGas: maxFeePerGas
    	            });
    	        }
    	    }
    	    var fields = [
    	        formatNumber(transaction.chainId || 0, "chainId"),
    	        formatNumber(transaction.nonce || 0, "nonce"),
    	        formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    	        formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
    	        formatNumber(transaction.gasLimit || 0, "gasLimit"),
    	        ((transaction.to != null) ? (0, address_1.getAddress)(transaction.to) : "0x"),
    	        formatNumber(transaction.value || 0, "value"),
    	        (transaction.data || "0x"),
    	        (formatAccessList(transaction.accessList || []))
    	    ];
    	    if (signature) {
    	        var sig = (0, bytes_1.splitSignature)(signature);
    	        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    	        fields.push((0, bytes_1.stripZeros)(sig.r));
    	        fields.push((0, bytes_1.stripZeros)(sig.s));
    	    }
    	    return (0, bytes_1.hexConcat)(["0x02", RLP.encode(fields)]);
    	}
    	function _serializeEip2930(transaction, signature) {
    	    var fields = [
    	        formatNumber(transaction.chainId || 0, "chainId"),
    	        formatNumber(transaction.nonce || 0, "nonce"),
    	        formatNumber(transaction.gasPrice || 0, "gasPrice"),
    	        formatNumber(transaction.gasLimit || 0, "gasLimit"),
    	        ((transaction.to != null) ? (0, address_1.getAddress)(transaction.to) : "0x"),
    	        formatNumber(transaction.value || 0, "value"),
    	        (transaction.data || "0x"),
    	        (formatAccessList(transaction.accessList || []))
    	    ];
    	    if (signature) {
    	        var sig = (0, bytes_1.splitSignature)(signature);
    	        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    	        fields.push((0, bytes_1.stripZeros)(sig.r));
    	        fields.push((0, bytes_1.stripZeros)(sig.s));
    	    }
    	    return (0, bytes_1.hexConcat)(["0x01", RLP.encode(fields)]);
    	}
    	// Legacy Transactions and EIP-155
    	function _serialize(transaction, signature) {
    	    (0, properties_1.checkProperties)(transaction, allowedTransactionKeys);
    	    var raw = [];
    	    transactionFields.forEach(function (fieldInfo) {
    	        var value = transaction[fieldInfo.name] || ([]);
    	        var options = {};
    	        if (fieldInfo.numeric) {
    	            options.hexPad = "left";
    	        }
    	        value = (0, bytes_1.arrayify)((0, bytes_1.hexlify)(value, options));
    	        // Fixed-width field
    	        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
    	            logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
    	        }
    	        // Variable-width (with a maximum)
    	        if (fieldInfo.maxLength) {
    	            value = (0, bytes_1.stripZeros)(value);
    	            if (value.length > fieldInfo.maxLength) {
    	                logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
    	            }
    	        }
    	        raw.push((0, bytes_1.hexlify)(value));
    	    });
    	    var chainId = 0;
    	    if (transaction.chainId != null) {
    	        // A chainId was provided; if non-zero we'll use EIP-155
    	        chainId = transaction.chainId;
    	        if (typeof (chainId) !== "number") {
    	            logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    	        }
    	    }
    	    else if (signature && !(0, bytes_1.isBytesLike)(signature) && signature.v > 28) {
    	        // No chainId provided, but the signature is signing with EIP-155; derive chainId
    	        chainId = Math.floor((signature.v - 35) / 2);
    	    }
    	    // We have an EIP-155 transaction (chainId was specified and non-zero)
    	    if (chainId !== 0) {
    	        raw.push((0, bytes_1.hexlify)(chainId)); // @TODO: hexValue?
    	        raw.push("0x");
    	        raw.push("0x");
    	    }
    	    // Requesting an unsigned transaction
    	    if (!signature) {
    	        return RLP.encode(raw);
    	    }
    	    // The splitSignature will ensure the transaction has a recoveryParam in the
    	    // case that the signTransaction function only adds a v.
    	    var sig = (0, bytes_1.splitSignature)(signature);
    	    // We pushed a chainId and null r, s on for hashing only; remove those
    	    var v = 27 + sig.recoveryParam;
    	    if (chainId !== 0) {
    	        raw.pop();
    	        raw.pop();
    	        raw.pop();
    	        v += chainId * 2 + 8;
    	        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
    	        if (sig.v > 28 && sig.v !== v) {
    	            logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    	        }
    	    }
    	    else if (sig.v !== v) {
    	        logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    	    }
    	    raw.push((0, bytes_1.hexlify)(v));
    	    raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.r)));
    	    raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.s)));
    	    return RLP.encode(raw);
    	}
    	function serialize(transaction, signature) {
    	    // Legacy and EIP-155 Transactions
    	    if (transaction.type == null || transaction.type === 0) {
    	        if (transaction.accessList != null) {
    	            logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
    	        }
    	        return _serialize(transaction, signature);
    	    }
    	    // Typed Transactions (EIP-2718)
    	    switch (transaction.type) {
    	        case 1:
    	            return _serializeEip2930(transaction, signature);
    	        case 2:
    	            return _serializeEip1559(transaction, signature);
    	    }
    	    return logger.throwError("unsupported transaction type: " + transaction.type, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
    	        operation: "serializeTransaction",
    	        transactionType: transaction.type
    	    });
    	}
    	exports.serialize = serialize;
    	function _parseEipSignature(tx, fields, serialize) {
    	    try {
    	        var recid = handleNumber(fields[0]).toNumber();
    	        if (recid !== 0 && recid !== 1) {
    	            throw new Error("bad recid");
    	        }
    	        tx.v = recid;
    	    }
    	    catch (error) {
    	        logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
    	    }
    	    tx.r = (0, bytes_1.hexZeroPad)(fields[1], 32);
    	    tx.s = (0, bytes_1.hexZeroPad)(fields[2], 32);
    	    try {
    	        var digest = (0, keccak256_1.keccak256)(serialize(tx));
    	        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
    	    }
    	    catch (error) { }
    	}
    	function _parseEip1559(payload) {
    	    var transaction = RLP.decode(payload.slice(1));
    	    if (transaction.length !== 9 && transaction.length !== 12) {
    	        logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, bytes_1.hexlify)(payload));
    	    }
    	    var maxPriorityFeePerGas = handleNumber(transaction[2]);
    	    var maxFeePerGas = handleNumber(transaction[3]);
    	    var tx = {
    	        type: 2,
    	        chainId: handleNumber(transaction[0]).toNumber(),
    	        nonce: handleNumber(transaction[1]).toNumber(),
    	        maxPriorityFeePerGas: maxPriorityFeePerGas,
    	        maxFeePerGas: maxFeePerGas,
    	        gasPrice: null,
    	        gasLimit: handleNumber(transaction[4]),
    	        to: handleAddress(transaction[5]),
    	        value: handleNumber(transaction[6]),
    	        data: transaction[7],
    	        accessList: accessListify(transaction[8]),
    	    };
    	    // Unsigned EIP-1559 Transaction
    	    if (transaction.length === 9) {
    	        return tx;
    	    }
    	    tx.hash = (0, keccak256_1.keccak256)(payload);
    	    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
    	    return tx;
    	}
    	function _parseEip2930(payload) {
    	    var transaction = RLP.decode(payload.slice(1));
    	    if (transaction.length !== 8 && transaction.length !== 11) {
    	        logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, bytes_1.hexlify)(payload));
    	    }
    	    var tx = {
    	        type: 1,
    	        chainId: handleNumber(transaction[0]).toNumber(),
    	        nonce: handleNumber(transaction[1]).toNumber(),
    	        gasPrice: handleNumber(transaction[2]),
    	        gasLimit: handleNumber(transaction[3]),
    	        to: handleAddress(transaction[4]),
    	        value: handleNumber(transaction[5]),
    	        data: transaction[6],
    	        accessList: accessListify(transaction[7])
    	    };
    	    // Unsigned EIP-2930 Transaction
    	    if (transaction.length === 8) {
    	        return tx;
    	    }
    	    tx.hash = (0, keccak256_1.keccak256)(payload);
    	    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
    	    return tx;
    	}
    	// Legacy Transactions and EIP-155
    	function _parse(rawTransaction) {
    	    var transaction = RLP.decode(rawTransaction);
    	    if (transaction.length !== 9 && transaction.length !== 6) {
    	        logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    	    }
    	    var tx = {
    	        nonce: handleNumber(transaction[0]).toNumber(),
    	        gasPrice: handleNumber(transaction[1]),
    	        gasLimit: handleNumber(transaction[2]),
    	        to: handleAddress(transaction[3]),
    	        value: handleNumber(transaction[4]),
    	        data: transaction[5],
    	        chainId: 0
    	    };
    	    // Legacy unsigned transaction
    	    if (transaction.length === 6) {
    	        return tx;
    	    }
    	    try {
    	        tx.v = bignumber_1.BigNumber.from(transaction[6]).toNumber();
    	    }
    	    catch (error) {
    	        // @TODO: What makes snese to do? The v is too big
    	        return tx;
    	    }
    	    tx.r = (0, bytes_1.hexZeroPad)(transaction[7], 32);
    	    tx.s = (0, bytes_1.hexZeroPad)(transaction[8], 32);
    	    if (bignumber_1.BigNumber.from(tx.r).isZero() && bignumber_1.BigNumber.from(tx.s).isZero()) {
    	        // EIP-155 unsigned transaction
    	        tx.chainId = tx.v;
    	        tx.v = 0;
    	    }
    	    else {
    	        // Signed Transaction
    	        tx.chainId = Math.floor((tx.v - 35) / 2);
    	        if (tx.chainId < 0) {
    	            tx.chainId = 0;
    	        }
    	        var recoveryParam = tx.v - 27;
    	        var raw = transaction.slice(0, 6);
    	        if (tx.chainId !== 0) {
    	            raw.push((0, bytes_1.hexlify)(tx.chainId));
    	            raw.push("0x");
    	            raw.push("0x");
    	            recoveryParam -= tx.chainId * 2 + 8;
    	        }
    	        var digest = (0, keccak256_1.keccak256)(RLP.encode(raw));
    	        try {
    	            tx.from = recoverAddress(digest, { r: (0, bytes_1.hexlify)(tx.r), s: (0, bytes_1.hexlify)(tx.s), recoveryParam: recoveryParam });
    	        }
    	        catch (error) { }
    	        tx.hash = (0, keccak256_1.keccak256)(rawTransaction);
    	    }
    	    tx.type = null;
    	    return tx;
    	}
    	function parse(rawTransaction) {
    	    var payload = (0, bytes_1.arrayify)(rawTransaction);
    	    // Legacy and EIP-155 Transactions
    	    if (payload[0] > 0x7f) {
    	        return _parse(payload);
    	    }
    	    // Typed Transaction (EIP-2718)
    	    switch (payload[0]) {
    	        case 1:
    	            return _parseEip2930(payload);
    	        case 2:
    	            return _parseEip1559(payload);
    	    }
    	    return logger.throwError("unsupported transaction type: " + payload[0], logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
    	        operation: "parseTransaction",
    	        transactionType: payload[0]
    	    });
    	}
    	exports.parse = parse;
    	
    } (lib$f));

    var _version$c = {};

    Object.defineProperty(_version$c, "__esModule", { value: true });
    _version$c.version = void 0;
    _version$c.version = "contracts/5.7.0";

    var __extends$p = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$b = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$b = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(lib$v, "__esModule", { value: true });
    lib$v.ContractFactory = lib$v.Contract = lib$v.BaseContract = void 0;
    var abi_1 = lib$u;
    var abstract_provider_1$3 = lib$h;
    var abstract_signer_1$2 = lib$g;
    var address_1$5 = lib$p;
    var bignumber_1$8 = lib$t;
    var bytes_1$l = lib$s;
    var properties_1$h = lib$q;
    var transactions_1$6 = lib$f;
    var logger_1$p = lib$r;
    var _version_1$p = _version$c;
    var logger$p = new logger_1$p.Logger(_version_1$p.version);
    ///////////////////////////////
    var allowedTransactionKeys$1 = {
        chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true,
        customData: true,
        ccipReadEnabled: true
    };
    function resolveName(resolver, nameOrPromise) {
        return __awaiter$b(this, void 0, void 0, function () {
            var name, address;
            return __generator$b(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, nameOrPromise];
                    case 1:
                        name = _a.sent();
                        if (typeof (name) !== "string") {
                            logger$p.throwArgumentError("invalid address or ENS name", "name", name);
                        }
                        // If it is already an address, just use it (after adding checksum)
                        try {
                            return [2 /*return*/, (0, address_1$5.getAddress)(name)];
                        }
                        catch (error) { }
                        if (!resolver) {
                            logger$p.throwError("a provider or signer is needed to resolve ENS names", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "resolveName"
                            });
                        }
                        return [4 /*yield*/, resolver.resolveName(name)];
                    case 2:
                        address = _a.sent();
                        if (address == null) {
                            logger$p.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
                        }
                        return [2 /*return*/, address];
                }
            });
        });
    }
    // Recursively replaces ENS names with promises to resolve the name and resolves all properties
    function resolveAddresses(resolver, value, paramType) {
        return __awaiter$b(this, void 0, void 0, function () {
            return __generator$b(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!Array.isArray(paramType)) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all(paramType.map(function (paramType, index) {
                                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
                            }))];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(paramType.type === "address")) return [3 /*break*/, 4];
                        return [4 /*yield*/, resolveName(resolver, value)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(paramType.type === "tuple")) return [3 /*break*/, 6];
                        return [4 /*yield*/, resolveAddresses(resolver, value, paramType.components)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6:
                        if (!(paramType.baseType === "array")) return [3 /*break*/, 8];
                        if (!Array.isArray(value)) {
                            return [2 /*return*/, Promise.reject(logger$p.makeError("invalid value for array", logger_1$p.Logger.errors.INVALID_ARGUMENT, {
                                    argument: "value",
                                    value: value
                                }))];
                        }
                        return [4 /*yield*/, Promise.all(value.map(function (v) { return resolveAddresses(resolver, v, paramType.arrayChildren); }))];
                    case 7: return [2 /*return*/, _a.sent()];
                    case 8: return [2 /*return*/, value];
                }
            });
        });
    }
    function populateTransaction(contract, fragment, args) {
        return __awaiter$b(this, void 0, void 0, function () {
            var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;
            var _this = this;
            return __generator$b(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        overrides = {};
                        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                            overrides = (0, properties_1$h.shallowCopy)(args.pop());
                        }
                        // Make sure the parameter count matches
                        logger$p.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
                        // Populate "from" override (allow promises)
                        if (contract.signer) {
                            if (overrides.from) {
                                // Contracts with a Signer are from the Signer's frame-of-reference;
                                // but we allow overriding "from" if it matches the signer
                                overrides.from = (0, properties_1$h.resolveProperties)({
                                    override: resolveName(contract.signer, overrides.from),
                                    signer: contract.signer.getAddress()
                                }).then(function (check) { return __awaiter$b(_this, void 0, void 0, function () {
                                    return __generator$b(this, function (_a) {
                                        if ((0, address_1$5.getAddress)(check.signer) !== check.override) {
                                            logger$p.throwError("Contract with a Signer cannot override from", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                                                operation: "overrides.from"
                                            });
                                        }
                                        return [2 /*return*/, check.override];
                                    });
                                }); });
                            }
                            else {
                                overrides.from = contract.signer.getAddress();
                            }
                        }
                        else if (overrides.from) {
                            overrides.from = resolveName(contract.provider, overrides.from);
                            //} else {
                            // Contracts without a signer can override "from", and if
                            // unspecified the zero address is used
                            //overrides.from = AddressZero;
                        }
                        return [4 /*yield*/, (0, properties_1$h.resolveProperties)({
                                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                                address: contract.resolvedAddress,
                                overrides: ((0, properties_1$h.resolveProperties)(overrides) || {})
                            })];
                    case 1:
                        resolved = _a.sent();
                        data = contract.interface.encodeFunctionData(fragment, resolved.args);
                        tx = {
                            data: data,
                            to: resolved.address
                        };
                        ro = resolved.overrides;
                        // Populate simple overrides
                        if (ro.nonce != null) {
                            tx.nonce = bignumber_1$8.BigNumber.from(ro.nonce).toNumber();
                        }
                        if (ro.gasLimit != null) {
                            tx.gasLimit = bignumber_1$8.BigNumber.from(ro.gasLimit);
                        }
                        if (ro.gasPrice != null) {
                            tx.gasPrice = bignumber_1$8.BigNumber.from(ro.gasPrice);
                        }
                        if (ro.maxFeePerGas != null) {
                            tx.maxFeePerGas = bignumber_1$8.BigNumber.from(ro.maxFeePerGas);
                        }
                        if (ro.maxPriorityFeePerGas != null) {
                            tx.maxPriorityFeePerGas = bignumber_1$8.BigNumber.from(ro.maxPriorityFeePerGas);
                        }
                        if (ro.from != null) {
                            tx.from = ro.from;
                        }
                        if (ro.type != null) {
                            tx.type = ro.type;
                        }
                        if (ro.accessList != null) {
                            tx.accessList = (0, transactions_1$6.accessListify)(ro.accessList);
                        }
                        // If there was no "gasLimit" override, but the ABI specifies a default, use it
                        if (tx.gasLimit == null && fragment.gas != null) {
                            intrinsic = 21000;
                            bytes = (0, bytes_1$l.arrayify)(data);
                            for (i = 0; i < bytes.length; i++) {
                                intrinsic += 4;
                                if (bytes[i]) {
                                    intrinsic += 64;
                                }
                            }
                            tx.gasLimit = bignumber_1$8.BigNumber.from(fragment.gas).add(intrinsic);
                        }
                        // Populate "value" override
                        if (ro.value) {
                            roValue = bignumber_1$8.BigNumber.from(ro.value);
                            if (!roValue.isZero() && !fragment.payable) {
                                logger$p.throwError("non-payable method cannot override value", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "overrides.value",
                                    value: overrides.value
                                });
                            }
                            tx.value = roValue;
                        }
                        if (ro.customData) {
                            tx.customData = (0, properties_1$h.shallowCopy)(ro.customData);
                        }
                        if (ro.ccipReadEnabled) {
                            tx.ccipReadEnabled = !!ro.ccipReadEnabled;
                        }
                        // Remove the overrides
                        delete overrides.nonce;
                        delete overrides.gasLimit;
                        delete overrides.gasPrice;
                        delete overrides.from;
                        delete overrides.value;
                        delete overrides.type;
                        delete overrides.accessList;
                        delete overrides.maxFeePerGas;
                        delete overrides.maxPriorityFeePerGas;
                        delete overrides.customData;
                        delete overrides.ccipReadEnabled;
                        leftovers = Object.keys(overrides).filter(function (key) { return (overrides[key] != null); });
                        if (leftovers.length) {
                            logger$p.throwError("cannot override " + leftovers.map(function (l) { return JSON.stringify(l); }).join(","), logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides",
                                overrides: leftovers
                            });
                        }
                        return [2 /*return*/, tx];
                }
            });
        });
    }
    function buildPopulate(contract, fragment) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return populateTransaction(contract, fragment, args);
        };
    }
    function buildEstimate(contract, fragment) {
        var signerOrProvider = (contract.signer || contract.provider);
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter$b(this, void 0, void 0, function () {
                var tx;
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!signerOrProvider) {
                                logger$p.throwError("estimate require a provider or signer", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "estimateGas"
                                });
                            }
                            return [4 /*yield*/, populateTransaction(contract, fragment, args)];
                        case 1:
                            tx = _a.sent();
                            return [4 /*yield*/, signerOrProvider.estimateGas(tx)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
    }
    function addContractWait(contract, tx) {
        var wait = tx.wait.bind(tx);
        tx.wait = function (confirmations) {
            return wait(confirmations).then(function (receipt) {
                receipt.events = receipt.logs.map(function (log) {
                    var event = (0, properties_1$h.deepCopy)(log);
                    var parsed = null;
                    try {
                        parsed = contract.interface.parseLog(log);
                    }
                    catch (e) { }
                    // Successfully parsed the event log; include it
                    if (parsed) {
                        event.args = parsed.args;
                        event.decode = function (data, topics) {
                            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                        };
                        event.event = parsed.name;
                        event.eventSignature = parsed.signature;
                    }
                    // Useful operations
                    event.removeListener = function () { return contract.provider; };
                    event.getBlock = function () {
                        return contract.provider.getBlock(receipt.blockHash);
                    };
                    event.getTransaction = function () {
                        return contract.provider.getTransaction(receipt.transactionHash);
                    };
                    event.getTransactionReceipt = function () {
                        return Promise.resolve(receipt);
                    };
                    return event;
                });
                return receipt;
            });
        };
    }
    function buildCall(contract, fragment, collapseSimple) {
        var signerOrProvider = (contract.signer || contract.provider);
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter$b(this, void 0, void 0, function () {
                var blockTag, overrides, tx, result, value;
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            blockTag = undefined;
                            if (!(args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object")) return [3 /*break*/, 3];
                            overrides = (0, properties_1$h.shallowCopy)(args.pop());
                            if (!(overrides.blockTag != null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, overrides.blockTag];
                        case 1:
                            blockTag = _a.sent();
                            _a.label = 2;
                        case 2:
                            delete overrides.blockTag;
                            args.push(overrides);
                            _a.label = 3;
                        case 3:
                            if (!(contract.deployTransaction != null)) return [3 /*break*/, 5];
                            return [4 /*yield*/, contract._deployed(blockTag)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
                        case 6:
                            tx = _a.sent();
                            return [4 /*yield*/, signerOrProvider.call(tx, blockTag)];
                        case 7:
                            result = _a.sent();
                            try {
                                value = contract.interface.decodeFunctionResult(fragment, result);
                                if (collapseSimple && fragment.outputs.length === 1) {
                                    value = value[0];
                                }
                                return [2 /*return*/, value];
                            }
                            catch (error) {
                                if (error.code === logger_1$p.Logger.errors.CALL_EXCEPTION) {
                                    error.address = contract.address;
                                    error.args = args;
                                    error.transaction = tx;
                                }
                                throw error;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
    }
    function buildSend(contract, fragment) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter$b(this, void 0, void 0, function () {
                var txRequest, tx;
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!contract.signer) {
                                logger$p.throwError("sending a transaction requires a signer", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "sendTransaction"
                                });
                            }
                            if (!(contract.deployTransaction != null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, contract._deployed()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, populateTransaction(contract, fragment, args)];
                        case 3:
                            txRequest = _a.sent();
                            return [4 /*yield*/, contract.signer.sendTransaction(txRequest)];
                        case 4:
                            tx = _a.sent();
                            // Tweak the tx.wait so the receipt has extra properties
                            addContractWait(contract, tx);
                            return [2 /*return*/, tx];
                    }
                });
            });
        };
    }
    function buildDefault(contract, fragment, collapseSimple) {
        if (fragment.constant) {
            return buildCall(contract, fragment, collapseSimple);
        }
        return buildSend(contract, fragment);
    }
    function getEventTag$1(filter) {
        if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
        }
        return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function (topic) {
            if (Array.isArray(topic)) {
                return topic.join("|");
            }
            return topic;
        }).join(":") : "");
    }
    var RunningEvent = /** @class */ (function () {
        function RunningEvent(tag, filter) {
            (0, properties_1$h.defineReadOnly)(this, "tag", tag);
            (0, properties_1$h.defineReadOnly)(this, "filter", filter);
            this._listeners = [];
        }
        RunningEvent.prototype.addListener = function (listener, once) {
            this._listeners.push({ listener: listener, once: once });
        };
        RunningEvent.prototype.removeListener = function (listener) {
            var done = false;
            this._listeners = this._listeners.filter(function (item) {
                if (done || item.listener !== listener) {
                    return true;
                }
                done = true;
                return false;
            });
        };
        RunningEvent.prototype.removeAllListeners = function () {
            this._listeners = [];
        };
        RunningEvent.prototype.listeners = function () {
            return this._listeners.map(function (i) { return i.listener; });
        };
        RunningEvent.prototype.listenerCount = function () {
            return this._listeners.length;
        };
        RunningEvent.prototype.run = function (args) {
            var _this = this;
            var listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter(function (item) {
                var argsCopy = args.slice();
                // Call the callback in the next event loop
                setTimeout(function () {
                    item.listener.apply(_this, argsCopy);
                }, 0);
                // Reschedule it if it not "once"
                return !(item.once);
            });
            return listenerCount;
        };
        RunningEvent.prototype.prepareEvent = function (event) {
        };
        // Returns the array that will be applied to an emit
        RunningEvent.prototype.getEmit = function (event) {
            return [event];
        };
        return RunningEvent;
    }());
    var ErrorRunningEvent = /** @class */ (function (_super) {
        __extends$p(ErrorRunningEvent, _super);
        function ErrorRunningEvent() {
            return _super.call(this, "error", null) || this;
        }
        return ErrorRunningEvent;
    }(RunningEvent));
    // @TODO Fragment should inherit Wildcard? and just override getEmit?
    //       or have a common abstract super class, with enough constructor
    //       options to configure both.
    // A Fragment Event will populate all the properties that Wildcard
    // will, and additionally dereference the arguments when emitting
    var FragmentRunningEvent = /** @class */ (function (_super) {
        __extends$p(FragmentRunningEvent, _super);
        function FragmentRunningEvent(address, contractInterface, fragment, topics) {
            var _this = this;
            var filter = {
                address: address
            };
            var topic = contractInterface.getEventTopic(fragment);
            if (topics) {
                if (topic !== topics[0]) {
                    logger$p.throwArgumentError("topic mismatch", "topics", topics);
                }
                filter.topics = topics.slice();
            }
            else {
                filter.topics = [topic];
            }
            _this = _super.call(this, getEventTag$1(filter), filter) || this;
            (0, properties_1$h.defineReadOnly)(_this, "address", address);
            (0, properties_1$h.defineReadOnly)(_this, "interface", contractInterface);
            (0, properties_1$h.defineReadOnly)(_this, "fragment", fragment);
            return _this;
        }
        FragmentRunningEvent.prototype.prepareEvent = function (event) {
            var _this = this;
            _super.prototype.prepareEvent.call(this, event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = function (data, topics) {
                return _this.interface.decodeEventLog(_this.fragment, data, topics);
            };
            try {
                event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            }
            catch (error) {
                event.args = null;
                event.decodeError = error;
            }
        };
        FragmentRunningEvent.prototype.getEmit = function (event) {
            var errors = (0, abi_1.checkResultErrors)(event.args);
            if (errors.length) {
                throw errors[0].error;
            }
            var args = (event.args || []).slice();
            args.push(event);
            return args;
        };
        return FragmentRunningEvent;
    }(RunningEvent));
    // A Wildcard Event will attempt to populate:
    //  - event            The name of the event name
    //  - eventSignature   The full signature of the event
    //  - decode           A function to decode data and topics
    //  - args             The decoded data and topics
    var WildcardRunningEvent = /** @class */ (function (_super) {
        __extends$p(WildcardRunningEvent, _super);
        function WildcardRunningEvent(address, contractInterface) {
            var _this = _super.call(this, "*", { address: address }) || this;
            (0, properties_1$h.defineReadOnly)(_this, "address", address);
            (0, properties_1$h.defineReadOnly)(_this, "interface", contractInterface);
            return _this;
        }
        WildcardRunningEvent.prototype.prepareEvent = function (event) {
            var _this = this;
            _super.prototype.prepareEvent.call(this, event);
            try {
                var parsed_1 = this.interface.parseLog(event);
                event.event = parsed_1.name;
                event.eventSignature = parsed_1.signature;
                event.decode = function (data, topics) {
                    return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);
                };
                event.args = parsed_1.args;
            }
            catch (error) {
                // No matching event
            }
        };
        return WildcardRunningEvent;
    }(RunningEvent));
    var BaseContract = /** @class */ (function () {
        function BaseContract(addressOrName, contractInterface, signerOrProvider) {
            var _newTarget = this.constructor;
            var _this = this;
            // @TODO: Maybe still check the addressOrName looks like a valid address or name?
            //address = getAddress(address);
            (0, properties_1$h.defineReadOnly)(this, "interface", (0, properties_1$h.getStatic)(_newTarget, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
                (0, properties_1$h.defineReadOnly)(this, "provider", null);
                (0, properties_1$h.defineReadOnly)(this, "signer", null);
            }
            else if (abstract_signer_1$2.Signer.isSigner(signerOrProvider)) {
                (0, properties_1$h.defineReadOnly)(this, "provider", signerOrProvider.provider || null);
                (0, properties_1$h.defineReadOnly)(this, "signer", signerOrProvider);
            }
            else if (abstract_provider_1$3.Provider.isProvider(signerOrProvider)) {
                (0, properties_1$h.defineReadOnly)(this, "provider", signerOrProvider);
                (0, properties_1$h.defineReadOnly)(this, "signer", null);
            }
            else {
                logger$p.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            (0, properties_1$h.defineReadOnly)(this, "callStatic", {});
            (0, properties_1$h.defineReadOnly)(this, "estimateGas", {});
            (0, properties_1$h.defineReadOnly)(this, "functions", {});
            (0, properties_1$h.defineReadOnly)(this, "populateTransaction", {});
            (0, properties_1$h.defineReadOnly)(this, "filters", {});
            {
                var uniqueFilters_1 = {};
                Object.keys(this.interface.events).forEach(function (eventSignature) {
                    var event = _this.interface.events[eventSignature];
                    (0, properties_1$h.defineReadOnly)(_this.filters, eventSignature, function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        return {
                            address: _this.address,
                            topics: _this.interface.encodeFilterTopics(event, args)
                        };
                    });
                    if (!uniqueFilters_1[event.name]) {
                        uniqueFilters_1[event.name] = [];
                    }
                    uniqueFilters_1[event.name].push(eventSignature);
                });
                Object.keys(uniqueFilters_1).forEach(function (name) {
                    var filters = uniqueFilters_1[name];
                    if (filters.length === 1) {
                        (0, properties_1$h.defineReadOnly)(_this.filters, name, _this.filters[filters[0]]);
                    }
                    else {
                        logger$p.warn("Duplicate definition of " + name + " (" + filters.join(", ") + ")");
                    }
                });
            }
            (0, properties_1$h.defineReadOnly)(this, "_runningEvents", {});
            (0, properties_1$h.defineReadOnly)(this, "_wrappedEmits", {});
            if (addressOrName == null) {
                logger$p.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
            }
            (0, properties_1$h.defineReadOnly)(this, "address", addressOrName);
            if (this.provider) {
                (0, properties_1$h.defineReadOnly)(this, "resolvedAddress", resolveName(this.provider, addressOrName));
            }
            else {
                try {
                    (0, properties_1$h.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0, address_1$5.getAddress)(addressOrName)));
                }
                catch (error) {
                    // Without a provider, we cannot use ENS names
                    logger$p.throwError("provider is required to use ENS name as contract address", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "new Contract"
                    });
                }
            }
            // Swallow bad ENS names to prevent Unhandled Exceptions
            this.resolvedAddress.catch(function (e) { });
            var uniqueNames = {};
            var uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach(function (signature) {
                var fragment = _this.interface.functions[signature];
                // Check that the signature is unique; if not the ABI generation has
                // not been cleaned or may be incorrectly generated
                if (uniqueSignatures[signature]) {
                    logger$p.warn("Duplicate ABI entry for " + JSON.stringify(signature));
                    return;
                }
                uniqueSignatures[signature] = true;
                // Track unique names; we only expose bare named functions if they
                // are ambiguous
                {
                    var name_1 = fragment.name;
                    if (!uniqueNames["%" + name_1]) {
                        uniqueNames["%" + name_1] = [];
                    }
                    uniqueNames["%" + name_1].push(signature);
                }
                if (_this[signature] == null) {
                    (0, properties_1$h.defineReadOnly)(_this, signature, buildDefault(_this, fragment, true));
                }
                // We do not collapse simple calls on this bucket, which allows
                // frameworks to safely use this without introspection as well as
                // allows decoding error recovery.
                if (_this.functions[signature] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.functions, signature, buildDefault(_this, fragment, false));
                }
                if (_this.callStatic[signature] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.callStatic, signature, buildCall(_this, fragment, true));
                }
                if (_this.populateTransaction[signature] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.populateTransaction, signature, buildPopulate(_this, fragment));
                }
                if (_this.estimateGas[signature] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.estimateGas, signature, buildEstimate(_this, fragment));
                }
            });
            Object.keys(uniqueNames).forEach(function (name) {
                // Ambiguous names to not get attached as bare names
                var signatures = uniqueNames[name];
                if (signatures.length > 1) {
                    return;
                }
                // Strip off the leading "%" used for prototype protection
                name = name.substring(1);
                var signature = signatures[0];
                // If overwriting a member property that is null, swallow the error
                try {
                    if (_this[name] == null) {
                        (0, properties_1$h.defineReadOnly)(_this, name, _this[signature]);
                    }
                }
                catch (e) { }
                if (_this.functions[name] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.functions, name, _this.functions[signature]);
                }
                if (_this.callStatic[name] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.callStatic, name, _this.callStatic[signature]);
                }
                if (_this.populateTransaction[name] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.populateTransaction, name, _this.populateTransaction[signature]);
                }
                if (_this.estimateGas[name] == null) {
                    (0, properties_1$h.defineReadOnly)(_this.estimateGas, name, _this.estimateGas[signature]);
                }
            });
        }
        BaseContract.getContractAddress = function (transaction) {
            return (0, address_1$5.getContractAddress)(transaction);
        };
        BaseContract.getInterface = function (contractInterface) {
            if (abi_1.Interface.isInterface(contractInterface)) {
                return contractInterface;
            }
            return new abi_1.Interface(contractInterface);
        };
        // @TODO: Allow timeout?
        BaseContract.prototype.deployed = function () {
            return this._deployed();
        };
        BaseContract.prototype._deployed = function (blockTag) {
            var _this = this;
            if (!this._deployedPromise) {
                // If we were just deployed, we know the transaction we should occur in
                if (this.deployTransaction) {
                    this._deployedPromise = this.deployTransaction.wait().then(function () {
                        return _this;
                    });
                }
                else {
                    // @TODO: Once we allow a timeout to be passed in, we will wait
                    // up to that many blocks for getCode
                    // Otherwise, poll for our code to be deployed
                    this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
                        if (code === "0x") {
                            logger$p.throwError("contract not deployed", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                                contractAddress: _this.address,
                                operation: "getDeployed"
                            });
                        }
                        return _this;
                    });
                }
            }
            return this._deployedPromise;
        };
        // @TODO:
        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
        // @TODO:
        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
        BaseContract.prototype.fallback = function (overrides) {
            var _this = this;
            if (!this.signer) {
                logger$p.throwError("sending a transactions require a signer", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
            }
            var tx = (0, properties_1$h.shallowCopy)(overrides || {});
            ["from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger$p.throwError("cannot override " + key, logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(function () {
                return _this.signer.sendTransaction(tx);
            });
        };
        // Reconnect to a different signer or provider
        BaseContract.prototype.connect = function (signerOrProvider) {
            if (typeof (signerOrProvider) === "string") {
                signerOrProvider = new abstract_signer_1$2.VoidSigner(signerOrProvider, this.provider);
            }
            var contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
                (0, properties_1$h.defineReadOnly)(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
        };
        // Re-attach to a different on-chain instance of this contract
        BaseContract.prototype.attach = function (addressOrName) {
            return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
        };
        BaseContract.isIndexed = function (value) {
            return abi_1.Indexed.isIndexed(value);
        };
        BaseContract.prototype._normalizeRunningEvent = function (runningEvent) {
            // Already have an instance of this event running; we can re-use it
            if (this._runningEvents[runningEvent.tag]) {
                return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
        };
        BaseContract.prototype._getRunningEvent = function (eventName) {
            if (typeof (eventName) === "string") {
                // Listen for "error" events (if your contract has an error event, include
                // the full signature to bypass this special event keyword)
                if (eventName === "error") {
                    return this._normalizeRunningEvent(new ErrorRunningEvent());
                }
                // Listen for any event that is registered
                if (eventName === "event") {
                    return this._normalizeRunningEvent(new RunningEvent("event", null));
                }
                // Listen for any event
                if (eventName === "*") {
                    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                }
                // Get the event Fragment (throws if ambiguous/unknown event)
                var fragment = this.interface.getEvent(eventName);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
            }
            // We have topics to filter by...
            if (eventName.topics && eventName.topics.length > 0) {
                // Is it a known topichash? (throws if no matching topichash)
                try {
                    var topic = eventName.topics[0];
                    if (typeof (topic) !== "string") {
                        throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                    }
                    var fragment = this.interface.getEvent(topic);
                    return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
                }
                catch (error) { }
                // Filter by the unknown topichash
                var filter = {
                    address: this.address,
                    topics: eventName.topics
                };
                return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
            }
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        };
        BaseContract.prototype._checkRunningEvents = function (runningEvent) {
            if (runningEvent.listenerCount() === 0) {
                delete this._runningEvents[runningEvent.tag];
                // If we have a poller for this, remove it
                var emit = this._wrappedEmits[runningEvent.tag];
                if (emit && runningEvent.filter) {
                    this.provider.off(runningEvent.filter, emit);
                    delete this._wrappedEmits[runningEvent.tag];
                }
            }
        };
        // Subclasses can override this to gracefully recover
        // from parse errors if they wish
        BaseContract.prototype._wrapEvent = function (runningEvent, log, listener) {
            var _this = this;
            var event = (0, properties_1$h.deepCopy)(log);
            event.removeListener = function () {
                if (!listener) {
                    return;
                }
                runningEvent.removeListener(listener);
                _this._checkRunningEvents(runningEvent);
            };
            event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };
            event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };
            // This may throw if the topics and data mismatch the signature
            runningEvent.prepareEvent(event);
            return event;
        };
        BaseContract.prototype._addEventListener = function (runningEvent, listener, once) {
            var _this = this;
            if (!this.provider) {
                logger$p.throwError("events require a provider or a signer with a provider", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
            }
            runningEvent.addListener(listener, once);
            // Track this running event and its listeners (may already be there; but no hard in updating)
            this._runningEvents[runningEvent.tag] = runningEvent;
            // If we are not polling the provider, start polling
            if (!this._wrappedEmits[runningEvent.tag]) {
                var wrappedEmit = function (log) {
                    var event = _this._wrapEvent(runningEvent, log, listener);
                    // Try to emit the result for the parameterized event...
                    if (event.decodeError == null) {
                        try {
                            var args = runningEvent.getEmit(event);
                            _this.emit.apply(_this, __spreadArray([runningEvent.filter], args, false));
                        }
                        catch (error) {
                            event.decodeError = error.error;
                        }
                    }
                    // Always emit "event" for fragment-base events
                    if (runningEvent.filter != null) {
                        _this.emit("event", event);
                    }
                    // Emit "error" if there was an error
                    if (event.decodeError != null) {
                        _this.emit("error", event.decodeError, event);
                    }
                };
                this._wrappedEmits[runningEvent.tag] = wrappedEmit;
                // Special events, like "error" do not have a filter
                if (runningEvent.filter != null) {
                    this.provider.on(runningEvent.filter, wrappedEmit);
                }
            }
        };
        BaseContract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {
            var _this = this;
            var runningEvent = this._getRunningEvent(event);
            var filter = (0, properties_1$h.shallowCopy)(runningEvent.filter);
            if (typeof (fromBlockOrBlockhash) === "string" && (0, bytes_1$l.isHexString)(fromBlockOrBlockhash, 32)) {
                if (toBlock != null) {
                    logger$p.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
                }
                filter.blockHash = fromBlockOrBlockhash;
            }
            else {
                filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
                filter.toBlock = ((toBlock != null) ? toBlock : "latest");
            }
            return this.provider.getLogs(filter).then(function (logs) {
                return logs.map(function (log) { return _this._wrapEvent(runningEvent, log, null); });
            });
        };
        BaseContract.prototype.on = function (event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
        };
        BaseContract.prototype.once = function (event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
        };
        BaseContract.prototype.emit = function (eventName) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!this.provider) {
                return false;
            }
            var runningEvent = this._getRunningEvent(eventName);
            var result = (runningEvent.run(args) > 0);
            // May have drained all the "once" events; check for living events
            this._checkRunningEvents(runningEvent);
            return result;
        };
        BaseContract.prototype.listenerCount = function (eventName) {
            var _this = this;
            if (!this.provider) {
                return 0;
            }
            if (eventName == null) {
                return Object.keys(this._runningEvents).reduce(function (accum, key) {
                    return accum + _this._runningEvents[key].listenerCount();
                }, 0);
            }
            return this._getRunningEvent(eventName).listenerCount();
        };
        BaseContract.prototype.listeners = function (eventName) {
            if (!this.provider) {
                return [];
            }
            if (eventName == null) {
                var result_1 = [];
                for (var tag in this._runningEvents) {
                    this._runningEvents[tag].listeners().forEach(function (listener) {
                        result_1.push(listener);
                    });
                }
                return result_1;
            }
            return this._getRunningEvent(eventName).listeners();
        };
        BaseContract.prototype.removeAllListeners = function (eventName) {
            if (!this.provider) {
                return this;
            }
            if (eventName == null) {
                for (var tag in this._runningEvents) {
                    var runningEvent_1 = this._runningEvents[tag];
                    runningEvent_1.removeAllListeners();
                    this._checkRunningEvents(runningEvent_1);
                }
                return this;
            }
            // Delete any listeners
            var runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
        };
        BaseContract.prototype.off = function (eventName, listener) {
            if (!this.provider) {
                return this;
            }
            var runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
        };
        BaseContract.prototype.removeListener = function (eventName, listener) {
            return this.off(eventName, listener);
        };
        return BaseContract;
    }());
    lib$v.BaseContract = BaseContract;
    var Contract = /** @class */ (function (_super) {
        __extends$p(Contract, _super);
        function Contract() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Contract;
    }(BaseContract));
    lib$v.Contract = Contract;
    var ContractFactory = /** @class */ (function () {
        function ContractFactory(contractInterface, bytecode, signer) {
            var _newTarget = this.constructor;
            var bytecodeHex = null;
            if (typeof (bytecode) === "string") {
                bytecodeHex = bytecode;
            }
            else if ((0, bytes_1$l.isBytes)(bytecode)) {
                bytecodeHex = (0, bytes_1$l.hexlify)(bytecode);
            }
            else if (bytecode && typeof (bytecode.object) === "string") {
                // Allow the bytecode object from the Solidity compiler
                bytecodeHex = bytecode.object;
            }
            else {
                // Crash in the next verification step
                bytecodeHex = "!";
            }
            // Make sure it is 0x prefixed
            if (bytecodeHex.substring(0, 2) !== "0x") {
                bytecodeHex = "0x" + bytecodeHex;
            }
            // Make sure the final result is valid bytecode
            if (!(0, bytes_1$l.isHexString)(bytecodeHex) || (bytecodeHex.length % 2)) {
                logger$p.throwArgumentError("invalid bytecode", "bytecode", bytecode);
            }
            // If we have a signer, make sure it is valid
            if (signer && !abstract_signer_1$2.Signer.isSigner(signer)) {
                logger$p.throwArgumentError("invalid signer", "signer", signer);
            }
            (0, properties_1$h.defineReadOnly)(this, "bytecode", bytecodeHex);
            (0, properties_1$h.defineReadOnly)(this, "interface", (0, properties_1$h.getStatic)(_newTarget, "getInterface")(contractInterface));
            (0, properties_1$h.defineReadOnly)(this, "signer", signer || null);
        }
        // @TODO: Future; rename to populateTransaction?
        ContractFactory.prototype.getDeployTransaction = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var tx = {};
            // If we have 1 additional argument, we allow transaction overrides
            if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                tx = (0, properties_1$h.shallowCopy)(args.pop());
                for (var key in tx) {
                    if (!allowedTransactionKeys$1[key]) {
                        throw new Error("unknown transaction override " + key);
                    }
                }
            }
            // Do not allow these to be overridden in a deployment transaction
            ["data", "from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger$p.throwError("cannot override " + key, logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            if (tx.value) {
                var value = bignumber_1$8.BigNumber.from(tx.value);
                if (!value.isZero() && !this.interface.deploy.payable) {
                    logger$p.throwError("non-payable constructor cannot override value", logger_1$p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: tx.value
                    });
                }
            }
            // Make sure the call matches the constructor signature
            logger$p.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            // Set the data to the bytecode + the encoded constructor arguments
            tx.data = (0, bytes_1$l.hexlify)((0, bytes_1$l.concat)([
                this.bytecode,
                this.interface.encodeDeploy(args)
            ]));
            return tx;
        };
        ContractFactory.prototype.deploy = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter$b(this, void 0, void 0, function () {
                var overrides, params, unsignedTx, tx, address, contract;
                return __generator$b(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            overrides = {};
                            // If 1 extra parameter was passed in, it contains overrides
                            if (args.length === this.interface.deploy.inputs.length + 1) {
                                overrides = args.pop();
                            }
                            // Make sure the call matches the constructor signature
                            logger$p.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
                            return [4 /*yield*/, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];
                        case 1:
                            params = _a.sent();
                            params.push(overrides);
                            unsignedTx = this.getDeployTransaction.apply(this, params);
                            return [4 /*yield*/, this.signer.sendTransaction(unsignedTx)];
                        case 2:
                            tx = _a.sent();
                            address = (0, properties_1$h.getStatic)(this.constructor, "getContractAddress")(tx);
                            contract = (0, properties_1$h.getStatic)(this.constructor, "getContract")(address, this.interface, this.signer);
                            // Add the modified wait that wraps events
                            addContractWait(contract, tx);
                            (0, properties_1$h.defineReadOnly)(contract, "deployTransaction", tx);
                            return [2 /*return*/, contract];
                    }
                });
            });
        };
        ContractFactory.prototype.attach = function (address) {
            return (this.constructor).getContract(address, this.interface, this.signer);
        };
        ContractFactory.prototype.connect = function (signer) {
            return new (this.constructor)(this.interface, this.bytecode, signer);
        };
        ContractFactory.fromSolidity = function (compilerOutput, signer) {
            if (compilerOutput == null) {
                logger$p.throwError("missing compiler output", logger_1$p.Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
            }
            if (typeof (compilerOutput) === "string") {
                compilerOutput = JSON.parse(compilerOutput);
            }
            var abi = compilerOutput.abi;
            var bytecode = null;
            if (compilerOutput.bytecode) {
                bytecode = compilerOutput.bytecode;
            }
            else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
                bytecode = compilerOutput.evm.bytecode;
            }
            return new this(abi, bytecode, signer);
        };
        ContractFactory.getInterface = function (contractInterface) {
            return Contract.getInterface(contractInterface);
        };
        ContractFactory.getContractAddress = function (tx) {
            return (0, address_1$5.getContractAddress)(tx);
        };
        ContractFactory.getContract = function (address, contractInterface, signer) {
            return new Contract(address, contractInterface, signer);
        };
        return ContractFactory;
    }());
    lib$v.ContractFactory = ContractFactory;

    var lib$d = {};

    var lib$c = {};

    var lib$b = {};

    /**
     * var basex = require("base-x");
     *
     * This implementation is heavily based on base-x. The main reason to
     * deviate was to prevent the dependency of Buffer.
     *
     * Contributors:
     *
     * base-x encoding
     * Forked from https://github.com/cryptocoinjs/bs58
     * Originally written by Mike Hearn for BitcoinJ
     * Copyright (c) 2011 Google Inc
     * Ported to JavaScript by Stefan Thomas
     * Merged Buffer refactorings from base58-native by Stephen Pair
     * Copyright (c) 2013 BitPay Inc
     *
     * The MIT License (MIT)
     *
     * Copyright base-x contributors (c) 2016
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.

     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
     * IN THE SOFTWARE.
     *
     */
    Object.defineProperty(lib$b, "__esModule", { value: true });
    lib$b.Base58 = lib$b.Base32 = lib$b.BaseX = void 0;
    var bytes_1$k = lib$s;
    var properties_1$g = lib$q;
    var BaseX = /** @class */ (function () {
        function BaseX(alphabet) {
            (0, properties_1$g.defineReadOnly)(this, "alphabet", alphabet);
            (0, properties_1$g.defineReadOnly)(this, "base", alphabet.length);
            (0, properties_1$g.defineReadOnly)(this, "_alphabetMap", {});
            (0, properties_1$g.defineReadOnly)(this, "_leader", alphabet.charAt(0));
            // pre-compute lookup table
            for (var i = 0; i < alphabet.length; i++) {
                this._alphabetMap[alphabet.charAt(i)] = i;
            }
        }
        BaseX.prototype.encode = function (value) {
            var source = (0, bytes_1$k.arrayify)(value);
            if (source.length === 0) {
                return "";
            }
            var digits = [0];
            for (var i = 0; i < source.length; ++i) {
                var carry = source[i];
                for (var j = 0; j < digits.length; ++j) {
                    carry += digits[j] << 8;
                    digits[j] = carry % this.base;
                    carry = (carry / this.base) | 0;
                }
                while (carry > 0) {
                    digits.push(carry % this.base);
                    carry = (carry / this.base) | 0;
                }
            }
            var string = "";
            // deal with leading zeros
            for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
                string += this._leader;
            }
            // convert digits to a string
            for (var q = digits.length - 1; q >= 0; --q) {
                string += this.alphabet[digits[q]];
            }
            return string;
        };
        BaseX.prototype.decode = function (value) {
            if (typeof (value) !== "string") {
                throw new TypeError("Expected String");
            }
            var bytes = [];
            if (value.length === 0) {
                return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (var i = 0; i < value.length; i++) {
                var byte = this._alphabetMap[value[i]];
                if (byte === undefined) {
                    throw new Error("Non-base" + this.base + " character");
                }
                var carry = byte;
                for (var j = 0; j < bytes.length; ++j) {
                    carry += bytes[j] * this.base;
                    bytes[j] = carry & 0xff;
                    carry >>= 8;
                }
                while (carry > 0) {
                    bytes.push(carry & 0xff);
                    carry >>= 8;
                }
            }
            // deal with leading zeros
            for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
                bytes.push(0);
            }
            return (0, bytes_1$k.arrayify)(new Uint8Array(bytes.reverse()));
        };
        return BaseX;
    }());
    lib$b.BaseX = BaseX;
    var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    lib$b.Base32 = Base32;
    var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    lib$b.Base58 = Base58;

    var lib$a = {};

    var browserPbkdf2 = {};

    var lib$9 = {};

    var browserSha2 = {};

    var types$1 = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.SupportedAlgorithm = void 0;
    	(function (SupportedAlgorithm) {
    	    SupportedAlgorithm["sha256"] = "sha256";
    	    SupportedAlgorithm["sha512"] = "sha512";
    	})(exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));
    	
    } (types$1));

    var _version$b = {};

    Object.defineProperty(_version$b, "__esModule", { value: true });
    _version$b.version = void 0;
    _version$b.version = "sha2/5.7.0";

    var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(browserSha2, "__esModule", { value: true });
    browserSha2.computeHmac = browserSha2.sha512 = browserSha2.sha256 = browserSha2.ripemd160 = void 0;
    var hash_js_1 = __importDefault$8(hash$4);
    //const _ripemd160 = _hash.ripemd160;
    var bytes_1$j = lib$s;
    var types_1$1 = types$1;
    var logger_1$o = lib$r;
    var _version_1$o = _version$b;
    var logger$o = new logger_1$o.Logger(_version_1$o.version);
    function ripemd160$2(data) {
        return "0x" + (hash_js_1.default.ripemd160().update((0, bytes_1$j.arrayify)(data)).digest("hex"));
    }
    browserSha2.ripemd160 = ripemd160$2;
    function sha256$5(data) {
        return "0x" + (hash_js_1.default.sha256().update((0, bytes_1$j.arrayify)(data)).digest("hex"));
    }
    browserSha2.sha256 = sha256$5;
    function sha512$1(data) {
        return "0x" + (hash_js_1.default.sha512().update((0, bytes_1$j.arrayify)(data)).digest("hex"));
    }
    browserSha2.sha512 = sha512$1;
    function computeHmac(algorithm, key, data) {
        if (!types_1$1.SupportedAlgorithm[algorithm]) {
            logger$o.throwError("unsupported algorithm " + algorithm, logger_1$o.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "hmac",
                algorithm: algorithm
            });
        }
        return "0x" + hash_js_1.default.hmac(hash_js_1.default[algorithm], (0, bytes_1$j.arrayify)(key)).update((0, bytes_1$j.arrayify)(data)).digest("hex");
    }
    browserSha2.computeHmac = computeHmac;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.SupportedAlgorithm = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.computeHmac = void 0;
    	var sha2_1 = browserSha2;
    	Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
    	Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
    	Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
    	Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });
    	var types_1 = types$1;
    	Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return types_1.SupportedAlgorithm; } });
    	
    } (lib$9));

    Object.defineProperty(browserPbkdf2, "__esModule", { value: true });
    browserPbkdf2.pbkdf2 = void 0;
    var bytes_1$i = lib$s;
    var sha2_1$3 = lib$9;
    function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
        password = (0, bytes_1$i.arrayify)(password);
        salt = (0, bytes_1$i.arrayify)(salt);
        var hLen;
        var l = 1;
        var DK = new Uint8Array(keylen);
        var block1 = new Uint8Array(salt.length + 4);
        block1.set(salt);
        //salt.copy(block1, 0, 0, salt.length)
        var r;
        var T;
        for (var i = 1; i <= l; i++) {
            //block1.writeUInt32BE(i, salt.length)
            block1[salt.length] = (i >> 24) & 0xff;
            block1[salt.length + 1] = (i >> 16) & 0xff;
            block1[salt.length + 2] = (i >> 8) & 0xff;
            block1[salt.length + 3] = i & 0xff;
            //let U = createHmac(password).update(block1).digest();
            var U = (0, bytes_1$i.arrayify)((0, sha2_1$3.computeHmac)(hashAlgorithm, password, block1));
            if (!hLen) {
                hLen = U.length;
                T = new Uint8Array(hLen);
                l = Math.ceil(keylen / hLen);
                r = keylen - (l - 1) * hLen;
            }
            //U.copy(T, 0, 0, hLen)
            T.set(U);
            for (var j = 1; j < iterations; j++) {
                //U = createHmac(password).update(U).digest();
                U = (0, bytes_1$i.arrayify)((0, sha2_1$3.computeHmac)(hashAlgorithm, password, U));
                for (var k = 0; k < hLen; k++)
                    T[k] ^= U[k];
            }
            var destPos = (i - 1) * hLen;
            var len = (i === l ? r : hLen);
            //T.copy(DK, destPos, 0, len)
            DK.set((0, bytes_1$i.arrayify)(T).slice(0, len), destPos);
        }
        return (0, bytes_1$i.hexlify)(DK);
    }
    browserPbkdf2.pbkdf2 = pbkdf2$1;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.pbkdf2 = void 0;
    	var pbkdf2_1 = browserPbkdf2;
    	Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function () { return pbkdf2_1.pbkdf2; } });
    	
    } (lib$a));

    var lib$8 = {};

    var wordlist$8 = {};

    var _version$a = {};

    Object.defineProperty(_version$a, "__esModule", { value: true });
    _version$a.version = void 0;
    _version$a.version = "wordlists/5.7.0";

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.Wordlist = exports.logger = void 0;
    	var hash_1 = lib$k;
    	var properties_1 = lib$q;
    	var logger_1 = lib$r;
    	var _version_1 = _version$a;
    	exports.logger = new logger_1.Logger(_version_1.version);
    	var Wordlist = /** @class */ (function () {
    	    function Wordlist(locale) {
    	        var _newTarget = this.constructor;
    	        exports.logger.checkAbstract(_newTarget, Wordlist);
    	        (0, properties_1.defineReadOnly)(this, "locale", locale);
    	    }
    	    // Subclasses may override this
    	    Wordlist.prototype.split = function (mnemonic) {
    	        return mnemonic.toLowerCase().split(/ +/g);
    	    };
    	    // Subclasses may override this
    	    Wordlist.prototype.join = function (words) {
    	        return words.join(" ");
    	    };
    	    Wordlist.check = function (wordlist) {
    	        var words = [];
    	        for (var i = 0; i < 2048; i++) {
    	            var word = wordlist.getWord(i);
    	            /* istanbul ignore if */
    	            if (i !== wordlist.getWordIndex(word)) {
    	                return "0x";
    	            }
    	            words.push(word);
    	        }
    	        return (0, hash_1.id)(words.join("\n") + "\n");
    	    };
    	    Wordlist.register = function (lang, name) {
    	        if (!name) {
    	            name = lang.locale;
    	        }
    	    };
    	    return Wordlist;
    	}());
    	exports.Wordlist = Wordlist;
    	
    } (wordlist$8));

    var wordlists = {};

    var langCz$1 = {};

    var __extends$o = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langCz$1, "__esModule", { value: true });
    langCz$1.langCz = void 0;
    var wordlist_1$7 = wordlist$8;
    var words$4 = "AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk";
    var wordlist$7 = null;
    function loadWords$7(lang) {
        if (wordlist$7 != null) {
            return;
        }
        wordlist$7 = words$4.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1$7.Wordlist.check(lang) !== "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a") {
            wordlist$7 = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    var LangCz = /** @class */ (function (_super) {
        __extends$o(LangCz, _super);
        function LangCz() {
            return _super.call(this, "cz") || this;
        }
        LangCz.prototype.getWord = function (index) {
            loadWords$7(this);
            return wordlist$7[index];
        };
        LangCz.prototype.getWordIndex = function (word) {
            loadWords$7(this);
            return wordlist$7.indexOf(word);
        };
        return LangCz;
    }(wordlist_1$7.Wordlist));
    var langCz = new LangCz();
    langCz$1.langCz = langCz;
    wordlist_1$7.Wordlist.register(langCz);

    var langEn$1 = {};

    var __extends$n = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langEn$1, "__esModule", { value: true });
    langEn$1.langEn = void 0;
    var wordlist_1$6 = wordlist$8;
    var words$3 = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    var wordlist$6 = null;
    function loadWords$6(lang) {
        if (wordlist$6 != null) {
            return;
        }
        wordlist$6 = words$3.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1$6.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            wordlist$6 = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    var LangEn = /** @class */ (function (_super) {
        __extends$n(LangEn, _super);
        function LangEn() {
            return _super.call(this, "en") || this;
        }
        LangEn.prototype.getWord = function (index) {
            loadWords$6(this);
            return wordlist$6[index];
        };
        LangEn.prototype.getWordIndex = function (word) {
            loadWords$6(this);
            return wordlist$6.indexOf(word);
        };
        return LangEn;
    }(wordlist_1$6.Wordlist));
    var langEn = new LangEn();
    langEn$1.langEn = langEn;
    wordlist_1$6.Wordlist.register(langEn);

    var langEs$1 = {};

    var __extends$m = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langEs$1, "__esModule", { value: true });
    langEs$1.langEs = void 0;
    var strings_1$b = lib$l;
    var wordlist_1$5 = wordlist$8;
    var words$2 = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
    var lookup$1 = {};
    var wordlist$5 = null;
    function dropDiacritic$1(word) {
        wordlist_1$5.logger.checkNormalize();
        return (0, strings_1$b.toUtf8String)(Array.prototype.filter.call((0, strings_1$b.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function (c) {
            return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
        }));
    }
    function expand$1(word) {
        var output = [];
        Array.prototype.forEach.call((0, strings_1$b.toUtf8Bytes)(word), function (c) {
            // Acute accent
            if (c === 47) {
                output.push(204);
                output.push(129);
                // n-tilde
            }
            else if (c === 126) {
                output.push(110);
                output.push(204);
                output.push(131);
            }
            else {
                output.push(c);
            }
        });
        return (0, strings_1$b.toUtf8String)(output);
    }
    function loadWords$5(lang) {
        if (wordlist$5 != null) {
            return;
        }
        wordlist$5 = words$2.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) { return expand$1(w); });
        wordlist$5.forEach(function (word, index) {
            lookup$1[dropDiacritic$1(word)] = index;
        });
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1$5.Wordlist.check(lang) !== "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300") {
            wordlist$5 = null;
            throw new Error("BIP39 Wordlist for es (Spanish) FAILED");
        }
    }
    var LangEs = /** @class */ (function (_super) {
        __extends$m(LangEs, _super);
        function LangEs() {
            return _super.call(this, "es") || this;
        }
        LangEs.prototype.getWord = function (index) {
            loadWords$5(this);
            return wordlist$5[index];
        };
        LangEs.prototype.getWordIndex = function (word) {
            loadWords$5(this);
            return lookup$1[dropDiacritic$1(word)];
        };
        return LangEs;
    }(wordlist_1$5.Wordlist));
    var langEs = new LangEs();
    langEs$1.langEs = langEs;
    wordlist_1$5.Wordlist.register(langEs);

    var langFr$1 = {};

    var __extends$l = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langFr$1, "__esModule", { value: true });
    langFr$1.langFr = void 0;
    var strings_1$a = lib$l;
    var wordlist_1$4 = wordlist$8;
    var words$1 = "";
    var wordlist$4 = null;
    var lookup = {};
    function dropDiacritic(word) {
        wordlist_1$4.logger.checkNormalize();
        return (0, strings_1$a.toUtf8String)(Array.prototype.filter.call((0, strings_1$a.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function (c) {
            return ((c >= 65 && c <= 90) || (c >= 97 && c <= 123));
        }));
    }
    function expand(word) {
        var output = [];
        Array.prototype.forEach.call((0, strings_1$a.toUtf8Bytes)(word), function (c) {
            // Acute accent
            if (c === 47) {
                output.push(204);
                output.push(129);
                // Grave accent
            }
            else if (c === 45) {
                output.push(204);
                output.push(128);
            }
            else {
                output.push(c);
            }
        });
        return (0, strings_1$a.toUtf8String)(output);
    }
    function loadWords$4(lang) {
        if (wordlist$4 != null) {
            return;
        }
        wordlist$4 = words$1.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) { return expand(w); });
        wordlist$4.forEach(function (word, index) {
            lookup[dropDiacritic(word)] = index;
        });
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1$4.Wordlist.check(lang) !== "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045") {
            wordlist$4 = null;
            throw new Error("BIP39 Wordlist for fr (French) FAILED");
        }
    }
    var LangFr = /** @class */ (function (_super) {
        __extends$l(LangFr, _super);
        function LangFr() {
            return _super.call(this, "fr") || this;
        }
        LangFr.prototype.getWord = function (index) {
            loadWords$4(this);
            return wordlist$4[index];
        };
        LangFr.prototype.getWordIndex = function (word) {
            loadWords$4(this);
            return lookup[dropDiacritic(word)];
        };
        return LangFr;
    }(wordlist_1$4.Wordlist));
    var langFr = new LangFr();
    langFr$1.langFr = langFr;
    wordlist_1$4.Wordlist.register(langFr);

    var langJa$1 = {};

    var __extends$k = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langJa$1, "__esModule", { value: true });
    langJa$1.langJa = void 0;
    var bytes_1$h = lib$s;
    var strings_1$9 = lib$l;
    var wordlist_1$3 = wordlist$8;
    var data$3 = [
        // 4-kana words
        "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
        // 5-kana words
        "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
        // 6-kana words
        "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
        // 7-kana words
        "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
        // 8-kana words
        "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
        // 9-kana words
        "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
        // 10-kana words
        "IJBEJqXZJ"
    ];
    // Maps each character into its kana value (the index)
    var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
    var wordlist$3 = null;
    function hex(word) {
        return (0, bytes_1$h.hexlify)((0, strings_1$9.toUtf8Bytes)(word));
    }
    var KiYoKu = "0xe3818de38284e3818f";
    var KyoKu = "0xe3818de38283e3818f";
    function loadWords$3(lang) {
        if (wordlist$3 !== null) {
            return;
        }
        wordlist$3 = [];
        // Transforms for normalizing (sort is a not quite UTF-8)
        var transform = {};
        // Delete the diacritic marks
        transform[(0, strings_1$9.toUtf8String)([227, 130, 154])] = false;
        transform[(0, strings_1$9.toUtf8String)([227, 130, 153])] = false;
        // Some simple transforms that sort out most of the order
        transform[(0, strings_1$9.toUtf8String)([227, 130, 133])] = (0, strings_1$9.toUtf8String)([227, 130, 134]);
        transform[(0, strings_1$9.toUtf8String)([227, 129, 163])] = (0, strings_1$9.toUtf8String)([227, 129, 164]);
        transform[(0, strings_1$9.toUtf8String)([227, 130, 131])] = (0, strings_1$9.toUtf8String)([227, 130, 132]);
        transform[(0, strings_1$9.toUtf8String)([227, 130, 135])] = (0, strings_1$9.toUtf8String)([227, 130, 136]);
        // Normalize words using the transform
        function normalize(word) {
            var result = "";
            for (var i = 0; i < word.length; i++) {
                var kana = word[i];
                var target = transform[kana];
                if (target === false) {
                    continue;
                }
                if (target) {
                    kana = target;
                }
                result += kana;
            }
            return result;
        }
        // Sort how the Japanese list is sorted
        function sortJapanese(a, b) {
            a = normalize(a);
            b = normalize(b);
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            }
            return 0;
        }
        // Load all the words
        for (var length_1 = 3; length_1 <= 9; length_1++) {
            var d = data$3[length_1 - 3];
            for (var offset = 0; offset < d.length; offset += length_1) {
                var word = [];
                for (var i = 0; i < length_1; i++) {
                    var k = mapping.indexOf(d[offset + i]);
                    word.push(227);
                    word.push((k & 0x40) ? 130 : 129);
                    word.push((k & 0x3f) + 128);
                }
                wordlist$3.push((0, strings_1$9.toUtf8String)(word));
            }
        }
        wordlist$3.sort(sortJapanese);
        // For some reason kyoku and kiyoku are flipped in node (!!).
        // The order SHOULD be:
        //   - kyoku
        //   - kiyoku
        // This should ignore "if", but that doesn't work here??
        /* istanbul ignore next */
        if (hex(wordlist$3[442]) === KiYoKu && hex(wordlist$3[443]) === KyoKu) {
            var tmp = wordlist$3[442];
            wordlist$3[442] = wordlist$3[443];
            wordlist$3[443] = tmp;
        }
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1$3.Wordlist.check(lang) !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
            wordlist$3 = null;
            throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
        }
    }
    var LangJa = /** @class */ (function (_super) {
        __extends$k(LangJa, _super);
        function LangJa() {
            return _super.call(this, "ja") || this;
        }
        LangJa.prototype.getWord = function (index) {
            loadWords$3(this);
            return wordlist$3[index];
        };
        LangJa.prototype.getWordIndex = function (word) {
            loadWords$3(this);
            return wordlist$3.indexOf(word);
        };
        LangJa.prototype.split = function (mnemonic) {
            wordlist_1$3.logger.checkNormalize();
            return mnemonic.split(/(?:\u3000| )+/g);
        };
        LangJa.prototype.join = function (words) {
            return words.join("\u3000");
        };
        return LangJa;
    }(wordlist_1$3.Wordlist));
    var langJa = new LangJa();
    langJa$1.langJa = langJa;
    wordlist_1$3.Wordlist.register(langJa);

    var langKo$1 = {};

    var __extends$j = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langKo$1, "__esModule", { value: true });
    langKo$1.langKo = void 0;
    var strings_1$8 = lib$l;
    var wordlist_1$2 = wordlist$8;
    var data$2 = [
        "OYAa",
        "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
        "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
        "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
        "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
        "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
        "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
        "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
    ];
    var codes$2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
    function getHangul(code) {
        if (code >= 40) {
            code = code + 168 - 40;
        }
        else if (code >= 19) {
            code = code + 97 - 19;
        }
        return (0, strings_1$8.toUtf8String)([225, (code >> 6) + 132, (code & 0x3f) + 128]);
    }
    var wordlist$2 = null;
    function loadWords$2(lang) {
        if (wordlist$2 != null) {
            return;
        }
        wordlist$2 = [];
        data$2.forEach(function (data, length) {
            length += 4;
            for (var i = 0; i < data.length; i += length) {
                var word = "";
                for (var j = 0; j < length; j++) {
                    word += getHangul(codes$2.indexOf(data[i + j]));
                }
                wordlist$2.push(word);
            }
        });
        wordlist$2.sort();
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1$2.Wordlist.check(lang) !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
            wordlist$2 = null;
            throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
        }
    }
    var LangKo = /** @class */ (function (_super) {
        __extends$j(LangKo, _super);
        function LangKo() {
            return _super.call(this, "ko") || this;
        }
        LangKo.prototype.getWord = function (index) {
            loadWords$2(this);
            return wordlist$2[index];
        };
        LangKo.prototype.getWordIndex = function (word) {
            loadWords$2(this);
            return wordlist$2.indexOf(word);
        };
        return LangKo;
    }(wordlist_1$2.Wordlist));
    var langKo = new LangKo();
    langKo$1.langKo = langKo;
    wordlist_1$2.Wordlist.register(langKo);

    var langIt$1 = {};

    var __extends$i = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langIt$1, "__esModule", { value: true });
    langIt$1.langIt = void 0;
    var wordlist_1$1 = wordlist$8;
    var words = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
    var wordlist$1 = null;
    function loadWords$1(lang) {
        if (wordlist$1 != null) {
            return;
        }
        wordlist$1 = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1$1.Wordlist.check(lang) !== "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620") {
            wordlist$1 = null;
            throw new Error("BIP39 Wordlist for it (Italian) FAILED");
        }
    }
    var LangIt = /** @class */ (function (_super) {
        __extends$i(LangIt, _super);
        function LangIt() {
            return _super.call(this, "it") || this;
        }
        LangIt.prototype.getWord = function (index) {
            loadWords$1(this);
            return wordlist$1[index];
        };
        LangIt.prototype.getWordIndex = function (word) {
            loadWords$1(this);
            return wordlist$1.indexOf(word);
        };
        return LangIt;
    }(wordlist_1$1.Wordlist));
    var langIt = new LangIt();
    langIt$1.langIt = langIt;
    wordlist_1$1.Wordlist.register(langIt);

    var langZh = {};

    var __extends$h = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(langZh, "__esModule", { value: true });
    langZh.langZhTw = langZh.langZhCn = void 0;
    var strings_1$7 = lib$l;
    var wordlist_1 = wordlist$8;
    var data$1 = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
    var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
    // @TODO: Load lazily
    var wordlist = {
        zh_cn: null,
        zh_tw: null
    };
    var Checks = {
        zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
        zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
    };
    var codes$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
    function loadWords(lang) {
        if (wordlist[lang.locale] !== null) {
            return;
        }
        wordlist[lang.locale] = [];
        var deltaOffset = 0;
        for (var i = 0; i < 2048; i++) {
            var s = style.indexOf(data$1[i * 3]);
            var bytes = [
                228 + (s >> 2),
                128 + codes$1.indexOf(data$1[i * 3 + 1]),
                128 + codes$1.indexOf(data$1[i * 3 + 2]),
            ];
            if (lang.locale === "zh_tw") {
                var common = s % 4;
                for (var i_1 = common; i_1 < 3; i_1++) {
                    bytes[i_1] = codes$1.indexOf(deltaData[deltaOffset++]) + ((i_1 == 0) ? 228 : 128);
                }
            }
            wordlist[lang.locale].push((0, strings_1$7.toUtf8String)(bytes));
        }
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (wordlist_1.Wordlist.check(lang) !== Checks[lang.locale]) {
            wordlist[lang.locale] = null;
            throw new Error("BIP39 Wordlist for " + lang.locale + " (Chinese) FAILED");
        }
    }
    var LangZh = /** @class */ (function (_super) {
        __extends$h(LangZh, _super);
        function LangZh(country) {
            return _super.call(this, "zh_" + country) || this;
        }
        LangZh.prototype.getWord = function (index) {
            loadWords(this);
            return wordlist[this.locale][index];
        };
        LangZh.prototype.getWordIndex = function (word) {
            loadWords(this);
            return wordlist[this.locale].indexOf(word);
        };
        LangZh.prototype.split = function (mnemonic) {
            mnemonic = mnemonic.replace(/(?:\u3000| )+/g, "");
            return mnemonic.split("");
        };
        return LangZh;
    }(wordlist_1.Wordlist));
    var langZhCn = new LangZh("cn");
    langZh.langZhCn = langZhCn;
    wordlist_1.Wordlist.register(langZhCn);
    wordlist_1.Wordlist.register(langZhCn, "zh");
    var langZhTw = new LangZh("tw");
    langZh.langZhTw = langZhTw;
    wordlist_1.Wordlist.register(langZhTw);

    Object.defineProperty(wordlists, "__esModule", { value: true });
    wordlists.wordlists = void 0;
    var lang_cz_1 = langCz$1;
    var lang_en_1 = langEn$1;
    var lang_es_1 = langEs$1;
    var lang_fr_1 = langFr$1;
    var lang_ja_1 = langJa$1;
    var lang_ko_1 = langKo$1;
    var lang_it_1 = langIt$1;
    var lang_zh_1 = langZh;
    wordlists.wordlists = {
        cz: lang_cz_1.langCz,
        en: lang_en_1.langEn,
        es: lang_es_1.langEs,
        fr: lang_fr_1.langFr,
        it: lang_it_1.langIt,
        ja: lang_ja_1.langJa,
        ko: lang_ko_1.langKo,
        zh: lang_zh_1.langZhCn,
        zh_cn: lang_zh_1.langZhCn,
        zh_tw: lang_zh_1.langZhTw
    };

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.wordlists = exports.Wordlist = exports.logger = void 0;
    	// Wordlists
    	// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md
    	var wordlist_1 = wordlist$8;
    	Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return wordlist_1.logger; } });
    	Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlist_1.Wordlist; } });
    	var wordlists_1 = wordlists;
    	Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return wordlists_1.wordlists; } });
    	
    } (lib$8));

    var _version$9 = {};

    Object.defineProperty(_version$9, "__esModule", { value: true });
    _version$9.version = void 0;
    _version$9.version = "hdnode/5.7.0";

    Object.defineProperty(lib$c, "__esModule", { value: true });
    lib$c.getAccountPath = lib$c.isValidMnemonic = lib$c.entropyToMnemonic = lib$c.mnemonicToEntropy = lib$c.mnemonicToSeed = lib$c.HDNode = lib$c.defaultPath = void 0;
    var basex_1$1 = lib$b;
    var bytes_1$g = lib$s;
    var bignumber_1$7 = lib$t;
    var strings_1$6 = lib$l;
    var pbkdf2_1$2 = lib$a;
    var properties_1$f = lib$q;
    var signing_key_1$1 = lib$e;
    var sha2_1$2 = lib$9;
    var transactions_1$5 = lib$f;
    var wordlists_1 = lib$8;
    var logger_1$n = lib$r;
    var _version_1$n = _version$9;
    var logger$n = new logger_1$n.Logger(_version_1$n.version);
    var N$2 = bignumber_1$7.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    // "Bitcoin seed"
    var MasterSecret = (0, strings_1$6.toUtf8Bytes)("Bitcoin seed");
    var HardenedBit = 0x80000000;
    // Returns a byte with the MSB bits set
    function getUpperMask(bits) {
        return ((1 << bits) - 1) << (8 - bits);
    }
    // Returns a byte with the LSB bits set
    function getLowerMask(bits) {
        return (1 << bits) - 1;
    }
    function bytes32(value) {
        return (0, bytes_1$g.hexZeroPad)((0, bytes_1$g.hexlify)(value), 32);
    }
    function base58check(data) {
        return basex_1$1.Base58.encode((0, bytes_1$g.concat)([data, (0, bytes_1$g.hexDataSlice)((0, sha2_1$2.sha256)((0, sha2_1$2.sha256)(data)), 0, 4)]));
    }
    function getWordlist(wordlist) {
        if (wordlist == null) {
            return wordlists_1.wordlists["en"];
        }
        if (typeof (wordlist) === "string") {
            var words = wordlists_1.wordlists[wordlist];
            if (words == null) {
                logger$n.throwArgumentError("unknown locale", "wordlist", wordlist);
            }
            return words;
        }
        return wordlist;
    }
    var _constructorGuard$1 = {};
    lib$c.defaultPath = "m/44'/60'/0'/0/0";
    var HDNode = /** @class */ (function () {
        /**
         *  This constructor should not be called directly.
         *
         *  Please use:
         *   - fromMnemonic
         *   - fromSeed
         */
        function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
            /* istanbul ignore if */
            if (constructorGuard !== _constructorGuard$1) {
                throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
                var signingKey = new signing_key_1$1.SigningKey(privateKey);
                (0, properties_1$f.defineReadOnly)(this, "privateKey", signingKey.privateKey);
                (0, properties_1$f.defineReadOnly)(this, "publicKey", signingKey.compressedPublicKey);
            }
            else {
                (0, properties_1$f.defineReadOnly)(this, "privateKey", null);
                (0, properties_1$f.defineReadOnly)(this, "publicKey", (0, bytes_1$g.hexlify)(publicKey));
            }
            (0, properties_1$f.defineReadOnly)(this, "parentFingerprint", parentFingerprint);
            (0, properties_1$f.defineReadOnly)(this, "fingerprint", (0, bytes_1$g.hexDataSlice)((0, sha2_1$2.ripemd160)((0, sha2_1$2.sha256)(this.publicKey)), 0, 4));
            (0, properties_1$f.defineReadOnly)(this, "address", (0, transactions_1$5.computeAddress)(this.publicKey));
            (0, properties_1$f.defineReadOnly)(this, "chainCode", chainCode);
            (0, properties_1$f.defineReadOnly)(this, "index", index);
            (0, properties_1$f.defineReadOnly)(this, "depth", depth);
            if (mnemonicOrPath == null) {
                // From a source that does not preserve the path (e.g. extended keys)
                (0, properties_1$f.defineReadOnly)(this, "mnemonic", null);
                (0, properties_1$f.defineReadOnly)(this, "path", null);
            }
            else if (typeof (mnemonicOrPath) === "string") {
                // From a source that does not preserve the mnemonic (e.g. neutered)
                (0, properties_1$f.defineReadOnly)(this, "mnemonic", null);
                (0, properties_1$f.defineReadOnly)(this, "path", mnemonicOrPath);
            }
            else {
                // From a fully qualified source
                (0, properties_1$f.defineReadOnly)(this, "mnemonic", mnemonicOrPath);
                (0, properties_1$f.defineReadOnly)(this, "path", mnemonicOrPath.path);
            }
        }
        Object.defineProperty(HDNode.prototype, "extendedKey", {
            get: function () {
                // We only support the mainnet values for now, but if anyone needs
                // testnet values, let me know. I believe current sentiment is that
                // we should always use mainnet, and use BIP-44 to derive the network
                //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
                //   - Testnet: public=0x043587CF, private=0x04358394
                if (this.depth >= 256) {
                    throw new Error("Depth too large!");
                }
                return base58check((0, bytes_1$g.concat)([
                    ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                    (0, bytes_1$g.hexlify)(this.depth),
                    this.parentFingerprint,
                    (0, bytes_1$g.hexZeroPad)((0, bytes_1$g.hexlify)(this.index), 4),
                    this.chainCode,
                    ((this.privateKey != null) ? (0, bytes_1$g.concat)(["0x00", this.privateKey]) : this.publicKey),
                ]));
            },
            enumerable: false,
            configurable: true
        });
        HDNode.prototype.neuter = function () {
            return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
        };
        HDNode.prototype._derive = function (index) {
            if (index > 0xffffffff) {
                throw new Error("invalid index - " + String(index));
            }
            // Base path
            var path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
            }
            var data = new Uint8Array(37);
            if (index & HardenedBit) {
                if (!this.privateKey) {
                    throw new Error("cannot derive child of neutered node");
                }
                // Data = 0x00 || ser_256(k_par)
                data.set((0, bytes_1$g.arrayify)(this.privateKey), 1);
                // Hardened path
                if (path) {
                    path += "'";
                }
            }
            else {
                // Data = ser_p(point(k_par))
                data.set((0, bytes_1$g.arrayify)(this.publicKey));
            }
            // Data += ser_32(i)
            for (var i = 24; i >= 0; i -= 8) {
                data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
            }
            var I = (0, bytes_1$g.arrayify)((0, sha2_1$2.computeHmac)(sha2_1$2.SupportedAlgorithm.sha512, this.chainCode, data));
            var IL = I.slice(0, 32);
            var IR = I.slice(32);
            // The private key
            var ki = null;
            // The public key
            var Ki = null;
            if (this.privateKey) {
                ki = bytes32(bignumber_1$7.BigNumber.from(IL).add(this.privateKey).mod(N$2));
            }
            else {
                var ek = new signing_key_1$1.SigningKey((0, bytes_1$g.hexlify)(IL));
                Ki = ek._addPoint(this.publicKey);
            }
            var mnemonicOrPath = path;
            var srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
                mnemonicOrPath = Object.freeze({
                    phrase: srcMnemonic.phrase,
                    path: path,
                    locale: (srcMnemonic.locale || "en")
                });
            }
            return new HDNode(_constructorGuard$1, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
        };
        HDNode.prototype.derivePath = function (path) {
            var components = path.split("/");
            if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
                throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
                components.shift();
            }
            var result = this;
            for (var i = 0; i < components.length; i++) {
                var component = components[i];
                if (component.match(/^[0-9]+'$/)) {
                    var index = parseInt(component.substring(0, component.length - 1));
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(HardenedBit + index);
                }
                else if (component.match(/^[0-9]+$/)) {
                    var index = parseInt(component);
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(index);
                }
                else {
                    throw new Error("invalid path component - " + component);
                }
            }
            return result;
        };
        HDNode._fromSeed = function (seed, mnemonic) {
            var seedArray = (0, bytes_1$g.arrayify)(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
                throw new Error("invalid seed");
            }
            var I = (0, bytes_1$g.arrayify)((0, sha2_1$2.computeHmac)(sha2_1$2.SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new HDNode(_constructorGuard$1, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
        };
        HDNode.fromMnemonic = function (mnemonic, password, wordlist) {
            // If a locale name was passed in, find the associated wordlist
            wordlist = getWordlist(wordlist);
            // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
            return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
                phrase: mnemonic,
                path: "m",
                locale: wordlist.locale
            });
        };
        HDNode.fromSeed = function (seed) {
            return HDNode._fromSeed(seed, null);
        };
        HDNode.fromExtendedKey = function (extendedKey) {
            var bytes = basex_1$1.Base58.decode(extendedKey);
            if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
                logger$n.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            var depth = bytes[4];
            var parentFingerprint = (0, bytes_1$g.hexlify)(bytes.slice(5, 9));
            var index = parseInt((0, bytes_1$g.hexlify)(bytes.slice(9, 13)).substring(2), 16);
            var chainCode = (0, bytes_1$g.hexlify)(bytes.slice(13, 45));
            var key = bytes.slice(45, 78);
            switch ((0, bytes_1$g.hexlify)(bytes.slice(0, 4))) {
                // Public Key
                case "0x0488b21e":
                case "0x043587cf":
                    return new HDNode(_constructorGuard$1, null, (0, bytes_1$g.hexlify)(key), parentFingerprint, chainCode, index, depth, null);
                // Private Key
                case "0x0488ade4":
                case "0x04358394 ":
                    if (key[0] !== 0) {
                        break;
                    }
                    return new HDNode(_constructorGuard$1, (0, bytes_1$g.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
            }
            return logger$n.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        };
        return HDNode;
    }());
    lib$c.HDNode = HDNode;
    function mnemonicToSeed(mnemonic, password) {
        if (!password) {
            password = "";
        }
        var salt = (0, strings_1$6.toUtf8Bytes)("mnemonic" + password, strings_1$6.UnicodeNormalizationForm.NFKD);
        return (0, pbkdf2_1$2.pbkdf2)((0, strings_1$6.toUtf8Bytes)(mnemonic, strings_1$6.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
    }
    lib$c.mnemonicToSeed = mnemonicToSeed;
    function mnemonicToEntropy(mnemonic, wordlist) {
        wordlist = getWordlist(wordlist);
        logger$n.checkNormalize();
        var words = wordlist.split(mnemonic);
        if ((words.length % 3) !== 0) {
            throw new Error("invalid mnemonic");
        }
        var entropy = (0, bytes_1$g.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));
        var offset = 0;
        for (var i = 0; i < words.length; i++) {
            var index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            if (index === -1) {
                throw new Error("invalid mnemonic");
            }
            for (var bit = 0; bit < 11; bit++) {
                if (index & (1 << (10 - bit))) {
                    entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                }
                offset++;
            }
        }
        var entropyBits = 32 * words.length / 3;
        var checksumBits = words.length / 3;
        var checksumMask = getUpperMask(checksumBits);
        var checksum = (0, bytes_1$g.arrayify)((0, sha2_1$2.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
        if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
        }
        return (0, bytes_1$g.hexlify)(entropy.slice(0, entropyBits / 8));
    }
    lib$c.mnemonicToEntropy = mnemonicToEntropy;
    function entropyToMnemonic(entropy, wordlist) {
        wordlist = getWordlist(wordlist);
        entropy = (0, bytes_1$g.arrayify)(entropy);
        if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
        }
        var indices = [0];
        var remainingBits = 11;
        for (var i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
                indices[indices.length - 1] <<= 8;
                indices[indices.length - 1] |= entropy[i];
                remainingBits -= 8;
                // This byte will complete an 11-bit index
            }
            else {
                indices[indices.length - 1] <<= remainingBits;
                indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                // Start the next word
                indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                remainingBits += 3;
            }
        }
        // Compute the checksum bits
        var checksumBits = entropy.length / 4;
        var checksum = (0, bytes_1$g.arrayify)((0, sha2_1$2.sha256)(entropy))[0] & getUpperMask(checksumBits);
        // Shift the checksum into the word indices
        indices[indices.length - 1] <<= checksumBits;
        indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
        return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));
    }
    lib$c.entropyToMnemonic = entropyToMnemonic;
    function isValidMnemonic(mnemonic, wordlist) {
        try {
            mnemonicToEntropy(mnemonic, wordlist);
            return true;
        }
        catch (error) { }
        return false;
    }
    lib$c.isValidMnemonic = isValidMnemonic;
    function getAccountPath(index) {
        if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
            logger$n.throwArgumentError("invalid account index", "index", index);
        }
        return "m/44'/60'/" + index + "'/0/0";
    }
    lib$c.getAccountPath = getAccountPath;

    var lib$7 = {};

    var browserRandom = {};

    var _version$8 = {};

    Object.defineProperty(_version$8, "__esModule", { value: true });
    _version$8.version = void 0;
    _version$8.version = "random/5.7.0";

    Object.defineProperty(browserRandom, "__esModule", { value: true });
    browserRandom.randomBytes = void 0;
    var bytes_1$f = lib$s;
    var logger_1$m = lib$r;
    var _version_1$m = _version$8;
    var logger$m = new logger_1$m.Logger(_version_1$m.version);
    // Debugging line for testing browser lib in node
    //const window = { crypto: { getRandomValues: () => { } } };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof commonjsGlobal !== 'undefined') {
            return commonjsGlobal;
        }
        throw new Error('unable to locate global object');
    }
    var anyGlobal = getGlobal();
    var crypto$2 = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto$2 || !crypto$2.getRandomValues) {
        logger$m.warn("WARNING: Missing strong random number source");
        crypto$2 = {
            getRandomValues: function (buffer) {
                return logger$m.throwError("no secure random source avaialble", logger_1$m.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                });
            }
        };
    }
    function randomBytes$1(length) {
        if (length <= 0 || length > 1024 || (length % 1) || length != length) {
            logger$m.throwArgumentError("invalid length", "length", length);
        }
        var result = new Uint8Array(length);
        crypto$2.getRandomValues(result);
        return (0, bytes_1$f.arrayify)(result);
    }
    browserRandom.randomBytes = randomBytes$1;

    var shuffle = {};

    Object.defineProperty(shuffle, "__esModule", { value: true });
    shuffle.shuffled = void 0;
    function shuffled(array) {
        array = array.slice();
        for (var i = array.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            var tmp = array[i];
            array[i] = array[j];
            array[j] = tmp;
        }
        return array;
    }
    shuffle.shuffled = shuffled;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.shuffled = exports.randomBytes = void 0;
    	var random_1 = browserRandom;
    	Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
    	var shuffle_1 = shuffle;
    	Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return shuffle_1.shuffled; } });
    	
    } (lib$7));

    var lib$6 = {};

    var crowdsale = {};

    var aesJs$1 = {exports: {}};

    (function (module, exports) {

    	(function(root) {

    	    function checkInt(value) {
    	        return (parseInt(value) === value);
    	    }

    	    function checkInts(arrayish) {
    	        if (!checkInt(arrayish.length)) { return false; }

    	        for (var i = 0; i < arrayish.length; i++) {
    	            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
    	                return false;
    	            }
    	        }

    	        return true;
    	    }

    	    function coerceArray(arg, copy) {

    	        // ArrayBuffer view
    	        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

    	            if (copy) {
    	                if (arg.slice) {
    	                    arg = arg.slice();
    	                } else {
    	                    arg = Array.prototype.slice.call(arg);
    	                }
    	            }

    	            return arg;
    	        }

    	        // It's an array; check it is a valid representation of a byte
    	        if (Array.isArray(arg)) {
    	            if (!checkInts(arg)) {
    	                throw new Error('Array contains invalid value: ' + arg);
    	            }

    	            return new Uint8Array(arg);
    	        }

    	        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
    	        if (checkInt(arg.length) && checkInts(arg)) {
    	            return new Uint8Array(arg);
    	        }

    	        throw new Error('unsupported array-like object');
    	    }

    	    function createArray(length) {
    	        return new Uint8Array(length);
    	    }

    	    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
    	        if (sourceStart != null || sourceEnd != null) {
    	            if (sourceArray.slice) {
    	                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
    	            } else {
    	                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
    	            }
    	        }
    	        targetArray.set(sourceArray, targetStart);
    	    }



    	    var convertUtf8 = (function() {
    	        function toBytes(text) {
    	            var result = [], i = 0;
    	            text = encodeURI(text);
    	            while (i < text.length) {
    	                var c = text.charCodeAt(i++);

    	                // if it is a % sign, encode the following 2 bytes as a hex value
    	                if (c === 37) {
    	                    result.push(parseInt(text.substr(i, 2), 16));
    	                    i += 2;

    	                // otherwise, just the actual byte
    	                } else {
    	                    result.push(c);
    	                }
    	            }

    	            return coerceArray(result);
    	        }

    	        function fromBytes(bytes) {
    	            var result = [], i = 0;

    	            while (i < bytes.length) {
    	                var c = bytes[i];

    	                if (c < 128) {
    	                    result.push(String.fromCharCode(c));
    	                    i++;
    	                } else if (c > 191 && c < 224) {
    	                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
    	                    i += 2;
    	                } else {
    	                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
    	                    i += 3;
    	                }
    	            }

    	            return result.join('');
    	        }

    	        return {
    	            toBytes: toBytes,
    	            fromBytes: fromBytes,
    	        }
    	    })();

    	    var convertHex = (function() {
    	        function toBytes(text) {
    	            var result = [];
    	            for (var i = 0; i < text.length; i += 2) {
    	                result.push(parseInt(text.substr(i, 2), 16));
    	            }

    	            return result;
    	        }

    	        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
    	        var Hex = '0123456789abcdef';

    	        function fromBytes(bytes) {
    	                var result = [];
    	                for (var i = 0; i < bytes.length; i++) {
    	                    var v = bytes[i];
    	                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
    	                }
    	                return result.join('');
    	        }

    	        return {
    	            toBytes: toBytes,
    	            fromBytes: fromBytes,
    	        }
    	    })();


    	    // Number of rounds by keysize
    	    var numberOfRounds = {16: 10, 24: 12, 32: 14};

    	    // Round constant words
    	    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    	    // S-box and Inverse S-box (S is for Substitution)
    	    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    	    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    	    // Transformations for encryption
    	    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    	    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    	    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    	    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    	    // Transformations for decryption
    	    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    	    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    	    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    	    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    	    // Transformations for decryption key expansion
    	    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    	    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    	    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    	    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    	    function convertToInt32(bytes) {
    	        var result = [];
    	        for (var i = 0; i < bytes.length; i += 4) {
    	            result.push(
    	                (bytes[i    ] << 24) |
    	                (bytes[i + 1] << 16) |
    	                (bytes[i + 2] <<  8) |
    	                 bytes[i + 3]
    	            );
    	        }
    	        return result;
    	    }

    	    var AES = function(key) {
    	        if (!(this instanceof AES)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        Object.defineProperty(this, 'key', {
    	            value: coerceArray(key, true)
    	        });

    	        this._prepare();
    	    };


    	    AES.prototype._prepare = function() {

    	        var rounds = numberOfRounds[this.key.length];
    	        if (rounds == null) {
    	            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
    	        }

    	        // encryption round keys
    	        this._Ke = [];

    	        // decryption round keys
    	        this._Kd = [];

    	        for (var i = 0; i <= rounds; i++) {
    	            this._Ke.push([0, 0, 0, 0]);
    	            this._Kd.push([0, 0, 0, 0]);
    	        }

    	        var roundKeyCount = (rounds + 1) * 4;
    	        var KC = this.key.length / 4;

    	        // convert the key into ints
    	        var tk = convertToInt32(this.key);

    	        // copy values into round key arrays
    	        var index;
    	        for (var i = 0; i < KC; i++) {
    	            index = i >> 2;
    	            this._Ke[index][i % 4] = tk[i];
    	            this._Kd[rounds - index][i % 4] = tk[i];
    	        }

    	        // key expansion (fips-197 section 5.2)
    	        var rconpointer = 0;
    	        var t = KC, tt;
    	        while (t < roundKeyCount) {
    	            tt = tk[KC - 1];
    	            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
    	                      (S[(tt >>  8) & 0xFF] << 16) ^
    	                      (S[ tt        & 0xFF] <<  8) ^
    	                       S[(tt >> 24) & 0xFF]        ^
    	                      (rcon[rconpointer] << 24));
    	            rconpointer += 1;

    	            // key expansion (for non-256 bit)
    	            if (KC != 8) {
    	                for (var i = 1; i < KC; i++) {
    	                    tk[i] ^= tk[i - 1];
    	                }

    	            // key expansion for 256-bit keys is "slightly different" (fips-197)
    	            } else {
    	                for (var i = 1; i < (KC / 2); i++) {
    	                    tk[i] ^= tk[i - 1];
    	                }
    	                tt = tk[(KC / 2) - 1];

    	                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
    	                              (S[(tt >>  8) & 0xFF] <<  8) ^
    	                              (S[(tt >> 16) & 0xFF] << 16) ^
    	                              (S[(tt >> 24) & 0xFF] << 24));

    	                for (var i = (KC / 2) + 1; i < KC; i++) {
    	                    tk[i] ^= tk[i - 1];
    	                }
    	            }

    	            // copy values into round key arrays
    	            var i = 0, r, c;
    	            while (i < KC && t < roundKeyCount) {
    	                r = t >> 2;
    	                c = t % 4;
    	                this._Ke[r][c] = tk[i];
    	                this._Kd[rounds - r][c] = tk[i++];
    	                t++;
    	            }
    	        }

    	        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
    	        for (var r = 1; r < rounds; r++) {
    	            for (var c = 0; c < 4; c++) {
    	                tt = this._Kd[r][c];
    	                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
    	                                  U2[(tt >> 16) & 0xFF] ^
    	                                  U3[(tt >>  8) & 0xFF] ^
    	                                  U4[ tt        & 0xFF]);
    	            }
    	        }
    	    };

    	    AES.prototype.encrypt = function(plaintext) {
    	        if (plaintext.length != 16) {
    	            throw new Error('invalid plaintext size (must be 16 bytes)');
    	        }

    	        var rounds = this._Ke.length - 1;
    	        var a = [0, 0, 0, 0];

    	        // convert plaintext to (ints ^ key)
    	        var t = convertToInt32(plaintext);
    	        for (var i = 0; i < 4; i++) {
    	            t[i] ^= this._Ke[0][i];
    	        }

    	        // apply round transforms
    	        for (var r = 1; r < rounds; r++) {
    	            for (var i = 0; i < 4; i++) {
    	                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
    	                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
    	                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
    	                        T4[ t[(i + 3) % 4]        & 0xff] ^
    	                        this._Ke[r][i]);
    	            }
    	            t = a.slice();
    	        }

    	        // the last round is special
    	        var result = createArray(16), tt;
    	        for (var i = 0; i < 4; i++) {
    	            tt = this._Ke[rounds][i];
    	            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
    	            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
    	            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
    	            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
    	        }

    	        return result;
    	    };

    	    AES.prototype.decrypt = function(ciphertext) {
    	        if (ciphertext.length != 16) {
    	            throw new Error('invalid ciphertext size (must be 16 bytes)');
    	        }

    	        var rounds = this._Kd.length - 1;
    	        var a = [0, 0, 0, 0];

    	        // convert plaintext to (ints ^ key)
    	        var t = convertToInt32(ciphertext);
    	        for (var i = 0; i < 4; i++) {
    	            t[i] ^= this._Kd[0][i];
    	        }

    	        // apply round transforms
    	        for (var r = 1; r < rounds; r++) {
    	            for (var i = 0; i < 4; i++) {
    	                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
    	                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
    	                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
    	                        T8[ t[(i + 1) % 4]        & 0xff] ^
    	                        this._Kd[r][i]);
    	            }
    	            t = a.slice();
    	        }

    	        // the last round is special
    	        var result = createArray(16), tt;
    	        for (var i = 0; i < 4; i++) {
    	            tt = this._Kd[rounds][i];
    	            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
    	            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
    	            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
    	            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
    	        }

    	        return result;
    	    };


    	    /**
    	     *  Mode Of Operation - Electonic Codebook (ECB)
    	     */
    	    var ModeOfOperationECB = function(key) {
    	        if (!(this instanceof ModeOfOperationECB)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Electronic Code Block";
    	        this.name = "ecb";

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
    	        plaintext = coerceArray(plaintext);

    	        if ((plaintext.length % 16) !== 0) {
    	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
    	        }

    	        var ciphertext = createArray(plaintext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < plaintext.length; i += 16) {
    	            copyArray(plaintext, block, 0, i, i + 16);
    	            block = this._aes.encrypt(block);
    	            copyArray(block, ciphertext, i);
    	        }

    	        return ciphertext;
    	    };

    	    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
    	        ciphertext = coerceArray(ciphertext);

    	        if ((ciphertext.length % 16) !== 0) {
    	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
    	        }

    	        var plaintext = createArray(ciphertext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < ciphertext.length; i += 16) {
    	            copyArray(ciphertext, block, 0, i, i + 16);
    	            block = this._aes.decrypt(block);
    	            copyArray(block, plaintext, i);
    	        }

    	        return plaintext;
    	    };


    	    /**
    	     *  Mode Of Operation - Cipher Block Chaining (CBC)
    	     */
    	    var ModeOfOperationCBC = function(key, iv) {
    	        if (!(this instanceof ModeOfOperationCBC)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Cipher Block Chaining";
    	        this.name = "cbc";

    	        if (!iv) {
    	            iv = createArray(16);

    	        } else if (iv.length != 16) {
    	            throw new Error('invalid initialation vector size (must be 16 bytes)');
    	        }

    	        this._lastCipherblock = coerceArray(iv, true);

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
    	        plaintext = coerceArray(plaintext);

    	        if ((plaintext.length % 16) !== 0) {
    	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
    	        }

    	        var ciphertext = createArray(plaintext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < plaintext.length; i += 16) {
    	            copyArray(plaintext, block, 0, i, i + 16);

    	            for (var j = 0; j < 16; j++) {
    	                block[j] ^= this._lastCipherblock[j];
    	            }

    	            this._lastCipherblock = this._aes.encrypt(block);
    	            copyArray(this._lastCipherblock, ciphertext, i);
    	        }

    	        return ciphertext;
    	    };

    	    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
    	        ciphertext = coerceArray(ciphertext);

    	        if ((ciphertext.length % 16) !== 0) {
    	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
    	        }

    	        var plaintext = createArray(ciphertext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < ciphertext.length; i += 16) {
    	            copyArray(ciphertext, block, 0, i, i + 16);
    	            block = this._aes.decrypt(block);

    	            for (var j = 0; j < 16; j++) {
    	                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
    	            }

    	            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
    	        }

    	        return plaintext;
    	    };


    	    /**
    	     *  Mode Of Operation - Cipher Feedback (CFB)
    	     */
    	    var ModeOfOperationCFB = function(key, iv, segmentSize) {
    	        if (!(this instanceof ModeOfOperationCFB)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Cipher Feedback";
    	        this.name = "cfb";

    	        if (!iv) {
    	            iv = createArray(16);

    	        } else if (iv.length != 16) {
    	            throw new Error('invalid initialation vector size (must be 16 size)');
    	        }

    	        if (!segmentSize) { segmentSize = 1; }

    	        this.segmentSize = segmentSize;

    	        this._shiftRegister = coerceArray(iv, true);

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
    	        if ((plaintext.length % this.segmentSize) != 0) {
    	            throw new Error('invalid plaintext size (must be segmentSize bytes)');
    	        }

    	        var encrypted = coerceArray(plaintext, true);

    	        var xorSegment;
    	        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
    	            xorSegment = this._aes.encrypt(this._shiftRegister);
    	            for (var j = 0; j < this.segmentSize; j++) {
    	                encrypted[i + j] ^= xorSegment[j];
    	            }

    	            // Shift the register
    	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
    	            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
    	        }

    	        return encrypted;
    	    };

    	    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
    	        if ((ciphertext.length % this.segmentSize) != 0) {
    	            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
    	        }

    	        var plaintext = coerceArray(ciphertext, true);

    	        var xorSegment;
    	        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
    	            xorSegment = this._aes.encrypt(this._shiftRegister);

    	            for (var j = 0; j < this.segmentSize; j++) {
    	                plaintext[i + j] ^= xorSegment[j];
    	            }

    	            // Shift the register
    	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
    	            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
    	        }

    	        return plaintext;
    	    };

    	    /**
    	     *  Mode Of Operation - Output Feedback (OFB)
    	     */
    	    var ModeOfOperationOFB = function(key, iv) {
    	        if (!(this instanceof ModeOfOperationOFB)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Output Feedback";
    	        this.name = "ofb";

    	        if (!iv) {
    	            iv = createArray(16);

    	        } else if (iv.length != 16) {
    	            throw new Error('invalid initialation vector size (must be 16 bytes)');
    	        }

    	        this._lastPrecipher = coerceArray(iv, true);
    	        this._lastPrecipherIndex = 16;

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
    	        var encrypted = coerceArray(plaintext, true);

    	        for (var i = 0; i < encrypted.length; i++) {
    	            if (this._lastPrecipherIndex === 16) {
    	                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
    	                this._lastPrecipherIndex = 0;
    	            }
    	            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
    	        }

    	        return encrypted;
    	    };

    	    // Decryption is symetric
    	    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    	    /**
    	     *  Counter object for CTR common mode of operation
    	     */
    	    var Counter = function(initialValue) {
    	        if (!(this instanceof Counter)) {
    	            throw Error('Counter must be instanitated with `new`');
    	        }

    	        // We allow 0, but anything false-ish uses the default 1
    	        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

    	        if (typeof(initialValue) === 'number') {
    	            this._counter = createArray(16);
    	            this.setValue(initialValue);

    	        } else {
    	            this.setBytes(initialValue);
    	        }
    	    };

    	    Counter.prototype.setValue = function(value) {
    	        if (typeof(value) !== 'number' || parseInt(value) != value) {
    	            throw new Error('invalid counter value (must be an integer)');
    	        }

    	        for (var index = 15; index >= 0; --index) {
    	            this._counter[index] = value % 256;
    	            value = value >> 8;
    	        }
    	    };

    	    Counter.prototype.setBytes = function(bytes) {
    	        bytes = coerceArray(bytes, true);

    	        if (bytes.length != 16) {
    	            throw new Error('invalid counter bytes size (must be 16 bytes)');
    	        }

    	        this._counter = bytes;
    	    };

    	    Counter.prototype.increment = function() {
    	        for (var i = 15; i >= 0; i--) {
    	            if (this._counter[i] === 255) {
    	                this._counter[i] = 0;
    	            } else {
    	                this._counter[i]++;
    	                break;
    	            }
    	        }
    	    };


    	    /**
    	     *  Mode Of Operation - Counter (CTR)
    	     */
    	    var ModeOfOperationCTR = function(key, counter) {
    	        if (!(this instanceof ModeOfOperationCTR)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Counter";
    	        this.name = "ctr";

    	        if (!(counter instanceof Counter)) {
    	            counter = new Counter(counter);
    	        }

    	        this._counter = counter;

    	        this._remainingCounter = null;
    	        this._remainingCounterIndex = 16;

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
    	        var encrypted = coerceArray(plaintext, true);

    	        for (var i = 0; i < encrypted.length; i++) {
    	            if (this._remainingCounterIndex === 16) {
    	                this._remainingCounter = this._aes.encrypt(this._counter._counter);
    	                this._remainingCounterIndex = 0;
    	                this._counter.increment();
    	            }
    	            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
    	        }

    	        return encrypted;
    	    };

    	    // Decryption is symetric
    	    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    	    ///////////////////////
    	    // Padding

    	    // See:https://tools.ietf.org/html/rfc2315
    	    function pkcs7pad(data) {
    	        data = coerceArray(data, true);
    	        var padder = 16 - (data.length % 16);
    	        var result = createArray(data.length + padder);
    	        copyArray(data, result);
    	        for (var i = data.length; i < result.length; i++) {
    	            result[i] = padder;
    	        }
    	        return result;
    	    }

    	    function pkcs7strip(data) {
    	        data = coerceArray(data, true);
    	        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

    	        var padder = data[data.length - 1];
    	        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

    	        var length = data.length - padder;
    	        for (var i = 0; i < padder; i++) {
    	            if (data[length + i] !== padder) {
    	                throw new Error('PKCS#7 invalid padding byte');
    	            }
    	        }

    	        var result = createArray(length);
    	        copyArray(data, result, 0, 0, length);
    	        return result;
    	    }

    	    ///////////////////////
    	    // Exporting


    	    // The block cipher
    	    var aesjs = {
    	        AES: AES,
    	        Counter: Counter,

    	        ModeOfOperation: {
    	            ecb: ModeOfOperationECB,
    	            cbc: ModeOfOperationCBC,
    	            cfb: ModeOfOperationCFB,
    	            ofb: ModeOfOperationOFB,
    	            ctr: ModeOfOperationCTR
    	        },

    	        utils: {
    	            hex: convertHex,
    	            utf8: convertUtf8
    	        },

    	        padding: {
    	            pkcs7: {
    	                pad: pkcs7pad,
    	                strip: pkcs7strip
    	            }
    	        },

    	        _arrayTest: {
    	            coerceArray: coerceArray,
    	            createArray: createArray,
    	            copyArray: copyArray,
    	        }
    	    };


    	    // node.js
    	    {
    	        module.exports = aesjs;

    	    // RequireJS/AMD
    	    // http://www.requirejs.org/docs/api.html
    	    // https://github.com/amdjs/amdjs-api/wiki/AMD
    	    }


    	})(); 
    } (aesJs$1));

    var aesJsExports$1 = aesJs$1.exports;

    var _version$7 = {};

    Object.defineProperty(_version$7, "__esModule", { value: true });
    _version$7.version = void 0;
    _version$7.version = "json-wallets/5.7.0";

    var utils$c = {};

    Object.defineProperty(utils$c, "__esModule", { value: true });
    utils$c.uuidV4 = utils$c.searchPath = utils$c.getPassword = utils$c.zpad = utils$c.looseArrayify = void 0;
    var bytes_1$e = lib$s;
    var strings_1$5 = lib$l;
    function looseArrayify(hexString) {
        if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
        }
        return (0, bytes_1$e.arrayify)(hexString);
    }
    utils$c.looseArrayify = looseArrayify;
    function zpad(value, length) {
        value = String(value);
        while (value.length < length) {
            value = '0' + value;
        }
        return value;
    }
    utils$c.zpad = zpad;
    function getPassword(password) {
        if (typeof (password) === 'string') {
            return (0, strings_1$5.toUtf8Bytes)(password, strings_1$5.UnicodeNormalizationForm.NFKC);
        }
        return (0, bytes_1$e.arrayify)(password);
    }
    utils$c.getPassword = getPassword;
    function searchPath(object, path) {
        var currentChild = object;
        var comps = path.toLowerCase().split('/');
        for (var i = 0; i < comps.length; i++) {
            // Search for a child object with a case-insensitive matching key
            var matchingChild = null;
            for (var key in currentChild) {
                if (key.toLowerCase() === comps[i]) {
                    matchingChild = currentChild[key];
                    break;
                }
            }
            // Didn't find one. :'(
            if (matchingChild === null) {
                return null;
            }
            // Now check this child...
            currentChild = matchingChild;
        }
        return currentChild;
    }
    utils$c.searchPath = searchPath;
    // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
    function uuidV4(randomBytes) {
        var bytes = (0, bytes_1$e.arrayify)(randomBytes);
        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        var value = (0, bytes_1$e.hexlify)(bytes);
        return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
        ].join("-");
    }
    utils$c.uuidV4 = uuidV4;

    var __extends$g = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(crowdsale, "__esModule", { value: true });
    crowdsale.decrypt = crowdsale.CrowdsaleAccount = void 0;
    var aes_js_1$1 = __importDefault$7(aesJsExports$1);
    var address_1$4 = lib$p;
    var bytes_1$d = lib$s;
    var keccak256_1$3 = lib$o;
    var pbkdf2_1$1 = lib$a;
    var strings_1$4 = lib$l;
    var properties_1$e = lib$q;
    var logger_1$l = lib$r;
    var _version_1$l = _version$7;
    var logger$l = new logger_1$l.Logger(_version_1$l.version);
    var utils_1$1 = utils$c;
    var CrowdsaleAccount = /** @class */ (function (_super) {
        __extends$g(CrowdsaleAccount, _super);
        function CrowdsaleAccount() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {
            return !!(value && value._isCrowdsaleAccount);
        };
        return CrowdsaleAccount;
    }(properties_1$e.Description));
    crowdsale.CrowdsaleAccount = CrowdsaleAccount;
    // See: https://github.com/ethereum/pyethsaletool
    function decrypt$1(json, password) {
        var data = JSON.parse(json);
        password = (0, utils_1$1.getPassword)(password);
        // Ethereum Address
        var ethaddr = (0, address_1$4.getAddress)((0, utils_1$1.searchPath)(data, "ethaddr"));
        // Encrypted Seed
        var encseed = (0, utils_1$1.looseArrayify)((0, utils_1$1.searchPath)(data, "encseed"));
        if (!encseed || (encseed.length % 16) !== 0) {
            logger$l.throwArgumentError("invalid encseed", "json", json);
        }
        var key = (0, bytes_1$d.arrayify)((0, pbkdf2_1$1.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
        var iv = encseed.slice(0, 16);
        var encryptedSeed = encseed.slice(16);
        // Decrypt the seed
        var aesCbc = new aes_js_1$1.default.ModeOfOperation.cbc(key, iv);
        var seed = aes_js_1$1.default.padding.pkcs7.strip((0, bytes_1$d.arrayify)(aesCbc.decrypt(encryptedSeed)));
        // This wallet format is weird... Convert the binary encoded hex to a string.
        var seedHex = "";
        for (var i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }
        var seedHexBytes = (0, strings_1$4.toUtf8Bytes)(seedHex);
        var privateKey = (0, keccak256_1$3.keccak256)(seedHexBytes);
        return new CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey: privateKey
        });
    }
    crowdsale.decrypt = decrypt$1;

    var inspect$2 = {};

    Object.defineProperty(inspect$2, "__esModule", { value: true });
    inspect$2.getJsonWalletAddress = inspect$2.isKeystoreWallet = inspect$2.isCrowdsaleWallet = void 0;
    var address_1$3 = lib$p;
    function isCrowdsaleWallet(json) {
        var data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        return (data.encseed && data.ethaddr);
    }
    inspect$2.isCrowdsaleWallet = isCrowdsaleWallet;
    function isKeystoreWallet(json) {
        var data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
        }
        // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
        return true;
    }
    inspect$2.isKeystoreWallet = isKeystoreWallet;
    //export function isJsonWallet(json: string): boolean {
    //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
    //}
    function getJsonWalletAddress(json) {
        if (isCrowdsaleWallet(json)) {
            try {
                return (0, address_1$3.getAddress)(JSON.parse(json).ethaddr);
            }
            catch (error) {
                return null;
            }
        }
        if (isKeystoreWallet(json)) {
            try {
                return (0, address_1$3.getAddress)(JSON.parse(json).address);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }
    inspect$2.getJsonWalletAddress = getJsonWalletAddress;

    var keystore = {};

    var scrypt = {exports: {}};

    (function (module, exports) {

    	(function(root) {
    	    const MAX_VALUE = 0x7fffffff;

    	    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
    	    // See: https://github.com/dchest/scrypt-async-js
    	    function SHA256(m) {
    	        const K = new Uint32Array([
    	           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
    	           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
    	           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
    	           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    	           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
    	           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
    	           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
    	           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    	           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
    	           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
    	           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
    	           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    	           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    	       ]);

    	        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
    	        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
    	        const w = new Uint32Array(64);

    	        function blocks(p) {
    	            let off = 0, len = p.length;
    	            while (len >= 64) {
    	                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

    	                for (i = 0; i < 16; i++) {
    	                    j = off + i*4;
    	                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
    	                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
    	                }

    	                for (i = 16; i < 64; i++) {
    	                    u = w[i-2];
    	                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

    	                    u = w[i-15];
    	                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

    	                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
    	                }

    	                for (i = 0; i < 64; i++) {
    	                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
    	                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
    	                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

    	                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
    	                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

    	                    h = g;
    	                    g = f;
    	                    f = e;
    	                    e = (d + t1) | 0;
    	                    d = c;
    	                    c = b;
    	                    b = a;
    	                    a = (t1 + t2) | 0;
    	                }

    	                h0 = (h0 + a) | 0;
    	                h1 = (h1 + b) | 0;
    	                h2 = (h2 + c) | 0;
    	                h3 = (h3 + d) | 0;
    	                h4 = (h4 + e) | 0;
    	                h5 = (h5 + f) | 0;
    	                h6 = (h6 + g) | 0;
    	                h7 = (h7 + h) | 0;

    	                off += 64;
    	                len -= 64;
    	            }
    	        }

    	        blocks(m);

    	        let i, bytesLeft = m.length % 64,
    	        bitLenHi = (m.length / 0x20000000) | 0,
    	        bitLenLo = m.length << 3,
    	        numZeros = (bytesLeft < 56) ? 56 : 120,
    	        p = m.slice(m.length - bytesLeft, m.length);

    	        p.push(0x80);
    	        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
    	        p.push((bitLenHi >>> 24) & 0xff);
    	        p.push((bitLenHi >>> 16) & 0xff);
    	        p.push((bitLenHi >>> 8)  & 0xff);
    	        p.push((bitLenHi >>> 0)  & 0xff);
    	        p.push((bitLenLo >>> 24) & 0xff);
    	        p.push((bitLenLo >>> 16) & 0xff);
    	        p.push((bitLenLo >>> 8)  & 0xff);
    	        p.push((bitLenLo >>> 0)  & 0xff);

    	        blocks(p);

    	        return [
    	            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
    	            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
    	            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
    	            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
    	            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
    	            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
    	            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
    	            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
    	        ];
    	    }

    	    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
    	        // compress password if it's longer than hash block length
    	        password = (password.length <= 64) ? password : SHA256(password);

    	        const innerLen = 64 + salt.length + 4;
    	        const inner = new Array(innerLen);
    	        const outerKey = new Array(64);

    	        let i;
    	        let dk = [];

    	        // inner = (password ^ ipad) || salt || counter
    	        for (i = 0; i < 64; i++) { inner[i] = 0x36; }
    	        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
    	        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
    	        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

    	        // outerKey = password ^ opad
    	        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
    	        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

    	        // increments counter inside inner
    	        function incrementCounter() {
    	            for (let i = innerLen - 1; i >= innerLen - 4; i--) {
    	                inner[i]++;
    	                if (inner[i] <= 0xff) return;
    	                inner[i] = 0;
    	            }
    	        }

    	        // output blocks = SHA256(outerKey || SHA256(inner)) ...
    	        while (dkLen >= 32) {
    	            incrementCounter();
    	            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
    	            dkLen -= 32;
    	        }
    	        if (dkLen > 0) {
    	            incrementCounter();
    	            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
    	        }

    	        return dk;
    	    }

    	    // The following is an adaptation of scryptsy
    	    // See: https://www.npmjs.com/package/scryptsy
    	    function blockmix_salsa8(BY, Yi, r, x, _X) {
    	        let i;

    	        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
    	        for (i = 0; i < 2 * r; i++) {
    	            blockxor(BY, i * 16, _X, 16);
    	            salsa20_8(_X, x);
    	            arraycopy(_X, 0, BY, Yi + (i * 16), 16);
    	        }

    	        for (i = 0; i < r; i++) {
    	            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
    	        }

    	        for (i = 0; i < r; i++) {
    	            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
    	        }
    	    }

    	    function R(a, b) {
    	        return (a << b) | (a >>> (32 - b));
    	    }

    	    function salsa20_8(B, x) {
    	        arraycopy(B, 0, x, 0, 16);

    	        for (let i = 8; i > 0; i -= 2) {
    	            x[ 4] ^= R(x[ 0] + x[12], 7);
    	            x[ 8] ^= R(x[ 4] + x[ 0], 9);
    	            x[12] ^= R(x[ 8] + x[ 4], 13);
    	            x[ 0] ^= R(x[12] + x[ 8], 18);
    	            x[ 9] ^= R(x[ 5] + x[ 1], 7);
    	            x[13] ^= R(x[ 9] + x[ 5], 9);
    	            x[ 1] ^= R(x[13] + x[ 9], 13);
    	            x[ 5] ^= R(x[ 1] + x[13], 18);
    	            x[14] ^= R(x[10] + x[ 6], 7);
    	            x[ 2] ^= R(x[14] + x[10], 9);
    	            x[ 6] ^= R(x[ 2] + x[14], 13);
    	            x[10] ^= R(x[ 6] + x[ 2], 18);
    	            x[ 3] ^= R(x[15] + x[11], 7);
    	            x[ 7] ^= R(x[ 3] + x[15], 9);
    	            x[11] ^= R(x[ 7] + x[ 3], 13);
    	            x[15] ^= R(x[11] + x[ 7], 18);
    	            x[ 1] ^= R(x[ 0] + x[ 3], 7);
    	            x[ 2] ^= R(x[ 1] + x[ 0], 9);
    	            x[ 3] ^= R(x[ 2] + x[ 1], 13);
    	            x[ 0] ^= R(x[ 3] + x[ 2], 18);
    	            x[ 6] ^= R(x[ 5] + x[ 4], 7);
    	            x[ 7] ^= R(x[ 6] + x[ 5], 9);
    	            x[ 4] ^= R(x[ 7] + x[ 6], 13);
    	            x[ 5] ^= R(x[ 4] + x[ 7], 18);
    	            x[11] ^= R(x[10] + x[ 9], 7);
    	            x[ 8] ^= R(x[11] + x[10], 9);
    	            x[ 9] ^= R(x[ 8] + x[11], 13);
    	            x[10] ^= R(x[ 9] + x[ 8], 18);
    	            x[12] ^= R(x[15] + x[14], 7);
    	            x[13] ^= R(x[12] + x[15], 9);
    	            x[14] ^= R(x[13] + x[12], 13);
    	            x[15] ^= R(x[14] + x[13], 18);
    	        }

    	        for (let i = 0; i < 16; ++i) {
    	            B[i] += x[i];
    	        }
    	    }

    	    // naive approach... going back to loop unrolling may yield additional performance
    	    function blockxor(S, Si, D, len) {
    	        for (let i = 0; i < len; i++) {
    	            D[i] ^= S[Si + i];
    	        }
    	    }

    	    function arraycopy(src, srcPos, dest, destPos, length) {
    	        while (length--) {
    	            dest[destPos++] = src[srcPos++];
    	        }
    	    }

    	    function checkBufferish(o) {
    	        if (!o || typeof(o.length) !== 'number') { return false; }

    	        for (let i = 0; i < o.length; i++) {
    	            const v = o[i];
    	            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
    	                return false;
    	            }
    	        }

    	        return true;
    	    }

    	    function ensureInteger(value, name) {
    	        if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
    	        return value;
    	    }

    	    // N = Cpu cost, r = Memory cost, p = parallelization cost
    	    // callback(error, progress, key)
    	    function _scrypt(password, salt, N, r, p, dkLen, callback) {

    	        N = ensureInteger(N, 'N');
    	        r = ensureInteger(r, 'r');
    	        p = ensureInteger(p, 'p');

    	        dkLen = ensureInteger(dkLen, 'dkLen');

    	        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

    	        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
    	        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

    	        if (!checkBufferish(password)) {
    	            throw new Error('password must be an array or buffer');
    	        }
    	        password = Array.prototype.slice.call(password);

    	        if (!checkBufferish(salt)) {
    	            throw new Error('salt must be an array or buffer');
    	        }
    	        salt = Array.prototype.slice.call(salt);

    	        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
    	        const B = new Uint32Array(p * 32 * r);
    	        for (let i = 0; i < B.length; i++) {
    	            const j = i * 4;
    	            B[i] = ((b[j + 3] & 0xff) << 24) |
    	                   ((b[j + 2] & 0xff) << 16) |
    	                   ((b[j + 1] & 0xff) << 8) |
    	                   ((b[j + 0] & 0xff) << 0);
    	        }

    	        const XY = new Uint32Array(64 * r);
    	        const V = new Uint32Array(32 * r * N);

    	        const Yi = 32 * r;

    	        // scratch space
    	        const x = new Uint32Array(16);       // salsa20_8
    	        const _X = new Uint32Array(16);      // blockmix_salsa8

    	        const totalOps = p * N * 2;
    	        let currentOp = 0;
    	        let lastPercent10 = null;

    	        // Set this to true to abandon the scrypt on the next step
    	        let stop = false;

    	        // State information
    	        let state = 0;
    	        let i0 = 0, i1;
    	        let Bi;

    	        // How many blockmix_salsa8 can we do per step?
    	        const limit = callback ? parseInt(1000 / r): 0xffffffff;

    	        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
    	        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

    	        // This is really all I changed; making scryptsy a state machine so we occasionally
    	        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
    	        const incrementalSMix = function() {
    	            if (stop) {
    	                return callback(new Error('cancelled'), currentOp / totalOps);
    	            }

    	            let steps;

    	            switch (state) {
    	                case 0:
    	                    // for (var i = 0; i < p; i++)...
    	                    Bi = i0 * 32 * r;

    	                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

    	                    state = 1;                                         // Move to ROMix 2
    	                    i1 = 0;

    	                    // Fall through

    	                case 1:

    	                    // Run up to 1000 steps of the first inner smix loop
    	                    steps = N - i1;
    	                    if (steps > limit) { steps = limit; }
    	                    for (let i = 0; i < steps; i++) {                  // ROMix - 2
    	                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
    	                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
    	                    }

    	                    // for (var i = 0; i < N; i++)
    	                    i1 += steps;
    	                    currentOp += steps;

    	                    if (callback) {
    	                        // Call the callback with the progress (optionally stopping us)
    	                        const percent10 = parseInt(1000 * currentOp / totalOps);
    	                        if (percent10 !== lastPercent10) {
    	                            stop = callback(null, currentOp / totalOps);
    	                            if (stop) { break; }
    	                            lastPercent10 = percent10;
    	                        }
    	                    }

    	                    if (i1 < N) { break; }

    	                    i1 = 0;                                          // Move to ROMix 6
    	                    state = 2;

    	                    // Fall through

    	                case 2:

    	                    // Run up to 1000 steps of the second inner smix loop
    	                    steps = N - i1;
    	                    if (steps > limit) { steps = limit; }
    	                    for (let i = 0; i < steps; i++) {                // ROMix - 6
    	                        const offset = (2 * r - 1) * 16;             // ROMix - 7
    	                        const j = XY[offset] & (N - 1);
    	                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
    	                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
    	                    }

    	                    // for (var i = 0; i < N; i++)...
    	                    i1 += steps;
    	                    currentOp += steps;

    	                    // Call the callback with the progress (optionally stopping us)
    	                    if (callback) {
    	                        const percent10 = parseInt(1000 * currentOp / totalOps);
    	                        if (percent10 !== lastPercent10) {
    	                            stop = callback(null, currentOp / totalOps);
    	                            if (stop) { break; }
    	                            lastPercent10 = percent10;
    	                        }
    	                    }

    	                    if (i1 < N) { break; }

    	                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

    	                    // for (var i = 0; i < p; i++)...
    	                    i0++;
    	                    if (i0 < p) {
    	                        state = 0;
    	                        break;
    	                    }

    	                    b = [];
    	                    for (let i = 0; i < B.length; i++) {
    	                        b.push((B[i] >>  0) & 0xff);
    	                        b.push((B[i] >>  8) & 0xff);
    	                        b.push((B[i] >> 16) & 0xff);
    	                        b.push((B[i] >> 24) & 0xff);
    	                    }

    	                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

    	                    // Send the result to the callback
    	                    if (callback) { callback(null, 1.0, derivedKey); }

    	                    // Done; don't break (which would reschedule)
    	                    return derivedKey;
    	            }

    	            // Schedule the next steps
    	            if (callback) { nextTick(incrementalSMix); }
    	        };

    	        // Run the smix state machine until completion
    	        if (!callback) {
    	            while (true) {
    	                const derivedKey = incrementalSMix();
    	                if (derivedKey != undefined) { return derivedKey; }
    	            }
    	        }

    	        // Bootstrap the async incremental smix
    	        incrementalSMix();
    	    }

    	    const lib = {
    	        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
    	            return new Promise(function(resolve, reject) {
    	                let lastProgress = 0;
    	                if (progressCallback) { progressCallback(0); }
    	                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
    	                    if (error) {
    	                        reject(error);
    	                    } else if (key) {
    	                        if (progressCallback && lastProgress !== 1) {
    	                            progressCallback(1);
    	                        }
    	                        resolve(new Uint8Array(key));
    	                    } else if (progressCallback && progress !== lastProgress) {
    	                        lastProgress = progress;
    	                        return progressCallback(progress);
    	                    }
    	                });
    	            });
    	        },
    	        syncScrypt: function(password, salt, N, r, p, dkLen) {
    	            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
    	        }
    	    };

    	    // node.js
    	    {
    	       module.exports = lib;

    	    // RequireJS/AMD
    	    // http://www.requirejs.org/docs/api.html
    	    // https://github.com/amdjs/amdjs-api/wiki/AMD
    	    }

    	})(); 
    } (scrypt));

    var scryptExports = scrypt.exports;

    var __extends$f = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$a = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$a = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(keystore, "__esModule", { value: true });
    keystore.encrypt = keystore.decrypt = keystore.decryptSync = keystore.KeystoreAccount = void 0;
    var aes_js_1 = __importDefault$6(aesJsExports$1);
    var scrypt_js_1 = __importDefault$6(scryptExports);
    var address_1$2 = lib$p;
    var bytes_1$c = lib$s;
    var hdnode_1$1 = lib$c;
    var keccak256_1$2 = lib$o;
    var pbkdf2_1 = lib$a;
    var random_1$2 = lib$7;
    var properties_1$d = lib$q;
    var transactions_1$4 = lib$f;
    var utils_1 = utils$c;
    var logger_1$k = lib$r;
    var _version_1$k = _version$7;
    var logger$k = new logger_1$k.Logger(_version_1$k.version);
    // Exported Types
    function hasMnemonic$1(value) {
        return (value != null && value.mnemonic && value.mnemonic.phrase);
    }
    var KeystoreAccount = /** @class */ (function (_super) {
        __extends$f(KeystoreAccount, _super);
        function KeystoreAccount() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        KeystoreAccount.prototype.isKeystoreAccount = function (value) {
            return !!(value && value._isKeystoreAccount);
        };
        return KeystoreAccount;
    }(properties_1$d.Description));
    keystore.KeystoreAccount = KeystoreAccount;
    function _decrypt(data, key, ciphertext) {
        var cipher = (0, utils_1.searchPath)(data, "crypto/cipher");
        if (cipher === "aes-128-ctr") {
            var iv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/cipherparams/iv"));
            var counter = new aes_js_1.default.Counter(iv);
            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
            return (0, bytes_1$c.arrayify)(aesCtr.decrypt(ciphertext));
        }
        return null;
    }
    function _getAccount(data, key) {
        var ciphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/ciphertext"));
        var computedMAC = (0, bytes_1$c.hexlify)((0, keccak256_1$2.keccak256)((0, bytes_1$c.concat)([key.slice(16, 32), ciphertext]))).substring(2);
        if (computedMAC !== (0, utils_1.searchPath)(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
        }
        var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
        if (!privateKey) {
            logger$k.throwError("unsupported cipher", logger_1$k.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "decrypt"
            });
        }
        var mnemonicKey = key.slice(32, 64);
        var address = (0, transactions_1$4.computeAddress)(privateKey);
        if (data.address) {
            var check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
                check = "0x" + check;
            }
            if ((0, address_1$2.getAddress)(check) !== address) {
                throw new Error("address mismatch");
            }
        }
        var account = {
            _isKeystoreAccount: true,
            address: address,
            privateKey: (0, bytes_1$c.hexlify)(privateKey)
        };
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        if ((0, utils_1.searchPath)(data, "x-ethers/version") === "0.1") {
            var mnemonicCiphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCiphertext"));
            var mnemonicIv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCounter"));
            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            var path = (0, utils_1.searchPath)(data, "x-ethers/path") || hdnode_1$1.defaultPath;
            var locale = (0, utils_1.searchPath)(data, "x-ethers/locale") || "en";
            var entropy = (0, bytes_1$c.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
                var mnemonic = (0, hdnode_1$1.entropyToMnemonic)(entropy, locale);
                var node = hdnode_1$1.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
                account.mnemonic = node.mnemonic;
            }
            catch (error) {
                // If we don't have the locale wordlist installed to
                // read this mnemonic, just bail and don't set the
                // mnemonic
                if (error.code !== logger_1$k.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                    throw error;
                }
            }
        }
        return new KeystoreAccount(account);
    }
    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
        return (0, bytes_1$c.arrayify)((0, pbkdf2_1.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
        return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
        var passwordBytes = (0, utils_1.getPassword)(password);
        var kdf = (0, utils_1.searchPath)(data, "crypto/kdf");
        if (kdf && typeof (kdf) === "string") {
            var throwError = function (name, value) {
                return logger$k.throwArgumentError("invalid key-derivation function parameters", name, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
                var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
                var N = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/n"));
                var r = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/r"));
                var p = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/p"));
                // Check for all required parameters
                if (!N || !r || !p) {
                    throwError("kdf", kdf);
                }
                // Make sure N is a power of 2
                if ((N & (N - 1)) !== 0) {
                    throwError("N", N);
                }
                var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
                var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
                var prfFunc = null;
                var prf = (0, utils_1.searchPath)(data, "crypto/kdfparams/prf");
                if (prf === "hmac-sha256") {
                    prfFunc = "sha256";
                }
                else if (prf === "hmac-sha512") {
                    prfFunc = "sha512";
                }
                else {
                    throwError("prf", prf);
                }
                var count = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/c"));
                var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
        }
        return logger$k.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
    }
    function decryptSync(json, password) {
        var data = JSON.parse(json);
        var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);
        return _getAccount(data, key);
    }
    keystore.decryptSync = decryptSync;
    function decrypt(json, password, progressCallback) {
        return __awaiter$a(this, void 0, void 0, function () {
            var data, key;
            return __generator$a(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = JSON.parse(json);
                        return [4 /*yield*/, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];
                    case 1:
                        key = _a.sent();
                        return [2 /*return*/, _getAccount(data, key)];
                }
            });
        });
    }
    keystore.decrypt = decrypt;
    function encrypt(account, password, options, progressCallback) {
        try {
            // Check the address matches the private key
            if ((0, address_1$2.getAddress)(account.address) !== (0, transactions_1$4.computeAddress)(account.privateKey)) {
                throw new Error("address/privateKey mismatch");
            }
            // Check the mnemonic (if any) matches the private key
            if (hasMnemonic$1(account)) {
                var mnemonic = account.mnemonic;
                var node = hdnode_1$1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || hdnode_1$1.defaultPath);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
        // The options are optional, so adjust the call as needed
        if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (!options) {
            options = {};
        }
        var privateKey = (0, bytes_1$c.arrayify)(account.privateKey);
        var passwordBytes = (0, utils_1.getPassword)(password);
        var entropy = null;
        var path = null;
        var locale = null;
        if (hasMnemonic$1(account)) {
            var srcMnemonic = account.mnemonic;
            entropy = (0, bytes_1$c.arrayify)((0, hdnode_1$1.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || hdnode_1$1.defaultPath;
            locale = srcMnemonic.locale || "en";
        }
        var client = options.client;
        if (!client) {
            client = "ethers.js";
        }
        // Check/generate the salt
        var salt = null;
        if (options.salt) {
            salt = (0, bytes_1$c.arrayify)(options.salt);
        }
        else {
            salt = (0, random_1$2.randomBytes)(32);
        }
        // Override initialization vector
        var iv = null;
        if (options.iv) {
            iv = (0, bytes_1$c.arrayify)(options.iv);
            if (iv.length !== 16) {
                throw new Error("invalid iv");
            }
        }
        else {
            iv = (0, random_1$2.randomBytes)(16);
        }
        // Override the uuid
        var uuidRandom = null;
        if (options.uuid) {
            uuidRandom = (0, bytes_1$c.arrayify)(options.uuid);
            if (uuidRandom.length !== 16) {
                throw new Error("invalid uuid");
            }
        }
        else {
            uuidRandom = (0, random_1$2.randomBytes)(16);
        }
        // Override the scrypt password-based key derivation function parameters
        var N = (1 << 17), r = 8, p = 1;
        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }
            if (options.scrypt.r) {
                r = options.scrypt.r;
            }
            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }
        // We take 64 bytes:
        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {
            key = (0, bytes_1$c.arrayify)(key);
            // This will be used to encrypt the wallet (as per Web3 secret storage)
            var derivedKey = key.slice(0, 16);
            var macPrefix = key.slice(16, 32);
            // This will be used to encrypt the mnemonic phrase (if any)
            var mnemonicKey = key.slice(32, 64);
            // Encrypt the private key
            var counter = new aes_js_1.default.Counter(iv);
            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
            var ciphertext = (0, bytes_1$c.arrayify)(aesCtr.encrypt(privateKey));
            // Compute the message authentication code, used to check the password
            var mac = (0, keccak256_1$2.keccak256)((0, bytes_1$c.concat)([macPrefix, ciphertext]));
            // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
            var data = {
                address: account.address.substring(2).toLowerCase(),
                id: (0, utils_1.uuidV4)(uuidRandom),
                version: 3,
                crypto: {
                    cipher: "aes-128-ctr",
                    cipherparams: {
                        iv: (0, bytes_1$c.hexlify)(iv).substring(2),
                    },
                    ciphertext: (0, bytes_1$c.hexlify)(ciphertext).substring(2),
                    kdf: "scrypt",
                    kdfparams: {
                        salt: (0, bytes_1$c.hexlify)(salt).substring(2),
                        n: N,
                        dklen: 32,
                        p: p,
                        r: r
                    },
                    mac: mac.substring(2)
                }
            };
            // If we have a mnemonic, encrypt it into the JSON wallet
            if (entropy) {
                var mnemonicIv = (0, random_1$2.randomBytes)(16);
                var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
                var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                var mnemonicCiphertext = (0, bytes_1$c.arrayify)(mnemonicAesCtr.encrypt(entropy));
                var now = new Date();
                var timestamp = (now.getUTCFullYear() + "-" +
                    (0, utils_1.zpad)(now.getUTCMonth() + 1, 2) + "-" +
                    (0, utils_1.zpad)(now.getUTCDate(), 2) + "T" +
                    (0, utils_1.zpad)(now.getUTCHours(), 2) + "-" +
                    (0, utils_1.zpad)(now.getUTCMinutes(), 2) + "-" +
                    (0, utils_1.zpad)(now.getUTCSeconds(), 2) + ".0Z");
                data["x-ethers"] = {
                    client: client,
                    gethFilename: ("UTC--" + timestamp + "--" + data.address),
                    mnemonicCounter: (0, bytes_1$c.hexlify)(mnemonicIv).substring(2),
                    mnemonicCiphertext: (0, bytes_1$c.hexlify)(mnemonicCiphertext).substring(2),
                    path: path,
                    locale: locale,
                    version: "0.1"
                };
            }
            return JSON.stringify(data);
        });
    }
    keystore.encrypt = encrypt;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.decryptJsonWalletSync = exports.decryptJsonWallet = exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = exports.encryptKeystore = exports.decryptKeystoreSync = exports.decryptKeystore = exports.decryptCrowdsale = void 0;
    	var crowdsale_1 = crowdsale;
    	Object.defineProperty(exports, "decryptCrowdsale", { enumerable: true, get: function () { return crowdsale_1.decrypt; } });
    	var inspect_1 = inspect$2;
    	Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return inspect_1.getJsonWalletAddress; } });
    	Object.defineProperty(exports, "isCrowdsaleWallet", { enumerable: true, get: function () { return inspect_1.isCrowdsaleWallet; } });
    	Object.defineProperty(exports, "isKeystoreWallet", { enumerable: true, get: function () { return inspect_1.isKeystoreWallet; } });
    	var keystore_1 = keystore;
    	Object.defineProperty(exports, "decryptKeystore", { enumerable: true, get: function () { return keystore_1.decrypt; } });
    	Object.defineProperty(exports, "decryptKeystoreSync", { enumerable: true, get: function () { return keystore_1.decryptSync; } });
    	Object.defineProperty(exports, "encryptKeystore", { enumerable: true, get: function () { return keystore_1.encrypt; } });
    	function decryptJsonWallet(json, password, progressCallback) {
    	    if ((0, inspect_1.isCrowdsaleWallet)(json)) {
    	        if (progressCallback) {
    	            progressCallback(0);
    	        }
    	        var account = (0, crowdsale_1.decrypt)(json, password);
    	        if (progressCallback) {
    	            progressCallback(1);
    	        }
    	        return Promise.resolve(account);
    	    }
    	    if ((0, inspect_1.isKeystoreWallet)(json)) {
    	        return (0, keystore_1.decrypt)(json, password, progressCallback);
    	    }
    	    return Promise.reject(new Error("invalid JSON wallet"));
    	}
    	exports.decryptJsonWallet = decryptJsonWallet;
    	function decryptJsonWalletSync(json, password) {
    	    if ((0, inspect_1.isCrowdsaleWallet)(json)) {
    	        return (0, crowdsale_1.decrypt)(json, password);
    	    }
    	    if ((0, inspect_1.isKeystoreWallet)(json)) {
    	        return (0, keystore_1.decryptSync)(json, password);
    	    }
    	    throw new Error("invalid JSON wallet");
    	}
    	exports.decryptJsonWalletSync = decryptJsonWalletSync;
    	
    } (lib$6));

    var _version$6 = {};

    Object.defineProperty(_version$6, "__esModule", { value: true });
    _version$6.version = void 0;
    _version$6.version = "wallet/5.7.0";

    var __extends$e = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$9 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$9 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(lib$d, "__esModule", { value: true });
    lib$d.verifyTypedData = lib$d.verifyMessage = lib$d.Wallet = void 0;
    var address_1$1 = lib$p;
    var abstract_provider_1$2 = lib$h;
    var abstract_signer_1$1 = lib$g;
    var bytes_1$b = lib$s;
    var hash_1$3 = lib$k;
    var hdnode_1 = lib$c;
    var keccak256_1$1 = lib$o;
    var properties_1$c = lib$q;
    var random_1$1 = lib$7;
    var signing_key_1 = lib$e;
    var json_wallets_1 = lib$6;
    var transactions_1$3 = lib$f;
    var logger_1$j = lib$r;
    var _version_1$j = _version$6;
    var logger$j = new logger_1$j.Logger(_version_1$j.version);
    function isAccount(value) {
        return (value != null && (0, bytes_1$b.isHexString)(value.privateKey, 32) && value.address != null);
    }
    function hasMnemonic(value) {
        var mnemonic = value.mnemonic;
        return (mnemonic && mnemonic.phrase);
    }
    var Wallet = /** @class */ (function (_super) {
        __extends$e(Wallet, _super);
        function Wallet(privateKey, provider) {
            var _this = _super.call(this) || this;
            if (isAccount(privateKey)) {
                var signingKey_1 = new signing_key_1.SigningKey(privateKey.privateKey);
                (0, properties_1$c.defineReadOnly)(_this, "_signingKey", function () { return signingKey_1; });
                (0, properties_1$c.defineReadOnly)(_this, "address", (0, transactions_1$3.computeAddress)(_this.publicKey));
                if (_this.address !== (0, address_1$1.getAddress)(privateKey.address)) {
                    logger$j.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
                }
                if (hasMnemonic(privateKey)) {
                    var srcMnemonic_1 = privateKey.mnemonic;
                    (0, properties_1$c.defineReadOnly)(_this, "_mnemonic", function () { return ({
                        phrase: srcMnemonic_1.phrase,
                        path: srcMnemonic_1.path || hdnode_1.defaultPath,
                        locale: srcMnemonic_1.locale || "en"
                    }); });
                    var mnemonic = _this.mnemonic;
                    var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                    if ((0, transactions_1$3.computeAddress)(node.privateKey) !== _this.address) {
                        logger$j.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                    }
                }
                else {
                    (0, properties_1$c.defineReadOnly)(_this, "_mnemonic", function () { return null; });
                }
            }
            else {
                if (signing_key_1.SigningKey.isSigningKey(privateKey)) {
                    /* istanbul ignore if */
                    if (privateKey.curve !== "secp256k1") {
                        logger$j.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                    }
                    (0, properties_1$c.defineReadOnly)(_this, "_signingKey", function () { return privateKey; });
                }
                else {
                    // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                    if (typeof (privateKey) === "string") {
                        if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                            privateKey = "0x" + privateKey;
                        }
                    }
                    var signingKey_2 = new signing_key_1.SigningKey(privateKey);
                    (0, properties_1$c.defineReadOnly)(_this, "_signingKey", function () { return signingKey_2; });
                }
                (0, properties_1$c.defineReadOnly)(_this, "_mnemonic", function () { return null; });
                (0, properties_1$c.defineReadOnly)(_this, "address", (0, transactions_1$3.computeAddress)(_this.publicKey));
            }
            /* istanbul ignore if */
            if (provider && !abstract_provider_1$2.Provider.isProvider(provider)) {
                logger$j.throwArgumentError("invalid provider", "provider", provider);
            }
            (0, properties_1$c.defineReadOnly)(_this, "provider", provider || null);
            return _this;
        }
        Object.defineProperty(Wallet.prototype, "mnemonic", {
            get: function () { return this._mnemonic(); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Wallet.prototype, "privateKey", {
            get: function () { return this._signingKey().privateKey; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Wallet.prototype, "publicKey", {
            get: function () { return this._signingKey().publicKey; },
            enumerable: false,
            configurable: true
        });
        Wallet.prototype.getAddress = function () {
            return Promise.resolve(this.address);
        };
        Wallet.prototype.connect = function (provider) {
            return new Wallet(this, provider);
        };
        Wallet.prototype.signTransaction = function (transaction) {
            var _this = this;
            return (0, properties_1$c.resolveProperties)(transaction).then(function (tx) {
                if (tx.from != null) {
                    if ((0, address_1$1.getAddress)(tx.from) !== _this.address) {
                        logger$j.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                    }
                    delete tx.from;
                }
                var signature = _this._signingKey().signDigest((0, keccak256_1$1.keccak256)((0, transactions_1$3.serialize)(tx)));
                return (0, transactions_1$3.serialize)(tx, signature);
            });
        };
        Wallet.prototype.signMessage = function (message) {
            return __awaiter$9(this, void 0, void 0, function () {
                return __generator$9(this, function (_a) {
                    return [2 /*return*/, (0, bytes_1$b.joinSignature)(this._signingKey().signDigest((0, hash_1$3.hashMessage)(message)))];
                });
            });
        };
        Wallet.prototype._signTypedData = function (domain, types, value) {
            return __awaiter$9(this, void 0, void 0, function () {
                var populated;
                var _this = this;
                return __generator$9(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, hash_1$3._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                                if (_this.provider == null) {
                                    logger$j.throwError("cannot resolve ENS names without a provider", logger_1$j.Logger.errors.UNSUPPORTED_OPERATION, {
                                        operation: "resolveName",
                                        value: name
                                    });
                                }
                                return _this.provider.resolveName(name);
                            })];
                        case 1:
                            populated = _a.sent();
                            return [2 /*return*/, (0, bytes_1$b.joinSignature)(this._signingKey().signDigest(hash_1$3._TypedDataEncoder.hash(populated.domain, types, populated.value)))];
                    }
                });
            });
        };
        Wallet.prototype.encrypt = function (password, options, progressCallback) {
            if (typeof (options) === "function" && !progressCallback) {
                progressCallback = options;
                options = {};
            }
            if (progressCallback && typeof (progressCallback) !== "function") {
                throw new Error("invalid callback");
            }
            if (!options) {
                options = {};
            }
            return (0, json_wallets_1.encryptKeystore)(this, password, options, progressCallback);
        };
        /**
         *  Static methods to create Wallet instances.
         */
        Wallet.createRandom = function (options) {
            var entropy = (0, random_1$1.randomBytes)(16);
            if (!options) {
                options = {};
            }
            if (options.extraEntropy) {
                entropy = (0, bytes_1$b.arrayify)((0, bytes_1$b.hexDataSlice)((0, keccak256_1$1.keccak256)((0, bytes_1$b.concat)([entropy, options.extraEntropy])), 0, 16));
            }
            var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, options.locale);
            return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
        };
        Wallet.fromEncryptedJson = function (json, password, progressCallback) {
            return (0, json_wallets_1.decryptJsonWallet)(json, password, progressCallback).then(function (account) {
                return new Wallet(account);
            });
        };
        Wallet.fromEncryptedJsonSync = function (json, password) {
            return new Wallet((0, json_wallets_1.decryptJsonWalletSync)(json, password));
        };
        Wallet.fromMnemonic = function (mnemonic, path, wordlist) {
            if (!path) {
                path = hdnode_1.defaultPath;
            }
            return new Wallet(hdnode_1.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
        };
        return Wallet;
    }(abstract_signer_1$1.Signer));
    lib$d.Wallet = Wallet;
    function verifyMessage(message, signature) {
        return (0, transactions_1$3.recoverAddress)((0, hash_1$3.hashMessage)(message), signature);
    }
    lib$d.verifyMessage = verifyMessage;
    function verifyTypedData(domain, types, value, signature) {
        return (0, transactions_1$3.recoverAddress)(hash_1$3._TypedDataEncoder.hash(domain, types, value), signature);
    }
    lib$d.verifyTypedData = verifyTypedData;

    var lib$5 = {};

    var lib$4 = {};

    var _version$5 = {};

    Object.defineProperty(_version$5, "__esModule", { value: true });
    _version$5.version = void 0;
    _version$5.version = "networks/5.7.1";

    Object.defineProperty(lib$4, "__esModule", { value: true });
    lib$4.getNetwork = void 0;
    var logger_1$i = lib$r;
    var _version_1$i = _version$5;
    var logger$i = new logger_1$i.Logger(_version_1$i.version);
    function isRenetworkable(value) {
        return (value && typeof (value.renetwork) === "function");
    }
    function ethDefaultProvider(network) {
        var func = function (providers, options) {
            if (options == null) {
                options = {};
            }
            var providerList = [];
            if (providers.InfuraProvider && options.infura !== "-") {
                try {
                    providerList.push(new providers.InfuraProvider(network, options.infura));
                }
                catch (error) { }
            }
            if (providers.EtherscanProvider && options.etherscan !== "-") {
                try {
                    providerList.push(new providers.EtherscanProvider(network, options.etherscan));
                }
                catch (error) { }
            }
            if (providers.AlchemyProvider && options.alchemy !== "-") {
                try {
                    providerList.push(new providers.AlchemyProvider(network, options.alchemy));
                }
                catch (error) { }
            }
            if (providers.PocketProvider && options.pocket !== "-") {
                // These networks are currently faulty on Pocket as their
                // network does not handle the Berlin hardfork, which is
                // live on these ones.
                // @TODO: This goes away once Pocket has upgraded their nodes
                var skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
                try {
                    var provider = new providers.PocketProvider(network, options.pocket);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providers.CloudflareProvider && options.cloudflare !== "-") {
                try {
                    providerList.push(new providers.CloudflareProvider(network));
                }
                catch (error) { }
            }
            if (providers.AnkrProvider && options.ankr !== "-") {
                try {
                    var skip = ["ropsten"];
                    var provider = new providers.AnkrProvider(network, options.ankr);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providerList.length === 0) {
                return null;
            }
            if (providers.FallbackProvider) {
                var quorum = 1;
                if (options.quorum != null) {
                    quorum = options.quorum;
                }
                else if (network === "homestead") {
                    quorum = 2;
                }
                return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
        };
        func.renetwork = function (network) {
            return ethDefaultProvider(network);
        };
        return func;
    }
    function etcDefaultProvider(url, network) {
        var func = function (providers, options) {
            if (providers.JsonRpcProvider) {
                return new providers.JsonRpcProvider(url, network);
            }
            return null;
        };
        func.renetwork = function (network) {
            return etcDefaultProvider(url, network);
        };
        return func;
    }
    var homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead")
    };
    var ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten")
    };
    var classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    // See: https://chainlist.org
    var networks = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead: homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten: ropsten,
        testnet: ropsten,
        rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
        },
        kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
        },
        goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        sepolia: {
            chainId: 11155111,
            name: "sepolia",
            _defaultProvider: ethDefaultProvider("sepolia")
        },
        // ETC (See: #351)
        classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor: classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: {
            chainId: 137,
            name: "matic",
            _defaultProvider: ethDefaultProvider("matic")
        },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: {
            chainId: 10,
            name: "optimism",
            _defaultProvider: ethDefaultProvider("optimism")
        },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" },
    };
    /**
     *  getNetwork
     *
     *  Converts a named common networks or chain ID (network ID) to a Network
     *  and verifies a network is a valid Network..
     */
    function getNetwork(network) {
        // No network (null)
        if (network == null) {
            return null;
        }
        if (typeof (network) === "number") {
            for (var name_1 in networks) {
                var standard_1 = networks[name_1];
                if (standard_1.chainId === network) {
                    return {
                        name: standard_1.name,
                        chainId: standard_1.chainId,
                        ensAddress: (standard_1.ensAddress || null),
                        _defaultProvider: (standard_1._defaultProvider || null)
                    };
                }
            }
            return {
                chainId: network,
                name: "unknown"
            };
        }
        if (typeof (network) === "string") {
            var standard_2 = networks[network];
            if (standard_2 == null) {
                return null;
            }
            return {
                name: standard_2.name,
                chainId: standard_2.chainId,
                ensAddress: standard_2.ensAddress,
                _defaultProvider: (standard_2._defaultProvider || null)
            };
        }
        var standard = networks[network.name];
        // Not a standard network; check that it is a valid network in general
        if (!standard) {
            if (typeof (network.chainId) !== "number") {
                logger$i.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
        }
        // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
        if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            logger$i.throwArgumentError("network chainId mismatch", "network", network);
        }
        // @TODO: In the next major version add an attach function to a defaultProvider
        // class and move the _defaultProvider internal to this file (extend Network)
        var defaultProvider = network._defaultProvider || null;
        if (defaultProvider == null && standard._defaultProvider) {
            if (isRenetworkable(standard._defaultProvider)) {
                defaultProvider = standard._defaultProvider.renetwork(network);
            }
            else {
                defaultProvider = standard._defaultProvider;
            }
        }
        // Standard Network (allow overriding the ENS address)
        return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: (network.ensAddress || standard.ensAddress || null),
            _defaultProvider: defaultProvider
        };
    }
    lib$4.getNetwork = getNetwork;

    var baseProvider = {};

    var lib$3 = {};

    var _version$4 = {};

    Object.defineProperty(_version$4, "__esModule", { value: true });
    _version$4.version = void 0;
    _version$4.version = "web/5.7.1";

    var browserGeturl = {};

    var __awaiter$8 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$8 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(browserGeturl, "__esModule", { value: true });
    browserGeturl.getUrl = void 0;
    var bytes_1$a = lib$s;
    function getUrl(href, options) {
        return __awaiter$8(this, void 0, void 0, function () {
            var request, opts, response, body, headers;
            return __generator$8(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options == null) {
                            options = {};
                        }
                        request = {
                            method: (options.method || "GET"),
                            headers: (options.headers || {}),
                            body: (options.body || undefined),
                        };
                        if (options.skipFetchSetup !== true) {
                            request.mode = "cors"; // no-cors, cors, *same-origin
                            request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
                            request.credentials = "same-origin"; // include, *same-origin, omit
                            request.redirect = "follow"; // manual, *follow, error
                            request.referrer = "client"; // no-referrer, *client
                        }
                        if (options.fetchOptions != null) {
                            opts = options.fetchOptions;
                            if (opts.mode) {
                                request.mode = (opts.mode);
                            }
                            if (opts.cache) {
                                request.cache = (opts.cache);
                            }
                            if (opts.credentials) {
                                request.credentials = (opts.credentials);
                            }
                            if (opts.redirect) {
                                request.redirect = (opts.redirect);
                            }
                            if (opts.referrer) {
                                request.referrer = opts.referrer;
                            }
                        }
                        return [4 /*yield*/, fetch(href, request)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.arrayBuffer()];
                    case 2:
                        body = _a.sent();
                        headers = {};
                        if (response.headers.forEach) {
                            response.headers.forEach(function (value, key) {
                                headers[key.toLowerCase()] = value;
                            });
                        }
                        else {
                            ((response.headers).keys)().forEach(function (key) {
                                headers[key.toLowerCase()] = response.headers.get(key);
                            });
                        }
                        return [2 /*return*/, {
                                headers: headers,
                                statusCode: response.status,
                                statusMessage: response.statusText,
                                body: (0, bytes_1$a.arrayify)(new Uint8Array(body)),
                            }];
                }
            });
        });
    }
    browserGeturl.getUrl = getUrl;

    var __awaiter$7 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$7 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(lib$3, "__esModule", { value: true });
    lib$3.poll = lib$3.fetchJson = lib$3._fetchData = void 0;
    var base64_1$1 = lib$i;
    var bytes_1$9 = lib$s;
    var properties_1$b = lib$q;
    var strings_1$3 = lib$l;
    var logger_1$h = lib$r;
    var _version_1$h = _version$4;
    var logger$h = new logger_1$h.Logger(_version_1$h.version);
    var geturl_1 = browserGeturl;
    function staller(duration) {
        return new Promise(function (resolve) {
            setTimeout(resolve, duration);
        });
    }
    function bodyify(value, type) {
        if (value == null) {
            return null;
        }
        if (typeof (value) === "string") {
            return value;
        }
        if ((0, bytes_1$9.isBytesLike)(value)) {
            if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
                try {
                    return (0, strings_1$3.toUtf8String)(value);
                }
                catch (error) { }
            }
            return (0, bytes_1$9.hexlify)(value);
        }
        return value;
    }
    function unpercent(value) {
        return (0, strings_1$3.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, function (all, code) {
            return String.fromCharCode(parseInt(code, 16));
        }));
    }
    // This API is still a work in progress; the future changes will likely be:
    // - ConnectionInfo => FetchDataRequest<T = any>
    // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
    //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
    // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
    // For this reason, it should be considered internal until the API is finalized
    function _fetchData(connection, body, processFunc) {
        // How many times to retry in the event of a throttle
        var attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
        logger$h.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
        var throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
        var throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
        logger$h.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
        var errorPassThrough = ((typeof (connection) === "object") ? !!(connection.errorPassThrough) : false);
        var headers = {};
        var url = null;
        // @TODO: Allow ConnectionInfo to override some of these values
        var options = {
            method: "GET",
        };
        var allow304 = false;
        var timeout = 2 * 60 * 1000;
        if (typeof (connection) === "string") {
            url = connection;
        }
        else if (typeof (connection) === "object") {
            if (connection == null || connection.url == null) {
                logger$h.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
                timeout = connection.timeout;
            }
            if (connection.headers) {
                for (var key in connection.headers) {
                    headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                    if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                        allow304 = true;
                    }
                }
            }
            options.allowGzip = !!connection.allowGzip;
            if (connection.user != null && connection.password != null) {
                if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                    logger$h.throwError("basic authentication requires a secure https url", logger_1$h.Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
                }
                var authorization = connection.user + ":" + connection.password;
                headers["authorization"] = {
                    key: "Authorization",
                    value: "Basic " + (0, base64_1$1.encode)((0, strings_1$3.toUtf8Bytes)(authorization))
                };
            }
            if (connection.skipFetchSetup != null) {
                options.skipFetchSetup = !!connection.skipFetchSetup;
            }
            if (connection.fetchOptions != null) {
                options.fetchOptions = (0, properties_1$b.shallowCopy)(connection.fetchOptions);
            }
        }
        var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
        var dataMatch = ((url) ? url.match(reData) : null);
        if (dataMatch) {
            try {
                var response = {
                    statusCode: 200,
                    statusMessage: "OK",
                    headers: { "content-type": (dataMatch[1] || "text/plain") },
                    body: (dataMatch[2] ? (0, base64_1$1.decode)(dataMatch[3]) : unpercent(dataMatch[3]))
                };
                var result = response.body;
                if (processFunc) {
                    result = processFunc(response.body, response);
                }
                return Promise.resolve(result);
            }
            catch (error) {
                logger$h.throwError("processing response error", logger_1$h.Logger.errors.SERVER_ERROR, {
                    body: bodyify(dataMatch[1], dataMatch[2]),
                    error: error,
                    requestBody: null,
                    requestMethod: "GET",
                    url: url
                });
            }
        }
        if (body) {
            options.method = "POST";
            options.body = body;
            if (headers["content-type"] == null) {
                headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
            }
            if (headers["content-length"] == null) {
                headers["content-length"] = { key: "Content-Length", value: String(body.length) };
            }
        }
        var flatHeaders = {};
        Object.keys(headers).forEach(function (key) {
            var header = headers[key];
            flatHeaders[header.key] = header.value;
        });
        options.headers = flatHeaders;
        var runningTimeout = (function () {
            var timer = null;
            var promise = new Promise(function (resolve, reject) {
                if (timeout) {
                    timer = setTimeout(function () {
                        if (timer == null) {
                            return;
                        }
                        timer = null;
                        reject(logger$h.makeError("timeout", logger_1$h.Logger.errors.TIMEOUT, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            timeout: timeout,
                            url: url
                        }));
                    }, timeout);
                }
            });
            var cancel = function () {
                if (timer == null) {
                    return;
                }
                clearTimeout(timer);
                timer = null;
            };
            return { promise: promise, cancel: cancel };
        })();
        var runningFetch = (function () {
            return __awaiter$7(this, void 0, void 0, function () {
                var attempt, response, location_1, tryAgain, stall, retryAfter, error_1, body_1, result, error_2, tryAgain, timeout_1;
                return __generator$7(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            attempt = 0;
                            _a.label = 1;
                        case 1:
                            if (!(attempt < attemptLimit)) return [3 /*break*/, 20];
                            response = null;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 9, , 10]);
                            return [4 /*yield*/, (0, geturl_1.getUrl)(url, options)];
                        case 3:
                            response = _a.sent();
                            if (!(attempt < attemptLimit)) return [3 /*break*/, 8];
                            if (!(response.statusCode === 301 || response.statusCode === 302)) return [3 /*break*/, 4];
                            location_1 = response.headers.location || "";
                            if (options.method === "GET" && location_1.match(/^https:/)) {
                                url = response.headers.location;
                                return [3 /*break*/, 19];
                            }
                            return [3 /*break*/, 8];
                        case 4:
                            if (!(response.statusCode === 429)) return [3 /*break*/, 8];
                            tryAgain = true;
                            if (!throttleCallback) return [3 /*break*/, 6];
                            return [4 /*yield*/, throttleCallback(attempt, url)];
                        case 5:
                            tryAgain = _a.sent();
                            _a.label = 6;
                        case 6:
                            if (!tryAgain) return [3 /*break*/, 8];
                            stall = 0;
                            retryAfter = response.headers["retry-after"];
                            if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                stall = parseInt(retryAfter) * 1000;
                            }
                            else {
                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                            }
                            //console.log("Stalling 429");
                            return [4 /*yield*/, staller(stall)];
                        case 7:
                            //console.log("Stalling 429");
                            _a.sent();
                            return [3 /*break*/, 19];
                        case 8: return [3 /*break*/, 10];
                        case 9:
                            error_1 = _a.sent();
                            response = error_1.response;
                            if (response == null) {
                                runningTimeout.cancel();
                                logger$h.throwError("missing response", logger_1$h.Logger.errors.SERVER_ERROR, {
                                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                    requestMethod: options.method,
                                    serverError: error_1,
                                    url: url
                                });
                            }
                            return [3 /*break*/, 10];
                        case 10:
                            body_1 = response.body;
                            if (allow304 && response.statusCode === 304) {
                                body_1 = null;
                            }
                            else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                                runningTimeout.cancel();
                                logger$h.throwError("bad response", logger_1$h.Logger.errors.SERVER_ERROR, {
                                    status: response.statusCode,
                                    headers: response.headers,
                                    body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
                                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                    requestMethod: options.method,
                                    url: url
                                });
                            }
                            if (!processFunc) return [3 /*break*/, 18];
                            _a.label = 11;
                        case 11:
                            _a.trys.push([11, 13, , 18]);
                            return [4 /*yield*/, processFunc(body_1, response)];
                        case 12:
                            result = _a.sent();
                            runningTimeout.cancel();
                            return [2 /*return*/, result];
                        case 13:
                            error_2 = _a.sent();
                            if (!(error_2.throttleRetry && attempt < attemptLimit)) return [3 /*break*/, 17];
                            tryAgain = true;
                            if (!throttleCallback) return [3 /*break*/, 15];
                            return [4 /*yield*/, throttleCallback(attempt, url)];
                        case 14:
                            tryAgain = _a.sent();
                            _a.label = 15;
                        case 15:
                            if (!tryAgain) return [3 /*break*/, 17];
                            timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                            //console.log("Stalling callback");
                            return [4 /*yield*/, staller(timeout_1)];
                        case 16:
                            //console.log("Stalling callback");
                            _a.sent();
                            return [3 /*break*/, 19];
                        case 17:
                            runningTimeout.cancel();
                            logger$h.throwError("processing response error", logger_1$h.Logger.errors.SERVER_ERROR, {
                                body: bodyify(body_1, ((response.headers) ? response.headers["content-type"] : null)),
                                error: error_2,
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            });
                            return [3 /*break*/, 18];
                        case 18:
                            runningTimeout.cancel();
                            // If we had a processFunc, it either returned a T or threw above.
                            // The "body" is now a Uint8Array.
                            return [2 /*return*/, body_1];
                        case 19:
                            attempt++;
                            return [3 /*break*/, 1];
                        case 20: return [2 /*return*/, logger$h.throwError("failed response", logger_1$h.Logger.errors.SERVER_ERROR, {
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            })];
                    }
                });
            });
        })();
        return Promise.race([runningTimeout.promise, runningFetch]);
    }
    lib$3._fetchData = _fetchData;
    function fetchJson(connection, json, processFunc) {
        var processJsonFunc = function (value, response) {
            var result = null;
            if (value != null) {
                try {
                    result = JSON.parse((0, strings_1$3.toUtf8String)(value));
                }
                catch (error) {
                    logger$h.throwError("invalid JSON", logger_1$h.Logger.errors.SERVER_ERROR, {
                        body: value,
                        error: error
                    });
                }
            }
            if (processFunc) {
                result = processFunc(result, response);
            }
            return result;
        };
        // If we have json to send, we must
        // - add content-type of application/json (unless already overridden)
        // - convert the json to bytes
        var body = null;
        if (json != null) {
            body = (0, strings_1$3.toUtf8Bytes)(json);
            // Create a connection with the content-type set for JSON
            var updated = (typeof (connection) === "string") ? ({ url: connection }) : (0, properties_1$b.shallowCopy)(connection);
            if (updated.headers) {
                var hasContentType = (Object.keys(updated.headers).filter(function (k) { return (k.toLowerCase() === "content-type"); }).length) !== 0;
                if (!hasContentType) {
                    updated.headers = (0, properties_1$b.shallowCopy)(updated.headers);
                    updated.headers["content-type"] = "application/json";
                }
            }
            else {
                updated.headers = { "content-type": "application/json" };
            }
            connection = updated;
        }
        return _fetchData(connection, body, processJsonFunc);
    }
    lib$3.fetchJson = fetchJson;
    function poll(func, options) {
        if (!options) {
            options = {};
        }
        options = (0, properties_1$b.shallowCopy)(options);
        if (options.floor == null) {
            options.floor = 0;
        }
        if (options.ceiling == null) {
            options.ceiling = 10000;
        }
        if (options.interval == null) {
            options.interval = 250;
        }
        return new Promise(function (resolve, reject) {
            var timer = null;
            var done = false;
            // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
            var cancel = function () {
                if (done) {
                    return false;
                }
                done = true;
                if (timer) {
                    clearTimeout(timer);
                }
                return true;
            };
            if (options.timeout) {
                timer = setTimeout(function () {
                    if (cancel()) {
                        reject(new Error("timeout"));
                    }
                }, options.timeout);
            }
            var retryLimit = options.retryLimit;
            var attempt = 0;
            function check() {
                return func().then(function (result) {
                    // If we have a result, or are allowed null then we're done
                    if (result !== undefined) {
                        if (cancel()) {
                            resolve(result);
                        }
                    }
                    else if (options.oncePoll) {
                        options.oncePoll.once("poll", check);
                    }
                    else if (options.onceBlock) {
                        options.onceBlock.once("block", check);
                        // Otherwise, exponential back-off (up to 10s) our next request
                    }
                    else if (!done) {
                        attempt++;
                        if (attempt > retryLimit) {
                            if (cancel()) {
                                reject(new Error("retry limit reached"));
                            }
                            return;
                        }
                        var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        if (timeout < options.floor) {
                            timeout = options.floor;
                        }
                        if (timeout > options.ceiling) {
                            timeout = options.ceiling;
                        }
                        setTimeout(check, timeout);
                    }
                    return null;
                }, function (error) {
                    if (cancel()) {
                        reject(error);
                    }
                });
            }
            check();
        });
    }
    lib$3.poll = poll;

    var ALPHABET$2 = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

    // pre-compute lookup table
    var ALPHABET_MAP = {};
    for (var z$2 = 0; z$2 < ALPHABET$2.length; z$2++) {
      var x$2 = ALPHABET$2.charAt(z$2);

      if (ALPHABET_MAP[x$2] !== undefined) throw new TypeError(x$2 + ' is ambiguous')
      ALPHABET_MAP[x$2] = z$2;
    }

    function polymodStep (pre) {
      var b = pre >> 25;
      return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3)
    }

    function prefixChk (prefix) {
      var chk = 1;
      for (var i = 0; i < prefix.length; ++i) {
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

        chk = polymodStep(chk) ^ (c >> 5);
      }
      chk = polymodStep(chk);

      for (i = 0; i < prefix.length; ++i) {
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ (v & 0x1f);
      }
      return chk
    }

    function encode$4 (prefix, words, LIMIT) {
      LIMIT = LIMIT || 90;
      if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

      prefix = prefix.toLowerCase();

      // determine chk mod
      var chk = prefixChk(prefix);
      if (typeof chk === 'string') throw new Error(chk)

      var result = prefix + '1';
      for (var i = 0; i < words.length; ++i) {
        var x = words[i];
        if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

        chk = polymodStep(chk) ^ x;
        result += ALPHABET$2.charAt(x);
      }

      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk);
      }
      chk ^= 1;

      for (i = 0; i < 6; ++i) {
        var v = (chk >> ((5 - i) * 5)) & 0x1f;
        result += ALPHABET$2.charAt(v);
      }

      return result
    }

    function __decode (str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8) return str + ' too short'
      if (str.length > LIMIT) return 'Exceeds length limit'

      // don't allow mixed case
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
      str = lowered;

      var split = str.lastIndexOf('1');
      if (split === -1) return 'No separator character for ' + str
      if (split === 0) return 'Missing prefix for ' + str

      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6) return 'Data too short'

      var chk = prefixChk(prefix);
      if (typeof chk === 'string') return chk

      var words = [];
      for (var i = 0; i < wordChars.length; ++i) {
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === undefined) return 'Unknown character ' + c
        chk = polymodStep(chk) ^ v;

        // not in the checksum?
        if (i + 6 >= wordChars.length) continue
        words.push(v);
      }

      if (chk !== 1) return 'Invalid checksum for ' + str
      return { prefix: prefix, words: words }
    }

    function decodeUnsafe () {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res
    }

    function decode$1 (str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res

      throw new Error(res)
    }

    function convert (data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;

      var result = [];
      for (var i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i];
        bits += inBits;

        while (bits >= outBits) {
          bits -= outBits;
          result.push((value >> bits) & maxV);
        }
      }

      if (pad) {
        if (bits > 0) {
          result.push((value << (outBits - bits)) & maxV);
        }
      } else {
        if (bits >= inBits) return 'Excess padding'
        if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
      }

      return result
    }

    function toWordsUnsafe (bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res
    }

    function toWords (bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    function fromWordsUnsafe (words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res
    }

    function fromWords (words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    var bech32 = {
      decodeUnsafe: decodeUnsafe,
      decode: decode$1,
      encode: encode$4,
      toWordsUnsafe: toWordsUnsafe,
      toWords: toWords,
      fromWordsUnsafe: fromWordsUnsafe,
      fromWords: fromWords
    };

    var _version$3 = {};

    Object.defineProperty(_version$3, "__esModule", { value: true });
    _version$3.version = void 0;
    _version$3.version = "providers/5.7.2";

    var formatter = {};

    Object.defineProperty(formatter, "__esModule", { value: true });
    formatter.showThrottleMessage = formatter.isCommunityResource = formatter.isCommunityResourcable = formatter.Formatter = void 0;
    var address_1 = lib$p;
    var bignumber_1$6 = lib$t;
    var bytes_1$8 = lib$s;
    var constants_1$1 = lib$m;
    var properties_1$a = lib$q;
    var transactions_1$2 = lib$f;
    var logger_1$g = lib$r;
    var _version_1$g = _version$3;
    var logger$g = new logger_1$g.Logger(_version_1$g.version);
    var Formatter = /** @class */ (function () {
        function Formatter() {
            this.formats = this.getDefaultFormats();
        }
        Formatter.prototype.getDefaultFormats = function () {
            var _this = this;
            var formats = ({});
            var address = this.address.bind(this);
            var bigNumber = this.bigNumber.bind(this);
            var blockTag = this.blockTag.bind(this);
            var data = this.data.bind(this);
            var hash = this.hash.bind(this);
            var hex = this.hex.bind(this);
            var number = this.number.bind(this);
            var type = this.type.bind(this);
            var strictData = function (v) { return _this.data(v, true); };
            formats.transaction = {
                hash: hash,
                type: type,
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
                blockHash: Formatter.allowNull(hash, null),
                blockNumber: Formatter.allowNull(number, null),
                transactionIndex: Formatter.allowNull(number, null),
                confirmations: Formatter.allowNull(number, null),
                from: address,
                // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
                // must be set
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                gasLimit: bigNumber,
                to: Formatter.allowNull(address, null),
                value: bigNumber,
                nonce: number,
                data: data,
                r: Formatter.allowNull(this.uint256),
                s: Formatter.allowNull(this.uint256),
                v: Formatter.allowNull(number),
                creates: Formatter.allowNull(address, null),
                raw: Formatter.allowNull(data),
            };
            formats.transactionRequest = {
                from: Formatter.allowNull(address),
                nonce: Formatter.allowNull(number),
                gasLimit: Formatter.allowNull(bigNumber),
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                to: Formatter.allowNull(address),
                value: Formatter.allowNull(bigNumber),
                data: Formatter.allowNull(strictData),
                type: Formatter.allowNull(number),
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
            };
            formats.receiptLog = {
                transactionIndex: number,
                blockNumber: number,
                transactionHash: hash,
                address: address,
                topics: Formatter.arrayOf(hash),
                data: data,
                logIndex: number,
                blockHash: hash,
            };
            formats.receipt = {
                to: Formatter.allowNull(this.address, null),
                from: Formatter.allowNull(this.address, null),
                contractAddress: Formatter.allowNull(address, null),
                transactionIndex: number,
                // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
                root: Formatter.allowNull(hex),
                gasUsed: bigNumber,
                logsBloom: Formatter.allowNull(data),
                blockHash: hash,
                transactionHash: hash,
                logs: Formatter.arrayOf(this.receiptLog.bind(this)),
                blockNumber: number,
                confirmations: Formatter.allowNull(number, null),
                cumulativeGasUsed: bigNumber,
                effectiveGasPrice: Formatter.allowNull(bigNumber),
                status: Formatter.allowNull(number),
                type: type
            };
            formats.block = {
                hash: Formatter.allowNull(hash),
                parentHash: hash,
                number: number,
                timestamp: number,
                nonce: Formatter.allowNull(hex),
                difficulty: this.difficulty.bind(this),
                gasLimit: bigNumber,
                gasUsed: bigNumber,
                miner: Formatter.allowNull(address),
                extraData: data,
                transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
                baseFeePerGas: Formatter.allowNull(bigNumber)
            };
            formats.blockWithTransactions = (0, properties_1$a.shallowCopy)(formats.block);
            formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
                fromBlock: Formatter.allowNull(blockTag, undefined),
                toBlock: Formatter.allowNull(blockTag, undefined),
                blockHash: Formatter.allowNull(hash, undefined),
                address: Formatter.allowNull(address, undefined),
                topics: Formatter.allowNull(this.topics.bind(this), undefined),
            };
            formats.filterLog = {
                blockNumber: Formatter.allowNull(number),
                blockHash: Formatter.allowNull(hash),
                transactionIndex: number,
                removed: Formatter.allowNull(this.boolean.bind(this)),
                address: address,
                data: Formatter.allowFalsish(data, "0x"),
                topics: Formatter.arrayOf(hash),
                transactionHash: hash,
                logIndex: number,
            };
            return formats;
        };
        Formatter.prototype.accessList = function (accessList) {
            return (0, transactions_1$2.accessListify)(accessList || []);
        };
        // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
        // Strict! Used on input.
        Formatter.prototype.number = function (number) {
            if (number === "0x") {
                return 0;
            }
            return bignumber_1$6.BigNumber.from(number).toNumber();
        };
        Formatter.prototype.type = function (number) {
            if (number === "0x" || number == null) {
                return 0;
            }
            return bignumber_1$6.BigNumber.from(number).toNumber();
        };
        // Strict! Used on input.
        Formatter.prototype.bigNumber = function (value) {
            return bignumber_1$6.BigNumber.from(value);
        };
        // Requires a boolean, "true" or  "false"; returns a boolean
        Formatter.prototype.boolean = function (value) {
            if (typeof (value) === "boolean") {
                return value;
            }
            if (typeof (value) === "string") {
                value = value.toLowerCase();
                if (value === "true") {
                    return true;
                }
                if (value === "false") {
                    return false;
                }
            }
            throw new Error("invalid boolean - " + value);
        };
        Formatter.prototype.hex = function (value, strict) {
            if (typeof (value) === "string") {
                if (!strict && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if ((0, bytes_1$8.isHexString)(value)) {
                    return value.toLowerCase();
                }
            }
            return logger$g.throwArgumentError("invalid hash", "value", value);
        };
        Formatter.prototype.data = function (value, strict) {
            var result = this.hex(value, strict);
            if ((result.length % 2) !== 0) {
                throw new Error("invalid data; odd-length - " + value);
            }
            return result;
        };
        // Requires an address
        // Strict! Used on input.
        Formatter.prototype.address = function (value) {
            return (0, address_1.getAddress)(value);
        };
        Formatter.prototype.callAddress = function (value) {
            if (!(0, bytes_1$8.isHexString)(value, 32)) {
                return null;
            }
            var address = (0, address_1.getAddress)((0, bytes_1$8.hexDataSlice)(value, 12));
            return (address === constants_1$1.AddressZero) ? null : address;
        };
        Formatter.prototype.contractAddress = function (value) {
            return (0, address_1.getContractAddress)(value);
        };
        // Strict! Used on input.
        Formatter.prototype.blockTag = function (blockTag) {
            if (blockTag == null) {
                return "latest";
            }
            if (blockTag === "earliest") {
                return "0x0";
            }
            switch (blockTag) {
                case "earliest": return "0x0";
                case "latest":
                case "pending":
                case "safe":
                case "finalized":
                    return blockTag;
            }
            if (typeof (blockTag) === "number" || (0, bytes_1$8.isHexString)(blockTag)) {
                return (0, bytes_1$8.hexValue)(blockTag);
            }
            throw new Error("invalid blockTag");
        };
        // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
        Formatter.prototype.hash = function (value, strict) {
            var result = this.hex(value, strict);
            if ((0, bytes_1$8.hexDataLength)(result) !== 32) {
                return logger$g.throwArgumentError("invalid hash", "value", value);
            }
            return result;
        };
        // Returns the difficulty as a number, or if too large (i.e. PoA network) null
        Formatter.prototype.difficulty = function (value) {
            if (value == null) {
                return null;
            }
            var v = bignumber_1$6.BigNumber.from(value);
            try {
                return v.toNumber();
            }
            catch (error) { }
            return null;
        };
        Formatter.prototype.uint256 = function (value) {
            if (!(0, bytes_1$8.isHexString)(value)) {
                throw new Error("invalid uint256");
            }
            return (0, bytes_1$8.hexZeroPad)(value, 32);
        };
        Formatter.prototype._block = function (value, format) {
            if (value.author != null && value.miner == null) {
                value.miner = value.author;
            }
            // The difficulty may need to come from _difficulty in recursed blocks
            var difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
            var result = Formatter.check(format, value);
            result._difficulty = ((difficulty == null) ? null : bignumber_1$6.BigNumber.from(difficulty));
            return result;
        };
        Formatter.prototype.block = function (value) {
            return this._block(value, this.formats.block);
        };
        Formatter.prototype.blockWithTransactions = function (value) {
            return this._block(value, this.formats.blockWithTransactions);
        };
        // Strict! Used on input.
        Formatter.prototype.transactionRequest = function (value) {
            return Formatter.check(this.formats.transactionRequest, value);
        };
        Formatter.prototype.transactionResponse = function (transaction) {
            // Rename gas to gasLimit
            if (transaction.gas != null && transaction.gasLimit == null) {
                transaction.gasLimit = transaction.gas;
            }
            // Some clients (TestRPC) do strange things like return 0x0 for the
            // 0 address; correct this to be a real address
            if (transaction.to && bignumber_1$6.BigNumber.from(transaction.to).isZero()) {
                transaction.to = "0x0000000000000000000000000000000000000000";
            }
            // Rename input to data
            if (transaction.input != null && transaction.data == null) {
                transaction.data = transaction.input;
            }
            // If to and creates are empty, populate the creates from the transaction
            if (transaction.to == null && transaction.creates == null) {
                transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
                transaction.accessList = [];
            }
            var result = Formatter.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
                var chainId = transaction.chainId;
                if ((0, bytes_1$8.isHexString)(chainId)) {
                    chainId = bignumber_1$6.BigNumber.from(chainId).toNumber();
                }
                result.chainId = chainId;
            }
            else {
                var chainId = transaction.networkId;
                // geth-etc returns chainId
                if (chainId == null && result.v == null) {
                    chainId = transaction.chainId;
                }
                if ((0, bytes_1$8.isHexString)(chainId)) {
                    chainId = bignumber_1$6.BigNumber.from(chainId).toNumber();
                }
                if (typeof (chainId) !== "number" && result.v != null) {
                    chainId = (result.v - 35) / 2;
                    if (chainId < 0) {
                        chainId = 0;
                    }
                    chainId = parseInt(chainId);
                }
                if (typeof (chainId) !== "number") {
                    chainId = 0;
                }
                result.chainId = chainId;
            }
            // 0x0000... should actually be null
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
                result.blockHash = null;
            }
            return result;
        };
        Formatter.prototype.transaction = function (value) {
            return (0, transactions_1$2.parse)(value);
        };
        Formatter.prototype.receiptLog = function (value) {
            return Formatter.check(this.formats.receiptLog, value);
        };
        Formatter.prototype.receipt = function (value) {
            var result = Formatter.check(this.formats.receipt, value);
            // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
            if (result.root != null) {
                if (result.root.length <= 4) {
                    // Could be 0x00, 0x0, 0x01 or 0x1
                    var value_1 = bignumber_1$6.BigNumber.from(result.root).toNumber();
                    if (value_1 === 0 || value_1 === 1) {
                        // Make sure if both are specified, they match
                        if (result.status != null && (result.status !== value_1)) {
                            logger$g.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                        }
                        result.status = value_1;
                        delete result.root;
                    }
                    else {
                        logger$g.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                    }
                }
                else if (result.root.length !== 66) {
                    // Must be a valid bytes32
                    logger$g.throwArgumentError("invalid root hash", "value.root", result.root);
                }
            }
            if (result.status != null) {
                result.byzantium = true;
            }
            return result;
        };
        Formatter.prototype.topics = function (value) {
            var _this = this;
            if (Array.isArray(value)) {
                return value.map(function (v) { return _this.topics(v); });
            }
            else if (value != null) {
                return this.hash(value, true);
            }
            return null;
        };
        Formatter.prototype.filter = function (value) {
            return Formatter.check(this.formats.filter, value);
        };
        Formatter.prototype.filterLog = function (value) {
            return Formatter.check(this.formats.filterLog, value);
        };
        Formatter.check = function (format, object) {
            var result = {};
            for (var key in format) {
                try {
                    var value = format[key](object[key]);
                    if (value !== undefined) {
                        result[key] = value;
                    }
                }
                catch (error) {
                    error.checkKey = key;
                    error.checkValue = object[key];
                    throw error;
                }
            }
            return result;
        };
        // if value is null-ish, nullValue is returned
        Formatter.allowNull = function (format, nullValue) {
            return (function (value) {
                if (value == null) {
                    return nullValue;
                }
                return format(value);
            });
        };
        // If value is false-ish, replaceValue is returned
        Formatter.allowFalsish = function (format, replaceValue) {
            return (function (value) {
                if (!value) {
                    return replaceValue;
                }
                return format(value);
            });
        };
        // Requires an Array satisfying check
        Formatter.arrayOf = function (format) {
            return (function (array) {
                if (!Array.isArray(array)) {
                    throw new Error("not an array");
                }
                var result = [];
                array.forEach(function (value) {
                    result.push(format(value));
                });
                return result;
            });
        };
        return Formatter;
    }());
    formatter.Formatter = Formatter;
    function isCommunityResourcable(value) {
        return (value && typeof (value.isCommunityResource) === "function");
    }
    formatter.isCommunityResourcable = isCommunityResourcable;
    function isCommunityResource(value) {
        return (isCommunityResourcable(value) && value.isCommunityResource());
    }
    formatter.isCommunityResource = isCommunityResource;
    // Show the throttle message only once
    var throttleMessage = false;
    function showThrottleMessage() {
        if (throttleMessage) {
            return;
        }
        throttleMessage = true;
        console.log("========= NOTICE =========");
        console.log("Request-Rate Exceeded  (this message will not be repeated)");
        console.log("");
        console.log("The default API keys for each service are provided as a highly-throttled,");
        console.log("community resource for low-traffic projects and early prototyping.");
        console.log("");
        console.log("While your application will continue to function, we highly recommended");
        console.log("signing up for your own API keys to improve performance, increase your");
        console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
        console.log("");
        console.log("For more details: https:/\/docs.ethers.io/api-keys/");
        console.log("==========================");
    }
    formatter.showThrottleMessage = showThrottleMessage;

    var __extends$d = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$6 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$6 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(baseProvider, "__esModule", { value: true });
    baseProvider.BaseProvider = baseProvider.Resolver = baseProvider.Event = void 0;
    var abstract_provider_1$1 = lib$h;
    var base64_1 = lib$i;
    var basex_1 = lib$b;
    var bignumber_1$5 = lib$t;
    var bytes_1$7 = lib$s;
    var constants_1 = lib$m;
    var hash_1$2 = lib$k;
    var networks_1 = lib$4;
    var properties_1$9 = lib$q;
    var sha2_1$1 = lib$9;
    var strings_1$2 = lib$l;
    var web_1$4 = lib$3;
    var bech32_1 = __importDefault$5(bech32);
    var logger_1$f = lib$r;
    var _version_1$f = _version$3;
    var logger$f = new logger_1$f.Logger(_version_1$f.version);
    var formatter_1$5 = formatter;
    var MAX_CCIP_REDIRECTS = 10;
    //////////////////////////////
    // Event Serializeing
    function checkTopic(topic) {
        if (topic == null) {
            return "null";
        }
        if ((0, bytes_1$7.hexDataLength)(topic) !== 32) {
            logger$f.throwArgumentError("invalid topic", "topic", topic);
        }
        return topic.toLowerCase();
    }
    function serializeTopics(topics) {
        // Remove trailing null AND-topics; they are redundant
        topics = topics.slice();
        while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
        }
        return topics.map(function (topic) {
            if (Array.isArray(topic)) {
                // Only track unique OR-topics
                var unique_1 = {};
                topic.forEach(function (topic) {
                    unique_1[checkTopic(topic)] = true;
                });
                // The order of OR-topics does not matter
                var sorted = Object.keys(unique_1);
                sorted.sort();
                return sorted.join("|");
            }
            else {
                return checkTopic(topic);
            }
        }).join("&");
    }
    function deserializeTopics(data) {
        if (data === "") {
            return [];
        }
        return data.split(/&/g).map(function (topic) {
            if (topic === "") {
                return [];
            }
            var comps = topic.split("|").map(function (topic) {
                return ((topic === "null") ? null : topic);
            });
            return ((comps.length === 1) ? comps[0] : comps);
        });
    }
    function getEventTag(eventName) {
        if (typeof (eventName) === "string") {
            eventName = eventName.toLowerCase();
            if ((0, bytes_1$7.hexDataLength)(eventName) === 32) {
                return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
                return eventName;
            }
        }
        else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
        }
        else if (abstract_provider_1$1.ForkEvent.isForkEvent(eventName)) {
            logger$f.warn("not implemented");
            throw new Error("not implemented");
        }
        else if (eventName && typeof (eventName) === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
        }
        throw new Error("invalid event - " + eventName);
    }
    //////////////////////////////
    // Helper Object
    function getTime() {
        return (new Date()).getTime();
    }
    function stall$1(duration) {
        return new Promise(function (resolve) {
            setTimeout(resolve, duration);
        });
    }
    //////////////////////////////
    // Provider Object
    /**
     *  EventType
     *   - "block"
     *   - "poll"
     *   - "didPoll"
     *   - "pending"
     *   - "error"
     *   - "network"
     *   - filter
     *   - topics array
     *   - transaction hash
     */
    var PollableEvents = ["block", "network", "pending", "poll"];
    var Event$1 = /** @class */ (function () {
        function Event(tag, listener, once) {
            (0, properties_1$9.defineReadOnly)(this, "tag", tag);
            (0, properties_1$9.defineReadOnly)(this, "listener", listener);
            (0, properties_1$9.defineReadOnly)(this, "once", once);
            this._lastBlockNumber = -2;
            this._inflight = false;
        }
        Object.defineProperty(Event.prototype, "event", {
            get: function () {
                switch (this.type) {
                    case "tx":
                        return this.hash;
                    case "filter":
                        return this.filter;
                }
                return this.tag;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "type", {
            get: function () {
                return this.tag.split(":")[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "hash", {
            get: function () {
                var comps = this.tag.split(":");
                if (comps[0] !== "tx") {
                    return null;
                }
                return comps[1];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Event.prototype, "filter", {
            get: function () {
                var comps = this.tag.split(":");
                if (comps[0] !== "filter") {
                    return null;
                }
                var address = comps[1];
                var topics = deserializeTopics(comps[2]);
                var filter = {};
                if (topics.length > 0) {
                    filter.topics = topics;
                }
                if (address && address !== "*") {
                    filter.address = address;
                }
                return filter;
            },
            enumerable: false,
            configurable: true
        });
        Event.prototype.pollable = function () {
            return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
        };
        return Event;
    }());
    baseProvider.Event = Event$1;
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    var coinInfos = {
        "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
        "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
        "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
        "60": { symbol: "eth", ilk: "eth" },
        "61": { symbol: "etc", ilk: "eth" },
        "700": { symbol: "xdai", ilk: "eth" },
    };
    function bytes32ify(value) {
        return (0, bytes_1$7.hexZeroPad)(bignumber_1$5.BigNumber.from(value).toHexString(), 32);
    }
    // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
    function base58Encode(data) {
        return basex_1.Base58.encode((0, bytes_1$7.concat)([data, (0, bytes_1$7.hexDataSlice)((0, sha2_1$1.sha256)((0, sha2_1$1.sha256)(data)), 0, 4)]));
    }
    var matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
    var matchers = [
        new RegExp("^(https):/\/(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
    ];
    function _parseString(result, start) {
        try {
            return (0, strings_1$2.toUtf8String)(_parseBytes(result, start));
        }
        catch (error) { }
        return null;
    }
    function _parseBytes(result, start) {
        if (result === "0x") {
            return null;
        }
        var offset = bignumber_1$5.BigNumber.from((0, bytes_1$7.hexDataSlice)(result, start, start + 32)).toNumber();
        var length = bignumber_1$5.BigNumber.from((0, bytes_1$7.hexDataSlice)(result, offset, offset + 32)).toNumber();
        return (0, bytes_1$7.hexDataSlice)(result, offset + 32, offset + 32 + length);
    }
    // Trim off the ipfs:// prefix and return the default gateway URL
    function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
            link = link.substring(12);
        }
        else if (link.match(/^ipfs:\/\//i)) {
            link = link.substring(7);
        }
        else {
            logger$f.throwArgumentError("unsupported IPFS format", "link", link);
        }
        return "https://gateway.ipfs.io/ipfs/" + link;
    }
    function numPad(value) {
        var result = (0, bytes_1$7.arrayify)(value);
        if (result.length > 32) {
            throw new Error("internal; should not happen");
        }
        var padded = new Uint8Array(32);
        padded.set(result, 32 - result.length);
        return padded;
    }
    function bytesPad(value) {
        if ((value.length % 32) === 0) {
            return value;
        }
        var result = new Uint8Array(Math.ceil(value.length / 32) * 32);
        result.set(value);
        return result;
    }
    // ABI Encodes a series of (bytes, bytes, ...)
    function encodeBytes(datas) {
        var result = [];
        var byteCount = 0;
        // Add place-holders for pointers as we add items
        for (var i = 0; i < datas.length; i++) {
            result.push(null);
            byteCount += 32;
        }
        for (var i = 0; i < datas.length; i++) {
            var data = (0, bytes_1$7.arrayify)(datas[i]);
            // Update the bytes offset
            result[i] = numPad(byteCount);
            // The length and padded value of data
            result.push(numPad(data.length));
            result.push(bytesPad(data));
            byteCount += 32 + Math.ceil(data.length / 32) * 32;
        }
        return (0, bytes_1$7.hexConcat)(result);
    }
    var Resolver = /** @class */ (function () {
        // The resolvedAddress is only for creating a ReverseLookup resolver
        function Resolver(provider, address, name, resolvedAddress) {
            (0, properties_1$9.defineReadOnly)(this, "provider", provider);
            (0, properties_1$9.defineReadOnly)(this, "name", name);
            (0, properties_1$9.defineReadOnly)(this, "address", provider.formatter.address(address));
            (0, properties_1$9.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
        }
        Resolver.prototype.supportsWildcard = function () {
            var _this = this;
            if (!this._supportsEip2544) {
                // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
                this._supportsEip2544 = this.provider.call({
                    to: this.address,
                    data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
                }).then(function (result) {
                    return bignumber_1$5.BigNumber.from(result).eq(1);
                }).catch(function (error) {
                    if (error.code === logger_1$f.Logger.errors.CALL_EXCEPTION) {
                        return false;
                    }
                    // Rethrow the error: link is down, etc. Let future attempts retry.
                    _this._supportsEip2544 = null;
                    throw error;
                });
            }
            return this._supportsEip2544;
        };
        Resolver.prototype._fetch = function (selector, parameters) {
            return __awaiter$6(this, void 0, void 0, function () {
                var tx, parseBytes, result, error_1;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tx = {
                                to: this.address,
                                ccipReadEnabled: true,
                                data: (0, bytes_1$7.hexConcat)([selector, (0, hash_1$2.namehash)(this.name), (parameters || "0x")])
                            };
                            parseBytes = false;
                            return [4 /*yield*/, this.supportsWildcard()];
                        case 1:
                            if (_a.sent()) {
                                parseBytes = true;
                                // selector("resolve(bytes,bytes)")
                                tx.data = (0, bytes_1$7.hexConcat)(["0x9061b923", encodeBytes([(0, hash_1$2.dnsEncode)(this.name), tx.data])]);
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.provider.call(tx)];
                        case 3:
                            result = _a.sent();
                            if (((0, bytes_1$7.arrayify)(result).length % 32) === 4) {
                                logger$f.throwError("resolver threw error", logger_1$f.Logger.errors.CALL_EXCEPTION, {
                                    transaction: tx, data: result
                                });
                            }
                            if (parseBytes) {
                                result = _parseBytes(result, 0);
                            }
                            return [2 /*return*/, result];
                        case 4:
                            error_1 = _a.sent();
                            if (error_1.code === logger_1$f.Logger.errors.CALL_EXCEPTION) {
                                return [2 /*return*/, null];
                            }
                            throw error_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        Resolver.prototype._fetchBytes = function (selector, parameters) {
            return __awaiter$6(this, void 0, void 0, function () {
                var result;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._fetch(selector, parameters)];
                        case 1:
                            result = _a.sent();
                            if (result != null) {
                                return [2 /*return*/, _parseBytes(result, 0)];
                            }
                            return [2 /*return*/, null];
                    }
                });
            });
        };
        Resolver.prototype._getAddress = function (coinType, hexBytes) {
            var coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
                logger$f.throwError("unsupported coin type: " + coinType, logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getAddress(" + coinType + ")"
                });
            }
            if (coinInfo.ilk === "eth") {
                return this.provider.formatter.address(hexBytes);
            }
            var bytes = (0, bytes_1$7.arrayify)(hexBytes);
            // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            if (coinInfo.p2pkh != null) {
                var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                if (p2pkh) {
                    var length_1 = parseInt(p2pkh[1], 16);
                    if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {
                        return base58Encode((0, bytes_1$7.concat)([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                    }
                }
            }
            // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
            if (coinInfo.p2sh != null) {
                var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                if (p2sh) {
                    var length_2 = parseInt(p2sh[1], 16);
                    if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {
                        return base58Encode((0, bytes_1$7.concat)([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                    }
                }
            }
            // Bech32
            if (coinInfo.prefix != null) {
                var length_3 = bytes[1];
                // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
                var version_1 = bytes[0];
                if (version_1 === 0x00) {
                    if (length_3 !== 20 && length_3 !== 32) {
                        version_1 = -1;
                    }
                }
                else {
                    version_1 = -1;
                }
                if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {
                    var words = bech32_1.default.toWords(bytes.slice(2));
                    words.unshift(version_1);
                    return bech32_1.default.encode(coinInfo.prefix, words);
                }
            }
            return null;
        };
        Resolver.prototype.getAddress = function (coinType) {
            return __awaiter$6(this, void 0, void 0, function () {
                var result, error_2, hexBytes, address;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (coinType == null) {
                                coinType = 60;
                            }
                            if (!(coinType === 60)) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._fetch("0x3b3b57de")];
                        case 2:
                            result = _a.sent();
                            // No address
                            if (result === "0x" || result === constants_1.HashZero) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, this.provider.formatter.callAddress(result)];
                        case 3:
                            error_2 = _a.sent();
                            if (error_2.code === logger_1$f.Logger.errors.CALL_EXCEPTION) {
                                return [2 /*return*/, null];
                            }
                            throw error_2;
                        case 4: return [4 /*yield*/, this._fetchBytes("0xf1cb7e06", bytes32ify(coinType))];
                        case 5:
                            hexBytes = _a.sent();
                            // No address
                            if (hexBytes == null || hexBytes === "0x") {
                                return [2 /*return*/, null];
                            }
                            address = this._getAddress(coinType, hexBytes);
                            if (address == null) {
                                logger$f.throwError("invalid or unsupported coin data", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "getAddress(" + coinType + ")",
                                    coinType: coinType,
                                    data: hexBytes
                                });
                            }
                            return [2 /*return*/, address];
                    }
                });
            });
        };
        Resolver.prototype.getAvatar = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var linkage, avatar, i, match, scheme, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, imageUrl, ipfs;
                return __generator$6(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            linkage = [{ type: "name", content: this.name }];
                            _h.label = 1;
                        case 1:
                            _h.trys.push([1, 19, , 20]);
                            return [4 /*yield*/, this.getText("avatar")];
                        case 2:
                            avatar = _h.sent();
                            if (avatar == null) {
                                return [2 /*return*/, null];
                            }
                            i = 0;
                            _h.label = 3;
                        case 3:
                            if (!(i < matchers.length)) return [3 /*break*/, 18];
                            match = avatar.match(matchers[i]);
                            if (match == null) {
                                return [3 /*break*/, 17];
                            }
                            scheme = match[1].toLowerCase();
                            _a = scheme;
                            switch (_a) {
                                case "https": return [3 /*break*/, 4];
                                case "data": return [3 /*break*/, 5];
                                case "ipfs": return [3 /*break*/, 6];
                                case "erc721": return [3 /*break*/, 7];
                                case "erc1155": return [3 /*break*/, 7];
                            }
                            return [3 /*break*/, 17];
                        case 4:
                            linkage.push({ type: "url", content: avatar });
                            return [2 /*return*/, { linkage: linkage, url: avatar }];
                        case 5:
                            linkage.push({ type: "data", content: avatar });
                            return [2 /*return*/, { linkage: linkage, url: avatar }];
                        case 6:
                            linkage.push({ type: "ipfs", content: avatar });
                            return [2 /*return*/, { linkage: linkage, url: getIpfsLink(avatar) }];
                        case 7:
                            selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                            linkage.push({ type: scheme, content: avatar });
                            _b = this._resolvedAddress;
                            if (_b) return [3 /*break*/, 9];
                            return [4 /*yield*/, this.getAddress()];
                        case 8:
                            _b = (_h.sent());
                            _h.label = 9;
                        case 9:
                            owner = (_b);
                            comps = (match[2] || "").split("/");
                            if (comps.length !== 2) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, this.provider.formatter.address(comps[0])];
                        case 10:
                            addr = _h.sent();
                            tokenId = (0, bytes_1$7.hexZeroPad)(bignumber_1$5.BigNumber.from(comps[1]).toHexString(), 32);
                            if (!(scheme === "erc721")) return [3 /*break*/, 12];
                            _d = (_c = this.provider.formatter).callAddress;
                            return [4 /*yield*/, this.provider.call({
                                    to: addr, data: (0, bytes_1$7.hexConcat)(["0x6352211e", tokenId])
                                })];
                        case 11:
                            tokenOwner = _d.apply(_c, [_h.sent()]);
                            if (owner !== tokenOwner) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "owner", content: tokenOwner });
                            return [3 /*break*/, 14];
                        case 12:
                            if (!(scheme === "erc1155")) return [3 /*break*/, 14];
                            _f = (_e = bignumber_1$5.BigNumber).from;
                            return [4 /*yield*/, this.provider.call({
                                    to: addr, data: (0, bytes_1$7.hexConcat)(["0x00fdd58e", (0, bytes_1$7.hexZeroPad)(owner, 32), tokenId])
                                })];
                        case 13:
                            balance = _f.apply(_e, [_h.sent()]);
                            if (balance.isZero()) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "balance", content: balance.toString() });
                            _h.label = 14;
                        case 14:
                            tx = {
                                to: this.provider.formatter.address(comps[0]),
                                data: (0, bytes_1$7.hexConcat)([selector, tokenId])
                            };
                            _g = _parseString;
                            return [4 /*yield*/, this.provider.call(tx)];
                        case 15:
                            metadataUrl = _g.apply(void 0, [_h.sent(), 0]);
                            if (metadataUrl == null) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "metadata-url-base", content: metadataUrl });
                            // ERC-1155 allows a generic {id} in the URL
                            if (scheme === "erc1155") {
                                metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                            }
                            // Transform IPFS metadata links
                            if (metadataUrl.match(/^ipfs:/i)) {
                                metadataUrl = getIpfsLink(metadataUrl);
                            }
                            linkage.push({ type: "metadata-url", content: metadataUrl });
                            return [4 /*yield*/, (0, web_1$4.fetchJson)(metadataUrl)];
                        case 16:
                            metadata = _h.sent();
                            if (!metadata) {
                                return [2 /*return*/, null];
                            }
                            linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                            imageUrl = metadata.image;
                            if (typeof (imageUrl) !== "string") {
                                return [2 /*return*/, null];
                            }
                            if (imageUrl.match(/^(https:\/\/|data:)/i)) ;
                            else {
                                ipfs = imageUrl.match(matcherIpfs);
                                if (ipfs == null) {
                                    return [2 /*return*/, null];
                                }
                                linkage.push({ type: "url-ipfs", content: imageUrl });
                                imageUrl = getIpfsLink(imageUrl);
                            }
                            linkage.push({ type: "url", content: imageUrl });
                            return [2 /*return*/, { linkage: linkage, url: imageUrl }];
                        case 17:
                            i++;
                            return [3 /*break*/, 3];
                        case 18: return [3 /*break*/, 20];
                        case 19:
                            _h.sent();
                            return [3 /*break*/, 20];
                        case 20: return [2 /*return*/, null];
                    }
                });
            });
        };
        Resolver.prototype.getContentHash = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var hexBytes, ipfs, length_4, ipns, length_5, swarm, skynet, urlSafe_1, hash;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._fetchBytes("0xbc1c58d1")];
                        case 1:
                            hexBytes = _a.sent();
                            // No contenthash
                            if (hexBytes == null || hexBytes === "0x") {
                                return [2 /*return*/, null];
                            }
                            ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                            if (ipfs) {
                                length_4 = parseInt(ipfs[3], 16);
                                if (ipfs[4].length === length_4 * 2) {
                                    return [2 /*return*/, "ipfs:/\/" + basex_1.Base58.encode("0x" + ipfs[1])];
                                }
                            }
                            ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                            if (ipns) {
                                length_5 = parseInt(ipns[3], 16);
                                if (ipns[4].length === length_5 * 2) {
                                    return [2 /*return*/, "ipns:/\/" + basex_1.Base58.encode("0x" + ipns[1])];
                                }
                            }
                            swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                            if (swarm) {
                                if (swarm[1].length === (32 * 2)) {
                                    return [2 /*return*/, "bzz:/\/" + swarm[1]];
                                }
                            }
                            skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                            if (skynet) {
                                if (skynet[1].length === (34 * 2)) {
                                    urlSafe_1 = { "=": "", "+": "-", "/": "_" };
                                    hash = (0, base64_1.encode)("0x" + skynet[1]).replace(/[=+\/]/g, function (a) { return (urlSafe_1[a]); });
                                    return [2 /*return*/, "sia:/\/" + hash];
                                }
                            }
                            return [2 /*return*/, logger$f.throwError("invalid or unsupported content hash data", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "getContentHash()",
                                    data: hexBytes
                                })];
                    }
                });
            });
        };
        Resolver.prototype.getText = function (key) {
            return __awaiter$6(this, void 0, void 0, function () {
                var keyBytes, hexBytes;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            keyBytes = (0, strings_1$2.toUtf8Bytes)(key);
                            // The nodehash consumes the first slot, so the string pointer targets
                            // offset 64, with the length at offset 64 and data starting at offset 96
                            keyBytes = (0, bytes_1$7.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                            // Pad to word-size (32 bytes)
                            if ((keyBytes.length % 32) !== 0) {
                                keyBytes = (0, bytes_1$7.concat)([keyBytes, (0, bytes_1$7.hexZeroPad)("0x", 32 - (key.length % 32))]);
                            }
                            return [4 /*yield*/, this._fetchBytes("0x59d1d43c", (0, bytes_1$7.hexlify)(keyBytes))];
                        case 1:
                            hexBytes = _a.sent();
                            if (hexBytes == null || hexBytes === "0x") {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, (0, strings_1$2.toUtf8String)(hexBytes)];
                    }
                });
            });
        };
        return Resolver;
    }());
    baseProvider.Resolver = Resolver;
    var defaultFormatter = null;
    var nextPollId = 1;
    var BaseProvider = /** @class */ (function (_super) {
        __extends$d(BaseProvider, _super);
        /**
         *  ready
         *
         *  A Promise<Network> that resolves only once the provider is ready.
         *
         *  Sub-classes that call the super with a network without a chainId
         *  MUST set this. Standard named networks have a known chainId.
         *
         */
        function BaseProvider(network) {
            var _newTarget = this.constructor;
            var _this = _super.call(this) || this;
            // Events being listened to
            _this._events = [];
            _this._emitted = { block: -2 };
            _this.disableCcipRead = false;
            _this.formatter = _newTarget.getFormatter();
            // If network is any, this Provider allows the underlying
            // network to change dynamically, and we auto-detect the
            // current network
            (0, properties_1$9.defineReadOnly)(_this, "anyNetwork", (network === "any"));
            if (_this.anyNetwork) {
                network = _this.detectNetwork();
            }
            if (network instanceof Promise) {
                _this._networkPromise = network;
                // Squash any "unhandled promise" errors; that do not need to be handled
                network.catch(function (error) { });
                // Trigger initial network setting (async)
                _this._ready().catch(function (error) { });
            }
            else {
                var knownNetwork = (0, properties_1$9.getStatic)(_newTarget, "getNetwork")(network);
                if (knownNetwork) {
                    (0, properties_1$9.defineReadOnly)(_this, "_network", knownNetwork);
                    _this.emit("network", knownNetwork, null);
                }
                else {
                    logger$f.throwArgumentError("invalid network", "network", network);
                }
            }
            _this._maxInternalBlockNumber = -1024;
            _this._lastBlockNumber = -2;
            _this._maxFilterBlockRange = 10;
            _this._pollingInterval = 4000;
            _this._fastQueryDate = 0;
            return _this;
        }
        BaseProvider.prototype._ready = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var network;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this._network == null)) return [3 /*break*/, 7];
                            network = null;
                            if (!this._networkPromise) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._networkPromise];
                        case 2:
                            network = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 4:
                            if (!(network == null)) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.detectNetwork()];
                        case 5:
                            network = _a.sent();
                            _a.label = 6;
                        case 6:
                            // This should never happen; every Provider sub-class should have
                            // suggested a network by here (or have thrown).
                            if (!network) {
                                logger$f.throwError("no network detected", logger_1$f.Logger.errors.UNKNOWN_ERROR, {});
                            }
                            // Possible this call stacked so do not call defineReadOnly again
                            if (this._network == null) {
                                if (this.anyNetwork) {
                                    this._network = network;
                                }
                                else {
                                    (0, properties_1$9.defineReadOnly)(this, "_network", network);
                                }
                                this.emit("network", network, null);
                            }
                            _a.label = 7;
                        case 7: return [2 /*return*/, this._network];
                    }
                });
            });
        };
        Object.defineProperty(BaseProvider.prototype, "ready", {
            // This will always return the most recently established network.
            // For "any", this can change (a "network" event is emitted before
            // any change is reflected); otherwise this cannot change
            get: function () {
                var _this = this;
                return (0, web_1$4.poll)(function () {
                    return _this._ready().then(function (network) {
                        return network;
                    }, function (error) {
                        // If the network isn't running yet, we will wait
                        if (error.code === logger_1$f.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                            return undefined;
                        }
                        throw error;
                    });
                });
            },
            enumerable: false,
            configurable: true
        });
        // @TODO: Remove this and just create a singleton formatter
        BaseProvider.getFormatter = function () {
            if (defaultFormatter == null) {
                defaultFormatter = new formatter_1$5.Formatter();
            }
            return defaultFormatter;
        };
        // @TODO: Remove this and just use getNetwork
        BaseProvider.getNetwork = function (network) {
            return (0, networks_1.getNetwork)((network == null) ? "homestead" : network);
        };
        BaseProvider.prototype.ccipReadFetch = function (tx, calldata, urls) {
            return __awaiter$6(this, void 0, void 0, function () {
                var sender, data, errorMessages, i, url, href, json, result, errorMessage;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.disableCcipRead || urls.length === 0) {
                                return [2 /*return*/, null];
                            }
                            sender = tx.to.toLowerCase();
                            data = calldata.toLowerCase();
                            errorMessages = [];
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < urls.length)) return [3 /*break*/, 4];
                            url = urls[i];
                            href = url.replace("{sender}", sender).replace("{data}", data);
                            json = (url.indexOf("{data}") >= 0) ? null : JSON.stringify({ data: data, sender: sender });
                            return [4 /*yield*/, (0, web_1$4.fetchJson)({ url: href, errorPassThrough: true }, json, function (value, response) {
                                    value.status = response.statusCode;
                                    return value;
                                })];
                        case 2:
                            result = _a.sent();
                            if (result.data) {
                                return [2 /*return*/, result.data];
                            }
                            errorMessage = (result.message || "unknown error");
                            // 4xx indicates the result is not present; stop
                            if (result.status >= 400 && result.status < 500) {
                                return [2 /*return*/, logger$f.throwError("response not found during CCIP fetch: " + errorMessage, logger_1$f.Logger.errors.SERVER_ERROR, { url: url, errorMessage: errorMessage })];
                            }
                            // 5xx indicates server issue; try the next url
                            errorMessages.push(errorMessage);
                            _a.label = 3;
                        case 3:
                            i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/, logger$f.throwError("error encountered during CCIP fetch: " + errorMessages.map(function (m) { return JSON.stringify(m); }).join(", "), logger_1$f.Logger.errors.SERVER_ERROR, {
                                urls: urls,
                                errorMessages: errorMessages
                            })];
                    }
                });
            });
        };
        // Fetches the blockNumber, but will reuse any result that is less
        // than maxAge old or has been requested since the last request
        BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {
            return __awaiter$6(this, void 0, void 0, function () {
                var internalBlockNumber, result, reqTime, checkInternalBlockNumber;
                var _this = this;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._ready()];
                        case 1:
                            _a.sent();
                            if (!(maxAge > 0)) return [3 /*break*/, 7];
                            _a.label = 2;
                        case 2:
                            if (!this._internalBlockNumber) return [3 /*break*/, 7];
                            internalBlockNumber = this._internalBlockNumber;
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, internalBlockNumber];
                        case 4:
                            result = _a.sent();
                            if ((getTime() - result.respTime) <= maxAge) {
                                return [2 /*return*/, result.blockNumber];
                            }
                            // Too old; fetch a new value
                            return [3 /*break*/, 7];
                        case 5:
                            _a.sent();
                            // The fetch rejected; if we are the first to get the
                            // rejection, drop through so we replace it with a new
                            // fetch; all others blocked will then get that fetch
                            // which won't match the one they "remembered" and loop
                            if (this._internalBlockNumber === internalBlockNumber) {
                                return [3 /*break*/, 7];
                            }
                            return [3 /*break*/, 6];
                        case 6: return [3 /*break*/, 2];
                        case 7:
                            reqTime = getTime();
                            checkInternalBlockNumber = (0, properties_1$9.resolveProperties)({
                                blockNumber: this.perform("getBlockNumber", {}),
                                networkError: this.getNetwork().then(function (network) { return (null); }, function (error) { return (error); })
                            }).then(function (_a) {
                                var blockNumber = _a.blockNumber, networkError = _a.networkError;
                                if (networkError) {
                                    // Unremember this bad internal block number
                                    if (_this._internalBlockNumber === checkInternalBlockNumber) {
                                        _this._internalBlockNumber = null;
                                    }
                                    throw networkError;
                                }
                                var respTime = getTime();
                                blockNumber = bignumber_1$5.BigNumber.from(blockNumber).toNumber();
                                if (blockNumber < _this._maxInternalBlockNumber) {
                                    blockNumber = _this._maxInternalBlockNumber;
                                }
                                _this._maxInternalBlockNumber = blockNumber;
                                _this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                                return { blockNumber: blockNumber, reqTime: reqTime, respTime: respTime };
                            });
                            this._internalBlockNumber = checkInternalBlockNumber;
                            // Swallow unhandled exceptions; if needed they are handled else where
                            checkInternalBlockNumber.catch(function (error) {
                                // Don't null the dead (rejected) fetch, if it has already been updated
                                if (_this._internalBlockNumber === checkInternalBlockNumber) {
                                    _this._internalBlockNumber = null;
                                }
                            });
                            return [4 /*yield*/, checkInternalBlockNumber];
                        case 8: return [2 /*return*/, (_a.sent()).blockNumber];
                    }
                });
            });
        };
        BaseProvider.prototype.poll = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var pollId, runners, blockNumber, error_6, i;
                var _this = this;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pollId = nextPollId++;
                            runners = [];
                            blockNumber = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];
                        case 2:
                            blockNumber = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_6 = _a.sent();
                            this.emit("error", error_6);
                            return [2 /*return*/];
                        case 4:
                            this._setFastBlockNumber(blockNumber);
                            // Emit a poll event after we have the latest (fast) block number
                            this.emit("poll", pollId, blockNumber);
                            // If the block has not changed, meh.
                            if (blockNumber === this._lastBlockNumber) {
                                this.emit("didPoll", pollId);
                                return [2 /*return*/];
                            }
                            // First polling cycle, trigger a "block" events
                            if (this._emitted.block === -2) {
                                this._emitted.block = blockNumber - 1;
                            }
                            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                                logger$f.warn("network block skew detected; skipping block events (emitted=" + this._emitted.block + " blockNumber" + blockNumber + ")");
                                this.emit("error", logger$f.makeError("network block skew detected", logger_1$f.Logger.errors.NETWORK_ERROR, {
                                    blockNumber: blockNumber,
                                    event: "blockSkew",
                                    previousBlockNumber: this._emitted.block
                                }));
                                this.emit("block", blockNumber);
                            }
                            else {
                                // Notify all listener for each block that has passed
                                for (i = this._emitted.block + 1; i <= blockNumber; i++) {
                                    this.emit("block", i);
                                }
                            }
                            // The emitted block was updated, check for obsolete events
                            if (this._emitted.block !== blockNumber) {
                                this._emitted.block = blockNumber;
                                Object.keys(this._emitted).forEach(function (key) {
                                    // The block event does not expire
                                    if (key === "block") {
                                        return;
                                    }
                                    // The block we were at when we emitted this event
                                    var eventBlockNumber = _this._emitted[key];
                                    // We cannot garbage collect pending transactions or blocks here
                                    // They should be garbage collected by the Provider when setting
                                    // "pending" events
                                    if (eventBlockNumber === "pending") {
                                        return;
                                    }
                                    // Evict any transaction hashes or block hashes over 12 blocks
                                    // old, since they should not return null anyways
                                    if (blockNumber - eventBlockNumber > 12) {
                                        delete _this._emitted[key];
                                    }
                                });
                            }
                            // First polling cycle
                            if (this._lastBlockNumber === -2) {
                                this._lastBlockNumber = blockNumber - 1;
                            }
                            // Find all transaction hashes we are waiting on
                            this._events.forEach(function (event) {
                                switch (event.type) {
                                    case "tx": {
                                        var hash_2 = event.hash;
                                        var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {
                                            if (!receipt || receipt.blockNumber == null) {
                                                return null;
                                            }
                                            _this._emitted["t:" + hash_2] = receipt.blockNumber;
                                            _this.emit(hash_2, receipt);
                                            return null;
                                        }).catch(function (error) { _this.emit("error", error); });
                                        runners.push(runner);
                                        break;
                                    }
                                    case "filter": {
                                        // We only allow a single getLogs to be in-flight at a time
                                        if (!event._inflight) {
                                            event._inflight = true;
                                            // This is the first filter for this event, so we want to
                                            // restrict events to events that happened no earlier than now
                                            if (event._lastBlockNumber === -2) {
                                                event._lastBlockNumber = blockNumber - 1;
                                            }
                                            // Filter from the last *known* event; due to load-balancing
                                            // and some nodes returning updated block numbers before
                                            // indexing events, a logs result with 0 entries cannot be
                                            // trusted and we must retry a range which includes it again
                                            var filter_1 = event.filter;
                                            filter_1.fromBlock = event._lastBlockNumber + 1;
                                            filter_1.toBlock = blockNumber;
                                            // Prevent fitler ranges from growing too wild, since it is quite
                                            // likely there just haven't been any events to move the lastBlockNumber.
                                            var minFromBlock = filter_1.toBlock - _this._maxFilterBlockRange;
                                            if (minFromBlock > filter_1.fromBlock) {
                                                filter_1.fromBlock = minFromBlock;
                                            }
                                            if (filter_1.fromBlock < 0) {
                                                filter_1.fromBlock = 0;
                                            }
                                            var runner = _this.getLogs(filter_1).then(function (logs) {
                                                // Allow the next getLogs
                                                event._inflight = false;
                                                if (logs.length === 0) {
                                                    return;
                                                }
                                                logs.forEach(function (log) {
                                                    // Only when we get an event for a given block number
                                                    // can we trust the events are indexed
                                                    if (log.blockNumber > event._lastBlockNumber) {
                                                        event._lastBlockNumber = log.blockNumber;
                                                    }
                                                    // Make sure we stall requests to fetch blocks and txs
                                                    _this._emitted["b:" + log.blockHash] = log.blockNumber;
                                                    _this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                                    _this.emit(filter_1, log);
                                                });
                                            }).catch(function (error) {
                                                _this.emit("error", error);
                                                // Allow another getLogs (the range was not updated)
                                                event._inflight = false;
                                            });
                                            runners.push(runner);
                                        }
                                        break;
                                    }
                                }
                            });
                            this._lastBlockNumber = blockNumber;
                            // Once all events for this loop have been processed, emit "didPoll"
                            Promise.all(runners).then(function () {
                                _this.emit("didPoll", pollId);
                            }).catch(function (error) { _this.emit("error", error); });
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Deprecated; do not use this
        BaseProvider.prototype.resetEventsBlock = function (blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
                this.poll();
            }
        };
        Object.defineProperty(BaseProvider.prototype, "network", {
            get: function () {
                return this._network;
            },
            enumerable: false,
            configurable: true
        });
        // This method should query the network if the underlying network
        // can change, such as when connected to a JSON-RPC backend
        BaseProvider.prototype.detectNetwork = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                return __generator$6(this, function (_a) {
                    return [2 /*return*/, logger$f.throwError("provider does not support network detection", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "provider.detectNetwork"
                        })];
                });
            });
        };
        BaseProvider.prototype.getNetwork = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var network, currentNetwork, error;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._ready()];
                        case 1:
                            network = _a.sent();
                            return [4 /*yield*/, this.detectNetwork()];
                        case 2:
                            currentNetwork = _a.sent();
                            if (!(network.chainId !== currentNetwork.chainId)) return [3 /*break*/, 5];
                            if (!this.anyNetwork) return [3 /*break*/, 4];
                            this._network = currentNetwork;
                            // Reset all internal block number guards and caches
                            this._lastBlockNumber = -2;
                            this._fastBlockNumber = null;
                            this._fastBlockNumberPromise = null;
                            this._fastQueryDate = 0;
                            this._emitted.block = -2;
                            this._maxInternalBlockNumber = -1024;
                            this._internalBlockNumber = null;
                            // The "network" event MUST happen before this method resolves
                            // so any events have a chance to unregister, so we stall an
                            // additional event loop before returning from /this/ call
                            this.emit("network", currentNetwork, network);
                            return [4 /*yield*/, stall$1(0)];
                        case 3:
                            _a.sent();
                            return [2 /*return*/, this._network];
                        case 4:
                            error = logger$f.makeError("underlying network changed", logger_1$f.Logger.errors.NETWORK_ERROR, {
                                event: "changed",
                                network: network,
                                detectedNetwork: currentNetwork
                            });
                            this.emit("error", error);
                            throw error;
                        case 5: return [2 /*return*/, network];
                    }
                });
            });
        };
        Object.defineProperty(BaseProvider.prototype, "blockNumber", {
            get: function () {
                var _this = this;
                this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {
                    _this._setFastBlockNumber(blockNumber);
                }, function (error) { });
                return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseProvider.prototype, "polling", {
            get: function () {
                return (this._poller != null);
            },
            set: function (value) {
                var _this = this;
                if (value && !this._poller) {
                    this._poller = setInterval(function () { _this.poll(); }, this.pollingInterval);
                    if (!this._bootstrapPoll) {
                        this._bootstrapPoll = setTimeout(function () {
                            _this.poll();
                            // We block additional polls until the polling interval
                            // is done, to prevent overwhelming the poll function
                            _this._bootstrapPoll = setTimeout(function () {
                                // If polling was disabled, something may require a poke
                                // since starting the bootstrap poll and it was disabled
                                if (!_this._poller) {
                                    _this.poll();
                                }
                                // Clear out the bootstrap so we can do another
                                _this._bootstrapPoll = null;
                            }, _this.pollingInterval);
                        }, 0);
                    }
                }
                else if (!value && this._poller) {
                    clearInterval(this._poller);
                    this._poller = null;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseProvider.prototype, "pollingInterval", {
            get: function () {
                return this._pollingInterval;
            },
            set: function (value) {
                var _this = this;
                if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
                    throw new Error("invalid polling interval");
                }
                this._pollingInterval = value;
                if (this._poller) {
                    clearInterval(this._poller);
                    this._poller = setInterval(function () { _this.poll(); }, this._pollingInterval);
                }
            },
            enumerable: false,
            configurable: true
        });
        BaseProvider.prototype._getFastBlockNumber = function () {
            var _this = this;
            var now = getTime();
            // Stale block number, request a newer value
            if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
                this._fastQueryDate = now;
                this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
                    if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
                        _this._fastBlockNumber = blockNumber;
                    }
                    return _this._fastBlockNumber;
                });
            }
            return this._fastBlockNumberPromise;
        };
        BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {
            // Older block, maybe a stale request
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
                return;
            }
            // Update the time we updated the blocknumber
            this._fastQueryDate = getTime();
            // Newer block number, use  it
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                this._fastBlockNumber = blockNumber;
                this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
        };
        BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {
            return __awaiter$6(this, void 0, void 0, function () {
                return __generator$6(this, function (_a) {
                    return [2 /*return*/, this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null)];
                });
            });
        };
        BaseProvider.prototype._waitForTransaction = function (transactionHash, confirmations, timeout, replaceable) {
            return __awaiter$6(this, void 0, void 0, function () {
                var receipt;
                var _this = this;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getTransactionReceipt(transactionHash)];
                        case 1:
                            receipt = _a.sent();
                            // Receipt is already good
                            if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                                return [2 /*return*/, receipt];
                            }
                            // Poll until the receipt is good...
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var cancelFuncs = [];
                                    var done = false;
                                    var alreadyDone = function () {
                                        if (done) {
                                            return true;
                                        }
                                        done = true;
                                        cancelFuncs.forEach(function (func) { func(); });
                                        return false;
                                    };
                                    var minedHandler = function (receipt) {
                                        if (receipt.confirmations < confirmations) {
                                            return;
                                        }
                                        if (alreadyDone()) {
                                            return;
                                        }
                                        resolve(receipt);
                                    };
                                    _this.on(transactionHash, minedHandler);
                                    cancelFuncs.push(function () { _this.removeListener(transactionHash, minedHandler); });
                                    if (replaceable) {
                                        var lastBlockNumber_1 = replaceable.startBlock;
                                        var scannedBlock_1 = null;
                                        var replaceHandler_1 = function (blockNumber) { return __awaiter$6(_this, void 0, void 0, function () {
                                            var _this = this;
                                            return __generator$6(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (done) {
                                                            return [2 /*return*/];
                                                        }
                                                        // Wait 1 second; this is only used in the case of a fault, so
                                                        // we will trade off a little bit of latency for more consistent
                                                        // results and fewer JSON-RPC calls
                                                        return [4 /*yield*/, stall$1(1000)];
                                                    case 1:
                                                        // Wait 1 second; this is only used in the case of a fault, so
                                                        // we will trade off a little bit of latency for more consistent
                                                        // results and fewer JSON-RPC calls
                                                        _a.sent();
                                                        this.getTransactionCount(replaceable.from).then(function (nonce) { return __awaiter$6(_this, void 0, void 0, function () {
                                                            var mined, block, ti, tx, receipt_1, reason;
                                                            return __generator$6(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0:
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        if (!(nonce <= replaceable.nonce)) return [3 /*break*/, 1];
                                                                        lastBlockNumber_1 = blockNumber;
                                                                        return [3 /*break*/, 9];
                                                                    case 1: return [4 /*yield*/, this.getTransaction(transactionHash)];
                                                                    case 2:
                                                                        mined = _a.sent();
                                                                        if (mined && mined.blockNumber != null) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        // First time scanning. We start a little earlier for some
                                                                        // wiggle room here to handle the eventually consistent nature
                                                                        // of blockchain (e.g. the getTransactionCount was for a
                                                                        // different block)
                                                                        if (scannedBlock_1 == null) {
                                                                            scannedBlock_1 = lastBlockNumber_1 - 3;
                                                                            if (scannedBlock_1 < replaceable.startBlock) {
                                                                                scannedBlock_1 = replaceable.startBlock;
                                                                            }
                                                                        }
                                                                        _a.label = 3;
                                                                    case 3:
                                                                        if (!(scannedBlock_1 <= blockNumber)) return [3 /*break*/, 9];
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        return [4 /*yield*/, this.getBlockWithTransactions(scannedBlock_1)];
                                                                    case 4:
                                                                        block = _a.sent();
                                                                        ti = 0;
                                                                        _a.label = 5;
                                                                    case 5:
                                                                        if (!(ti < block.transactions.length)) return [3 /*break*/, 8];
                                                                        tx = block.transactions[ti];
                                                                        // Successfully mined!
                                                                        if (tx.hash === transactionHash) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) return [3 /*break*/, 7];
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        return [4 /*yield*/, this.waitForTransaction(tx.hash, confirmations)];
                                                                    case 6:
                                                                        receipt_1 = _a.sent();
                                                                        // Already resolved or rejected (prolly a timeout)
                                                                        if (alreadyDone()) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        reason = "replaced";
                                                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                                            reason = "repriced";
                                                                        }
                                                                        else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                                            reason = "cancelled";
                                                                        }
                                                                        // Explain why we were replaced
                                                                        reject(logger$f.makeError("transaction was replaced", logger_1$f.Logger.errors.TRANSACTION_REPLACED, {
                                                                            cancelled: (reason === "replaced" || reason === "cancelled"),
                                                                            reason: reason,
                                                                            replacement: this._wrapTransaction(tx),
                                                                            hash: transactionHash,
                                                                            receipt: receipt_1
                                                                        }));
                                                                        return [2 /*return*/];
                                                                    case 7:
                                                                        ti++;
                                                                        return [3 /*break*/, 5];
                                                                    case 8:
                                                                        scannedBlock_1++;
                                                                        return [3 /*break*/, 3];
                                                                    case 9:
                                                                        if (done) {
                                                                            return [2 /*return*/];
                                                                        }
                                                                        this.once("block", replaceHandler_1);
                                                                        return [2 /*return*/];
                                                                }
                                                            });
                                                        }); }, function (error) {
                                                            if (done) {
                                                                return;
                                                            }
                                                            _this.once("block", replaceHandler_1);
                                                        });
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); };
                                        if (done) {
                                            return;
                                        }
                                        _this.once("block", replaceHandler_1);
                                        cancelFuncs.push(function () {
                                            _this.removeListener("block", replaceHandler_1);
                                        });
                                    }
                                    if (typeof (timeout) === "number" && timeout > 0) {
                                        var timer_1 = setTimeout(function () {
                                            if (alreadyDone()) {
                                                return;
                                            }
                                            reject(logger$f.makeError("timeout exceeded", logger_1$f.Logger.errors.TIMEOUT, { timeout: timeout }));
                                        }, timeout);
                                        if (timer_1.unref) {
                                            timer_1.unref();
                                        }
                                        cancelFuncs.push(function () { clearTimeout(timer_1); });
                                    }
                                })];
                    }
                });
            });
        };
        BaseProvider.prototype.getBlockNumber = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                return __generator$6(this, function (_a) {
                    return [2 /*return*/, this._getInternalBlockNumber(0)];
                });
            });
        };
        BaseProvider.prototype.getGasPrice = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                var result;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.perform("getGasPrice", {})];
                        case 2:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1$5.BigNumber.from(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger$f.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
                                        method: "getGasPrice",
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params, result;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getBalance", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1$5.BigNumber.from(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger$f.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
                                        method: "getBalance",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params, result;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getTransactionCount", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1$5.BigNumber.from(result).toNumber()];
                            }
                            catch (error) {
                                return [2 /*return*/, logger$f.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
                                        method: "getTransactionCount",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getCode = function (addressOrName, blockTag) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params, result;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getCode", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, (0, bytes_1$7.hexlify)(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger$f.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
                                        method: "getCode",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params, result;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
                                    address: this._getAddress(addressOrName),
                                    blockTag: this._getBlockTag(blockTag),
                                    position: Promise.resolve(position).then(function (p) { return (0, bytes_1$7.hexValue)(p); })
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getStorageAt", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, (0, bytes_1$7.hexlify)(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger$f.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
                                        method: "getStorageAt",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        // This should be called by any subclass wrapping a TransactionResponse
        BaseProvider.prototype._wrapTransaction = function (tx, hash, startBlock) {
            var _this = this;
            if (hash != null && (0, bytes_1$7.hexDataLength)(hash) !== 32) {
                throw new Error("invalid response - sendTransaction");
            }
            var result = tx;
            // Check the hash we expect is the same as the hash the server reported
            if (hash != null && tx.hash !== hash) {
                logger$f.throwError("Transaction hash mismatch from Provider.sendTransaction.", logger_1$f.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = function (confirms, timeout) { return __awaiter$6(_this, void 0, void 0, function () {
                var replacement, receipt;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (confirms == null) {
                                confirms = 1;
                            }
                            if (timeout == null) {
                                timeout = 0;
                            }
                            replacement = undefined;
                            if (confirms !== 0 && startBlock != null) {
                                replacement = {
                                    data: tx.data,
                                    from: tx.from,
                                    nonce: tx.nonce,
                                    to: tx.to,
                                    value: tx.value,
                                    startBlock: startBlock
                                };
                            }
                            return [4 /*yield*/, this._waitForTransaction(tx.hash, confirms, timeout, replacement)];
                        case 1:
                            receipt = _a.sent();
                            if (receipt == null && confirms === 0) {
                                return [2 /*return*/, null];
                            }
                            // No longer pending, allow the polling loop to garbage collect this
                            this._emitted["t:" + tx.hash] = receipt.blockNumber;
                            if (receipt.status === 0) {
                                logger$f.throwError("transaction failed", logger_1$f.Logger.errors.CALL_EXCEPTION, {
                                    transactionHash: tx.hash,
                                    transaction: tx,
                                    receipt: receipt
                                });
                            }
                            return [2 /*return*/, receipt];
                    }
                });
            }); };
            return result;
        };
        BaseProvider.prototype.sendTransaction = function (signedTransaction) {
            return __awaiter$6(this, void 0, void 0, function () {
                var hexTx, tx, blockNumber, hash, error_7;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, Promise.resolve(signedTransaction).then(function (t) { return (0, bytes_1$7.hexlify)(t); })];
                        case 2:
                            hexTx = _a.sent();
                            tx = this.formatter.transaction(signedTransaction);
                            if (tx.confirmations == null) {
                                tx.confirmations = 0;
                            }
                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                        case 3:
                            blockNumber = _a.sent();
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 6, , 7]);
                            return [4 /*yield*/, this.perform("sendTransaction", { signedTransaction: hexTx })];
                        case 5:
                            hash = _a.sent();
                            return [2 /*return*/, this._wrapTransaction(tx, hash, blockNumber)];
                        case 6:
                            error_7 = _a.sent();
                            error_7.transaction = tx;
                            error_7.transactionHash = tx.hash;
                            throw error_7;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype._getTransactionRequest = function (transaction) {
            return __awaiter$6(this, void 0, void 0, function () {
                var values, tx, _a, _b;
                var _this = this;
                return __generator$6(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, transaction];
                        case 1:
                            values = _c.sent();
                            tx = {};
                            ["from", "to"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? _this._getAddress(v) : null); });
                            });
                            ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? bignumber_1$5.BigNumber.from(v) : null); });
                            });
                            ["type"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return ((v != null) ? v : null); });
                            });
                            if (values.accessList) {
                                tx.accessList = this.formatter.accessList(values.accessList);
                            }
                            ["data"].forEach(function (key) {
                                if (values[key] == null) {
                                    return;
                                }
                                tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? (0, bytes_1$7.hexlify)(v) : null); });
                            });
                            _b = (_a = this.formatter).transactionRequest;
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)(tx)];
                        case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    }
                });
            });
        };
        BaseProvider.prototype._getFilter = function (filter) {
            return __awaiter$6(this, void 0, void 0, function () {
                var result, _a, _b;
                var _this = this;
                return __generator$6(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, filter];
                        case 1:
                            filter = _c.sent();
                            result = {};
                            if (filter.address != null) {
                                result.address = this._getAddress(filter.address);
                            }
                            ["blockHash", "topics"].forEach(function (key) {
                                if (filter[key] == null) {
                                    return;
                                }
                                result[key] = filter[key];
                            });
                            ["fromBlock", "toBlock"].forEach(function (key) {
                                if (filter[key] == null) {
                                    return;
                                }
                                result[key] = _this._getBlockTag(filter[key]);
                            });
                            _b = (_a = this.formatter).filter;
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)(result)];
                        case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    }
                });
            });
        };
        BaseProvider.prototype._call = function (transaction, blockTag, attempt) {
            return __awaiter$6(this, void 0, void 0, function () {
                var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx, error_8;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (attempt >= MAX_CCIP_REDIRECTS) {
                                logger$f.throwError("CCIP read exceeded maximum redirections", logger_1$f.Logger.errors.SERVER_ERROR, {
                                    redirects: attempt,
                                    transaction: transaction
                                });
                            }
                            txSender = transaction.to;
                            return [4 /*yield*/, this.perform("call", { transaction: transaction, blockTag: blockTag })];
                        case 1:
                            result = _a.sent();
                            if (!(attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && ((0, bytes_1$7.hexDataLength)(result) % 32 === 4))) return [3 /*break*/, 5];
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            data = (0, bytes_1$7.hexDataSlice)(result, 4);
                            sender = (0, bytes_1$7.hexDataSlice)(data, 0, 32);
                            if (!bignumber_1$5.BigNumber.from(sender).eq(txSender)) {
                                logger$f.throwError("CCIP Read sender did not match", logger_1$f.Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction: transaction,
                                    data: result
                                });
                            }
                            urls = [];
                            urlsOffset = bignumber_1$5.BigNumber.from((0, bytes_1$7.hexDataSlice)(data, 32, 64)).toNumber();
                            urlsLength = bignumber_1$5.BigNumber.from((0, bytes_1$7.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();
                            urlsData = (0, bytes_1$7.hexDataSlice)(data, urlsOffset + 32);
                            for (u = 0; u < urlsLength; u++) {
                                url = _parseString(urlsData, u * 32);
                                if (url == null) {
                                    logger$f.throwError("CCIP Read contained corrupt URL string", logger_1$f.Logger.errors.CALL_EXCEPTION, {
                                        name: "OffchainLookup",
                                        signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                        transaction: transaction,
                                        data: result
                                    });
                                }
                                urls.push(url);
                            }
                            calldata = _parseBytes(data, 64);
                            // Get the callbackSelector (bytes4)
                            if (!bignumber_1$5.BigNumber.from((0, bytes_1$7.hexDataSlice)(data, 100, 128)).isZero()) {
                                logger$f.throwError("CCIP Read callback selector included junk", logger_1$f.Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction: transaction,
                                    data: result
                                });
                            }
                            callbackSelector = (0, bytes_1$7.hexDataSlice)(data, 96, 100);
                            extraData = _parseBytes(data, 128);
                            return [4 /*yield*/, this.ccipReadFetch(transaction, calldata, urls)];
                        case 3:
                            ccipResult = _a.sent();
                            if (ccipResult == null) {
                                logger$f.throwError("CCIP Read disabled or provided no URLs", logger_1$f.Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction: transaction,
                                    data: result
                                });
                            }
                            tx = {
                                to: txSender,
                                data: (0, bytes_1$7.hexConcat)([callbackSelector, encodeBytes([ccipResult, extraData])])
                            };
                            return [2 /*return*/, this._call(tx, blockTag, attempt + 1)];
                        case 4:
                            error_8 = _a.sent();
                            if (error_8.code === logger_1$f.Logger.errors.SERVER_ERROR) {
                                throw error_8;
                            }
                            return [3 /*break*/, 5];
                        case 5:
                            try {
                                return [2 /*return*/, (0, bytes_1$7.hexlify)(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger$f.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
                                        method: "call",
                                        params: { transaction: transaction, blockTag: blockTag },
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype.call = function (transaction, blockTag) {
            return __awaiter$6(this, void 0, void 0, function () {
                var resolved;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
                                    transaction: this._getTransactionRequest(transaction),
                                    blockTag: this._getBlockTag(blockTag),
                                    ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                                })];
                        case 2:
                            resolved = _a.sent();
                            return [2 /*return*/, this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1)];
                    }
                });
            });
        };
        BaseProvider.prototype.estimateGas = function (transaction) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params, result;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)({
                                    transaction: this._getTransactionRequest(transaction)
                                })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("estimateGas", params)];
                        case 3:
                            result = _a.sent();
                            try {
                                return [2 /*return*/, bignumber_1$5.BigNumber.from(result)];
                            }
                            catch (error) {
                                return [2 /*return*/, logger$f.throwError("bad result from backend", logger_1$f.Logger.errors.SERVER_ERROR, {
                                        method: "estimateGas",
                                        params: params,
                                        result: result,
                                        error: error
                                    })];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype._getAddress = function (addressOrName) {
            return __awaiter$6(this, void 0, void 0, function () {
                var address;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, addressOrName];
                        case 1:
                            addressOrName = _a.sent();
                            if (typeof (addressOrName) !== "string") {
                                logger$f.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                            }
                            return [4 /*yield*/, this.resolveName(addressOrName)];
                        case 2:
                            address = _a.sent();
                            if (address == null) {
                                logger$f.throwError("ENS name not configured", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
                                });
                            }
                            return [2 /*return*/, address];
                    }
                });
            });
        };
        BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {
            return __awaiter$6(this, void 0, void 0, function () {
                var blockNumber, params, _a;
                var _this = this;
                return __generator$6(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _b.sent();
                            return [4 /*yield*/, blockHashOrBlockTag];
                        case 2:
                            blockHashOrBlockTag = _b.sent();
                            blockNumber = -128;
                            params = {
                                includeTransactions: !!includeTransactions
                            };
                            if (!(0, bytes_1$7.isHexString)(blockHashOrBlockTag, 32)) return [3 /*break*/, 3];
                            params.blockHash = blockHashOrBlockTag;
                            return [3 /*break*/, 6];
                        case 3:
                            _b.trys.push([3, 5, , 6]);
                            _a = params;
                            return [4 /*yield*/, this._getBlockTag(blockHashOrBlockTag)];
                        case 4:
                            _a.blockTag = _b.sent();
                            if ((0, bytes_1$7.isHexString)(params.blockTag)) {
                                blockNumber = parseInt(params.blockTag.substring(2), 16);
                            }
                            return [3 /*break*/, 6];
                        case 5:
                            _b.sent();
                            logger$f.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/, (0, web_1$4.poll)(function () { return __awaiter$6(_this, void 0, void 0, function () {
                                var block, blockNumber_1, i, tx, confirmations, blockWithTxs;
                                var _this = this;
                                return __generator$6(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.perform("getBlock", params)];
                                        case 1:
                                            block = _a.sent();
                                            // Block was not found
                                            if (block == null) {
                                                // For blockhashes, if we didn't say it existed, that blockhash may
                                                // not exist. If we did see it though, perhaps from a log, we know
                                                // it exists, and this node is just not caught up yet.
                                                if (params.blockHash != null) {
                                                    if (this._emitted["b:" + params.blockHash] == null) {
                                                        return [2 /*return*/, null];
                                                    }
                                                }
                                                // For block tags, if we are asking for a future block, we return null
                                                if (params.blockTag != null) {
                                                    if (blockNumber > this._emitted.block) {
                                                        return [2 /*return*/, null];
                                                    }
                                                }
                                                // Retry on the next block
                                                return [2 /*return*/, undefined];
                                            }
                                            if (!includeTransactions) return [3 /*break*/, 8];
                                            blockNumber_1 = null;
                                            i = 0;
                                            _a.label = 2;
                                        case 2:
                                            if (!(i < block.transactions.length)) return [3 /*break*/, 7];
                                            tx = block.transactions[i];
                                            if (!(tx.blockNumber == null)) return [3 /*break*/, 3];
                                            tx.confirmations = 0;
                                            return [3 /*break*/, 6];
                                        case 3:
                                            if (!(tx.confirmations == null)) return [3 /*break*/, 6];
                                            if (!(blockNumber_1 == null)) return [3 /*break*/, 5];
                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                                        case 4:
                                            blockNumber_1 = _a.sent();
                                            _a.label = 5;
                                        case 5:
                                            confirmations = (blockNumber_1 - tx.blockNumber) + 1;
                                            if (confirmations <= 0) {
                                                confirmations = 1;
                                            }
                                            tx.confirmations = confirmations;
                                            _a.label = 6;
                                        case 6:
                                            i++;
                                            return [3 /*break*/, 2];
                                        case 7:
                                            blockWithTxs = this.formatter.blockWithTransactions(block);
                                            blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) { return _this._wrapTransaction(tx); });
                                            return [2 /*return*/, blockWithTxs];
                                        case 8: return [2 /*return*/, this.formatter.block(block)];
                                    }
                                });
                            }); }, { oncePoll: this })];
                    }
                });
            });
        };
        BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, false));
        };
        BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, true));
        };
        BaseProvider.prototype.getTransaction = function (transactionHash) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params;
                var _this = this;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, transactionHash];
                        case 2:
                            transactionHash = _a.sent();
                            params = { transactionHash: this.formatter.hash(transactionHash, true) };
                            return [2 /*return*/, (0, web_1$4.poll)(function () { return __awaiter$6(_this, void 0, void 0, function () {
                                    var result, tx, blockNumber, confirmations;
                                    return __generator$6(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.perform("getTransaction", params)];
                                            case 1:
                                                result = _a.sent();
                                                if (result == null) {
                                                    if (this._emitted["t:" + transactionHash] == null) {
                                                        return [2 /*return*/, null];
                                                    }
                                                    return [2 /*return*/, undefined];
                                                }
                                                tx = this.formatter.transactionResponse(result);
                                                if (!(tx.blockNumber == null)) return [3 /*break*/, 2];
                                                tx.confirmations = 0;
                                                return [3 /*break*/, 4];
                                            case 2:
                                                if (!(tx.confirmations == null)) return [3 /*break*/, 4];
                                                return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                                            case 3:
                                                blockNumber = _a.sent();
                                                confirmations = (blockNumber - tx.blockNumber) + 1;
                                                if (confirmations <= 0) {
                                                    confirmations = 1;
                                                }
                                                tx.confirmations = confirmations;
                                                _a.label = 4;
                                            case 4: return [2 /*return*/, this._wrapTransaction(tx)];
                                        }
                                    });
                                }); }, { oncePoll: this })];
                    }
                });
            });
        };
        BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params;
                var _this = this;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, transactionHash];
                        case 2:
                            transactionHash = _a.sent();
                            params = { transactionHash: this.formatter.hash(transactionHash, true) };
                            return [2 /*return*/, (0, web_1$4.poll)(function () { return __awaiter$6(_this, void 0, void 0, function () {
                                    var result, receipt, blockNumber, confirmations;
                                    return __generator$6(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.perform("getTransactionReceipt", params)];
                                            case 1:
                                                result = _a.sent();
                                                if (result == null) {
                                                    if (this._emitted["t:" + transactionHash] == null) {
                                                        return [2 /*return*/, null];
                                                    }
                                                    return [2 /*return*/, undefined];
                                                }
                                                // "geth-etc" returns receipts before they are ready
                                                if (result.blockHash == null) {
                                                    return [2 /*return*/, undefined];
                                                }
                                                receipt = this.formatter.receipt(result);
                                                if (!(receipt.blockNumber == null)) return [3 /*break*/, 2];
                                                receipt.confirmations = 0;
                                                return [3 /*break*/, 4];
                                            case 2:
                                                if (!(receipt.confirmations == null)) return [3 /*break*/, 4];
                                                return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                                            case 3:
                                                blockNumber = _a.sent();
                                                confirmations = (blockNumber - receipt.blockNumber) + 1;
                                                if (confirmations <= 0) {
                                                    confirmations = 1;
                                                }
                                                receipt.confirmations = confirmations;
                                                _a.label = 4;
                                            case 4: return [2 /*return*/, receipt];
                                        }
                                    });
                                }); }, { oncePoll: this })];
                    }
                });
            });
        };
        BaseProvider.prototype.getLogs = function (filter) {
            return __awaiter$6(this, void 0, void 0, function () {
                var params, logs;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, (0, properties_1$9.resolveProperties)({ filter: this._getFilter(filter) })];
                        case 2:
                            params = _a.sent();
                            return [4 /*yield*/, this.perform("getLogs", params)];
                        case 3:
                            logs = _a.sent();
                            logs.forEach(function (log) {
                                if (log.removed == null) {
                                    log.removed = false;
                                }
                            });
                            return [2 /*return*/, formatter_1$5.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
                    }
                });
            });
        };
        BaseProvider.prototype.getEtherPrice = function () {
            return __awaiter$6(this, void 0, void 0, function () {
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.perform("getEtherPrice", {})];
                    }
                });
            });
        };
        BaseProvider.prototype._getBlockTag = function (blockTag) {
            return __awaiter$6(this, void 0, void 0, function () {
                var blockNumber;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, blockTag];
                        case 1:
                            blockTag = _a.sent();
                            if (!(typeof (blockTag) === "number" && blockTag < 0)) return [3 /*break*/, 3];
                            if (blockTag % 1) {
                                logger$f.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                            }
                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                        case 2:
                            blockNumber = _a.sent();
                            blockNumber += blockTag;
                            if (blockNumber < 0) {
                                blockNumber = 0;
                            }
                            return [2 /*return*/, this.formatter.blockTag(blockNumber)];
                        case 3: return [2 /*return*/, this.formatter.blockTag(blockTag)];
                    }
                });
            });
        };
        BaseProvider.prototype.getResolver = function (name) {
            return __awaiter$6(this, void 0, void 0, function () {
                var currentName, addr, resolver, _a;
                return __generator$6(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            currentName = name;
                            _b.label = 1;
                        case 1:
                            if (currentName === "" || currentName === ".") {
                                return [2 /*return*/, null];
                            }
                            // Optimization since the eth node cannot change and does
                            // not have a wildcard resolver
                            if (name !== "eth" && currentName === "eth") {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, this._getResolver(currentName, "getResolver")];
                        case 2:
                            addr = _b.sent();
                            if (!(addr != null)) return [3 /*break*/, 5];
                            resolver = new Resolver(this, addr, name);
                            _a = currentName !== name;
                            if (!_a) return [3 /*break*/, 4];
                            return [4 /*yield*/, resolver.supportsWildcard()];
                        case 3:
                            _a = !(_b.sent());
                            _b.label = 4;
                        case 4:
                            // Legacy resolver found, using EIP-2544 so it isn't safe to use
                            if (_a) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, resolver];
                        case 5:
                            // Get the parent node
                            currentName = currentName.split(".").slice(1).join(".");
                            return [3 /*break*/, 1];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        BaseProvider.prototype._getResolver = function (name, operation) {
            return __awaiter$6(this, void 0, void 0, function () {
                var network, addrData;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (operation == null) {
                                operation = "ENS";
                            }
                            return [4 /*yield*/, this.getNetwork()];
                        case 1:
                            network = _a.sent();
                            // No ENS...
                            if (!network.ensAddress) {
                                logger$f.throwError("network does not support ENS", logger_1$f.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation, network: network.name });
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.call({
                                    to: network.ensAddress,
                                    data: ("0x0178b8bf" + (0, hash_1$2.namehash)(name).substring(2))
                                })];
                        case 3:
                            addrData = _a.sent();
                            return [2 /*return*/, this.formatter.callAddress(addrData)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/, null];
                    }
                });
            });
        };
        BaseProvider.prototype.resolveName = function (name) {
            return __awaiter$6(this, void 0, void 0, function () {
                var resolver;
                return __generator$6(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, name];
                        case 1:
                            name = _a.sent();
                            // If it is already an address, nothing to resolve
                            try {
                                return [2 /*return*/, Promise.resolve(this.formatter.address(name))];
                            }
                            catch (error) {
                                // If is is a hexstring, the address is bad (See #694)
                                if ((0, bytes_1$7.isHexString)(name)) {
                                    throw error;
                                }
                            }
                            if (typeof (name) !== "string") {
                                logger$f.throwArgumentError("invalid ENS name", "name", name);
                            }
                            return [4 /*yield*/, this.getResolver(name)];
                        case 2:
                            resolver = _a.sent();
                            if (!resolver) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, resolver.getAddress()];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        BaseProvider.prototype.lookupAddress = function (address) {
            return __awaiter$6(this, void 0, void 0, function () {
                var node, resolverAddr, name, _a, addr;
                return __generator$6(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, address];
                        case 1:
                            address = _b.sent();
                            address = this.formatter.address(address);
                            node = address.substring(2).toLowerCase() + ".addr.reverse";
                            return [4 /*yield*/, this._getResolver(node, "lookupAddress")];
                        case 2:
                            resolverAddr = _b.sent();
                            if (resolverAddr == null) {
                                return [2 /*return*/, null];
                            }
                            _a = _parseString;
                            return [4 /*yield*/, this.call({
                                    to: resolverAddr,
                                    data: ("0x691f3431" + (0, hash_1$2.namehash)(node).substring(2))
                                })];
                        case 3:
                            name = _a.apply(void 0, [_b.sent(), 0]);
                            return [4 /*yield*/, this.resolveName(name)];
                        case 4:
                            addr = _b.sent();
                            if (addr != address) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, name];
                    }
                });
            });
        };
        BaseProvider.prototype.getAvatar = function (nameOrAddress) {
            return __awaiter$6(this, void 0, void 0, function () {
                var resolver, address, node, resolverAddress, avatar_1, error_11, name_1, _a, error_12, avatar;
                return __generator$6(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            resolver = null;
                            if (!(0, bytes_1$7.isHexString)(nameOrAddress)) return [3 /*break*/, 10];
                            address = this.formatter.address(nameOrAddress);
                            node = address.substring(2).toLowerCase() + ".addr.reverse";
                            return [4 /*yield*/, this._getResolver(node, "getAvatar")];
                        case 1:
                            resolverAddress = _b.sent();
                            if (!resolverAddress) {
                                return [2 /*return*/, null];
                            }
                            // Try resolving the avatar against the addr.reverse resolver
                            resolver = new Resolver(this, resolverAddress, node);
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, resolver.getAvatar()];
                        case 3:
                            avatar_1 = _b.sent();
                            if (avatar_1) {
                                return [2 /*return*/, avatar_1.url];
                            }
                            return [3 /*break*/, 5];
                        case 4:
                            error_11 = _b.sent();
                            if (error_11.code !== logger_1$f.Logger.errors.CALL_EXCEPTION) {
                                throw error_11;
                            }
                            return [3 /*break*/, 5];
                        case 5:
                            _b.trys.push([5, 8, , 9]);
                            _a = _parseString;
                            return [4 /*yield*/, this.call({
                                    to: resolverAddress,
                                    data: ("0x691f3431" + (0, hash_1$2.namehash)(node).substring(2))
                                })];
                        case 6:
                            name_1 = _a.apply(void 0, [_b.sent(), 0]);
                            return [4 /*yield*/, this.getResolver(name_1)];
                        case 7:
                            resolver = _b.sent();
                            return [3 /*break*/, 9];
                        case 8:
                            error_12 = _b.sent();
                            if (error_12.code !== logger_1$f.Logger.errors.CALL_EXCEPTION) {
                                throw error_12;
                            }
                            return [2 /*return*/, null];
                        case 9: return [3 /*break*/, 12];
                        case 10: return [4 /*yield*/, this.getResolver(nameOrAddress)];
                        case 11:
                            // ENS name; forward lookup with wildcard
                            resolver = _b.sent();
                            if (!resolver) {
                                return [2 /*return*/, null];
                            }
                            _b.label = 12;
                        case 12: return [4 /*yield*/, resolver.getAvatar()];
                        case 13:
                            avatar = _b.sent();
                            if (avatar == null) {
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, avatar.url];
                    }
                });
            });
        };
        BaseProvider.prototype.perform = function (method, params) {
            return logger$f.throwError(method + " not implemented", logger_1$f.Logger.errors.NOT_IMPLEMENTED, { operation: method });
        };
        BaseProvider.prototype._startEvent = function (event) {
            this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
        };
        BaseProvider.prototype._stopEvent = function (event) {
            this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);
        };
        BaseProvider.prototype._addEventListener = function (eventName, listener, once) {
            var event = new Event$1(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
        };
        BaseProvider.prototype.on = function (eventName, listener) {
            return this._addEventListener(eventName, listener, false);
        };
        BaseProvider.prototype.once = function (eventName, listener) {
            return this._addEventListener(eventName, listener, true);
        };
        BaseProvider.prototype.emit = function (eventName) {
            var _this = this;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var result = false;
            var stopped = [];
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function (event) {
                if (event.tag !== eventTag) {
                    return true;
                }
                setTimeout(function () {
                    event.listener.apply(_this, args);
                }, 0);
                result = true;
                if (event.once) {
                    stopped.push(event);
                    return false;
                }
                return true;
            });
            stopped.forEach(function (event) { _this._stopEvent(event); });
            return result;
        };
        BaseProvider.prototype.listenerCount = function (eventName) {
            if (!eventName) {
                return this._events.length;
            }
            var eventTag = getEventTag(eventName);
            return this._events.filter(function (event) {
                return (event.tag === eventTag);
            }).length;
        };
        BaseProvider.prototype.listeners = function (eventName) {
            if (eventName == null) {
                return this._events.map(function (event) { return event.listener; });
            }
            var eventTag = getEventTag(eventName);
            return this._events
                .filter(function (event) { return (event.tag === eventTag); })
                .map(function (event) { return event.listener; });
        };
        BaseProvider.prototype.off = function (eventName, listener) {
            var _this = this;
            if (listener == null) {
                return this.removeAllListeners(eventName);
            }
            var stopped = [];
            var found = false;
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function (event) {
                if (event.tag !== eventTag || event.listener != listener) {
                    return true;
                }
                if (found) {
                    return true;
                }
                found = true;
                stopped.push(event);
                return false;
            });
            stopped.forEach(function (event) { _this._stopEvent(event); });
            return this;
        };
        BaseProvider.prototype.removeAllListeners = function (eventName) {
            var _this = this;
            var stopped = [];
            if (eventName == null) {
                stopped = this._events;
                this._events = [];
            }
            else {
                var eventTag_1 = getEventTag(eventName);
                this._events = this._events.filter(function (event) {
                    if (event.tag !== eventTag_1) {
                        return true;
                    }
                    stopped.push(event);
                    return false;
                });
            }
            stopped.forEach(function (event) { _this._stopEvent(event); });
            return this;
        };
        return BaseProvider;
    }(abstract_provider_1$1.Provider));
    baseProvider.BaseProvider = BaseProvider;

    var alchemyProvider = {};

    var websocketProvider = {};

    var jsonRpcProvider = {};

    var __extends$c = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$5 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$5 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(jsonRpcProvider, "__esModule", { value: true });
    jsonRpcProvider.JsonRpcProvider = jsonRpcProvider.JsonRpcSigner = void 0;
    var abstract_signer_1 = lib$g;
    var bignumber_1$4 = lib$t;
    var bytes_1$6 = lib$s;
    var hash_1$1 = lib$k;
    var properties_1$8 = lib$q;
    var strings_1$1 = lib$l;
    var transactions_1$1 = lib$f;
    var web_1$3 = lib$3;
    var logger_1$e = lib$r;
    var _version_1$e = _version$3;
    var logger$e = new logger_1$e.Logger(_version_1$e.version);
    var base_provider_1$2 = baseProvider;
    var errorGas = ["call", "estimateGas"];
    function spelunk(value, requireData) {
        if (value == null) {
            return null;
        }
        // These *are* the droids we're looking for.
        if (typeof (value.message) === "string" && value.message.match("reverted")) {
            var data = (0, bytes_1$6.isHexString)(value.data) ? value.data : null;
            if (!requireData || data) {
                return { message: value.message, data: data };
            }
        }
        // Spelunk further...
        if (typeof (value) === "object") {
            for (var key in value) {
                var result = spelunk(value[key], requireData);
                if (result) {
                    return result;
                }
            }
            return null;
        }
        // Might be a JSON string we can further descend...
        if (typeof (value) === "string") {
            try {
                return spelunk(JSON.parse(value), requireData);
            }
            catch (error) { }
        }
        return null;
    }
    function checkError$1(method, error, params) {
        var transaction = params.transaction || params.signedTransaction;
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call") {
            var result = spelunk(error, true);
            if (result) {
                return result.data;
            }
            // Nothing descriptive..
            logger$e.throwError("missing revert data in call exception; Transaction reverted without a reason string", logger_1$e.Logger.errors.CALL_EXCEPTION, {
                data: "0x",
                transaction: transaction,
                error: error
            });
        }
        if (method === "estimateGas") {
            // Try to find something, with a preference on SERVER_ERROR body
            var result = spelunk(error.body, false);
            if (result == null) {
                result = spelunk(error, false);
            }
            // Found "reverted", this is a CALL_EXCEPTION
            if (result) {
                logger$e.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$e.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                    reason: result.message,
                    method: method,
                    transaction: transaction,
                    error: error
                });
            }
        }
        // @TODO: Should we spelunk for message too?
        var message = error.message;
        if (error.code === logger_1$e.Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
            message = error.error.message;
        }
        else if (typeof (error.body) === "string") {
            message = error.body;
        }
        else if (typeof (error.responseText) === "string") {
            message = error.responseText;
        }
        message = (message || "").toLowerCase();
        // "insufficient funds for gas * price + value + cost(data)"
        if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
            logger$e.throwError("insufficient funds for intrinsic transaction cost", logger_1$e.Logger.errors.INSUFFICIENT_FUNDS, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "nonce too low"
        if (message.match(/nonce (is )?too low/i)) {
            logger$e.throwError("nonce has already been used", logger_1$e.Logger.errors.NONCE_EXPIRED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
            logger$e.throwError("replacement fee too low", logger_1$e.Logger.errors.REPLACEMENT_UNDERPRICED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/only replay-protected/i)) {
            logger$e.throwError("legacy pre-eip-155 transactions not supported", logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
            logger$e.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$e.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        throw error;
    }
    function timer(timeout) {
        return new Promise(function (resolve) {
            setTimeout(resolve, timeout);
        });
    }
    function getResult$1(payload) {
        if (payload.error) {
            // @TODO: not any
            var error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
        }
        return payload.result;
    }
    function getLowerCase(value) {
        if (value) {
            return value.toLowerCase();
        }
        return value;
    }
    var _constructorGuard = {};
    var JsonRpcSigner = /** @class */ (function (_super) {
        __extends$c(JsonRpcSigner, _super);
        function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
            var _this = _super.call(this) || this;
            if (constructorGuard !== _constructorGuard) {
                throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            (0, properties_1$8.defineReadOnly)(_this, "provider", provider);
            if (addressOrIndex == null) {
                addressOrIndex = 0;
            }
            if (typeof (addressOrIndex) === "string") {
                (0, properties_1$8.defineReadOnly)(_this, "_address", _this.provider.formatter.address(addressOrIndex));
                (0, properties_1$8.defineReadOnly)(_this, "_index", null);
            }
            else if (typeof (addressOrIndex) === "number") {
                (0, properties_1$8.defineReadOnly)(_this, "_index", addressOrIndex);
                (0, properties_1$8.defineReadOnly)(_this, "_address", null);
            }
            else {
                logger$e.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
            return _this;
        }
        JsonRpcSigner.prototype.connect = function (provider) {
            return logger$e.throwError("cannot alter JSON-RPC Signer connection", logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "connect"
            });
        };
        JsonRpcSigner.prototype.connectUnchecked = function () {
            return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
        };
        JsonRpcSigner.prototype.getAddress = function () {
            var _this = this;
            if (this._address) {
                return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then(function (accounts) {
                if (accounts.length <= _this._index) {
                    logger$e.throwError("unknown account #" + _this._index, logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress"
                    });
                }
                return _this.provider.formatter.address(accounts[_this._index]);
            });
        };
        JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {
            var _this = this;
            transaction = (0, properties_1$8.shallowCopy)(transaction);
            var fromAddress = this.getAddress().then(function (address) {
                if (address) {
                    address = address.toLowerCase();
                }
                return address;
            });
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (transaction.gasLimit == null) {
                var estimate = (0, properties_1$8.shallowCopy)(transaction);
                estimate.from = fromAddress;
                transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
                transaction.to = Promise.resolve(transaction.to).then(function (to) { return __awaiter$5(_this, void 0, void 0, function () {
                    var address;
                    return __generator$5(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (to == null) {
                                    return [2 /*return*/, null];
                                }
                                return [4 /*yield*/, this.provider.resolveName(to)];
                            case 1:
                                address = _a.sent();
                                if (address == null) {
                                    logger$e.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                                }
                                return [2 /*return*/, address];
                        }
                    });
                }); });
            }
            return (0, properties_1$8.resolveProperties)({
                tx: (0, properties_1$8.resolveProperties)(transaction),
                sender: fromAddress
            }).then(function (_a) {
                var tx = _a.tx, sender = _a.sender;
                if (tx.from != null) {
                    if (tx.from.toLowerCase() !== sender) {
                        logger$e.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                }
                else {
                    tx.from = sender;
                }
                var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });
                return _this.provider.send("eth_sendTransaction", [hexTx]).then(function (hash) {
                    return hash;
                }, function (error) {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$e.throwError("user rejected transaction", logger_1$e.Logger.errors.ACTION_REJECTED, {
                            action: "sendTransaction",
                            transaction: tx
                        });
                    }
                    return checkError$1("sendTransaction", error, hexTx);
                });
            });
        };
        JsonRpcSigner.prototype.signTransaction = function (transaction) {
            return logger$e.throwError("signing transactions is unsupported", logger_1$e.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "signTransaction"
            });
        };
        JsonRpcSigner.prototype.sendTransaction = function (transaction) {
            return __awaiter$5(this, void 0, void 0, function () {
                var blockNumber, hash, error_1;
                var _this = this;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];
                        case 1:
                            blockNumber = _a.sent();
                            return [4 /*yield*/, this.sendUncheckedTransaction(transaction)];
                        case 2:
                            hash = _a.sent();
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, (0, web_1$3.poll)(function () { return __awaiter$5(_this, void 0, void 0, function () {
                                    var tx;
                                    return __generator$5(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.provider.getTransaction(hash)];
                                            case 1:
                                                tx = _a.sent();
                                                if (tx === null) {
                                                    return [2 /*return*/, undefined];
                                                }
                                                return [2 /*return*/, this.provider._wrapTransaction(tx, hash, blockNumber)];
                                        }
                                    });
                                }); }, { oncePoll: this.provider })];
                        case 4: 
                        // Unfortunately, JSON-RPC only provides and opaque transaction hash
                        // for a response, and we need the actual transaction, so we poll
                        // for it; it should show up very quickly
                        return [2 /*return*/, _a.sent()];
                        case 5:
                            error_1 = _a.sent();
                            error_1.transactionHash = hash;
                            throw error_1;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        JsonRpcSigner.prototype.signMessage = function (message) {
            return __awaiter$5(this, void 0, void 0, function () {
                var data, address, error_2;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            data = ((typeof (message) === "string") ? (0, strings_1$1.toUtf8Bytes)(message) : message);
                            return [4 /*yield*/, this.getAddress()];
                        case 1:
                            address = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.provider.send("personal_sign", [(0, bytes_1$6.hexlify)(data), address.toLowerCase()])];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4:
                            error_2 = _a.sent();
                            if (typeof (error_2.message) === "string" && error_2.message.match(/user denied/i)) {
                                logger$e.throwError("user rejected signing", logger_1$e.Logger.errors.ACTION_REJECTED, {
                                    action: "signMessage",
                                    from: address,
                                    messageData: message
                                });
                            }
                            throw error_2;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        JsonRpcSigner.prototype._legacySignMessage = function (message) {
            return __awaiter$5(this, void 0, void 0, function () {
                var data, address, error_3;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            data = ((typeof (message) === "string") ? (0, strings_1$1.toUtf8Bytes)(message) : message);
                            return [4 /*yield*/, this.getAddress()];
                        case 1:
                            address = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.provider.send("eth_sign", [address.toLowerCase(), (0, bytes_1$6.hexlify)(data)])];
                        case 3: 
                        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                        return [2 /*return*/, _a.sent()];
                        case 4:
                            error_3 = _a.sent();
                            if (typeof (error_3.message) === "string" && error_3.message.match(/user denied/i)) {
                                logger$e.throwError("user rejected signing", logger_1$e.Logger.errors.ACTION_REJECTED, {
                                    action: "_legacySignMessage",
                                    from: address,
                                    messageData: message
                                });
                            }
                            throw error_3;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        JsonRpcSigner.prototype._signTypedData = function (domain, types, value) {
            return __awaiter$5(this, void 0, void 0, function () {
                var populated, address, error_4;
                var _this = this;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, hash_1$1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                                return _this.provider.resolveName(name);
                            })];
                        case 1:
                            populated = _a.sent();
                            return [4 /*yield*/, this.getAddress()];
                        case 2:
                            address = _a.sent();
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, this.provider.send("eth_signTypedData_v4", [
                                    address.toLowerCase(),
                                    JSON.stringify(hash_1$1._TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                                ])];
                        case 4: return [2 /*return*/, _a.sent()];
                        case 5:
                            error_4 = _a.sent();
                            if (typeof (error_4.message) === "string" && error_4.message.match(/user denied/i)) {
                                logger$e.throwError("user rejected signing", logger_1$e.Logger.errors.ACTION_REJECTED, {
                                    action: "_signTypedData",
                                    from: address,
                                    messageData: { domain: populated.domain, types: types, value: populated.value }
                                });
                            }
                            throw error_4;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        JsonRpcSigner.prototype.unlock = function (password) {
            return __awaiter$5(this, void 0, void 0, function () {
                var provider, address;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            provider = this.provider;
                            return [4 /*yield*/, this.getAddress()];
                        case 1:
                            address = _a.sent();
                            return [2 /*return*/, provider.send("personal_unlockAccount", [address.toLowerCase(), password, null])];
                    }
                });
            });
        };
        return JsonRpcSigner;
    }(abstract_signer_1.Signer));
    jsonRpcProvider.JsonRpcSigner = JsonRpcSigner;
    var UncheckedJsonRpcSigner = /** @class */ (function (_super) {
        __extends$c(UncheckedJsonRpcSigner, _super);
        function UncheckedJsonRpcSigner() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {
            var _this = this;
            return this.sendUncheckedTransaction(transaction).then(function (hash) {
                return {
                    hash: hash,
                    nonce: null,
                    gasLimit: null,
                    gasPrice: null,
                    data: null,
                    value: null,
                    chainId: null,
                    confirmations: 0,
                    from: null,
                    wait: function (confirmations) { return _this.provider.waitForTransaction(hash, confirmations); }
                };
            });
        };
        return UncheckedJsonRpcSigner;
    }(JsonRpcSigner));
    var allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true
    };
    var JsonRpcProvider = /** @class */ (function (_super) {
        __extends$c(JsonRpcProvider, _super);
        function JsonRpcProvider(url, network) {
            var _this = this;
            var networkOrReady = network;
            // The network is unknown, query the JSON-RPC for it
            if (networkOrReady == null) {
                networkOrReady = new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        _this.detectNetwork().then(function (network) {
                            resolve(network);
                        }, function (error) {
                            reject(error);
                        });
                    }, 0);
                });
            }
            _this = _super.call(this, networkOrReady) || this;
            // Default URL
            if (!url) {
                url = (0, properties_1$8.getStatic)(_this.constructor, "defaultUrl")();
            }
            if (typeof (url) === "string") {
                (0, properties_1$8.defineReadOnly)(_this, "connection", Object.freeze({
                    url: url
                }));
            }
            else {
                (0, properties_1$8.defineReadOnly)(_this, "connection", Object.freeze((0, properties_1$8.shallowCopy)(url)));
            }
            _this._nextId = 42;
            return _this;
        }
        Object.defineProperty(JsonRpcProvider.prototype, "_cache", {
            get: function () {
                if (this._eventLoopCache == null) {
                    this._eventLoopCache = {};
                }
                return this._eventLoopCache;
            },
            enumerable: false,
            configurable: true
        });
        JsonRpcProvider.defaultUrl = function () {
            return "http:/\/localhost:8545";
        };
        JsonRpcProvider.prototype.detectNetwork = function () {
            var _this = this;
            if (!this._cache["detectNetwork"]) {
                this._cache["detectNetwork"] = this._uncachedDetectNetwork();
                // Clear this cache at the beginning of the next event loop
                setTimeout(function () {
                    _this._cache["detectNetwork"] = null;
                }, 0);
            }
            return this._cache["detectNetwork"];
        };
        JsonRpcProvider.prototype._uncachedDetectNetwork = function () {
            return __awaiter$5(this, void 0, void 0, function () {
                var chainId, getNetwork;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, timer(0)];
                        case 1:
                            _a.sent();
                            chainId = null;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 9]);
                            return [4 /*yield*/, this.send("eth_chainId", [])];
                        case 3:
                            chainId = _a.sent();
                            return [3 /*break*/, 9];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 7, , 8]);
                            return [4 /*yield*/, this.send("net_version", [])];
                        case 6:
                            chainId = _a.sent();
                            return [3 /*break*/, 8];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 8: return [3 /*break*/, 9];
                        case 9:
                            if (chainId != null) {
                                getNetwork = (0, properties_1$8.getStatic)(this.constructor, "getNetwork");
                                try {
                                    return [2 /*return*/, getNetwork(bignumber_1$4.BigNumber.from(chainId).toNumber())];
                                }
                                catch (error) {
                                    return [2 /*return*/, logger$e.throwError("could not detect network", logger_1$e.Logger.errors.NETWORK_ERROR, {
                                            chainId: chainId,
                                            event: "invalidNetwork",
                                            serverError: error
                                        })];
                                }
                            }
                            return [2 /*return*/, logger$e.throwError("could not detect network", logger_1$e.Logger.errors.NETWORK_ERROR, {
                                    event: "noNetwork"
                                })];
                    }
                });
            });
        };
        JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
        };
        JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
        };
        JsonRpcProvider.prototype.listAccounts = function () {
            var _this = this;
            return this.send("eth_accounts", []).then(function (accounts) {
                return accounts.map(function (a) { return _this.formatter.address(a); });
            });
        };
        JsonRpcProvider.prototype.send = function (method, params) {
            var _this = this;
            var request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            this.emit("debug", {
                action: "request",
                request: (0, properties_1$8.deepCopy)(request),
                provider: this
            });
            // We can expand this in the future to any call, but for now these
            // are the biggest wins and do not require any serializing parameters.
            var cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
            if (cache && this._cache[method]) {
                return this._cache[method];
            }
            var result = (0, web_1$3.fetchJson)(this.connection, JSON.stringify(request), getResult$1).then(function (result) {
                _this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: _this
                });
                return result;
            }, function (error) {
                _this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: _this
                });
                throw error;
            });
            // Cache the fetch, but clear it on the next event loop
            if (cache) {
                this._cache[method] = result;
                setTimeout(function () {
                    _this._cache[method] = null;
                }, 0);
            }
            return result;
        };
        JsonRpcProvider.prototype.prepareRequest = function (method, params) {
            switch (method) {
                case "getBlockNumber":
                    return ["eth_blockNumber", []];
                case "getGasPrice":
                    return ["eth_gasPrice", []];
                case "getBalance":
                    return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
                case "getTransactionCount":
                    return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
                case "getCode":
                    return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
                case "getStorageAt":
                    return ["eth_getStorageAt", [getLowerCase(params.address), (0, bytes_1$6.hexZeroPad)(params.position, 32), params.blockTag]];
                case "sendTransaction":
                    return ["eth_sendRawTransaction", [params.signedTransaction]];
                case "getBlock":
                    if (params.blockTag) {
                        return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                    }
                    else if (params.blockHash) {
                        return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                    }
                    return null;
                case "getTransaction":
                    return ["eth_getTransactionByHash", [params.transactionHash]];
                case "getTransactionReceipt":
                    return ["eth_getTransactionReceipt", [params.transactionHash]];
                case "call": {
                    var hexlifyTransaction = (0, properties_1$8.getStatic)(this.constructor, "hexlifyTransaction");
                    return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
                }
                case "estimateGas": {
                    var hexlifyTransaction = (0, properties_1$8.getStatic)(this.constructor, "hexlifyTransaction");
                    return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
                }
                case "getLogs":
                    if (params.filter && params.filter.address != null) {
                        params.filter.address = getLowerCase(params.filter.address);
                    }
                    return ["eth_getLogs", [params.filter]];
            }
            return null;
        };
        JsonRpcProvider.prototype.perform = function (method, params) {
            return __awaiter$5(this, void 0, void 0, function () {
                var tx, feeData, args, error_7;
                return __generator$5(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(method === "call" || method === "estimateGas")) return [3 /*break*/, 2];
                            tx = params.transaction;
                            if (!(tx && tx.type != null && bignumber_1$4.BigNumber.from(tx.type).isZero())) return [3 /*break*/, 2];
                            if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getFeeData()];
                        case 1:
                            feeData = _a.sent();
                            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                                // Network doesn't know about EIP-1559 (and hence type)
                                params = (0, properties_1$8.shallowCopy)(params);
                                params.transaction = (0, properties_1$8.shallowCopy)(tx);
                                delete params.transaction.type;
                            }
                            _a.label = 2;
                        case 2:
                            args = this.prepareRequest(method, params);
                            if (args == null) {
                                logger$e.throwError(method + " not implemented", logger_1$e.Logger.errors.NOT_IMPLEMENTED, { operation: method });
                            }
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, this.send(args[0], args[1])];
                        case 4: return [2 /*return*/, _a.sent()];
                        case 5:
                            error_7 = _a.sent();
                            return [2 /*return*/, checkError$1(method, error_7, params)];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        JsonRpcProvider.prototype._startEvent = function (event) {
            if (event.tag === "pending") {
                this._startPending();
            }
            _super.prototype._startEvent.call(this, event);
        };
        JsonRpcProvider.prototype._startPending = function () {
            if (this._pendingFilter != null) {
                return;
            }
            var self = this;
            var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function (filterId) {
                function poll() {
                    self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                        if (self._pendingFilter != pendingFilter) {
                            return null;
                        }
                        var seq = Promise.resolve();
                        hashes.forEach(function (hash) {
                            // @TODO: This should be garbage collected at some point... How? When?
                            self._emitted["t:" + hash.toLowerCase()] = "pending";
                            seq = seq.then(function () {
                                return self.getTransaction(hash).then(function (tx) {
                                    self.emit("pending", tx);
                                    return null;
                                });
                            });
                        });
                        return seq.then(function () {
                            return timer(1000);
                        });
                    }).then(function () {
                        if (self._pendingFilter != pendingFilter) {
                            self.send("eth_uninstallFilter", [filterId]);
                            return;
                        }
                        setTimeout(function () { poll(); }, 0);
                        return null;
                    }).catch(function (error) { });
                }
                poll();
                return filterId;
            }).catch(function (error) { });
        };
        JsonRpcProvider.prototype._stopEvent = function (event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
                this._pendingFilter = null;
            }
            _super.prototype._stopEvent.call(this, event);
        };
        // Convert an ethers.js transaction into a JSON-RPC transaction
        //  - gasLimit => gas
        //  - All values hexlified
        //  - All numeric values zero-striped
        //  - All addresses are lowercased
        // NOTE: This allows a TransactionRequest, but all values should be resolved
        //       before this is called
        // @TODO: This will likely be removed in future versions and prepareRequest
        //        will be the preferred method for this.
        JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {
            // Check only allowed properties are given
            var allowed = (0, properties_1$8.shallowCopy)(allowedTransactionKeys);
            if (allowExtra) {
                for (var key in allowExtra) {
                    if (allowExtra[key]) {
                        allowed[key] = true;
                    }
                }
            }
            (0, properties_1$8.checkProperties)(transaction, allowed);
            var result = {};
            // JSON-RPC now requires numeric values to be "quantity" values
            ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                var value = (0, bytes_1$6.hexValue)(bignumber_1$4.BigNumber.from(transaction[key]));
                if (key === "gasLimit") {
                    key = "gas";
                }
                result[key] = value;
            });
            ["from", "to", "data"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                result[key] = (0, bytes_1$6.hexlify)(transaction[key]);
            });
            if (transaction.accessList) {
                result["accessList"] = (0, transactions_1$1.accessListify)(transaction.accessList);
            }
            return result;
        };
        return JsonRpcProvider;
    }(base_provider_1$2.BaseProvider));
    jsonRpcProvider.JsonRpcProvider = JsonRpcProvider;

    var browserWs = {};

    Object.defineProperty(browserWs, "__esModule", { value: true });
    var WebSocket_1 = browserWs.WebSocket = void 0;
    var logger_1$d = lib$r;
    var _version_1$d = _version$3;
    var WS = null;
    WebSocket_1 = browserWs.WebSocket = WS;
    try {
        WebSocket_1 = browserWs.WebSocket = WS = WebSocket;
        if (WS == null) {
            throw new Error("inject please");
        }
    }
    catch (error) {
        var logger_2 = new logger_1$d.Logger(_version_1$d.version);
        WebSocket_1 = browserWs.WebSocket = WS = function () {
            logger_2.throwError("WebSockets not supported in this environment", logger_1$d.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new WebSocket()"
            });
        };
    }

    var __extends$b = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$4 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$4 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(websocketProvider, "__esModule", { value: true });
    websocketProvider.WebSocketProvider = void 0;
    var bignumber_1$3 = lib$t;
    var properties_1$7 = lib$q;
    var json_rpc_provider_1$3 = jsonRpcProvider;
    var ws_1 = browserWs;
    var logger_1$c = lib$r;
    var _version_1$c = _version$3;
    var logger$d = new logger_1$c.Logger(_version_1$c.version);
    /**
     *  Notes:
     *
     *  This provider differs a bit from the polling providers. One main
     *  difference is how it handles consistency. The polling providers
     *  will stall responses to ensure a consistent state, while this
     *  WebSocket provider assumes the connected backend will manage this.
     *
     *  For example, if a polling provider emits an event which indicates
     *  the event occurred in blockhash XXX, a call to fetch that block by
     *  its hash XXX, if not present will retry until it is present. This
     *  can occur when querying a pool of nodes that are mildly out of sync
     *  with each other.
     */
    var NextId = 1;
    // For more info about the Real-time Event API see:
    //   https://geth.ethereum.org/docs/rpc/pubsub
    var WebSocketProvider = /** @class */ (function (_super) {
        __extends$b(WebSocketProvider, _super);
        function WebSocketProvider(url, network) {
            var _this = this;
            // This will be added in the future; please open an issue to expedite
            if (network === "any") {
                logger$d.throwError("WebSocketProvider does not support 'any' network yet", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "network:any"
                });
            }
            if (typeof (url) === "string") {
                _this = _super.call(this, url, network) || this;
            }
            else {
                _this = _super.call(this, "_websocket", network) || this;
            }
            _this._pollingInterval = -1;
            _this._wsReady = false;
            if (typeof (url) === "string") {
                (0, properties_1$7.defineReadOnly)(_this, "_websocket", new ws_1.WebSocket(_this.connection.url));
            }
            else {
                (0, properties_1$7.defineReadOnly)(_this, "_websocket", url);
            }
            (0, properties_1$7.defineReadOnly)(_this, "_requests", {});
            (0, properties_1$7.defineReadOnly)(_this, "_subs", {});
            (0, properties_1$7.defineReadOnly)(_this, "_subIds", {});
            (0, properties_1$7.defineReadOnly)(_this, "_detectNetwork", _super.prototype.detectNetwork.call(_this));
            // Stall sending requests until the socket is open...
            _this.websocket.onopen = function () {
                _this._wsReady = true;
                Object.keys(_this._requests).forEach(function (id) {
                    _this.websocket.send(_this._requests[id].payload);
                });
            };
            _this.websocket.onmessage = function (messageEvent) {
                var data = messageEvent.data;
                var result = JSON.parse(data);
                if (result.id != null) {
                    var id = String(result.id);
                    var request = _this._requests[id];
                    delete _this._requests[id];
                    if (result.result !== undefined) {
                        request.callback(null, result.result);
                        _this.emit("debug", {
                            action: "response",
                            request: JSON.parse(request.payload),
                            response: result.result,
                            provider: _this
                        });
                    }
                    else {
                        var error = null;
                        if (result.error) {
                            error = new Error(result.error.message || "unknown error");
                            (0, properties_1$7.defineReadOnly)(error, "code", result.error.code || null);
                            (0, properties_1$7.defineReadOnly)(error, "response", data);
                        }
                        else {
                            error = new Error("unknown error");
                        }
                        request.callback(error, undefined);
                        _this.emit("debug", {
                            action: "response",
                            error: error,
                            request: JSON.parse(request.payload),
                            provider: _this
                        });
                    }
                }
                else if (result.method === "eth_subscription") {
                    // Subscription...
                    var sub = _this._subs[result.params.subscription];
                    if (sub) {
                        //this.emit.apply(this,                  );
                        sub.processFunc(result.params.result);
                    }
                }
                else {
                    console.warn("this should not happen");
                }
            };
            // This Provider does not actually poll, but we want to trigger
            // poll events for things that depend on them (like stalling for
            // block and transaction lookups)
            var fauxPoll = setInterval(function () {
                _this.emit("poll");
            }, 1000);
            if (fauxPoll.unref) {
                fauxPoll.unref();
            }
            return _this;
        }
        Object.defineProperty(WebSocketProvider.prototype, "websocket", {
            // Cannot narrow the type of _websocket, as that is not backwards compatible
            // so we add a getter and let the WebSocket be a public API.
            get: function () { return this._websocket; },
            enumerable: false,
            configurable: true
        });
        WebSocketProvider.prototype.detectNetwork = function () {
            return this._detectNetwork;
        };
        Object.defineProperty(WebSocketProvider.prototype, "pollingInterval", {
            get: function () {
                return 0;
            },
            set: function (value) {
                logger$d.throwError("cannot set polling interval on WebSocketProvider", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setPollingInterval"
                });
            },
            enumerable: false,
            configurable: true
        });
        WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {
            logger$d.throwError("cannot reset events block on WebSocketProvider", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resetEventBlock"
            });
        };
        WebSocketProvider.prototype.poll = function () {
            return __awaiter$4(this, void 0, void 0, function () {
                return __generator$4(this, function (_a) {
                    return [2 /*return*/, null];
                });
            });
        };
        Object.defineProperty(WebSocketProvider.prototype, "polling", {
            set: function (value) {
                if (!value) {
                    return;
                }
                logger$d.throwError("cannot set polling on WebSocketProvider", logger_1$c.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setPolling"
                });
            },
            enumerable: false,
            configurable: true
        });
        WebSocketProvider.prototype.send = function (method, params) {
            var _this = this;
            var rid = NextId++;
            return new Promise(function (resolve, reject) {
                function callback(error, result) {
                    if (error) {
                        return reject(error);
                    }
                    return resolve(result);
                }
                var payload = JSON.stringify({
                    method: method,
                    params: params,
                    id: rid,
                    jsonrpc: "2.0"
                });
                _this.emit("debug", {
                    action: "request",
                    request: JSON.parse(payload),
                    provider: _this
                });
                _this._requests[String(rid)] = { callback: callback, payload: payload };
                if (_this._wsReady) {
                    _this.websocket.send(payload);
                }
            });
        };
        WebSocketProvider.defaultUrl = function () {
            return "ws:/\/localhost:8546";
        };
        WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {
            return __awaiter$4(this, void 0, void 0, function () {
                var subIdPromise, subId;
                var _this = this;
                return __generator$4(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            subIdPromise = this._subIds[tag];
                            if (subIdPromise == null) {
                                subIdPromise = Promise.all(param).then(function (param) {
                                    return _this.send("eth_subscribe", param);
                                });
                                this._subIds[tag] = subIdPromise;
                            }
                            return [4 /*yield*/, subIdPromise];
                        case 1:
                            subId = _a.sent();
                            this._subs[subId] = { tag: tag, processFunc: processFunc };
                            return [2 /*return*/];
                    }
                });
            });
        };
        WebSocketProvider.prototype._startEvent = function (event) {
            var _this = this;
            switch (event.type) {
                case "block":
                    this._subscribe("block", ["newHeads"], function (result) {
                        var blockNumber = bignumber_1$3.BigNumber.from(result.number).toNumber();
                        _this._emitted.block = blockNumber;
                        _this.emit("block", blockNumber);
                    });
                    break;
                case "pending":
                    this._subscribe("pending", ["newPendingTransactions"], function (result) {
                        _this.emit("pending", result);
                    });
                    break;
                case "filter":
                    this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function (result) {
                        if (result.removed == null) {
                            result.removed = false;
                        }
                        _this.emit(event.filter, _this.formatter.filterLog(result));
                    });
                    break;
                case "tx": {
                    var emitReceipt_1 = function (event) {
                        var hash = event.hash;
                        _this.getTransactionReceipt(hash).then(function (receipt) {
                            if (!receipt) {
                                return;
                            }
                            _this.emit(hash, receipt);
                        });
                    };
                    // In case it is already mined
                    emitReceipt_1(event);
                    // To keep things simple, we start up a single newHeads subscription
                    // to keep an eye out for transactions we are watching for.
                    // Starting a subscription for an event (i.e. "tx") that is already
                    // running is (basically) a nop.
                    this._subscribe("tx", ["newHeads"], function (result) {
                        _this._events.filter(function (e) { return (e.type === "tx"); }).forEach(emitReceipt_1);
                    });
                    break;
                }
                // Nothing is needed
                case "debug":
                case "poll":
                case "willPoll":
                case "didPoll":
                case "error":
                    break;
                default:
                    console.log("unhandled:", event);
                    break;
            }
        };
        WebSocketProvider.prototype._stopEvent = function (event) {
            var _this = this;
            var tag = event.tag;
            if (event.type === "tx") {
                // There are remaining transaction event listeners
                if (this._events.filter(function (e) { return (e.type === "tx"); }).length) {
                    return;
                }
                tag = "tx";
            }
            else if (this.listenerCount(event.event)) {
                // There are remaining event listeners
                return;
            }
            var subId = this._subIds[tag];
            if (!subId) {
                return;
            }
            delete this._subIds[tag];
            subId.then(function (subId) {
                if (!_this._subs[subId]) {
                    return;
                }
                delete _this._subs[subId];
                _this.send("eth_unsubscribe", [subId]);
            });
        };
        WebSocketProvider.prototype.destroy = function () {
            return __awaiter$4(this, void 0, void 0, function () {
                var _this = this;
                return __generator$4(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.websocket.readyState === ws_1.WebSocket.CONNECTING)) return [3 /*break*/, 2];
                            return [4 /*yield*/, (new Promise(function (resolve) {
                                    _this.websocket.onopen = function () {
                                        resolve(true);
                                    };
                                    _this.websocket.onerror = function () {
                                        resolve(false);
                                    };
                                }))];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            // Hangup
                            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
                            this.websocket.close(1000);
                            return [2 /*return*/];
                    }
                });
            });
        };
        return WebSocketProvider;
    }(json_rpc_provider_1$3.JsonRpcProvider));
    websocketProvider.WebSocketProvider = WebSocketProvider;

    var urlJsonRpcProvider = {};

    var __extends$a = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$3 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$3 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(urlJsonRpcProvider, "__esModule", { value: true });
    urlJsonRpcProvider.UrlJsonRpcProvider = urlJsonRpcProvider.StaticJsonRpcProvider = void 0;
    var properties_1$6 = lib$q;
    var logger_1$b = lib$r;
    var _version_1$b = _version$3;
    var logger$c = new logger_1$b.Logger(_version_1$b.version);
    var json_rpc_provider_1$2 = jsonRpcProvider;
    // A StaticJsonRpcProvider is useful when you *know* for certain that
    // the backend will never change, as it never calls eth_chainId to
    // verify its backend. However, if the backend does change, the effects
    // are undefined and may include:
    // - inconsistent results
    // - locking up the UI
    // - block skew warnings
    // - wrong results
    // If the network is not explicit (i.e. auto-detection is expected), the
    // node MUST be running and available to respond to requests BEFORE this
    // is instantiated.
    var StaticJsonRpcProvider = /** @class */ (function (_super) {
        __extends$a(StaticJsonRpcProvider, _super);
        function StaticJsonRpcProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StaticJsonRpcProvider.prototype.detectNetwork = function () {
            return __awaiter$3(this, void 0, void 0, function () {
                var network;
                return __generator$3(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            network = this.network;
                            if (!(network == null)) return [3 /*break*/, 2];
                            return [4 /*yield*/, _super.prototype.detectNetwork.call(this)];
                        case 1:
                            network = _a.sent();
                            if (!network) {
                                logger$c.throwError("no network detected", logger_1$b.Logger.errors.UNKNOWN_ERROR, {});
                            }
                            // If still not set, set it
                            if (this._network == null) {
                                // A static network does not support "any"
                                (0, properties_1$6.defineReadOnly)(this, "_network", network);
                                this.emit("network", network, null);
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/, network];
                    }
                });
            });
        };
        return StaticJsonRpcProvider;
    }(json_rpc_provider_1$2.JsonRpcProvider));
    urlJsonRpcProvider.StaticJsonRpcProvider = StaticJsonRpcProvider;
    var UrlJsonRpcProvider = /** @class */ (function (_super) {
        __extends$a(UrlJsonRpcProvider, _super);
        function UrlJsonRpcProvider(network, apiKey) {
            var _newTarget = this.constructor;
            var _this = this;
            logger$c.checkAbstract(_newTarget, UrlJsonRpcProvider);
            // Normalize the Network and API Key
            network = (0, properties_1$6.getStatic)(_newTarget, "getNetwork")(network);
            apiKey = (0, properties_1$6.getStatic)(_newTarget, "getApiKey")(apiKey);
            var connection = (0, properties_1$6.getStatic)(_newTarget, "getUrl")(network, apiKey);
            _this = _super.call(this, connection, network) || this;
            if (typeof (apiKey) === "string") {
                (0, properties_1$6.defineReadOnly)(_this, "apiKey", apiKey);
            }
            else if (apiKey != null) {
                Object.keys(apiKey).forEach(function (key) {
                    (0, properties_1$6.defineReadOnly)(_this, key, apiKey[key]);
                });
            }
            return _this;
        }
        UrlJsonRpcProvider.prototype._startPending = function () {
            logger$c.warn("WARNING: API provider does not support pending filters");
        };
        UrlJsonRpcProvider.prototype.isCommunityResource = function () {
            return false;
        };
        UrlJsonRpcProvider.prototype.getSigner = function (address) {
            return logger$c.throwError("API provider does not support signing", logger_1$b.Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
        };
        UrlJsonRpcProvider.prototype.listAccounts = function () {
            return Promise.resolve([]);
        };
        // Return a defaultApiKey if null, otherwise validate the API key
        UrlJsonRpcProvider.getApiKey = function (apiKey) {
            return apiKey;
        };
        // Returns the url or connection for the given network and API key. The
        // API key will have been sanitized by the getApiKey first, so any validation
        // or transformations can be done there.
        UrlJsonRpcProvider.getUrl = function (network, apiKey) {
            return logger$c.throwError("not implemented; sub-classes must override getUrl", logger_1$b.Logger.errors.NOT_IMPLEMENTED, {
                operation: "getUrl"
            });
        };
        return UrlJsonRpcProvider;
    }(StaticJsonRpcProvider));
    urlJsonRpcProvider.UrlJsonRpcProvider = UrlJsonRpcProvider;

    var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(alchemyProvider, "__esModule", { value: true });
    alchemyProvider.AlchemyProvider = alchemyProvider.AlchemyWebSocketProvider = void 0;
    var properties_1$5 = lib$q;
    var formatter_1$4 = formatter;
    var websocket_provider_1$1 = websocketProvider;
    var logger_1$a = lib$r;
    var _version_1$a = _version$3;
    var logger$b = new logger_1$a.Logger(_version_1$a.version);
    var url_json_rpc_provider_1$5 = urlJsonRpcProvider;
    // This key was provided to ethers.js by Alchemy to be used by the
    // default provider, but it is recommended that for your own
    // production environments, that you acquire your own API key at:
    //   https://dashboard.alchemyapi.io
    var defaultApiKey$2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    var AlchemyWebSocketProvider = /** @class */ (function (_super) {
        __extends$9(AlchemyWebSocketProvider, _super);
        function AlchemyWebSocketProvider(network, apiKey) {
            var _this = this;
            var provider = new AlchemyProvider(network, apiKey);
            var url = provider.connection.url.replace(/^http/i, "ws")
                .replace(".alchemyapi.", ".ws.alchemyapi.");
            _this = _super.call(this, url, provider.network) || this;
            (0, properties_1$5.defineReadOnly)(_this, "apiKey", provider.apiKey);
            return _this;
        }
        AlchemyWebSocketProvider.prototype.isCommunityResource = function () {
            return (this.apiKey === defaultApiKey$2);
        };
        return AlchemyWebSocketProvider;
    }(websocket_provider_1$1.WebSocketProvider));
    alchemyProvider.AlchemyWebSocketProvider = AlchemyWebSocketProvider;
    var AlchemyProvider = /** @class */ (function (_super) {
        __extends$9(AlchemyProvider, _super);
        function AlchemyProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AlchemyProvider.getWebSocketProvider = function (network, apiKey) {
            return new AlchemyWebSocketProvider(network, apiKey);
        };
        AlchemyProvider.getApiKey = function (apiKey) {
            if (apiKey == null) {
                return defaultApiKey$2;
            }
            if (apiKey && typeof (apiKey) !== "string") {
                logger$b.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
        };
        AlchemyProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network.name) {
                case "homestead":
                    host = "eth-mainnet.alchemyapi.io/v2/";
                    break;
                case "goerli":
                    host = "eth-goerli.g.alchemy.com/v2/";
                    break;
                case "matic":
                    host = "polygon-mainnet.g.alchemy.com/v2/";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.g.alchemy.com/v2/";
                    break;
                case "arbitrum":
                    host = "arb-mainnet.g.alchemy.com/v2/";
                    break;
                case "arbitrum-goerli":
                    host = "arb-goerli.g.alchemy.com/v2/";
                    break;
                case "optimism":
                    host = "opt-mainnet.g.alchemy.com/v2/";
                    break;
                case "optimism-goerli":
                    host = "opt-goerli.g.alchemy.com/v2/";
                    break;
                default:
                    logger$b.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return {
                allowGzip: true,
                url: ("https:/" + "/" + host + apiKey),
                throttleCallback: function (attempt, url) {
                    if (apiKey === defaultApiKey$2) {
                        (0, formatter_1$4.showThrottleMessage)();
                    }
                    return Promise.resolve(true);
                }
            };
        };
        AlchemyProvider.prototype.isCommunityResource = function () {
            return (this.apiKey === defaultApiKey$2);
        };
        return AlchemyProvider;
    }(url_json_rpc_provider_1$5.UrlJsonRpcProvider));
    alchemyProvider.AlchemyProvider = AlchemyProvider;

    var ankrProvider = {};

    var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(ankrProvider, "__esModule", { value: true });
    ankrProvider.AnkrProvider = void 0;
    var formatter_1$3 = formatter;
    var url_json_rpc_provider_1$4 = urlJsonRpcProvider;
    var logger_1$9 = lib$r;
    var _version_1$9 = _version$3;
    var logger$a = new logger_1$9.Logger(_version_1$9.version);
    var defaultApiKey$1 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
        switch (name) {
            case "homestead":
                return "rpc.ankr.com/eth/";
            case "ropsten":
                return "rpc.ankr.com/eth_ropsten/";
            case "rinkeby":
                return "rpc.ankr.com/eth_rinkeby/";
            case "goerli":
                return "rpc.ankr.com/eth_goerli/";
            case "matic":
                return "rpc.ankr.com/polygon/";
            case "arbitrum":
                return "rpc.ankr.com/arbitrum/";
        }
        return logger$a.throwArgumentError("unsupported network", "name", name);
    }
    var AnkrProvider = /** @class */ (function (_super) {
        __extends$8(AnkrProvider, _super);
        function AnkrProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnkrProvider.prototype.isCommunityResource = function () {
            return (this.apiKey === defaultApiKey$1);
        };
        AnkrProvider.getApiKey = function (apiKey) {
            if (apiKey == null) {
                return defaultApiKey$1;
            }
            return apiKey;
        };
        AnkrProvider.getUrl = function (network, apiKey) {
            if (apiKey == null) {
                apiKey = defaultApiKey$1;
            }
            var connection = {
                allowGzip: true,
                url: ("https:/\/" + getHost(network.name) + apiKey),
                throttleCallback: function (attempt, url) {
                    if (apiKey.apiKey === defaultApiKey$1) {
                        (0, formatter_1$3.showThrottleMessage)();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        };
        return AnkrProvider;
    }(url_json_rpc_provider_1$4.UrlJsonRpcProvider));
    ankrProvider.AnkrProvider = AnkrProvider;

    var cloudflareProvider = {};

    var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$2 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(cloudflareProvider, "__esModule", { value: true });
    cloudflareProvider.CloudflareProvider = void 0;
    var url_json_rpc_provider_1$3 = urlJsonRpcProvider;
    var logger_1$8 = lib$r;
    var _version_1$8 = _version$3;
    var logger$9 = new logger_1$8.Logger(_version_1$8.version);
    var CloudflareProvider = /** @class */ (function (_super) {
        __extends$7(CloudflareProvider, _super);
        function CloudflareProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CloudflareProvider.getApiKey = function (apiKey) {
            if (apiKey != null) {
                logger$9.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
        };
        CloudflareProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://cloudflare-eth.com/";
                    break;
                default:
                    logger$9.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
        };
        CloudflareProvider.prototype.perform = function (method, params) {
            return __awaiter$2(this, void 0, void 0, function () {
                var block;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(method === "getBlockNumber")) return [3 /*break*/, 2];
                            return [4 /*yield*/, _super.prototype.perform.call(this, "getBlock", { blockTag: "latest" })];
                        case 1:
                            block = _a.sent();
                            return [2 /*return*/, block.number];
                        case 2: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
                    }
                });
            });
        };
        return CloudflareProvider;
    }(url_json_rpc_provider_1$3.UrlJsonRpcProvider));
    cloudflareProvider.CloudflareProvider = CloudflareProvider;

    var etherscanProvider = {};

    var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator$1 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(etherscanProvider, "__esModule", { value: true });
    etherscanProvider.EtherscanProvider = void 0;
    var bytes_1$5 = lib$s;
    var properties_1$4 = lib$q;
    var transactions_1 = lib$f;
    var web_1$2 = lib$3;
    var formatter_1$2 = formatter;
    var logger_1$7 = lib$r;
    var _version_1$7 = _version$3;
    var logger$8 = new logger_1$7.Logger(_version_1$7.version);
    var base_provider_1$1 = baseProvider;
    // The transaction has already been sanitized by the calls in Provider
    function getTransactionPostData(transaction) {
        var result = {};
        for (var key in transaction) {
            if (transaction[key] == null) {
                continue;
            }
            var value = transaction[key];
            if (key === "type" && value === 0) {
                continue;
            }
            // Quantity-types require no leading zero, unless 0
            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
                value = (0, bytes_1$5.hexValue)((0, bytes_1$5.hexlify)(value));
            }
            else if (key === "accessList") {
                value = "[" + (0, transactions_1.accessListify)(value).map(function (set) {
                    return "{address:\"" + set.address + "\",storageKeys:[\"" + set.storageKeys.join('","') + "\"]}";
                }).join(",") + "]";
            }
            else {
                value = (0, bytes_1$5.hexlify)(value);
            }
            result[key] = value;
        }
        return result;
    }
    function getResult(result) {
        // getLogs, getHistory have weird success responses
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            return result.result;
        }
        if (result.status != 1 || typeof (result.message) !== "string" || !result.message.match(/^OK/)) {
            var error = new Error("invalid response");
            error.result = JSON.stringify(result);
            if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                error.throttleRetry = true;
            }
            throw error;
        }
        return result.result;
    }
    function getJsonResult(result) {
        // This response indicates we are being throttled
        if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            var error = new Error("throttled response");
            error.result = JSON.stringify(result);
            error.throttleRetry = true;
            throw error;
        }
        if (result.jsonrpc != "2.0") {
            // @TODO: not any
            var error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
        }
        if (result.error) {
            // @TODO: not any
            var error = new Error(result.error.message || "unknown error");
            if (result.error.code) {
                error.code = result.error.code;
            }
            if (result.error.data) {
                error.data = result.error.data;
            }
            throw error;
        }
        return result.result;
    }
    // The blockTag was normalized as a string by the Provider pre-perform operations
    function checkLogTag(blockTag) {
        if (blockTag === "pending") {
            throw new Error("pending not supported");
        }
        if (blockTag === "latest") {
            return blockTag;
        }
        return parseInt(blockTag.substring(2), 16);
    }
    function checkError(method, error, transaction) {
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call" && error.code === logger_1$7.Logger.errors.SERVER_ERROR) {
            var e = error.error;
            // Etherscan keeps changing their string
            if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
                // Etherscan prefixes the data like "Reverted 0x1234"
                var data = e.data;
                if (data) {
                    data = "0x" + data.replace(/^.*0x/i, "");
                }
                if ((0, bytes_1$5.isHexString)(data)) {
                    return data;
                }
                logger$8.throwError("missing revert data in call exception", logger_1$7.Logger.errors.CALL_EXCEPTION, {
                    error: error,
                    data: "0x"
                });
            }
        }
        // Get the message from any nested error structure
        var message = error.message;
        if (error.code === logger_1$7.Logger.errors.SERVER_ERROR) {
            if (error.error && typeof (error.error.message) === "string") {
                message = error.error.message;
            }
            else if (typeof (error.body) === "string") {
                message = error.body;
            }
            else if (typeof (error.responseText) === "string") {
                message = error.responseText;
            }
        }
        message = (message || "").toLowerCase();
        // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
        if (message.match(/insufficient funds/)) {
            logger$8.throwError("insufficient funds for intrinsic transaction cost", logger_1$7.Logger.errors.INSUFFICIENT_FUNDS, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "Transaction with the same hash was already imported."
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            logger$8.throwError("nonce has already been used", logger_1$7.Logger.errors.NONCE_EXPIRED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
        if (message.match(/another transaction with same nonce/)) {
            logger$8.throwError("replacement fee too low", logger_1$7.Logger.errors.REPLACEMENT_UNDERPRICED, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        if (message.match(/execution failed due to an exception|execution reverted/)) {
            logger$8.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1$7.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error: error,
                method: method,
                transaction: transaction
            });
        }
        throw error;
    }
    var EtherscanProvider = /** @class */ (function (_super) {
        __extends$6(EtherscanProvider, _super);
        function EtherscanProvider(network, apiKey) {
            var _this = _super.call(this, network) || this;
            (0, properties_1$4.defineReadOnly)(_this, "baseUrl", _this.getBaseUrl());
            (0, properties_1$4.defineReadOnly)(_this, "apiKey", apiKey || null);
            return _this;
        }
        EtherscanProvider.prototype.getBaseUrl = function () {
            switch (this.network ? this.network.name : "invalid") {
                case "homestead":
                    return "https:/\/api.etherscan.io";
                case "goerli":
                    return "https:/\/api-goerli.etherscan.io";
                case "sepolia":
                    return "https:/\/api-sepolia.etherscan.io";
                case "matic":
                    return "https:/\/api.polygonscan.com";
                case "maticmum":
                    return "https:/\/api-testnet.polygonscan.com";
                case "arbitrum":
                    return "https:/\/api.arbiscan.io";
                case "arbitrum-goerli":
                    return "https:/\/api-goerli.arbiscan.io";
                case "optimism":
                    return "https:/\/api-optimistic.etherscan.io";
                case "optimism-goerli":
                    return "https:/\/api-goerli-optimistic.etherscan.io";
            }
            return logger$8.throwArgumentError("unsupported network", "network", this.network.name);
        };
        EtherscanProvider.prototype.getUrl = function (module, params) {
            var query = Object.keys(params).reduce(function (accum, key) {
                var value = params[key];
                if (value != null) {
                    accum += "&" + key + "=" + value;
                }
                return accum;
            }, "");
            var apiKey = ((this.apiKey) ? "&apikey=" + this.apiKey : "");
            return this.baseUrl + "/api?module=" + module + query + apiKey;
        };
        EtherscanProvider.prototype.getPostUrl = function () {
            return this.baseUrl + "/api";
        };
        EtherscanProvider.prototype.getPostData = function (module, params) {
            params.module = module;
            params.apikey = this.apiKey;
            return params;
        };
        EtherscanProvider.prototype.fetch = function (module, params, post) {
            return __awaiter$1(this, void 0, void 0, function () {
                var url, payload, procFunc, connection, payloadStr, result;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            url = (post ? this.getPostUrl() : this.getUrl(module, params));
                            payload = (post ? this.getPostData(module, params) : null);
                            procFunc = (module === "proxy") ? getJsonResult : getResult;
                            this.emit("debug", {
                                action: "request",
                                request: url,
                                provider: this
                            });
                            connection = {
                                url: url,
                                throttleSlotInterval: 1000,
                                throttleCallback: function (attempt, url) {
                                    if (_this.isCommunityResource()) {
                                        (0, formatter_1$2.showThrottleMessage)();
                                    }
                                    return Promise.resolve(true);
                                }
                            };
                            payloadStr = null;
                            if (payload) {
                                connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                                payloadStr = Object.keys(payload).map(function (key) {
                                    return key + "=" + payload[key];
                                }).join("&");
                            }
                            return [4 /*yield*/, (0, web_1$2.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];
                        case 1:
                            result = _a.sent();
                            this.emit("debug", {
                                action: "response",
                                request: url,
                                response: (0, properties_1$4.deepCopy)(result),
                                provider: this
                            });
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        EtherscanProvider.prototype.detectNetwork = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.network];
                });
            });
        };
        EtherscanProvider.prototype.perform = function (method, params) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i, log, block, _b;
                return __generator$1(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = method;
                            switch (_a) {
                                case "getBlockNumber": return [3 /*break*/, 1];
                                case "getGasPrice": return [3 /*break*/, 2];
                                case "getBalance": return [3 /*break*/, 3];
                                case "getTransactionCount": return [3 /*break*/, 4];
                                case "getCode": return [3 /*break*/, 5];
                                case "getStorageAt": return [3 /*break*/, 6];
                                case "sendTransaction": return [3 /*break*/, 7];
                                case "getBlock": return [3 /*break*/, 8];
                                case "getTransaction": return [3 /*break*/, 9];
                                case "getTransactionReceipt": return [3 /*break*/, 10];
                                case "call": return [3 /*break*/, 11];
                                case "estimateGas": return [3 /*break*/, 15];
                                case "getLogs": return [3 /*break*/, 19];
                                case "getEtherPrice": return [3 /*break*/, 26];
                            }
                            return [3 /*break*/, 28];
                        case 1: return [2 /*return*/, this.fetch("proxy", { action: "eth_blockNumber" })];
                        case 2: return [2 /*return*/, this.fetch("proxy", { action: "eth_gasPrice" })];
                        case 3: 
                        // Returns base-10 result
                        return [2 /*return*/, this.fetch("account", {
                                action: "balance",
                                address: params.address,
                                tag: params.blockTag
                            })];
                        case 4: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getTransactionCount",
                                address: params.address,
                                tag: params.blockTag
                            })];
                        case 5: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getCode",
                                address: params.address,
                                tag: params.blockTag
                            })];
                        case 6: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getStorageAt",
                                address: params.address,
                                position: params.position,
                                tag: params.blockTag
                            })];
                        case 7: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_sendRawTransaction",
                                hex: params.signedTransaction
                            }, true).catch(function (error) {
                                return checkError("sendTransaction", error, params.signedTransaction);
                            })];
                        case 8:
                            if (params.blockTag) {
                                return [2 /*return*/, this.fetch("proxy", {
                                        action: "eth_getBlockByNumber",
                                        tag: params.blockTag,
                                        boolean: (params.includeTransactions ? "true" : "false")
                                    })];
                            }
                            throw new Error("getBlock by blockHash not implemented");
                        case 9: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getTransactionByHash",
                                txhash: params.transactionHash
                            })];
                        case 10: return [2 /*return*/, this.fetch("proxy", {
                                action: "eth_getTransactionReceipt",
                                txhash: params.transactionHash
                            })];
                        case 11:
                            if (params.blockTag !== "latest") {
                                throw new Error("EtherscanProvider does not support blockTag for call");
                            }
                            postData = getTransactionPostData(params.transaction);
                            postData.module = "proxy";
                            postData.action = "eth_call";
                            _c.label = 12;
                        case 12:
                            _c.trys.push([12, 14, , 15]);
                            return [4 /*yield*/, this.fetch("proxy", postData, true)];
                        case 13: return [2 /*return*/, _c.sent()];
                        case 14:
                            error_1 = _c.sent();
                            return [2 /*return*/, checkError("call", error_1, params.transaction)];
                        case 15:
                            postData = getTransactionPostData(params.transaction);
                            postData.module = "proxy";
                            postData.action = "eth_estimateGas";
                            _c.label = 16;
                        case 16:
                            _c.trys.push([16, 18, , 19]);
                            return [4 /*yield*/, this.fetch("proxy", postData, true)];
                        case 17: return [2 /*return*/, _c.sent()];
                        case 18:
                            error_2 = _c.sent();
                            return [2 /*return*/, checkError("estimateGas", error_2, params.transaction)];
                        case 19:
                            args = { action: "getLogs" };
                            if (params.filter.fromBlock) {
                                args.fromBlock = checkLogTag(params.filter.fromBlock);
                            }
                            if (params.filter.toBlock) {
                                args.toBlock = checkLogTag(params.filter.toBlock);
                            }
                            if (params.filter.address) {
                                args.address = params.filter.address;
                            }
                            // @TODO: We can handle slightly more complicated logs using the logs API
                            if (params.filter.topics && params.filter.topics.length > 0) {
                                if (params.filter.topics.length > 1) {
                                    logger$8.throwError("unsupported topic count", logger_1$7.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                                }
                                if (params.filter.topics.length === 1) {
                                    topic0 = params.filter.topics[0];
                                    if (typeof (topic0) !== "string" || topic0.length !== 66) {
                                        logger$8.throwError("unsupported topic format", logger_1$7.Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                    }
                                    args.topic0 = topic0;
                                }
                            }
                            return [4 /*yield*/, this.fetch("logs", args)];
                        case 20:
                            logs = _c.sent();
                            blocks = {};
                            i = 0;
                            _c.label = 21;
                        case 21:
                            if (!(i < logs.length)) return [3 /*break*/, 25];
                            log = logs[i];
                            if (log.blockHash != null) {
                                return [3 /*break*/, 24];
                            }
                            if (!(blocks[log.blockNumber] == null)) return [3 /*break*/, 23];
                            return [4 /*yield*/, this.getBlock(log.blockNumber)];
                        case 22:
                            block = _c.sent();
                            if (block) {
                                blocks[log.blockNumber] = block.hash;
                            }
                            _c.label = 23;
                        case 23:
                            log.blockHash = blocks[log.blockNumber];
                            _c.label = 24;
                        case 24:
                            i++;
                            return [3 /*break*/, 21];
                        case 25: return [2 /*return*/, logs];
                        case 26:
                            if (this.network.name !== "homestead") {
                                return [2 /*return*/, 0.0];
                            }
                            _b = parseFloat;
                            return [4 /*yield*/, this.fetch("stats", { action: "ethprice" })];
                        case 27: return [2 /*return*/, _b.apply(void 0, [(_c.sent()).ethusd])];
                        case 28: return [3 /*break*/, 29];
                        case 29: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];
                    }
                });
            });
        };
        // Note: The `page` page parameter only allows pagination within the
        //       10,000 window available without a page and offset parameter
        //       Error: Result window is too large, PageNo x Offset size must
        //              be less than or equal to 10000
        EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {
            return __awaiter$1(this, void 0, void 0, function () {
                var params, result;
                var _a;
                var _this = this;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = {
                                action: "txlist"
                            };
                            return [4 /*yield*/, this.resolveName(addressOrName)];
                        case 1:
                            params = (_a.address = (_b.sent()),
                                _a.startblock = ((startBlock == null) ? 0 : startBlock),
                                _a.endblock = ((endBlock == null) ? 99999999 : endBlock),
                                _a.sort = "asc",
                                _a);
                            return [4 /*yield*/, this.fetch("account", params)];
                        case 2:
                            result = _b.sent();
                            return [2 /*return*/, result.map(function (tx) {
                                    ["contractAddress", "to"].forEach(function (key) {
                                        if (tx[key] == "") {
                                            delete tx[key];
                                        }
                                    });
                                    if (tx.creates == null && tx.contractAddress != null) {
                                        tx.creates = tx.contractAddress;
                                    }
                                    var item = _this.formatter.transactionResponse(tx);
                                    if (tx.timeStamp) {
                                        item.timestamp = parseInt(tx.timeStamp);
                                    }
                                    return item;
                                })];
                    }
                });
            });
        };
        EtherscanProvider.prototype.isCommunityResource = function () {
            return (this.apiKey == null);
        };
        return EtherscanProvider;
    }(base_provider_1$1.BaseProvider));
    etherscanProvider.EtherscanProvider = EtherscanProvider;

    var fallbackProvider = {};

    var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(fallbackProvider, "__esModule", { value: true });
    fallbackProvider.FallbackProvider = void 0;
    var abstract_provider_1 = lib$h;
    var bignumber_1$2 = lib$t;
    var bytes_1$4 = lib$s;
    var properties_1$3 = lib$q;
    var random_1 = lib$7;
    var web_1$1 = lib$3;
    var base_provider_1 = baseProvider;
    var formatter_1$1 = formatter;
    var logger_1$6 = lib$r;
    var _version_1$6 = _version$3;
    var logger$7 = new logger_1$6.Logger(_version_1$6.version);
    function now() { return (new Date()).getTime(); }
    // Returns to network as long as all agree, or null if any is null.
    // Throws an error if any two networks do not match.
    function checkNetworks(networks) {
        var result = null;
        for (var i = 0; i < networks.length; i++) {
            var network = networks[i];
            // Null! We do not know our network; bail.
            if (network == null) {
                return null;
            }
            if (result) {
                // Make sure the network matches the previous networks
                if (!(result.name === network.name && result.chainId === network.chainId &&
                    ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
                    logger$7.throwArgumentError("provider mismatch", "networks", networks);
                }
            }
            else {
                result = network;
            }
        }
        return result;
    }
    function median(values, maxDelta) {
        values = values.slice().sort();
        var middle = Math.floor(values.length / 2);
        // Odd length; take the middle
        if (values.length % 2) {
            return values[middle];
        }
        // Even length; take the average of the two middle
        var a = values[middle - 1], b = values[middle];
        if (maxDelta != null && Math.abs(a - b) > maxDelta) {
            return null;
        }
        return (a + b) / 2;
    }
    function serialize$1(value) {
        if (value === null) {
            return "null";
        }
        else if (typeof (value) === "number" || typeof (value) === "boolean") {
            return JSON.stringify(value);
        }
        else if (typeof (value) === "string") {
            return value;
        }
        else if (bignumber_1$2.BigNumber.isBigNumber(value)) {
            return value.toString();
        }
        else if (Array.isArray(value)) {
            return JSON.stringify(value.map(function (i) { return serialize$1(i); }));
        }
        else if (typeof (value) === "object") {
            var keys = Object.keys(value);
            keys.sort();
            return "{" + keys.map(function (key) {
                var v = value[key];
                if (typeof (v) === "function") {
                    v = "[function]";
                }
                else {
                    v = serialize$1(v);
                }
                return JSON.stringify(key) + ":" + v;
            }).join(",") + "}";
        }
        throw new Error("unknown value type: " + typeof (value));
    }
    // Next request ID to use for emitting debug info
    var nextRid = 1;
    function stall(duration) {
        var cancel = null;
        var timer = null;
        var promise = (new Promise(function (resolve) {
            cancel = function () {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                resolve();
            };
            timer = setTimeout(cancel, duration);
        }));
        var wait = function (func) {
            promise = promise.then(func);
            return promise;
        };
        function getPromise() {
            return promise;
        }
        return { cancel: cancel, getPromise: getPromise, wait: wait };
    }
    var ForwardErrors = [
        logger_1$6.Logger.errors.CALL_EXCEPTION,
        logger_1$6.Logger.errors.INSUFFICIENT_FUNDS,
        logger_1$6.Logger.errors.NONCE_EXPIRED,
        logger_1$6.Logger.errors.REPLACEMENT_UNDERPRICED,
        logger_1$6.Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    var ForwardProperties = [
        "address",
        "args",
        "errorArgs",
        "errorSignature",
        "method",
        "transaction",
    ];
    function exposeDebugConfig(config, now) {
        var result = {
            weight: config.weight
        };
        Object.defineProperty(result, "provider", { get: function () { return config.provider; } });
        if (config.start) {
            result.start = config.start;
        }
        if (now) {
            result.duration = (now - config.start);
        }
        if (config.done) {
            if (config.error) {
                result.error = config.error;
            }
            else {
                result.result = config.result || null;
            }
        }
        return result;
    }
    function normalizedTally(normalize, quorum) {
        return function (configs) {
            // Count the votes for each result
            var tally = {};
            configs.forEach(function (c) {
                var value = normalize(c.result);
                if (!tally[value]) {
                    tally[value] = { count: 0, result: c.result };
                }
                tally[value].count++;
            });
            // Check for a quorum on any given result
            var keys = Object.keys(tally);
            for (var i = 0; i < keys.length; i++) {
                var check = tally[keys[i]];
                if (check.count >= quorum) {
                    return check.result;
                }
            }
            // No quroum
            return undefined;
        };
    }
    function getProcessFunc(provider, method, params) {
        var normalize = serialize$1;
        switch (method) {
            case "getBlockNumber":
                // Return the median value, unless there is (median + 1) is also
                // present, in which case that is probably true and the median
                // is going to be stale soon. In the event of a malicious node,
                // the lie will be true soon enough.
                return function (configs) {
                    var values = configs.map(function (c) { return c.result; });
                    // Get the median block number
                    var blockNumber = median(configs.map(function (c) { return c.result; }), 2);
                    if (blockNumber == null) {
                        return undefined;
                    }
                    blockNumber = Math.ceil(blockNumber);
                    // If the next block height is present, its prolly safe to use
                    if (values.indexOf(blockNumber + 1) >= 0) {
                        blockNumber++;
                    }
                    // Don't ever roll back the blockNumber
                    if (blockNumber >= provider._highestBlockNumber) {
                        provider._highestBlockNumber = blockNumber;
                    }
                    return provider._highestBlockNumber;
                };
            case "getGasPrice":
                // Return the middle (round index up) value, similar to median
                // but do not average even entries and choose the higher.
                // Malicious actors must compromise 50% of the nodes to lie.
                return function (configs) {
                    var values = configs.map(function (c) { return c.result; });
                    values.sort();
                    return values[Math.floor(values.length / 2)];
                };
            case "getEtherPrice":
                // Returns the median price. Malicious actors must compromise at
                // least 50% of the nodes to lie (in a meaningful way).
                return function (configs) {
                    return median(configs.map(function (c) { return c.result; }));
                };
            // No additional normalizing required; serialize is enough
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
            case "getStorageAt":
            case "call":
            case "estimateGas":
            case "getLogs":
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getTransaction":
            case "getTransactionReceipt":
                normalize = function (tx) {
                    if (tx == null) {
                        return null;
                    }
                    tx = (0, properties_1$3.shallowCopy)(tx);
                    tx.confirmations = -1;
                    return serialize$1(tx);
                };
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getBlock":
                // We drop the confirmations from transactions as it is approximate
                if (params.includeTransactions) {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        block = (0, properties_1$3.shallowCopy)(block);
                        block.transactions = block.transactions.map(function (tx) {
                            tx = (0, properties_1$3.shallowCopy)(tx);
                            tx.confirmations = -1;
                            return tx;
                        });
                        return serialize$1(block);
                    };
                }
                else {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        return serialize$1(block);
                    };
                }
                break;
            default:
                throw new Error("unknown method: " + method);
        }
        // Return the result if and only if the expected quorum is
        // satisfied and agreed upon for the final result.
        return normalizedTally(normalize, provider.quorum);
    }
    // If we are doing a blockTag query, we need to make sure the backend is
    // caught up to the FallbackProvider, before sending a request to it.
    function waitForSync(config, blockNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var provider;
            return __generator(this, function (_a) {
                provider = (config.provider);
                if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
                    return [2 /*return*/, provider];
                }
                return [2 /*return*/, (0, web_1$1.poll)(function () {
                        return new Promise(function (resolve, reject) {
                            setTimeout(function () {
                                // We are synced
                                if (provider.blockNumber >= blockNumber) {
                                    return resolve(provider);
                                }
                                // We're done; just quit
                                if (config.cancelled) {
                                    return resolve(null);
                                }
                                // Try again, next block
                                return resolve(undefined);
                            }, 0);
                        });
                    }, { oncePoll: provider })];
            });
        });
    }
    function getRunner(config, currentBlockNumber, method, params) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, _a, filter;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        provider = config.provider;
                        _a = method;
                        switch (_a) {
                            case "getBlockNumber": return [3 /*break*/, 1];
                            case "getGasPrice": return [3 /*break*/, 1];
                            case "getEtherPrice": return [3 /*break*/, 2];
                            case "getBalance": return [3 /*break*/, 3];
                            case "getTransactionCount": return [3 /*break*/, 3];
                            case "getCode": return [3 /*break*/, 3];
                            case "getStorageAt": return [3 /*break*/, 6];
                            case "getBlock": return [3 /*break*/, 9];
                            case "call": return [3 /*break*/, 12];
                            case "estimateGas": return [3 /*break*/, 12];
                            case "getTransaction": return [3 /*break*/, 15];
                            case "getTransactionReceipt": return [3 /*break*/, 15];
                            case "getLogs": return [3 /*break*/, 16];
                        }
                        return [3 /*break*/, 19];
                    case 1: return [2 /*return*/, provider[method]()];
                    case 2:
                        if (provider.getEtherPrice) {
                            return [2 /*return*/, provider.getEtherPrice()];
                        }
                        return [3 /*break*/, 19];
                    case 3:
                        if (!(params.blockTag && (0, bytes_1$4.isHexString)(params.blockTag))) return [3 /*break*/, 5];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 4:
                        provider = _b.sent();
                        _b.label = 5;
                    case 5: return [2 /*return*/, provider[method](params.address, params.blockTag || "latest")];
                    case 6:
                        if (!(params.blockTag && (0, bytes_1$4.isHexString)(params.blockTag))) return [3 /*break*/, 8];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 7:
                        provider = _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/, provider.getStorageAt(params.address, params.position, params.blockTag || "latest")];
                    case 9:
                        if (!(params.blockTag && (0, bytes_1$4.isHexString)(params.blockTag))) return [3 /*break*/, 11];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 10:
                        provider = _b.sent();
                        _b.label = 11;
                    case 11: return [2 /*return*/, provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash)];
                    case 12:
                        if (!(params.blockTag && (0, bytes_1$4.isHexString)(params.blockTag))) return [3 /*break*/, 14];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 13:
                        provider = _b.sent();
                        _b.label = 14;
                    case 14:
                        if (method === "call" && params.blockTag) {
                            return [2 /*return*/, provider[method](params.transaction, params.blockTag)];
                        }
                        return [2 /*return*/, provider[method](params.transaction)];
                    case 15: return [2 /*return*/, provider[method](params.transactionHash)];
                    case 16:
                        filter = params.filter;
                        if (!((filter.fromBlock && (0, bytes_1$4.isHexString)(filter.fromBlock)) || (filter.toBlock && (0, bytes_1$4.isHexString)(filter.toBlock)))) return [3 /*break*/, 18];
                        return [4 /*yield*/, waitForSync(config, currentBlockNumber)];
                    case 17:
                        provider = _b.sent();
                        _b.label = 18;
                    case 18: return [2 /*return*/, provider.getLogs(filter)];
                    case 19: return [2 /*return*/, logger$7.throwError("unknown method error", logger_1$6.Logger.errors.UNKNOWN_ERROR, {
                            method: method,
                            params: params
                        })];
                }
            });
        });
    }
    var FallbackProvider = /** @class */ (function (_super) {
        __extends$5(FallbackProvider, _super);
        function FallbackProvider(providers, quorum) {
            var _this = this;
            if (providers.length === 0) {
                logger$7.throwArgumentError("missing providers", "providers", providers);
            }
            var providerConfigs = providers.map(function (configOrProvider, index) {
                if (abstract_provider_1.Provider.isProvider(configOrProvider)) {
                    var stallTimeout = (0, formatter_1$1.isCommunityResource)(configOrProvider) ? 2000 : 750;
                    var priority = 1;
                    return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout: stallTimeout, priority: priority });
                }
                var config = (0, properties_1$3.shallowCopy)(configOrProvider);
                if (config.priority == null) {
                    config.priority = 1;
                }
                if (config.stallTimeout == null) {
                    config.stallTimeout = (0, formatter_1$1.isCommunityResource)(configOrProvider) ? 2000 : 750;
                }
                if (config.weight == null) {
                    config.weight = 1;
                }
                var weight = config.weight;
                if (weight % 1 || weight > 512 || weight < 1) {
                    logger$7.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index + "].weight", weight);
                }
                return Object.freeze(config);
            });
            var total = providerConfigs.reduce(function (accum, c) { return (accum + c.weight); }, 0);
            if (quorum == null) {
                quorum = total / 2;
            }
            else if (quorum > total) {
                logger$7.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            // Are all providers' networks are known
            var networkOrReady = checkNetworks(providerConfigs.map(function (c) { return (c.provider).network; }));
            // Not all networks are known; we must stall
            if (networkOrReady == null) {
                networkOrReady = new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        _this.detectNetwork().then(resolve, reject);
                    }, 0);
                });
            }
            _this = _super.call(this, networkOrReady) || this;
            // Preserve a copy, so we do not get mutated
            (0, properties_1$3.defineReadOnly)(_this, "providerConfigs", Object.freeze(providerConfigs));
            (0, properties_1$3.defineReadOnly)(_this, "quorum", quorum);
            _this._highestBlockNumber = -1;
            return _this;
        }
        FallbackProvider.prototype.detectNetwork = function () {
            return __awaiter(this, void 0, void 0, function () {
                var networks;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) { return c.provider.getNetwork(); }))];
                        case 1:
                            networks = _a.sent();
                            return [2 /*return*/, checkNetworks(networks)];
                    }
                });
            });
        };
        FallbackProvider.prototype.perform = function (method, params) {
            return __awaiter(this, void 0, void 0, function () {
                var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(method === "sendTransaction")) return [3 /*break*/, 2];
                            return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) {
                                    return c.provider.sendTransaction(params.signedTransaction).then(function (result) {
                                        return result.hash;
                                    }, function (error) {
                                        return error;
                                    });
                                }))];
                        case 1:
                            results = _a.sent();
                            // Any success is good enough (other errors are likely "already seen" errors
                            for (i_1 = 0; i_1 < results.length; i_1++) {
                                result = results[i_1];
                                if (typeof (result) === "string") {
                                    return [2 /*return*/, result];
                                }
                            }
                            // They were all an error; pick the first error
                            throw results[0];
                        case 2:
                            if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber")) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.getBlockNumber()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            processFunc = getProcessFunc(this, method, params);
                            configs = (0, random_1.shuffled)(this.providerConfigs.map(properties_1$3.shallowCopy));
                            configs.sort(function (a, b) { return (a.priority - b.priority); });
                            currentBlockNumber = this._highestBlockNumber;
                            i = 0;
                            first = true;
                            _loop_1 = function () {
                                var t0, inflightWeight, _loop_2, waiting, results, result, errors;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            t0 = now();
                                            inflightWeight = configs.filter(function (c) { return (c.runner && ((t0 - c.start) < c.stallTimeout)); })
                                                .reduce(function (accum, c) { return (accum + c.weight); }, 0);
                                            _loop_2 = function () {
                                                var config = configs[i++];
                                                var rid = nextRid++;
                                                config.start = now();
                                                config.staller = stall(config.stallTimeout);
                                                config.staller.wait(function () { config.staller = null; });
                                                config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {
                                                    config.done = true;
                                                    config.result = result;
                                                    if (_this.listenerCount("debug")) {
                                                        _this.emit("debug", {
                                                            action: "request",
                                                            rid: rid,
                                                            backend: exposeDebugConfig(config, now()),
                                                            request: { method: method, params: (0, properties_1$3.deepCopy)(params) },
                                                            provider: _this
                                                        });
                                                    }
                                                }, function (error) {
                                                    config.done = true;
                                                    config.error = error;
                                                    if (_this.listenerCount("debug")) {
                                                        _this.emit("debug", {
                                                            action: "request",
                                                            rid: rid,
                                                            backend: exposeDebugConfig(config, now()),
                                                            request: { method: method, params: (0, properties_1$3.deepCopy)(params) },
                                                            provider: _this
                                                        });
                                                    }
                                                });
                                                if (this_1.listenerCount("debug")) {
                                                    this_1.emit("debug", {
                                                        action: "request",
                                                        rid: rid,
                                                        backend: exposeDebugConfig(config, null),
                                                        request: { method: method, params: (0, properties_1$3.deepCopy)(params) },
                                                        provider: this_1
                                                    });
                                                }
                                                inflightWeight += config.weight;
                                            };
                                            // Start running enough to meet quorum
                                            while (inflightWeight < this_1.quorum && i < configs.length) {
                                                _loop_2();
                                            }
                                            waiting = [];
                                            configs.forEach(function (c) {
                                                if (c.done || !c.runner) {
                                                    return;
                                                }
                                                waiting.push(c.runner);
                                                if (c.staller) {
                                                    waiting.push(c.staller.getPromise());
                                                }
                                            });
                                            if (!waiting.length) return [3 /*break*/, 2];
                                            return [4 /*yield*/, Promise.race(waiting)];
                                        case 1:
                                            _b.sent();
                                            _b.label = 2;
                                        case 2:
                                            results = configs.filter(function (c) { return (c.done && c.error == null); });
                                            if (!(results.length >= this_1.quorum)) return [3 /*break*/, 5];
                                            result = processFunc(results);
                                            if (result !== undefined) {
                                                // Shut down any stallers
                                                configs.forEach(function (c) {
                                                    if (c.staller) {
                                                        c.staller.cancel();
                                                    }
                                                    c.cancelled = true;
                                                });
                                                return [2 /*return*/, { value: result }];
                                            }
                                            if (!!first) return [3 /*break*/, 4];
                                            return [4 /*yield*/, stall(100).getPromise()];
                                        case 3:
                                            _b.sent();
                                            _b.label = 4;
                                        case 4:
                                            first = false;
                                            _b.label = 5;
                                        case 5:
                                            errors = configs.reduce(function (accum, c) {
                                                if (!c.done || c.error == null) {
                                                    return accum;
                                                }
                                                var code = (c.error).code;
                                                if (ForwardErrors.indexOf(code) >= 0) {
                                                    if (!accum[code]) {
                                                        accum[code] = { error: c.error, weight: 0 };
                                                    }
                                                    accum[code].weight += c.weight;
                                                }
                                                return accum;
                                            }, ({}));
                                            Object.keys(errors).forEach(function (errorCode) {
                                                var tally = errors[errorCode];
                                                if (tally.weight < _this.quorum) {
                                                    return;
                                                }
                                                // Shut down any stallers
                                                configs.forEach(function (c) {
                                                    if (c.staller) {
                                                        c.staller.cancel();
                                                    }
                                                    c.cancelled = true;
                                                });
                                                var e = (tally.error);
                                                var props = {};
                                                ForwardProperties.forEach(function (name) {
                                                    if (e[name] == null) {
                                                        return;
                                                    }
                                                    props[name] = e[name];
                                                });
                                                logger$7.throwError(e.reason || e.message, errorCode, props);
                                            });
                                            // All configs have run to completion; we will never get more data
                                            if (configs.filter(function (c) { return !c.done; }).length === 0) {
                                                return [2 /*return*/, "break"];
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            };
                            this_1 = this;
                            _a.label = 5;
                        case 5:
                            return [5 /*yield**/, _loop_1()];
                        case 6:
                            state_1 = _a.sent();
                            if (typeof state_1 === "object")
                                return [2 /*return*/, state_1.value];
                            if (state_1 === "break")
                                return [3 /*break*/, 7];
                            return [3 /*break*/, 5];
                        case 7:
                            // Shut down any stallers; shouldn't be any
                            configs.forEach(function (c) {
                                if (c.staller) {
                                    c.staller.cancel();
                                }
                                c.cancelled = true;
                            });
                            return [2 /*return*/, logger$7.throwError("failed to meet quorum", logger_1$6.Logger.errors.SERVER_ERROR, {
                                    method: method,
                                    params: params,
                                    //results: configs.map((c) => c.result),
                                    //errors: configs.map((c) => c.error),
                                    results: configs.map(function (c) { return exposeDebugConfig(c); }),
                                    provider: this
                                })];
                    }
                });
            });
        };
        return FallbackProvider;
    }(base_provider_1.BaseProvider));
    fallbackProvider.FallbackProvider = FallbackProvider;

    var browserIpcProvider = {};

    Object.defineProperty(browserIpcProvider, "__esModule", { value: true });
    browserIpcProvider.IpcProvider = void 0;
    var IpcProvider = null;
    browserIpcProvider.IpcProvider = IpcProvider;

    var infuraProvider = {};

    var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(infuraProvider, "__esModule", { value: true });
    infuraProvider.InfuraProvider = infuraProvider.InfuraWebSocketProvider = void 0;
    var properties_1$2 = lib$q;
    var websocket_provider_1 = websocketProvider;
    var formatter_1 = formatter;
    var logger_1$5 = lib$r;
    var _version_1$5 = _version$3;
    var logger$6 = new logger_1$5.Logger(_version_1$5.version);
    var url_json_rpc_provider_1$2 = urlJsonRpcProvider;
    var defaultProjectId = "84842078b09946638c03157f83405213";
    var InfuraWebSocketProvider = /** @class */ (function (_super) {
        __extends$4(InfuraWebSocketProvider, _super);
        function InfuraWebSocketProvider(network, apiKey) {
            var _this = this;
            var provider = new InfuraProvider(network, apiKey);
            var connection = provider.connection;
            if (connection.password) {
                logger$6.throwError("INFURA WebSocket project secrets unsupported", logger_1$5.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "InfuraProvider.getWebSocketProvider()"
                });
            }
            var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            _this = _super.call(this, url, network) || this;
            (0, properties_1$2.defineReadOnly)(_this, "apiKey", provider.projectId);
            (0, properties_1$2.defineReadOnly)(_this, "projectId", provider.projectId);
            (0, properties_1$2.defineReadOnly)(_this, "projectSecret", provider.projectSecret);
            return _this;
        }
        InfuraWebSocketProvider.prototype.isCommunityResource = function () {
            return (this.projectId === defaultProjectId);
        };
        return InfuraWebSocketProvider;
    }(websocket_provider_1.WebSocketProvider));
    infuraProvider.InfuraWebSocketProvider = InfuraWebSocketProvider;
    var InfuraProvider = /** @class */ (function (_super) {
        __extends$4(InfuraProvider, _super);
        function InfuraProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InfuraProvider.getWebSocketProvider = function (network, apiKey) {
            return new InfuraWebSocketProvider(network, apiKey);
        };
        InfuraProvider.getApiKey = function (apiKey) {
            var apiKeyObj = {
                apiKey: defaultProjectId,
                projectId: defaultProjectId,
                projectSecret: null
            };
            if (apiKey == null) {
                return apiKeyObj;
            }
            if (typeof (apiKey) === "string") {
                apiKeyObj.projectId = apiKey;
            }
            else if (apiKey.projectSecret != null) {
                logger$6.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
                logger$6.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
                apiKeyObj.projectId = apiKey.projectId;
                apiKeyObj.projectSecret = apiKey.projectSecret;
            }
            else if (apiKey.projectId) {
                apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
        };
        InfuraProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "mainnet.infura.io";
                    break;
                case "goerli":
                    host = "goerli.infura.io";
                    break;
                case "sepolia":
                    host = "sepolia.infura.io";
                    break;
                case "matic":
                    host = "polygon-mainnet.infura.io";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.infura.io";
                    break;
                case "optimism":
                    host = "optimism-mainnet.infura.io";
                    break;
                case "optimism-goerli":
                    host = "optimism-goerli.infura.io";
                    break;
                case "arbitrum":
                    host = "arbitrum-mainnet.infura.io";
                    break;
                case "arbitrum-goerli":
                    host = "arbitrum-goerli.infura.io";
                    break;
                default:
                    logger$6.throwError("unsupported network", logger_1$5.Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            var connection = {
                allowGzip: true,
                url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
                throttleCallback: function (attempt, url) {
                    if (apiKey.projectId === defaultProjectId) {
                        (0, formatter_1.showThrottleMessage)();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        };
        InfuraProvider.prototype.isCommunityResource = function () {
            return (this.projectId === defaultProjectId);
        };
        return InfuraProvider;
    }(url_json_rpc_provider_1$2.UrlJsonRpcProvider));
    infuraProvider.InfuraProvider = InfuraProvider;

    var jsonRpcBatchProvider = {};

    var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(jsonRpcBatchProvider, "__esModule", { value: true });
    jsonRpcBatchProvider.JsonRpcBatchProvider = void 0;
    var properties_1$1 = lib$q;
    var web_1 = lib$3;
    var json_rpc_provider_1$1 = jsonRpcProvider;
    // Experimental
    var JsonRpcBatchProvider = /** @class */ (function (_super) {
        __extends$3(JsonRpcBatchProvider, _super);
        function JsonRpcBatchProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        JsonRpcBatchProvider.prototype.send = function (method, params) {
            var _this = this;
            var request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            if (this._pendingBatch == null) {
                this._pendingBatch = [];
            }
            var inflightRequest = { request: request, resolve: null, reject: null };
            var promise = new Promise(function (resolve, reject) {
                inflightRequest.resolve = resolve;
                inflightRequest.reject = reject;
            });
            this._pendingBatch.push(inflightRequest);
            if (!this._pendingBatchAggregator) {
                // Schedule batch for next event loop + short duration
                this._pendingBatchAggregator = setTimeout(function () {
                    // Get teh current batch and clear it, so new requests
                    // go into the next batch
                    var batch = _this._pendingBatch;
                    _this._pendingBatch = null;
                    _this._pendingBatchAggregator = null;
                    // Get the request as an array of requests
                    var request = batch.map(function (inflight) { return inflight.request; });
                    _this.emit("debug", {
                        action: "requestBatch",
                        request: (0, properties_1$1.deepCopy)(request),
                        provider: _this
                    });
                    return (0, web_1.fetchJson)(_this.connection, JSON.stringify(request)).then(function (result) {
                        _this.emit("debug", {
                            action: "response",
                            request: request,
                            response: result,
                            provider: _this
                        });
                        // For each result, feed it to the correct Promise, depending
                        // on whether it was a success or error
                        batch.forEach(function (inflightRequest, index) {
                            var payload = result[index];
                            if (payload.error) {
                                var error = new Error(payload.error.message);
                                error.code = payload.error.code;
                                error.data = payload.error.data;
                                inflightRequest.reject(error);
                            }
                            else {
                                inflightRequest.resolve(payload.result);
                            }
                        });
                    }, function (error) {
                        _this.emit("debug", {
                            action: "response",
                            error: error,
                            request: request,
                            provider: _this
                        });
                        batch.forEach(function (inflightRequest) {
                            inflightRequest.reject(error);
                        });
                    });
                }, 10);
            }
            return promise;
        };
        return JsonRpcBatchProvider;
    }(json_rpc_provider_1$1.JsonRpcProvider));
    jsonRpcBatchProvider.JsonRpcBatchProvider = JsonRpcBatchProvider;

    var nodesmithProvider = {};

    /* istanbul ignore file */
    var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(nodesmithProvider, "__esModule", { value: true });
    nodesmithProvider.NodesmithProvider = void 0;
    var url_json_rpc_provider_1$1 = urlJsonRpcProvider;
    var logger_1$4 = lib$r;
    var _version_1$4 = _version$3;
    var logger$5 = new logger_1$4.Logger(_version_1$4.version);
    // Special API key provided by Nodesmith for ethers.js
    var defaultApiKey = "ETHERS_JS_SHARED";
    var NodesmithProvider = /** @class */ (function (_super) {
        __extends$2(NodesmithProvider, _super);
        function NodesmithProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NodesmithProvider.getApiKey = function (apiKey) {
            if (apiKey && typeof (apiKey) !== "string") {
                logger$5.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || defaultApiKey;
        };
        NodesmithProvider.getUrl = function (network, apiKey) {
            logger$5.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            var host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                    break;
                case "ropsten":
                    host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                    break;
                case "rinkeby":
                    host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                    break;
                case "goerli":
                    host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                    break;
                case "kovan":
                    host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                    break;
                default:
                    logger$5.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return (host + "?apiKey=" + apiKey);
        };
        return NodesmithProvider;
    }(url_json_rpc_provider_1$1.UrlJsonRpcProvider));
    nodesmithProvider.NodesmithProvider = NodesmithProvider;

    var pocketProvider = {};

    var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(pocketProvider, "__esModule", { value: true });
    pocketProvider.PocketProvider = void 0;
    var logger_1$3 = lib$r;
    var _version_1$3 = _version$3;
    var logger$4 = new logger_1$3.Logger(_version_1$3.version);
    var url_json_rpc_provider_1 = urlJsonRpcProvider;
    var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    var PocketProvider = /** @class */ (function (_super) {
        __extends$1(PocketProvider, _super);
        function PocketProvider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PocketProvider.getApiKey = function (apiKey) {
            var apiKeyObj = {
                applicationId: null,
                loadBalancer: true,
                applicationSecretKey: null
            };
            // Parse applicationId and applicationSecretKey
            if (apiKey == null) {
                apiKeyObj.applicationId = defaultApplicationId;
            }
            else if (typeof (apiKey) === "string") {
                apiKeyObj.applicationId = apiKey;
            }
            else if (apiKey.applicationSecretKey != null) {
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
            }
            else if (apiKey.applicationId) {
                apiKeyObj.applicationId = apiKey.applicationId;
            }
            else {
                logger$4.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
            }
            return apiKeyObj;
        };
        PocketProvider.getUrl = function (network, apiKey) {
            var host = null;
            switch (network ? network.name : "unknown") {
                case "goerli":
                    host = "eth-goerli.gateway.pokt.network";
                    break;
                case "homestead":
                    host = "eth-mainnet.gateway.pokt.network";
                    break;
                case "kovan":
                    host = "poa-kovan.gateway.pokt.network";
                    break;
                case "matic":
                    host = "poly-mainnet.gateway.pokt.network";
                    break;
                case "maticmum":
                    host = "polygon-mumbai-rpc.gateway.pokt.network";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.gateway.pokt.network";
                    break;
                case "ropsten":
                    host = "eth-ropsten.gateway.pokt.network";
                    break;
                default:
                    logger$4.throwError("unsupported network", logger_1$3.Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            var url = "https://" + host + "/v1/lb/" + apiKey.applicationId;
            var connection = { headers: {}, url: url };
            if (apiKey.applicationSecretKey != null) {
                connection.user = "";
                connection.password = apiKey.applicationSecretKey;
            }
            return connection;
        };
        PocketProvider.prototype.isCommunityResource = function () {
            return (this.applicationId === defaultApplicationId);
        };
        return PocketProvider;
    }(url_json_rpc_provider_1.UrlJsonRpcProvider));
    pocketProvider.PocketProvider = PocketProvider;

    var web3Provider = {};

    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(web3Provider, "__esModule", { value: true });
    web3Provider.Web3Provider = void 0;
    var properties_1 = lib$q;
    var logger_1$2 = lib$r;
    var _version_1$2 = _version$3;
    var logger$3 = new logger_1$2.Logger(_version_1$2.version);
    var json_rpc_provider_1 = jsonRpcProvider;
    var _nextId = 1;
    function buildWeb3LegacyFetcher(provider, sendFunc) {
        var fetcher = "Web3LegacyFetcher";
        return function (method, params) {
            var _this = this;
            var request = {
                method: method,
                params: params,
                id: (_nextId++),
                jsonrpc: "2.0"
            };
            return new Promise(function (resolve, reject) {
                _this.emit("debug", {
                    action: "request",
                    fetcher: fetcher,
                    request: (0, properties_1.deepCopy)(request),
                    provider: _this
                });
                sendFunc(request, function (error, response) {
                    if (error) {
                        _this.emit("debug", {
                            action: "response",
                            fetcher: fetcher,
                            error: error,
                            request: request,
                            provider: _this
                        });
                        return reject(error);
                    }
                    _this.emit("debug", {
                        action: "response",
                        fetcher: fetcher,
                        request: request,
                        response: response,
                        provider: _this
                    });
                    if (response.error) {
                        var error_1 = new Error(response.error.message);
                        error_1.code = response.error.code;
                        error_1.data = response.error.data;
                        return reject(error_1);
                    }
                    resolve(response.result);
                });
            });
        };
    }
    function buildEip1193Fetcher(provider) {
        return function (method, params) {
            var _this = this;
            if (params == null) {
                params = [];
            }
            var request = { method: method, params: params };
            this.emit("debug", {
                action: "request",
                fetcher: "Eip1193Fetcher",
                request: (0, properties_1.deepCopy)(request),
                provider: this
            });
            return provider.request(request).then(function (response) {
                _this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request: request,
                    response: response,
                    provider: _this
                });
                return response;
            }, function (error) {
                _this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request: request,
                    error: error,
                    provider: _this
                });
                throw error;
            });
        };
    }
    var Web3Provider = /** @class */ (function (_super) {
        __extends(Web3Provider, _super);
        function Web3Provider(provider, network) {
            var _this = this;
            if (provider == null) {
                logger$3.throwArgumentError("missing provider", "provider", provider);
            }
            var path = null;
            var jsonRpcFetchFunc = null;
            var subprovider = null;
            if (typeof (provider) === "function") {
                path = "unknown:";
                jsonRpcFetchFunc = provider;
            }
            else {
                path = provider.host || provider.path || "";
                if (!path && provider.isMetaMask) {
                    path = "metamask";
                }
                subprovider = provider;
                if (provider.request) {
                    if (path === "") {
                        path = "eip-1193:";
                    }
                    jsonRpcFetchFunc = buildEip1193Fetcher(provider);
                }
                else if (provider.sendAsync) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
                }
                else if (provider.send) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
                }
                else {
                    logger$3.throwArgumentError("unsupported provider", "provider", provider);
                }
                if (!path) {
                    path = "unknown:";
                }
            }
            _this = _super.call(this, path, network) || this;
            (0, properties_1.defineReadOnly)(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            (0, properties_1.defineReadOnly)(_this, "provider", subprovider);
            return _this;
        }
        Web3Provider.prototype.send = function (method, params) {
            return this.jsonRpcFetchFunc(method, params);
        };
        return Web3Provider;
    }(json_rpc_provider_1.JsonRpcProvider));
    web3Provider.Web3Provider = Web3Provider;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.Formatter = exports.showThrottleMessage = exports.isCommunityResourcable = exports.isCommunityResource = exports.getNetwork = exports.getDefaultProvider = exports.JsonRpcSigner = exports.IpcProvider = exports.WebSocketProvider = exports.Web3Provider = exports.StaticJsonRpcProvider = exports.PocketProvider = exports.NodesmithProvider = exports.JsonRpcBatchProvider = exports.JsonRpcProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyWebSocketProvider = exports.AlchemyProvider = exports.FallbackProvider = exports.UrlJsonRpcProvider = exports.Resolver = exports.BaseProvider = exports.Provider = void 0;
    	var abstract_provider_1 = lib$h;
    	Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return abstract_provider_1.Provider; } });
    	var networks_1 = lib$4;
    	Object.defineProperty(exports, "getNetwork", { enumerable: true, get: function () { return networks_1.getNetwork; } });
    	var base_provider_1 = baseProvider;
    	Object.defineProperty(exports, "BaseProvider", { enumerable: true, get: function () { return base_provider_1.BaseProvider; } });
    	Object.defineProperty(exports, "Resolver", { enumerable: true, get: function () { return base_provider_1.Resolver; } });
    	var alchemy_provider_1 = alchemyProvider;
    	Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function () { return alchemy_provider_1.AlchemyProvider; } });
    	Object.defineProperty(exports, "AlchemyWebSocketProvider", { enumerable: true, get: function () { return alchemy_provider_1.AlchemyWebSocketProvider; } });
    	var ankr_provider_1 = ankrProvider;
    	Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function () { return ankr_provider_1.AnkrProvider; } });
    	var cloudflare_provider_1 = cloudflareProvider;
    	Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function () { return cloudflare_provider_1.CloudflareProvider; } });
    	var etherscan_provider_1 = etherscanProvider;
    	Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function () { return etherscan_provider_1.EtherscanProvider; } });
    	var fallback_provider_1 = fallbackProvider;
    	Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function () { return fallback_provider_1.FallbackProvider; } });
    	var ipc_provider_1 = browserIpcProvider;
    	Object.defineProperty(exports, "IpcProvider", { enumerable: true, get: function () { return ipc_provider_1.IpcProvider; } });
    	var infura_provider_1 = infuraProvider;
    	Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function () { return infura_provider_1.InfuraProvider; } });
    	Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function () { return infura_provider_1.InfuraWebSocketProvider; } });
    	var json_rpc_provider_1 = jsonRpcProvider;
    	Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } });
    	Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcSigner; } });
    	var json_rpc_batch_provider_1 = jsonRpcBatchProvider;
    	Object.defineProperty(exports, "JsonRpcBatchProvider", { enumerable: true, get: function () { return json_rpc_batch_provider_1.JsonRpcBatchProvider; } });
    	var nodesmith_provider_1 = nodesmithProvider;
    	Object.defineProperty(exports, "NodesmithProvider", { enumerable: true, get: function () { return nodesmith_provider_1.NodesmithProvider; } });
    	var pocket_provider_1 = pocketProvider;
    	Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function () { return pocket_provider_1.PocketProvider; } });
    	var url_json_rpc_provider_1 = urlJsonRpcProvider;
    	Object.defineProperty(exports, "StaticJsonRpcProvider", { enumerable: true, get: function () { return url_json_rpc_provider_1.StaticJsonRpcProvider; } });
    	Object.defineProperty(exports, "UrlJsonRpcProvider", { enumerable: true, get: function () { return url_json_rpc_provider_1.UrlJsonRpcProvider; } });
    	var web3_provider_1 = web3Provider;
    	Object.defineProperty(exports, "Web3Provider", { enumerable: true, get: function () { return web3_provider_1.Web3Provider; } });
    	var websocket_provider_1 = websocketProvider;
    	Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function () { return websocket_provider_1.WebSocketProvider; } });
    	var formatter_1 = formatter;
    	Object.defineProperty(exports, "Formatter", { enumerable: true, get: function () { return formatter_1.Formatter; } });
    	Object.defineProperty(exports, "isCommunityResourcable", { enumerable: true, get: function () { return formatter_1.isCommunityResourcable; } });
    	Object.defineProperty(exports, "isCommunityResource", { enumerable: true, get: function () { return formatter_1.isCommunityResource; } });
    	Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function () { return formatter_1.showThrottleMessage; } });
    	var logger_1 = lib$r;
    	var _version_1 = _version$3;
    	var logger = new logger_1.Logger(_version_1.version);
    	////////////////////////
    	// Helper Functions
    	function getDefaultProvider(network, options) {
    	    if (network == null) {
    	        network = "homestead";
    	    }
    	    // If passed a URL, figure out the right type of provider based on the scheme
    	    if (typeof (network) === "string") {
    	        // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
    	        // Handle http and ws (and their secure variants)
    	        var match = network.match(/^(ws|http)s?:/i);
    	        if (match) {
    	            switch (match[1].toLowerCase()) {
    	                case "http":
    	                case "https":
    	                    return new json_rpc_provider_1.JsonRpcProvider(network);
    	                case "ws":
    	                case "wss":
    	                    return new websocket_provider_1.WebSocketProvider(network);
    	                default:
    	                    logger.throwArgumentError("unsupported URL scheme", "network", network);
    	            }
    	        }
    	    }
    	    var n = (0, networks_1.getNetwork)(network);
    	    if (!n || !n._defaultProvider) {
    	        logger.throwError("unsupported getDefaultProvider network", logger_1.Logger.errors.NETWORK_ERROR, {
    	            operation: "getDefaultProvider",
    	            network: network
    	        });
    	    }
    	    return n._defaultProvider({
    	        FallbackProvider: fallback_provider_1.FallbackProvider,
    	        AlchemyProvider: alchemy_provider_1.AlchemyProvider,
    	        AnkrProvider: ankr_provider_1.AnkrProvider,
    	        CloudflareProvider: cloudflare_provider_1.CloudflareProvider,
    	        EtherscanProvider: etherscan_provider_1.EtherscanProvider,
    	        InfuraProvider: infura_provider_1.InfuraProvider,
    	        JsonRpcProvider: json_rpc_provider_1.JsonRpcProvider,
    	        NodesmithProvider: nodesmith_provider_1.NodesmithProvider,
    	        PocketProvider: pocket_provider_1.PocketProvider,
    	        Web3Provider: web3_provider_1.Web3Provider,
    	        IpcProvider: ipc_provider_1.IpcProvider,
    	    }, options);
    	}
    	exports.getDefaultProvider = getDefaultProvider;
    	
    } (lib$5));

    var utils$b = {};

    var lib$2 = {};

    var _version$2 = {};

    Object.defineProperty(_version$2, "__esModule", { value: true });
    _version$2.version = void 0;
    _version$2.version = "solidity/5.7.0";

    Object.defineProperty(lib$2, "__esModule", { value: true });
    lib$2.sha256 = lib$2.keccak256 = lib$2.pack = void 0;
    var bignumber_1$1 = lib$t;
    var bytes_1$3 = lib$s;
    var keccak256_1 = lib$o;
    var sha2_1 = lib$9;
    var strings_1 = lib$l;
    var regexBytes = new RegExp("^bytes([0-9]+)$");
    var regexNumber = new RegExp("^(u?int)([0-9]*)$");
    var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    var logger_1$1 = lib$r;
    var _version_1$1 = _version$2;
    var logger$2 = new logger_1$1.Logger(_version_1$1.version);
    function _pack(type, value, isArray) {
        switch (type) {
            case "address":
                if (isArray) {
                    return (0, bytes_1$3.zeroPad)(value, 32);
                }
                return (0, bytes_1$3.arrayify)(value);
            case "string":
                return (0, strings_1.toUtf8Bytes)(value);
            case "bytes":
                return (0, bytes_1$3.arrayify)(value);
            case "bool":
                value = (value ? "0x01" : "0x00");
                if (isArray) {
                    return (0, bytes_1$3.zeroPad)(value, 32);
                }
                return (0, bytes_1$3.arrayify)(value);
        }
        var match = type.match(regexNumber);
        if (match) {
            //let signed = (match[1] === "int")
            var size = parseInt(match[2] || "256");
            if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
                logger$2.throwArgumentError("invalid number type", "type", type);
            }
            if (isArray) {
                size = 256;
            }
            value = bignumber_1$1.BigNumber.from(value).toTwos(size);
            return (0, bytes_1$3.zeroPad)(value, size / 8);
        }
        match = type.match(regexBytes);
        if (match) {
            var size = parseInt(match[1]);
            if (String(size) !== match[1] || size === 0 || size > 32) {
                logger$2.throwArgumentError("invalid bytes type", "type", type);
            }
            if ((0, bytes_1$3.arrayify)(value).byteLength !== size) {
                logger$2.throwArgumentError("invalid value for " + type, "value", value);
            }
            if (isArray) {
                return (0, bytes_1$3.arrayify)((value + Zeros).substring(0, 66));
            }
            return value;
        }
        match = type.match(regexArray);
        if (match && Array.isArray(value)) {
            var baseType_1 = match[1];
            var count = parseInt(match[2] || String(value.length));
            if (count != value.length) {
                logger$2.throwArgumentError("invalid array length for " + type, "value", value);
            }
            var result_1 = [];
            value.forEach(function (value) {
                result_1.push(_pack(baseType_1, value, true));
            });
            return (0, bytes_1$3.concat)(result_1);
        }
        return logger$2.throwArgumentError("invalid type", "type", type);
    }
    // @TODO: Array Enum
    function pack(types, values) {
        if (types.length != values.length) {
            logger$2.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
        }
        var tight = [];
        types.forEach(function (type, index) {
            tight.push(_pack(type, values[index]));
        });
        return (0, bytes_1$3.hexlify)((0, bytes_1$3.concat)(tight));
    }
    lib$2.pack = pack;
    function keccak256(types, values) {
        return (0, keccak256_1.keccak256)(pack(types, values));
    }
    lib$2.keccak256 = keccak256;
    function sha256$4(types, values) {
        return (0, sha2_1.sha256)(pack(types, values));
    }
    lib$2.sha256 = sha256$4;

    var lib$1 = {};

    var _version$1 = {};

    Object.defineProperty(_version$1, "__esModule", { value: true });
    _version$1.version = void 0;
    _version$1.version = "units/5.7.0";

    Object.defineProperty(lib$1, "__esModule", { value: true });
    lib$1.parseEther = lib$1.formatEther = lib$1.parseUnits = lib$1.formatUnits = lib$1.commify = void 0;
    var bignumber_1 = lib$t;
    var logger_1 = lib$r;
    var _version_1 = _version$1;
    var logger$1 = new logger_1.Logger(_version_1.version);
    var names$1 = [
        "wei",
        "kwei",
        "mwei",
        "gwei",
        "szabo",
        "finney",
        "ether",
    ];
    // Some environments have issues with RegEx that contain back-tracking, so we cannot
    // use them.
    function commify(value) {
        var comps = String(value).split(".");
        if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
            logger$1.throwArgumentError("invalid value", "value", value);
        }
        // Make sure we have at least one whole digit (0 if none)
        var whole = comps[0];
        var negative = "";
        if (whole.substring(0, 1) === "-") {
            negative = "-";
            whole = whole.substring(1);
        }
        // Make sure we have at least 1 whole digit with no leading zeros
        while (whole.substring(0, 1) === "0") {
            whole = whole.substring(1);
        }
        if (whole === "") {
            whole = "0";
        }
        var suffix = "";
        if (comps.length === 2) {
            suffix = "." + (comps[1] || "0");
        }
        while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
            suffix = suffix.substring(0, suffix.length - 1);
        }
        var formatted = [];
        while (whole.length) {
            if (whole.length <= 3) {
                formatted.unshift(whole);
                break;
            }
            else {
                var index = whole.length - 3;
                formatted.unshift(whole.substring(index));
                whole = whole.substring(0, index);
            }
        }
        return negative + formatted.join(",") + suffix;
    }
    lib$1.commify = commify;
    function formatUnits(value, unitName) {
        if (typeof (unitName) === "string") {
            var index = names$1.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return (0, bignumber_1.formatFixed)(value, (unitName != null) ? unitName : 18);
    }
    lib$1.formatUnits = formatUnits;
    function parseUnits(value, unitName) {
        if (typeof (value) !== "string") {
            logger$1.throwArgumentError("value must be a string", "value", value);
        }
        if (typeof (unitName) === "string") {
            var index = names$1.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return (0, bignumber_1.parseFixed)(value, (unitName != null) ? unitName : 18);
    }
    lib$1.parseUnits = parseUnits;
    function formatEther(wei) {
        return formatUnits(wei, 18);
    }
    lib$1.formatEther = formatEther;
    function parseEther(ether) {
        return parseUnits(ether, 18);
    }
    lib$1.parseEther = parseEther;

    (function (exports) {
    	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
    	exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;
    	var abi_1 = lib$u;
    	Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_1.AbiCoder; } });
    	Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abi_1.checkResultErrors; } });
    	Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return abi_1.ConstructorFragment; } });
    	Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_1.defaultAbiCoder; } });
    	Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return abi_1.ErrorFragment; } });
    	Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return abi_1.EventFragment; } });
    	Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return abi_1.FormatTypes; } });
    	Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return abi_1.Fragment; } });
    	Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return abi_1.FunctionFragment; } });
    	Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return abi_1.Indexed; } });
    	Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return abi_1.Interface; } });
    	Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return abi_1.LogDescription; } });
    	Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return abi_1.ParamType; } });
    	Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return abi_1.TransactionDescription; } });
    	var address_1 = lib$p;
    	Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return address_1.getAddress; } });
    	Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return address_1.getCreate2Address; } });
    	Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return address_1.getContractAddress; } });
    	Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return address_1.getIcapAddress; } });
    	Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return address_1.isAddress; } });
    	var base64 = __importStar(lib$i);
    	exports.base64 = base64;
    	var basex_1 = lib$b;
    	Object.defineProperty(exports, "base58", { enumerable: true, get: function () { return basex_1.Base58; } });
    	var bytes_1 = lib$s;
    	Object.defineProperty(exports, "arrayify", { enumerable: true, get: function () { return bytes_1.arrayify; } });
    	Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return bytes_1.concat; } });
    	Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function () { return bytes_1.hexConcat; } });
    	Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function () { return bytes_1.hexDataSlice; } });
    	Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function () { return bytes_1.hexDataLength; } });
    	Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return bytes_1.hexlify; } });
    	Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function () { return bytes_1.hexStripZeros; } });
    	Object.defineProperty(exports, "hexValue", { enumerable: true, get: function () { return bytes_1.hexValue; } });
    	Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function () { return bytes_1.hexZeroPad; } });
    	Object.defineProperty(exports, "isBytes", { enumerable: true, get: function () { return bytes_1.isBytes; } });
    	Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return bytes_1.isBytesLike; } });
    	Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return bytes_1.isHexString; } });
    	Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function () { return bytes_1.joinSignature; } });
    	Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function () { return bytes_1.zeroPad; } });
    	Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function () { return bytes_1.splitSignature; } });
    	Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function () { return bytes_1.stripZeros; } });
    	var hash_1 = lib$k;
    	Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return hash_1._TypedDataEncoder; } });
    	Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return hash_1.dnsEncode; } });
    	Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return hash_1.hashMessage; } });
    	Object.defineProperty(exports, "id", { enumerable: true, get: function () { return hash_1.id; } });
    	Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return hash_1.isValidName; } });
    	Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return hash_1.namehash; } });
    	var hdnode_1 = lib$c;
    	Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return hdnode_1.defaultPath; } });
    	Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function () { return hdnode_1.entropyToMnemonic; } });
    	Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return hdnode_1.getAccountPath; } });
    	Object.defineProperty(exports, "HDNode", { enumerable: true, get: function () { return hdnode_1.HDNode; } });
    	Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function () { return hdnode_1.isValidMnemonic; } });
    	Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function () { return hdnode_1.mnemonicToEntropy; } });
    	Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function () { return hdnode_1.mnemonicToSeed; } });
    	var json_wallets_1 = lib$6;
    	Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return json_wallets_1.getJsonWalletAddress; } });
    	var keccak256_1 = lib$o;
    	Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak256_1.keccak256; } });
    	var logger_1 = lib$r;
    	Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_1.Logger; } });
    	var sha2_1 = lib$9;
    	Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
    	Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
    	Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
    	Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });
    	var solidity_1 = lib$2;
    	Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function () { return solidity_1.keccak256; } });
    	Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function () { return solidity_1.pack; } });
    	Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function () { return solidity_1.sha256; } });
    	var random_1 = lib$7;
    	Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
    	Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return random_1.shuffled; } });
    	var properties_1 = lib$q;
    	Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function () { return properties_1.checkProperties; } });
    	Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function () { return properties_1.deepCopy; } });
    	Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function () { return properties_1.defineReadOnly; } });
    	Object.defineProperty(exports, "getStatic", { enumerable: true, get: function () { return properties_1.getStatic; } });
    	Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return properties_1.resolveProperties; } });
    	Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function () { return properties_1.shallowCopy; } });
    	var RLP = __importStar(lib$n);
    	exports.RLP = RLP;
    	var signing_key_1 = lib$e;
    	Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function () { return signing_key_1.computePublicKey; } });
    	Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return signing_key_1.recoverPublicKey; } });
    	Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return signing_key_1.SigningKey; } });
    	var strings_1 = lib$l;
    	Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return strings_1.formatBytes32String; } });
    	Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return strings_1.nameprep; } });
    	Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return strings_1.parseBytes32String; } });
    	Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return strings_1._toEscapedUtf8String; } });
    	Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return strings_1.toUtf8Bytes; } });
    	Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return strings_1.toUtf8CodePoints; } });
    	Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return strings_1.toUtf8String; } });
    	Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return strings_1.Utf8ErrorFuncs; } });
    	var transactions_1 = lib$f;
    	Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return transactions_1.accessListify; } });
    	Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return transactions_1.computeAddress; } });
    	Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function () { return transactions_1.parse; } });
    	Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return transactions_1.recoverAddress; } });
    	Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function () { return transactions_1.serialize; } });
    	Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function () { return transactions_1.TransactionTypes; } });
    	var units_1 = lib$1;
    	Object.defineProperty(exports, "commify", { enumerable: true, get: function () { return units_1.commify; } });
    	Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return units_1.formatEther; } });
    	Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return units_1.parseEther; } });
    	Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return units_1.formatUnits; } });
    	Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return units_1.parseUnits; } });
    	var wallet_1 = lib$d;
    	Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return wallet_1.verifyMessage; } });
    	Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return wallet_1.verifyTypedData; } });
    	var web_1 = lib$3;
    	Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function () { return web_1._fetchData; } });
    	Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return web_1.fetchJson; } });
    	Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return web_1.poll; } });
    	////////////////////////
    	// Enums
    	var sha2_2 = lib$9;
    	Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });
    	var strings_2 = lib$l;
    	Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });
    	Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });
    	
    } (utils$b));

    var _version = {};

    Object.defineProperty(_version, "__esModule", { value: true });
    _version.version = void 0;
    _version.version = "ethers/5.7.2";

    (function (exports) {
    	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = void 0;
    	var contracts_1 = lib$v;
    	Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return contracts_1.BaseContract; } });
    	Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return contracts_1.Contract; } });
    	Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return contracts_1.ContractFactory; } });
    	var bignumber_1 = lib$t;
    	Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return bignumber_1.BigNumber; } });
    	Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return bignumber_1.FixedNumber; } });
    	var abstract_signer_1 = lib$g;
    	Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return abstract_signer_1.Signer; } });
    	Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return abstract_signer_1.VoidSigner; } });
    	var wallet_1 = lib$d;
    	Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return wallet_1.Wallet; } });
    	var constants = __importStar(lib$m);
    	exports.constants = constants;
    	var providers = __importStar(lib$5);
    	exports.providers = providers;
    	var providers_1 = lib$5;
    	Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return providers_1.getDefaultProvider; } });
    	var wordlists_1 = lib$8;
    	Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlists_1.Wordlist; } });
    	Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return wordlists_1.wordlists; } });
    	var utils = __importStar(utils$b);
    	exports.utils = utils;
    	var logger_1 = lib$r;
    	Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return logger_1.ErrorCode; } });
    	////////////////////////
    	// Compile-Time Constants
    	// This is generated by "npm run dist"
    	var _version_1 = _version;
    	Object.defineProperty(exports, "version", { enumerable: true, get: function () { return _version_1.version; } });
    	var logger = new logger_1.Logger(_version_1.version);
    	exports.logger = logger;
    	
    } (ethers));

    (function (exports) {
    	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = exports.ethers = void 0;
    	// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js
    	var ethers$1 = __importStar(ethers);
    	exports.ethers = ethers$1;
    	try {
    	    var anyGlobal = window;
    	    if (anyGlobal._ethers == null) {
    	        anyGlobal._ethers = ethers$1;
    	    }
    	}
    	catch (error) { }
    	var ethers_1 = ethers;
    	Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return ethers_1.Signer; } });
    	Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return ethers_1.Wallet; } });
    	Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return ethers_1.VoidSigner; } });
    	Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return ethers_1.getDefaultProvider; } });
    	Object.defineProperty(exports, "providers", { enumerable: true, get: function () { return ethers_1.providers; } });
    	Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return ethers_1.BaseContract; } });
    	Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return ethers_1.Contract; } });
    	Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return ethers_1.ContractFactory; } });
    	Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function () { return ethers_1.BigNumber; } });
    	Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return ethers_1.FixedNumber; } });
    	Object.defineProperty(exports, "constants", { enumerable: true, get: function () { return ethers_1.constants; } });
    	Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return ethers_1.errors; } });
    	Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return ethers_1.logger; } });
    	Object.defineProperty(exports, "utils", { enumerable: true, get: function () { return ethers_1.utils; } });
    	Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return ethers_1.wordlists; } });
    	////////////////////////
    	// Compile-Time Constants
    	Object.defineProperty(exports, "version", { enumerable: true, get: function () { return ethers_1.version; } });
    	Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return ethers_1.Wordlist; } });
    	
    } (lib$w));

    var cjs = {};

    var isTypedarray      = isTypedArray$3;
    isTypedArray$3.strict = isStrictTypedArray;
    isTypedArray$3.loose  = isLooseTypedArray;

    var toString$2 = Object.prototype.toString;
    var names = {
        '[object Int8Array]': true
      , '[object Int16Array]': true
      , '[object Int32Array]': true
      , '[object Uint8Array]': true
      , '[object Uint8ClampedArray]': true
      , '[object Uint16Array]': true
      , '[object Uint32Array]': true
      , '[object Float32Array]': true
      , '[object Float64Array]': true
    };

    function isTypedArray$3(arr) {
      return (
           isStrictTypedArray(arr)
        || isLooseTypedArray(arr)
      )
    }

    function isStrictTypedArray(arr) {
      return (
           arr instanceof Int8Array
        || arr instanceof Int16Array
        || arr instanceof Int32Array
        || arr instanceof Uint8Array
        || arr instanceof Uint8ClampedArray
        || arr instanceof Uint16Array
        || arr instanceof Uint32Array
        || arr instanceof Float32Array
        || arr instanceof Float64Array
      )
    }

    function isLooseTypedArray(arr) {
      return names[toString$2.call(arr)]
    }

    var isTypedArray$2 = isTypedarray.strict;

    var typedarrayToBuffer = function typedarrayToBuffer (arr) {
      if (isTypedArray$2(arr)) {
        // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
        var buf = Buffer$g.from(arr.buffer);
        if (arr.byteLength !== arr.buffer.byteLength) {
          // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
          buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
        }
        return buf
      } else {
        // Pass through all other types to `Buffer.from`
        return Buffer$g.from(arr)
      }
    };

    var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(cjs, "__esModule", { value: true });
    const is_typedarray_1 = __importDefault$4(isTypedarray);
    const typedarray_to_buffer_1 = __importDefault$4(typedarrayToBuffer);
    const ENC_HEX = 'hex';
    const ENC_UTF8 = 'utf8';
    const ENC_BIN = 'binary';
    const TYPE_BUFFER = 'buffer';
    const TYPE_ARRAY = 'array';
    const TYPE_TYPED_ARRAY = 'typed-array';
    const TYPE_ARRAY_BUFFER = 'array-buffer';
    const STRING_ZERO = '0';
    function bufferToArray(buf) {
        return new Uint8Array(buf);
    }
    cjs.bufferToArray = bufferToArray;
    function bufferToHex(buf, prefixed = false) {
        const hex = buf.toString(ENC_HEX);
        return prefixed ? addHexPrefix(hex) : hex;
    }
    cjs.bufferToHex = bufferToHex;
    function bufferToUtf8(buf) {
        return buf.toString(ENC_UTF8);
    }
    cjs.bufferToUtf8 = bufferToUtf8;
    function bufferToNumber(buf) {
        return buf.readUIntBE(0, buf.length);
    }
    cjs.bufferToNumber = bufferToNumber;
    function bufferToBinary(buf) {
        return arrayToBinary(bufferToArray(buf));
    }
    cjs.bufferToBinary = bufferToBinary;
    function arrayToBuffer(arr) {
        return typedarray_to_buffer_1.default(arr);
    }
    cjs.arrayToBuffer = arrayToBuffer;
    function arrayToHex(arr, prefixed = false) {
        return bufferToHex(arrayToBuffer(arr), prefixed);
    }
    cjs.arrayToHex = arrayToHex;
    function arrayToUtf8(arr) {
        return bufferToUtf8(arrayToBuffer(arr));
    }
    cjs.arrayToUtf8 = arrayToUtf8;
    function arrayToNumber(arr) {
        return bufferToNumber(arrayToBuffer(arr));
    }
    cjs.arrayToNumber = arrayToNumber;
    function arrayToBinary(arr) {
        return Array.from(arr)
            .map(numberToBinary)
            .join('');
    }
    cjs.arrayToBinary = arrayToBinary;
    function hexToBuffer(hex) {
        return Buffer$g.from(removeHexPrefix(hex), ENC_HEX);
    }
    cjs.hexToBuffer = hexToBuffer;
    function hexToArray(hex) {
        return bufferToArray(hexToBuffer(hex));
    }
    cjs.hexToArray = hexToArray;
    function hexToUtf8(hex) {
        return bufferToUtf8(hexToBuffer(hex));
    }
    cjs.hexToUtf8 = hexToUtf8;
    function hexToNumber(hex) {
        return arrayToNumber(hexToArray(hex));
    }
    cjs.hexToNumber = hexToNumber;
    function hexToBinary(hex) {
        return arrayToBinary(hexToArray(hex));
    }
    cjs.hexToBinary = hexToBinary;
    function utf8ToBuffer(utf8) {
        return Buffer$g.from(utf8, ENC_UTF8);
    }
    cjs.utf8ToBuffer = utf8ToBuffer;
    function utf8ToArray(utf8) {
        return bufferToArray(utf8ToBuffer(utf8));
    }
    cjs.utf8ToArray = utf8ToArray;
    function utf8ToHex(utf8, prefixed = false) {
        return bufferToHex(utf8ToBuffer(utf8), prefixed);
    }
    cjs.utf8ToHex = utf8ToHex;
    function utf8ToNumber(utf8) {
        const num = parseInt(utf8, 10);
        assert$3(isDefined(num), 'Number can only safely store up to 53 bits');
        return num;
    }
    cjs.utf8ToNumber = utf8ToNumber;
    function utf8ToBinary(utf8) {
        return arrayToBinary(utf8ToArray(utf8));
    }
    cjs.utf8ToBinary = utf8ToBinary;
    function numberToBuffer(num) {
        return binaryToBuffer(numberToBinary(num));
    }
    cjs.numberToBuffer = numberToBuffer;
    function numberToArray(num) {
        return binaryToArray(numberToBinary(num));
    }
    cjs.numberToArray = numberToArray;
    function numberToHex(num, prefixed) {
        return binaryToHex(numberToBinary(num), prefixed);
    }
    cjs.numberToHex = numberToHex;
    function numberToUtf8(num) {
        return `${num}`;
    }
    cjs.numberToUtf8 = numberToUtf8;
    function numberToBinary(num) {
        const bin = (num >>> 0).toString(2);
        return sanitizeBytes(bin);
    }
    cjs.numberToBinary = numberToBinary;
    function binaryToBuffer(bin) {
        return arrayToBuffer(binaryToArray(bin));
    }
    cjs.binaryToBuffer = binaryToBuffer;
    function binaryToArray(bin) {
        return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));
    }
    cjs.binaryToArray = binaryToArray;
    function binaryToHex(bin, prefixed) {
        return arrayToHex(binaryToArray(bin), prefixed);
    }
    cjs.binaryToHex = binaryToHex;
    function binaryToUtf8(bin) {
        return arrayToUtf8(binaryToArray(bin));
    }
    cjs.binaryToUtf8 = binaryToUtf8;
    function binaryToNumber(bin) {
        return arrayToNumber(binaryToArray(bin));
    }
    cjs.binaryToNumber = binaryToNumber;
    function isBinaryString(str) {
        if (typeof str !== 'string' || !new RegExp(/^[01]+$/).test(str)) {
            return false;
        }
        if (str.length % 8 !== 0) {
            return false;
        }
        return true;
    }
    cjs.isBinaryString = isBinaryString;
    function isHexString$1(str, length) {
        if (typeof str !== 'string' || !str.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && str.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    cjs.isHexString = isHexString$1;
    function isBuffer$3(val) {
        return Buffer$g.isBuffer(val);
    }
    cjs.isBuffer = isBuffer$3;
    function isTypedArray$1(val) {
        return is_typedarray_1.default.strict(val) && !isBuffer$3(val);
    }
    cjs.isTypedArray = isTypedArray$1;
    function isArrayBuffer$2(val) {
        return (!isTypedArray$1(val) &&
            !isBuffer$3(val) &&
            typeof val.byteLength !== 'undefined');
    }
    cjs.isArrayBuffer = isArrayBuffer$2;
    function getType(val) {
        if (isBuffer$3(val)) {
            return TYPE_BUFFER;
        }
        else if (isTypedArray$1(val)) {
            return TYPE_TYPED_ARRAY;
        }
        else if (isArrayBuffer$2(val)) {
            return TYPE_ARRAY_BUFFER;
        }
        else if (Array.isArray(val)) {
            return TYPE_ARRAY;
        }
        else {
            return typeof val;
        }
    }
    cjs.getType = getType;
    function getEncoding(str) {
        if (isBinaryString(str)) {
            return ENC_BIN;
        }
        if (isHexString$1(str)) {
            return ENC_HEX;
        }
        return ENC_UTF8;
    }
    cjs.getEncoding = getEncoding;
    function concatBuffers(...args) {
        const result = Buffer$g.concat(args);
        return result;
    }
    cjs.concatBuffers = concatBuffers;
    function concatArrays(...args) {
        let result = [];
        args.forEach(arg => (result = result.concat(Array.from(arg))));
        return new Uint8Array([...result]);
    }
    cjs.concatArrays = concatArrays;
    function trimLeft(data, length) {
        const diff = data.length - length;
        if (diff > 0) {
            data = data.slice(diff);
        }
        return data;
    }
    cjs.trimLeft = trimLeft;
    function trimRight(data, length) {
        return data.slice(0, length);
    }
    cjs.trimRight = trimRight;
    function calcByteLength(length, byteSize = 8) {
        const remainder = length % byteSize;
        return remainder
            ? ((length - remainder) / byteSize) * byteSize + byteSize
            : length;
    }
    cjs.calcByteLength = calcByteLength;
    function splitBytes(str, byteSize = 8) {
        const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, 'gi'));
        return Array.from(bytes || []);
    }
    cjs.splitBytes = splitBytes;
    function swapBytes(str) {
        return splitBytes(str)
            .map(reverseString)
            .join('');
    }
    cjs.swapBytes = swapBytes;
    function swapHex(str) {
        return binaryToHex(swapBytes(hexToBinary(str)));
    }
    cjs.swapHex = swapHex;
    function sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {
        return padLeft(str, calcByteLength(str.length, byteSize), padding);
    }
    cjs.sanitizeBytes = sanitizeBytes;
    function padLeft(str, length, padding = STRING_ZERO) {
        return padString(str, length, true, padding);
    }
    var padLeft_1 = cjs.padLeft = padLeft;
    function padRight(str, length, padding = STRING_ZERO) {
        return padString(str, length, false, padding);
    }
    cjs.padRight = padRight;
    function removeHexPrefix(hex) {
        return hex.replace(/^0x/, '');
    }
    var removeHexPrefix_1 = cjs.removeHexPrefix = removeHexPrefix;
    function addHexPrefix(hex) {
        return hex.startsWith('0x') ? hex : `0x${hex}`;
    }
    var addHexPrefix_1 = cjs.addHexPrefix = addHexPrefix;
    function sanitizeHex(hex) {
        hex = removeHexPrefix(hex);
        hex = sanitizeBytes(hex, 2);
        if (hex) {
            hex = addHexPrefix(hex);
        }
        return hex;
    }
    cjs.sanitizeHex = sanitizeHex;
    function removeHexLeadingZeros(hex) {
        const prefixed = hex.startsWith('0x');
        hex = removeHexPrefix(hex);
        hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;
        return prefixed ? addHexPrefix(hex) : hex;
    }
    cjs.removeHexLeadingZeros = removeHexLeadingZeros;
    function isUndefined$3(value) {
        return typeof value === 'undefined';
    }
    function isDefined(value) {
        return !isUndefined$3(value);
    }
    function assert$3(assertion, errorMessage) {
        if (!assertion) {
            throw new Error(errorMessage);
        }
    }
    function reverseString(str) {
        return str
            .split('')
            .reverse()
            .join('');
    }
    function padString(str, length, left, padding = STRING_ZERO) {
        const diff = length - str.length;
        let result = str;
        if (diff > 0) {
            const pad = padding.repeat(diff);
            result = left ? pad + str : str + pad;
        }
        return result;
    }

    var dist_browser$2 = {};

    var dist_browser$1 = {};

    var constants = {};

    var externals = {};

    var dist_browser = {};

    var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(dist_browser, "__esModule", { value: true });
    dist_browser.getLength = dist_browser.decode = dist_browser.encode = void 0;
    var bn_js_1$1 = __importDefault$3(bnExports$1);
    /**
     * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
     * This function takes in a data, convert it to buffer if not, and a length for recursion
     * @param input - will be converted to buffer
     * @returns returns buffer of encoded data
     **/
    function encode$3(input) {
        if (Array.isArray(input)) {
            var output = [];
            for (var i = 0; i < input.length; i++) {
                output.push(encode$3(input[i]));
            }
            var buf = Buffer$g.concat(output);
            return Buffer$g.concat([encodeLength(buf.length, 192), buf]);
        }
        else {
            var inputBuf = toBuffer(input);
            return inputBuf.length === 1 && inputBuf[0] < 128
                ? inputBuf
                : Buffer$g.concat([encodeLength(inputBuf.length, 128), inputBuf]);
        }
    }
    dist_browser.encode = encode$3;
    /**
     * Parse integers. Check if there is no leading zeros
     * @param v The value to parse
     * @param base The base to parse the integer into
     */
    function safeParseInt(v, base) {
        if (v[0] === '0' && v[1] === '0') {
            throw new Error('invalid RLP: extra zeros');
        }
        return parseInt(v, base);
    }
    function encodeLength(len, offset) {
        if (len < 56) {
            return Buffer$g.from([len + offset]);
        }
        else {
            var hexLength = intToHex(len);
            var lLength = hexLength.length / 2;
            var firstByte = intToHex(offset + 55 + lLength);
            return Buffer$g.from(firstByte + hexLength, 'hex');
        }
    }
    function decode(input, stream) {
        if (stream === void 0) { stream = false; }
        if (!input || input.length === 0) {
            return Buffer$g.from([]);
        }
        var inputBuffer = toBuffer(input);
        var decoded = _decode(inputBuffer);
        if (stream) {
            return decoded;
        }
        if (decoded.remainder.length !== 0) {
            throw new Error('invalid remainder');
        }
        return decoded.data;
    }
    dist_browser.decode = decode;
    /**
     * Get the length of the RLP input
     * @param input
     * @returns The length of the input or an empty Buffer if no input
     */
    function getLength(input) {
        if (!input || input.length === 0) {
            return Buffer$g.from([]);
        }
        var inputBuffer = toBuffer(input);
        var firstByte = inputBuffer[0];
        if (firstByte <= 0x7f) {
            return inputBuffer.length;
        }
        else if (firstByte <= 0xb7) {
            return firstByte - 0x7f;
        }
        else if (firstByte <= 0xbf) {
            return firstByte - 0xb6;
        }
        else if (firstByte <= 0xf7) {
            // a list between  0-55 bytes long
            return firstByte - 0xbf;
        }
        else {
            // a list  over 55 bytes long
            var llength = firstByte - 0xf6;
            var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
            return llength + length_1;
        }
    }
    dist_browser.getLength = getLength;
    /** Decode an input with RLP */
    function _decode(input) {
        var length, llength, data, innerRemainder, d;
        var decoded = [];
        var firstByte = input[0];
        if (firstByte <= 0x7f) {
            // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
            return {
                data: input.slice(0, 1),
                remainder: input.slice(1),
            };
        }
        else if (firstByte <= 0xb7) {
            // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
            // The range of the first byte is [0x80, 0xb7]
            length = firstByte - 0x7f;
            // set 0x80 null to 0
            if (firstByte === 0x80) {
                data = Buffer$g.from([]);
            }
            else {
                data = input.slice(1, length);
            }
            if (length === 2 && data[0] < 0x80) {
                throw new Error('invalid rlp encoding: byte must be less 0x80');
            }
            return {
                data: data,
                remainder: input.slice(length),
            };
        }
        else if (firstByte <= 0xbf) {
            // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
            // followed by the length, followed by the string
            llength = firstByte - 0xb6;
            if (input.length - 1 < llength) {
                throw new Error('invalid RLP: not enough bytes for string length');
            }
            length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
            if (length <= 55) {
                throw new Error('invalid RLP: expected string length to be greater than 55');
            }
            data = input.slice(llength, length + llength);
            if (data.length < length) {
                throw new Error('invalid RLP: not enough bytes for string');
            }
            return {
                data: data,
                remainder: input.slice(length + llength),
            };
        }
        else if (firstByte <= 0xf7) {
            // a list between  0-55 bytes long
            length = firstByte - 0xbf;
            innerRemainder = input.slice(1, length);
            while (innerRemainder.length) {
                d = _decode(innerRemainder);
                decoded.push(d.data);
                innerRemainder = d.remainder;
            }
            return {
                data: decoded,
                remainder: input.slice(length),
            };
        }
        else {
            // a list  over 55 bytes long
            llength = firstByte - 0xf6;
            length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
            var totalLength = llength + length;
            if (totalLength > input.length) {
                throw new Error('invalid rlp: total length is larger than the data');
            }
            innerRemainder = input.slice(llength, totalLength);
            if (innerRemainder.length === 0) {
                throw new Error('invalid rlp, List has a invalid length');
            }
            while (innerRemainder.length) {
                d = _decode(innerRemainder);
                decoded.push(d.data);
                innerRemainder = d.remainder;
            }
            return {
                data: decoded,
                remainder: input.slice(totalLength),
            };
        }
    }
    /** Check if a string is prefixed by 0x */
    function isHexPrefixed$1(str) {
        return str.slice(0, 2) === '0x';
    }
    /** Removes 0x from a given String */
    function stripHexPrefix$1(str) {
        if (typeof str !== 'string') {
            return str;
        }
        return isHexPrefixed$1(str) ? str.slice(2) : str;
    }
    /** Transform an integer into its hexadecimal value */
    function intToHex(integer) {
        if (integer < 0) {
            throw new Error('Invalid integer as argument, must be unsigned!');
        }
        var hex = integer.toString(16);
        return hex.length % 2 ? "0" + hex : hex;
    }
    /** Pad a string to be even */
    function padToEven$1(a) {
        return a.length % 2 ? "0" + a : a;
    }
    /** Transform an integer into a Buffer */
    function intToBuffer(integer) {
        var hex = intToHex(integer);
        return Buffer$g.from(hex, 'hex');
    }
    /** Transform anything into a Buffer */
    function toBuffer(v) {
        if (!Buffer$g.isBuffer(v)) {
            if (typeof v === 'string') {
                if (isHexPrefixed$1(v)) {
                    return Buffer$g.from(padToEven$1(stripHexPrefix$1(v)), 'hex');
                }
                else {
                    return Buffer$g.from(v);
                }
            }
            else if (typeof v === 'number' || typeof v === 'bigint') {
                if (!v) {
                    return Buffer$g.from([]);
                }
                else {
                    return intToBuffer(v);
                }
            }
            else if (v === null || v === undefined) {
                return Buffer$g.from([]);
            }
            else if (v instanceof Uint8Array) {
                return Buffer$g.from(v);
            }
            else if (bn_js_1$1.default.isBN(v)) {
                // converts a BN to a Buffer
                return Buffer$g.from(v.toArray());
            }
            else {
                throw new Error('invalid type');
            }
        }
        return v;
    }

    /**
     * Re-exports commonly used modules:
     * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).
     * @packageDocumentation
     */
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(externals, "__esModule", { value: true });
    externals.rlp = externals.BN = void 0;
    var bn_js_1 = __importDefault$2(bnExports$1);
    externals.BN = bn_js_1.default;
    var rlp = __importStar$1(dist_browser);
    externals.rlp = rlp;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
    	var buffer_1 = require$$0$5;
    	var externals_1 = externals;
    	/**
    	 * 2^64-1
    	 */
    	exports.MAX_UINT64 = new externals_1.BN('ffffffffffffffff', 16);
    	/**
    	 * The max integer that the evm can handle (2^256-1)
    	 */
    	exports.MAX_INTEGER = new externals_1.BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
    	/**
    	 * 2^256
    	 */
    	exports.TWO_POW256 = new externals_1.BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
    	/**
    	 * Keccak-256 hash of null
    	 */
    	exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    	/**
    	 * Keccak-256 hash of null
    	 */
    	exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, 'hex');
    	/**
    	 * Keccak-256 of an RLP of an empty array
    	 */
    	exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
    	/**
    	 * Keccak-256 of an RLP of an empty array
    	 */
    	exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
    	/**
    	 * Keccak-256 hash of the RLP of null
    	 */
    	exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
    	/**
    	 * Keccak-256 hash of the RLP of null
    	 */
    	exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, 'hex');
    	
    } (constants));

    var account = {};

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform$1 = 'browser';
    var browser$4 = true;
    var env = {};
    var argv = [];
    var version$1 = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config$1 = {};

    function noop$3() {}

    var on$2 = noop$3;
    var addListener = noop$3;
    var once$2 = noop$3;
    var off = noop$3;
    var removeListener = noop$3;
    var removeAllListeners = noop$3;
    var emit = noop$3;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var browser$1$1 = {
      nextTick: nextTick,
      title: title,
      browser: browser$4,
      env: env,
      argv: argv,
      version: version$1,
      versions: versions,
      on: on$2,
      addListener: addListener,
      once: once$2,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform$1,
      release: release,
      config: config$1,
      uptime: uptime
    };

    var inherits$e;
    if (typeof Object.create === 'function'){
      inherits$e = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits$e = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$f = inherits$e;

    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
      function getOwnPropertyDescriptors(obj) {
        var keys = Object.keys(obj);
        var descriptors = {};
        for (var i = 0; i < keys.length; i++) {
          descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
        }
        return descriptors;
      };

    var formatRegExp = /%[sdj%]/g;
    function format(f) {
      if (!isString$2(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect$1(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject$2(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect$1(x);
        }
      }
      return str;
    }

    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    function deprecate$1(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined$2(global$1.process)) {
        return function() {
          return deprecate$1(fn, msg).apply(this, arguments);
        };
      }

      if (browser$1$1.noDeprecation === true) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          if (browser$1$1.throwDeprecation) {
            throw new Error(msg);
          } else if (browser$1$1.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    var debugs = {};
    var debugEnviron;
    function debuglog(set) {
      if (isUndefined$2(debugEnviron))
        debugEnviron = browser$1$1.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = 0;
          debugs[set] = function() {
            var msg = format.apply(null, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    }

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect$1(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean$1(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined$2(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined$2(ctx.depth)) ctx.depth = 2;
      if (isUndefined$2(ctx.colors)) ctx.colors = false;
      if (isUndefined$2(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect$1.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect$1.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect$1.styles[styleType];

      if (style) {
        return '\u001b[' + inspect$1.colors[style][0] + 'm' + str +
               '\u001b[' + inspect$1.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction$2(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect$1 &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString$2(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction$2(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp$1(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate$2(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray$2(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction$2(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp$1(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate$2(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp$1(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined$2(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString$2(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber$2(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean$1(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty$1(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty$1(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined$2(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray$2(ar) {
      return Array.isArray(ar);
    }

    function isBoolean$1(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber$2(arg) {
      return typeof arg === 'number';
    }

    function isString$2(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined$2(arg) {
      return arg === void 0;
    }

    function isRegExp$1(re) {
      return isObject$2(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject$2(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate$2(d) {
      return isObject$2(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject$2(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction$2(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }

    function isBuffer$2(maybeBuf) {
      return Buffer$g.isBuffer(maybeBuf);
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }


    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }


    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];

    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }


    // log is just a thin wrapper to console.log that prepends a timestamp
    function log() {
      console.log('%s - %s', timestamp(), format.apply(null, arguments));
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject$2(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty$1(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

    function promisify(original) {
      if (typeof original !== 'function')
        throw new TypeError('The "original" argument must be of type Function');

      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn, enumerable: false, writable: false, configurable: true
        });
        return fn;
      }

      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function (resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });

        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function (err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });

        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }

        return promise;
      }

      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn, enumerable: false, writable: false, configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    }

    promisify.custom = kCustomPromisifiedSymbol;

    function callbackifyOnRejected(reason, cb) {
      // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
      // Because `null` is a special error value in callbacks which means "no error
      // occurred", we error-wrap so the callback consumer can distinguish between
      // "the promise rejected with null" or "the promise fulfilled with undefined".
      if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }

    function callbackify(original) {
      if (typeof original !== 'function') {
        throw new TypeError('The "original" argument must be of type Function');
      }

      // We DO NOT return the promise as it gives the user a false sense that
      // the promise is actually somehow related to the callback's execution
      // and that the callback throwing will reject the promise.
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }

        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') {
          throw new TypeError('The last argument must be of type Function');
        }
        var self = this;
        var cb = function() {
          return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args)
          .then(function(ret) { browser$1$1.nextTick(cb.bind(null, null, ret)); },
            function(rej) { browser$1$1.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
      }

      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
      return callbackified;
    }

    var _polyfillNode_util = {
      inherits: inherits$f,
      _extend: _extend,
      log: log,
      isBuffer: isBuffer$2,
      isPrimitive: isPrimitive,
      isFunction: isFunction$2,
      isError: isError,
      isDate: isDate$2,
      isObject: isObject$2,
      isRegExp: isRegExp$1,
      isUndefined: isUndefined$2,
      isSymbol: isSymbol,
      isString: isString$2,
      isNumber: isNumber$2,
      isNullOrUndefined: isNullOrUndefined,
      isNull: isNull,
      isBoolean: isBoolean$1,
      isArray: isArray$2,
      inspect: inspect$1,
      deprecate: deprecate$1,
      format: format,
      debuglog: debuglog,
      promisify: promisify,
      callbackify: callbackify,
    };

    var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _extend: _extend,
        callbackify: callbackify,
        debuglog: debuglog,
        default: _polyfillNode_util,
        deprecate: deprecate$1,
        format: format,
        inherits: inherits$f,
        inspect: inspect$1,
        isArray: isArray$2,
        isBoolean: isBoolean$1,
        isBuffer: isBuffer$2,
        isDate: isDate$2,
        isError: isError,
        isFunction: isFunction$2,
        isNull: isNull,
        isNullOrUndefined: isNullOrUndefined,
        isNumber: isNumber$2,
        isObject: isObject$2,
        isPrimitive: isPrimitive,
        isRegExp: isRegExp$1,
        isString: isString$2,
        isSymbol: isSymbol,
        isUndefined: isUndefined$2,
        log: log,
        promisify: promisify
    });

    function compare(a, b) {
      if (a === b) {
        return 0;
      }

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }

      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var hasOwn = Object.prototype.hasOwnProperty;

    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        if (hasOwn.call(obj, key)) keys.push(key);
      }
      return keys;
    };
    var pSlice = Array.prototype.slice;
    var _functionsHaveNames;
    function functionsHaveNames() {
      if (typeof _functionsHaveNames !== 'undefined') {
        return _functionsHaveNames;
      }
      return _functionsHaveNames = (function () {
        return function foo() {}.name === 'foo';
      }());
    }
    function pToString (obj) {
      return Object.prototype.toString.call(obj);
    }
    function isView(arrbuf) {
      if (isBuffer$4(arrbuf)) {
        return false;
      }
      if (typeof global$1.ArrayBuffer !== 'function') {
        return false;
      }
      if (typeof ArrayBuffer.isView === 'function') {
        return ArrayBuffer.isView(arrbuf);
      }
      if (!arrbuf) {
        return false;
      }
      if (arrbuf instanceof DataView) {
        return true;
      }
      if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
        return true;
      }
      return false;
    }
    // 1. The assert module provides functions that throw
    // AssertionError's when particular conditions are not met. The
    // assert module must conform to the following interface.

    function assert$2(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }

    // 2. The AssertionError is defined in assert.
    // new assert.AssertionError({ message: message,
    //                             actual: actual,
    //                             expected: expected })

    var regex = /\s*function\s+([^\(\s]*)\s*/;
    // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
    function getName(func) {
      if (!isFunction$2(func)) {
        return;
      }
      if (functionsHaveNames()) {
        return func.name;
      }
      var str = func.toString();
      var match = str.match(regex);
      return match && match[1];
    }
    assert$2.AssertionError = AssertionError;
    function AssertionError(options) {
      this.name = 'AssertionError';
      this.actual = options.actual;
      this.expected = options.expected;
      this.operator = options.operator;
      if (options.message) {
        this.message = options.message;
        this.generatedMessage = false;
      } else {
        this.message = getMessage(this);
        this.generatedMessage = true;
      }
      var stackStartFunction = options.stackStartFunction || fail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, stackStartFunction);
      } else {
        // non v8 browsers so we can have a stacktrace
        var err = new Error();
        if (err.stack) {
          var out = err.stack;

          // try to strip useless frames
          var fn_name = getName(stackStartFunction);
          var idx = out.indexOf('\n' + fn_name);
          if (idx >= 0) {
            // once we have located the function frame
            // we need to strip out everything before it (and its line)
            var next_line = out.indexOf('\n', idx + 1);
            out = out.substring(next_line + 1);
          }

          this.stack = out;
        }
      }
    }

    // assert.AssertionError instanceof Error
    inherits$f(AssertionError, Error);

    function truncate(s, n) {
      if (typeof s === 'string') {
        return s.length < n ? s : s.slice(0, n);
      } else {
        return s;
      }
    }
    function inspect(something) {
      if (functionsHaveNames() || !isFunction$2(something)) {
        return inspect$1(something);
      }
      var rawname = getName(something);
      var name = rawname ? ': ' + rawname : '';
      return '[Function' +  name + ']';
    }
    function getMessage(self) {
      return truncate(inspect(self.actual), 128) + ' ' +
             self.operator + ' ' +
             truncate(inspect(self.expected), 128);
    }

    // At present only the three keys mentioned above are used and
    // understood by the spec. Implementations or sub modules can pass
    // other keys to the AssertionError's constructor - they will be
    // ignored.

    // 3. All of the following functions must throw an AssertionError
    // when a corresponding condition is not met, with a message that
    // may be undefined if not provided.  All assertion methods provide
    // both the actual and expected values to the assertion error for
    // display purposes.

    function fail(actual, expected, message, operator, stackStartFunction) {
      throw new AssertionError({
        message: message,
        actual: actual,
        expected: expected,
        operator: operator,
        stackStartFunction: stackStartFunction
      });
    }

    // EXTENSION! allows for well behaved errors defined elsewhere.
    assert$2.fail = fail;

    // 4. Pure assertion tests whether a value is truthy, as determined
    // by !!guard.
    // assert.ok(guard, message_opt);
    // This statement is equivalent to assert.equal(true, !!guard,
    // message_opt);. To test strictly for the value true, use
    // assert.strictEqual(true, guard, message_opt);.

    function ok(value, message) {
      if (!value) fail(value, true, message, '==', ok);
    }
    assert$2.ok = ok;

    // 5. The equality assertion tests shallow, coercive equality with
    // ==.
    // assert.equal(actual, expected, message_opt);
    assert$2.equal = equal;
    function equal(actual, expected, message) {
      if (actual != expected) fail(actual, expected, message, '==', equal);
    }

    // 6. The non-equality assertion tests for whether two objects are not equal
    // with != assert.notEqual(actual, expected, message_opt);
    assert$2.notEqual = notEqual;
    function notEqual(actual, expected, message) {
      if (actual == expected) {
        fail(actual, expected, message, '!=', notEqual);
      }
    }

    // 7. The equivalence assertion tests a deep equality relation.
    // assert.deepEqual(actual, expected, message_opt);
    assert$2.deepEqual = deepEqual;
    function deepEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'deepEqual', deepEqual);
      }
    }
    assert$2.deepStrictEqual = deepStrictEqual;
    function deepStrictEqual(actual, expected, message) {
      if (!_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
      }
    }

    function _deepEqual(actual, expected, strict, memos) {
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;
      } else if (isBuffer$4(actual) && isBuffer$4(expected)) {
        return compare(actual, expected) === 0;

      // 7.2. If the expected value is a Date object, the actual value is
      // equivalent if it is also a Date object that refers to the same time.
      } else if (isDate$2(actual) && isDate$2(expected)) {
        return actual.getTime() === expected.getTime();

      // 7.3 If the expected value is a RegExp object, the actual value is
      // equivalent if it is also a RegExp object with the same source and
      // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
      } else if (isRegExp$1(actual) && isRegExp$1(expected)) {
        return actual.source === expected.source &&
               actual.global === expected.global &&
               actual.multiline === expected.multiline &&
               actual.lastIndex === expected.lastIndex &&
               actual.ignoreCase === expected.ignoreCase;

      // 7.4. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if ((actual === null || typeof actual !== 'object') &&
                 (expected === null || typeof expected !== 'object')) {
        return strict ? actual === expected : actual == expected;

      // If both values are instances of typed arrays, wrap their underlying
      // ArrayBuffers in a Buffer each to increase performance
      // This optimization requires the arrays to have the same type as checked by
      // Object.prototype.toString (aka pToString). Never perform binary
      // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
      // bit patterns are not identical.
      } else if (isView(actual) && isView(expected) &&
                 pToString(actual) === pToString(expected) &&
                 !(actual instanceof Float32Array ||
                   actual instanceof Float64Array)) {
        return compare(new Uint8Array(actual.buffer),
                       new Uint8Array(expected.buffer)) === 0;

      // 7.5 For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else if (isBuffer$4(actual) !== isBuffer$4(expected)) {
        return false;
      } else {
        memos = memos || {actual: [], expected: []};

        var actualIndex = memos.actual.indexOf(actual);
        if (actualIndex !== -1) {
          if (actualIndex === memos.expected.indexOf(expected)) {
            return true;
          }
        }

        memos.actual.push(actual);
        memos.expected.push(expected);

        return objEquiv(actual, expected, strict, memos);
      }
    }

    function isArguments(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }

    function objEquiv(a, b, strict, actualVisitedObjects) {
      if (a === null || a === undefined || b === null || b === undefined)
        return false;
      // if one is a primitive, the other must be same
      if (isPrimitive(a) || isPrimitive(b))
        return a === b;
      if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
        return false;
      var aIsArgs = isArguments(a);
      var bIsArgs = isArguments(b);
      if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
        return false;
      if (aIsArgs) {
        a = pSlice.call(a);
        b = pSlice.call(b);
        return _deepEqual(a, b, strict);
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b);
      var key, i;
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length !== kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] !== kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
          return false;
      }
      return true;
    }

    // 8. The non-equivalence assertion tests for any deep inequality.
    // assert.notDeepEqual(actual, expected, message_opt);
    assert$2.notDeepEqual = notDeepEqual;
    function notDeepEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, false)) {
        fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
      }
    }

    assert$2.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (_deepEqual(actual, expected, true)) {
        fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
      }
    }


    // 9. The strict equality assertion tests strict equality, as determined by ===.
    // assert.strictEqual(actual, expected, message_opt);
    assert$2.strictEqual = strictEqual;
    function strictEqual(actual, expected, message) {
      if (actual !== expected) {
        fail(actual, expected, message, '===', strictEqual);
      }
    }

    // 10. The strict non-equality assertion tests for strict inequality, as
    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
    assert$2.notStrictEqual = notStrictEqual;
    function notStrictEqual(actual, expected, message) {
      if (actual === expected) {
        fail(actual, expected, message, '!==', notStrictEqual);
      }
    }

    function expectedException(actual, expected) {
      if (!actual || !expected) {
        return false;
      }

      if (Object.prototype.toString.call(expected) == '[object RegExp]') {
        return expected.test(actual);
      }

      try {
        if (actual instanceof expected) {
          return true;
        }
      } catch (e) {
        // Ignore.  The instanceof check doesn't work for arrow functions.
      }

      if (Error.isPrototypeOf(expected)) {
        return false;
      }

      return expected.call({}, actual) === true;
    }

    function _tryBlock(block) {
      var error;
      try {
        block();
      } catch (e) {
        error = e;
      }
      return error;
    }

    function _throws(shouldThrow, block, expected, message) {
      var actual;

      if (typeof block !== 'function') {
        throw new TypeError('"block" argument must be a function');
      }

      if (typeof expected === 'string') {
        message = expected;
        expected = null;
      }

      actual = _tryBlock(block);

      message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                (message ? ' ' + message : '.');

      if (shouldThrow && !actual) {
        fail(actual, expected, 'Missing expected exception' + message);
      }

      var userProvidedMessage = typeof message === 'string';
      var isUnwantedException = !shouldThrow && isError(actual);
      var isUnexpectedException = !shouldThrow && actual && !expected;

      if ((isUnwantedException &&
          userProvidedMessage &&
          expectedException(actual, expected)) ||
          isUnexpectedException) {
        fail(actual, expected, 'Got unwanted exception' + message);
      }

      if ((shouldThrow && actual && expected &&
          !expectedException(actual, expected)) || (!shouldThrow && actual)) {
        throw actual;
      }
    }

    // 11. Expected to throw an error:
    // assert.throws(block, Error_opt, message_opt);
    assert$2.throws = throws;
    function throws(block, /*optional*/error, /*optional*/message) {
      _throws(true, block, error, message);
    }

    // EXTENSION! This is annoying to write outside this module.
    assert$2.doesNotThrow = doesNotThrow;
    function doesNotThrow(block, /*optional*/error, /*optional*/message) {
      _throws(false, block, error, message);
    }

    assert$2.ifError = ifError;
    function ifError(err) {
      if (err) throw err;
    }

    var _polyfillNode_assert = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AssertionError: AssertionError,
        assert: ok,
        deepEqual: deepEqual,
        deepStrictEqual: deepStrictEqual,
        default: assert$2,
        doesNotThrow: doesNotThrow,
        equal: equal,
        fail: fail,
        ifError: ifError,
        notDeepEqual: notDeepEqual,
        notDeepStrictEqual: notDeepStrictEqual,
        notEqual: notEqual,
        notStrictEqual: notStrictEqual,
        ok: ok,
        strictEqual: strictEqual,
        throws: throws
    });

    var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_assert);

    var secp256k1$1 = {};

    const errors = {
      IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
      TWEAK_ADD:
        'The tweak was out of range or the resulted private key is invalid',
      TWEAK_MUL: 'The tweak was out of range or equal to zero',
      CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
      SECKEY_INVALID: 'Private Key is invalid',
      PUBKEY_PARSE: 'Public Key could not be parsed',
      PUBKEY_SERIALIZE: 'Public Key serialization error',
      PUBKEY_COMBINE: 'The sum of the public keys is not valid',
      SIG_PARSE: 'Signature could not be parsed',
      SIGN: 'The nonce generation function failed, or the private key was invalid',
      RECOVER: 'Public key could not be recover',
      ECDH: 'Scalar was invalid (zero or overflow)'
    };

    function assert$1 (cond, msg) {
      if (!cond) throw new Error(msg)
    }

    function isUint8Array (name, value, length) {
      assert$1(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);

      if (length !== undefined) {
        if (Array.isArray(length)) {
          const numbers = length.join(', ');
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert$1(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert$1(value.length === length, msg);
        }
      }
    }

    function isCompressed (value) {
      assert$1(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
    }

    function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
      if (typeof output === 'function') output = output(length);
      isUint8Array('output', output, length);
      return output
    }

    function toTypeString (value) {
      return Object.prototype.toString.call(value).slice(8, -1)
    }

    var lib = (secp256k1) => {
      return {
        contextRandomize (seed) {
          assert$1(
            seed === null || seed instanceof Uint8Array,
            'Expected seed to be an Uint8Array or null'
          );
          if (seed !== null) isUint8Array('seed', seed, 32);

          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
          }
        },

        privateKeyVerify (seckey) {
          isUint8Array('private key', seckey, 32);

          return secp256k1.privateKeyVerify(seckey) === 0
        },

        privateKeyNegate (seckey) {
          isUint8Array('private key', seckey, 32);

          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },

        privateKeyTweakAdd (seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors.TWEAK_ADD)
          }
        },

        privateKeyTweakMul (seckey, tweak) {
          isUint8Array('private key', seckey, 32);
          isUint8Array('tweak', tweak, 32);

          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey
            case 1:
              throw new Error(errors.TWEAK_MUL)
          }
        },

        publicKeyVerify (pubkey) {
          isUint8Array('public key', pubkey, [33, 65]);

          return secp256k1.publicKeyVerify(pubkey) === 0
        },

        publicKeyCreate (seckey, compressed = true, output) {
          isUint8Array('private key', seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.SECKEY_INVALID)
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },

        publicKeyConvert (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },

        publicKeyNegate (pubkey, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },

        publicKeyCombine (pubkeys, compressed = true, output) {
          assert$1(Array.isArray(pubkeys), 'Expected public keys to be an Array');
          assert$1(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
          for (const pubkey of pubkeys) {
            isUint8Array('public key', pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.PUBKEY_COMBINE)
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE)
          }
        },

        publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.TWEAK_ADD)
          }
        },

        publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('tweak', tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.TWEAK_MUL)
          }
        },

        signatureNormalize (sig) {
          isUint8Array('signature', sig, 64);

          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig
            case 1:
              throw new Error(errors.SIG_PARSE)
          }
        },

        signatureExport (sig, output) {
          isUint8Array('signature', sig, 64);
          output = getAssertedOutput(output, 72);

          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen)
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },

        signatureImport (sig, output) {
          isUint8Array('signature', sig);
          output = getAssertedOutput(output, 64);

          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },

        ecdsaSign (msg32, seckey, options = {}, output) {
          isUint8Array('message', msg32, 32);
          isUint8Array('private key', seckey, 32);
          assert$1(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);
          if (options.noncefn !== undefined) assert$1(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
          output = getAssertedOutput(output, 64);

          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj
            case 1:
              throw new Error(errors.SIGN)
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },

        ecdsaVerify (sig, msg32, pubkey) {
          isUint8Array('signature', sig, 64);
          isUint8Array('message', msg32, 32);
          isUint8Array('public key', pubkey, [33, 65]);

          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true
            case 3:
              return false
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.PUBKEY_PARSE)
          }
        },

        ecdsaRecover (sig, recid, msg32, compressed = true, output) {
          isUint8Array('signature', sig, 64);
          assert$1(
            toTypeString(recid) === 'Number' &&
              recid >= 0 &&
              recid <= 3,
            'Expected recovery id to be a Number within interval [0, 3]'
          );
          isUint8Array('message', msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);

          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.SIG_PARSE)
            case 2:
              throw new Error(errors.RECOVER)
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE)
          }
        },

        ecdh (pubkey, seckey, options = {}, output) {
          isUint8Array('public key', pubkey, [33, 65]);
          isUint8Array('private key', seckey, 32);
          assert$1(toTypeString(options) === 'Object', 'Expected options to be an Object');
          if (options.data !== undefined) isUint8Array('options.data', options.data);
          if (options.hashfn !== undefined) {
            assert$1(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
            if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
            if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
            isUint8Array('output', output);
          } else {
            output = getAssertedOutput(output, 32);
          }

          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output
            case 1:
              throw new Error(errors.PUBKEY_PARSE)
            case 2:
              throw new Error(errors.ECDH)
          }
        }
      }
    };

    const EC = elliptic$2.ec;

    const ec = new EC('secp256k1');
    const ecparams = ec.curve;

    // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
    // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
    const BN = ecparams.n.constructor;

    function loadCompressedPublicKey (first, xbuf) {
      let x = new BN(xbuf);

      // overflow
      if (x.cmp(ecparams.p) >= 0) return null
      x = x.toRed(ecparams.red);

      // compute corresponding Y
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if ((first === 0x03) !== y.isOdd()) y = y.redNeg();

      return ec.keyPair({ pub: { x: x, y: y } })
    }

    function loadUncompressedPublicKey (first, xbuf, ybuf) {
      let x = new BN(xbuf);
      let y = new BN(ybuf);

      // overflow
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);

      // is odd flag
      if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

      // x*x*x + b = y*y
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

      return ec.keyPair({ pub: { x: x, y: y } })
    }

    function loadPublicKey (pubkey) {
      // length should be validated in interface
      const first = pubkey[0];
      switch (first) {
        case 0x02:
        case 0x03:
          if (pubkey.length !== 33) return null
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
        case 0x04:
        case 0x06:
        case 0x07:
          if (pubkey.length !== 65) return null
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
        default:
          return null
      }
    }

    function savePublicKey (output, point) {
      const pubkey = point.encode(null, output.length === 33);
      // Loop should be faster because we do not need create extra Uint8Array
      // output.set(new Uint8Array(pubkey))
      for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
    }

    var elliptic$1 = {
      contextRandomize () {
        return 0
      },

      privateKeyVerify (seckey) {
        const bn = new BN(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
      },

      privateKeyNegate (seckey) {
        const bn = new BN(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
        seckey.set(negate);
        return 0
      },

      privateKeyTweakAdd (seckey, tweak) {
        const bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1

        bn.iadd(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1

        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);

        return 0
      },

      privateKeyTweakMul (seckey, tweak) {
        let bn = new BN(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

        bn.imul(new BN(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);

        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);

        return 0
      },

      publicKeyVerify (pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0
      },

      publicKeyCreate (output, seckey) {
        const bn = new BN(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1

        const point = ec.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);

        return 0
      },

      publicKeyConvert (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const point = pair.getPublic();
        savePublicKey(output, point);

        return 0
      },

      publicKeyNegate (output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);

        return 0
      },

      publicKeyCombine (output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null) return 1
        }

        let point = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
        if (point.isInfinity()) return 2

        savePublicKey(output, point);

        return 0
      },

      publicKeyTweakAdd (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2

        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2

        savePublicKey(output, point);

        return 0
      },

      publicKeyTweakMul (output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        tweak = new BN(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2

        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);

        return 0
      },

      signatureNormalize (sig) {
        const r = new BN(sig.subarray(0, 32));
        const s = new BN(sig.subarray(32, 64));
        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1

        if (s.cmp(ec.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
        }

        return 0
      },

      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport (obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
        if (new BN(sigS).cmp(ecparams.n) >= 0) return 1

        const { output } = obj;

        // Prepare R
        let r = output.subarray(4, 4 + 33);
        r[0] = 0x00;
        r.set(sigR, 1);

        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

        r = r.subarray(posR);
        if (r[0] & 0x80) return 1
        if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1

        // Prepare S
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0x00;
        s.set(sigS, 1);

        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

        s = s.subarray(posS);
        if (s[0] & 0x80) return 1
        if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1

        // Set output length for return
        obj.outputlen = 6 + lenR + lenS;

        // Output in specified format
        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        output[0] = 0x30;
        output[1] = obj.outputlen - 2;
        output[2] = 0x02;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 0x02;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);

        return 0
      },

      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport (output, sig) {
        if (sig.length < 8) return 1
        if (sig.length > 72) return 1
        if (sig[0] !== 0x30) return 1
        if (sig[1] !== sig.length - 2) return 1
        if (sig[2] !== 0x02) return 1

        const lenR = sig[3];
        if (lenR === 0) return 1
        if (5 + lenR >= sig.length) return 1
        if (sig[4 + lenR] !== 0x02) return 1

        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1
        if ((6 + lenR + lenS) !== sig.length) return 1

        if (sig[4] & 0x80) return 1
        if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1

        if (sig[lenR + 6] & 0x80) return 1
        if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1

        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1

        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error('S length is too long')

        let r = new BN(sigR);
        if (r.cmp(ecparams.n) >= 0) r = new BN(0);

        let s = new BN(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN(0);

        output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
        output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);

        return 0
      },

      ecdsaSign (obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);

            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid) throw new Error('This is the way')

            return new BN(nonce)
          };
        }

        const d = new BN(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1

        let sig;
        try {
          sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1
        }

        obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
        obj.recid = sig.recoveryParam;

        return 0
      },

      ecdsaVerify (sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };

        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3

        const pair = loadPublicKey(pubkey);
        if (pair === null) return 2

        const point = pair.getPublic();
        const isValid = ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3
      },

      ecdsaRecover (output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };

        const sigr = new BN(sigObj.r);
        const sigs = new BN(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1

        if (sigr.isZero() || sigs.isZero()) return 2

        // Can throw `throw new Error('Unable to find sencond key candinate');`
        let point;
        try {
          point = ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2
        }

        savePublicKey(output, point);

        return 0
      },

      ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1

        const scalar = new BN(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2

        const point = pair.getPublic().mul(scalar);

        if (hashfn === undefined) {
          const data = point.encode(null, true);
          const sha256 = ec.hash().update(data).digest();
          for (let i = 0; i < 32; ++i) output[i] = sha256[i];
        } else {
          if (!xbuf) xbuf = new Uint8Array(32);
          const x = point.getX().toArray('be', 32);
          for (let i = 0; i < 32; ++i) xbuf[i] = x[i];

          if (!ybuf) ybuf = new Uint8Array(32);
          const y = point.getY().toArray('be', 32);
          for (let i = 0; i < 32; ++i) ybuf[i] = y[i];

          const hash = hashfn(xbuf, ybuf, data);

          const isValid = hash instanceof Uint8Array && hash.length === output.length;
          if (!isValid) return 2

          output.set(hash);
        }

        return 0
      }
    };

    var elliptic = lib(elliptic$1);

    var random = {};

    var browser$3 = {exports: {}};

    var safeBuffer$1 = {exports: {}};

    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

    (function (module, exports) {
    	/* eslint-disable node/no-deprecated-api */
    	var buffer = require$$0$5;
    	var Buffer = buffer.Buffer;

    	// alternative to using Object.keys for old browsers
    	function copyProps (src, dst) {
    	  for (var key in src) {
    	    dst[key] = src[key];
    	  }
    	}
    	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    	  module.exports = buffer;
    	} else {
    	  // Copy properties from require('buffer')
    	  copyProps(buffer, exports);
    	  exports.Buffer = SafeBuffer;
    	}

    	function SafeBuffer (arg, encodingOrOffset, length) {
    	  return Buffer(arg, encodingOrOffset, length)
    	}

    	SafeBuffer.prototype = Object.create(Buffer.prototype);

    	// Copy static methods from Buffer
    	copyProps(Buffer, SafeBuffer);

    	SafeBuffer.from = function (arg, encodingOrOffset, length) {
    	  if (typeof arg === 'number') {
    	    throw new TypeError('Argument must not be a number')
    	  }
    	  return Buffer(arg, encodingOrOffset, length)
    	};

    	SafeBuffer.alloc = function (size, fill, encoding) {
    	  if (typeof size !== 'number') {
    	    throw new TypeError('Argument must be a number')
    	  }
    	  var buf = Buffer(size);
    	  if (fill !== undefined) {
    	    if (typeof encoding === 'string') {
    	      buf.fill(fill, encoding);
    	    } else {
    	      buf.fill(fill);
    	    }
    	  } else {
    	    buf.fill(0);
    	  }
    	  return buf
    	};

    	SafeBuffer.allocUnsafe = function (size) {
    	  if (typeof size !== 'number') {
    	    throw new TypeError('Argument must be a number')
    	  }
    	  return Buffer(size)
    	};

    	SafeBuffer.allocUnsafeSlow = function (size) {
    	  if (typeof size !== 'number') {
    	    throw new TypeError('Argument must be a number')
    	  }
    	  return buffer.SlowBuffer(size)
    	}; 
    } (safeBuffer$1, safeBuffer$1.exports));

    var safeBufferExports = safeBuffer$1.exports;

    // limit of Crypto.getRandomValues()
    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
    var MAX_BYTES = 65536;

    // Node supports requesting up to this number of bytes
    // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
    var MAX_UINT32 = 4294967295;

    function oldBrowser () {
      throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
    }

    var Buffer$f = safeBufferExports.Buffer;
    var crypto$1 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

    if (crypto$1 && crypto$1.getRandomValues) {
      browser$3.exports = randomBytes;
    } else {
      browser$3.exports = oldBrowser;
    }

    function randomBytes (size, cb) {
      // phantomjs needs to throw
      if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

      var bytes = Buffer$f.allocUnsafe(size);

      if (size > 0) {  // getRandomValues fails on IE if size == 0
        if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
          // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            // buffer.slice automatically checks if the end is past the end of
            // the buffer so we don't have to here
            crypto$1.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto$1.getRandomValues(bytes);
        }
      }

      if (typeof cb === 'function') {
        return process.nextTick(function () {
          cb(null, bytes);
        })
      }

      return bytes
    }

    var browserExports = browser$3.exports;

    Object.defineProperty(random, "__esModule", { value: true });
    var randombytes = browserExports;
    function getRandomBytes(bytes) {
        return new Promise(function (resolve, reject) {
            randombytes(bytes, function (err, resp) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(resp);
            });
        });
    }
    random.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
        return randombytes(bytes);
    }
    random.getRandomBytesSync = getRandomBytesSync;

    (function (exports) {
    	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    	    return new (P || (P = Promise))(function (resolve, reject) {
    	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
    	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
    	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
    	        step((generator = generator.apply(thisArg, _arguments || [])).next());
    	    });
    	};
    	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    	    function verb(n) { return function (v) { return step([n, v]); }; }
    	    function step(op) {
    	        if (f) throw new TypeError("Generator is already executing.");
    	        while (_) try {
    	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
    	            if (y = 0, t) op = [op[0] & 2, t.value];
    	            switch (op[0]) {
    	                case 0: case 1: t = op; break;
    	                case 4: _.label++; return { value: op[1], done: false };
    	                case 5: _.label++; y = op[1]; op = [0]; continue;
    	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
    	                default:
    	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
    	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
    	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
    	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
    	                    if (t[2]) _.ops.pop();
    	                    _.trys.pop(); continue;
    	            }
    	            op = body.call(thisArg, _);
    	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
    	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    	    }
    	};
    	function __export(m) {
    	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    	}
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var secp256k1_1 = elliptic;
    	var random_1 = random;
    	var SECP256K1_PRIVATE_KEY_SIZE = 32;
    	function createPrivateKey() {
    	    return __awaiter(this, void 0, void 0, function () {
    	        var pk;
    	        return __generator(this, function (_a) {
    	            switch (_a.label) {
    	                case 0:
    	                    return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
    	                case 1:
    	                    pk = _a.sent();
    	                    if (secp256k1_1.privateKeyVerify(pk)) {
    	                        return [2 /*return*/, pk];
    	                    }
    	                    return [3 /*break*/, 0];
    	                case 2: return [2 /*return*/];
    	            }
    	        });
    	    });
    	}
    	exports.createPrivateKey = createPrivateKey;
    	function createPrivateKeySync() {
    	    while (true) {
    	        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
    	        if (secp256k1_1.privateKeyVerify(pk)) {
    	            return pk;
    	        }
    	    }
    	}
    	exports.createPrivateKeySync = createPrivateKeySync;
    	__export(elliptic);
    	
    } (secp256k1$1));

    var internal = {};

    /*
    The MIT License

    Copyright (c) 2016 Nick Dodson. nickdodson.com

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE
     */
    Object.defineProperty(internal, "__esModule", { value: true });
    internal.isHexString = internal.getKeys = internal.fromAscii = internal.fromUtf8 = internal.toAscii = internal.arrayContainsArray = internal.getBinarySize = internal.padToEven = internal.stripHexPrefix = internal.isHexPrefixed = void 0;
    /**
     * Returns a `Boolean` on whether or not the a `String` starts with '0x'
     * @param str the string input value
     * @return a boolean if it is or is not hex prefixed
     * @throws if the str input is not a string
     */
    function isHexPrefixed(str) {
        if (typeof str !== 'string') {
            throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
        }
        return str[0] === '0' && str[1] === 'x';
    }
    internal.isHexPrefixed = isHexPrefixed;
    /**
     * Removes '0x' from a given `String` if present
     * @param str the string value
     * @returns the string without 0x prefix
     */
    var stripHexPrefix = function (str) {
        if (typeof str !== 'string')
            throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
        return isHexPrefixed(str) ? str.slice(2) : str;
    };
    internal.stripHexPrefix = stripHexPrefix;
    /**
     * Pads a `String` to have an even length
     * @param value
     * @return output
     */
    function padToEven(value) {
        var a = value;
        if (typeof a !== 'string') {
            throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
        }
        if (a.length % 2)
            a = "0".concat(a);
        return a;
    }
    internal.padToEven = padToEven;
    /**
     * Get the binary size of a string
     * @param str
     * @returns the number of bytes contained within the string
     */
    function getBinarySize(str) {
        if (typeof str !== 'string') {
            throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
        }
        return Buffer$g.byteLength(str, 'utf8');
    }
    internal.getBinarySize = getBinarySize;
    /**
     * Returns TRUE if the first specified array contains all elements
     * from the second one. FALSE otherwise.
     *
     * @param superset
     * @param subset
     *
     */
    function arrayContainsArray(superset, subset, some) {
        if (Array.isArray(superset) !== true) {
            throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
        }
        if (Array.isArray(subset) !== true) {
            throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
        }
        return subset[some ? 'some' : 'every'](function (value) { return superset.indexOf(value) >= 0; });
    }
    internal.arrayContainsArray = arrayContainsArray;
    /**
     * Should be called to get ascii from its hex representation
     *
     * @param string in hex
     * @returns ascii string representation of hex value
     */
    function toAscii(hex) {
        var str = '';
        var i = 0;
        var l = hex.length;
        if (hex.substring(0, 2) === '0x')
            i = 2;
        for (; i < l; i += 2) {
            var code = parseInt(hex.substr(i, 2), 16);
            str += String.fromCharCode(code);
        }
        return str;
    }
    internal.toAscii = toAscii;
    /**
     * Should be called to get hex representation (prefixed by 0x) of utf8 string
     *
     * @param string
     * @param optional padding
     * @returns hex representation of input string
     */
    function fromUtf8(stringValue) {
        var str = Buffer$g.from(stringValue, 'utf8');
        return "0x".concat(padToEven(str.toString('hex')).replace(/^0+|0+$/g, ''));
    }
    internal.fromUtf8 = fromUtf8;
    /**
     * Should be called to get hex representation (prefixed by 0x) of ascii string
     *
     * @param  string
     * @param  optional padding
     * @returns  hex representation of input string
     */
    function fromAscii(stringValue) {
        var hex = '';
        for (var i = 0; i < stringValue.length; i++) {
            var code = stringValue.charCodeAt(i);
            var n = code.toString(16);
            hex += n.length < 2 ? "0".concat(n) : n;
        }
        return "0x".concat(hex);
    }
    internal.fromAscii = fromAscii;
    /**
     * Returns the keys from an array of objects.
     * @example
     * ```js
     * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']
     *````
     * @param  params
     * @param  key
     * @param  allowEmpty
     * @returns output just a simple array of output keys
     */
    function getKeys(params, key, allowEmpty) {
        if (!Array.isArray(params)) {
            throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
        }
        if (typeof key !== 'string') {
            throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
        }
        var result = [];
        for (var i = 0; i < params.length; i++) {
            var value = params[i][key];
            if (allowEmpty && !value) {
                value = '';
            }
            else if (typeof value !== 'string') {
                throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
            }
            result.push(value);
        }
        return result;
    }
    internal.getKeys = getKeys;
    /**
     * Is the string a hex string.
     *
     * @param  value
     * @param  length
     * @returns  output the string is a hex string
     */
    function isHexString(value, length) {
        if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))
            return false;
        if (length && value.length !== 2 + 2 * length)
            return false;
        return true;
    }
    internal.isHexString = isHexString;

    var bytes = {};

    var helpers = {};

    Object.defineProperty(helpers, "__esModule", { value: true });
    helpers.assertIsString = helpers.assertIsArray = helpers.assertIsBuffer = helpers.assertIsHexString = void 0;
    var internal_1$1 = internal;
    /**
     * Throws if a string is not hex prefixed
     * @param {string} input string to check hex prefix of
     */
    var assertIsHexString = function (input) {
        if (!(0, internal_1$1.isHexString)(input)) {
            var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
            throw new Error(msg);
        }
    };
    helpers.assertIsHexString = assertIsHexString;
    /**
     * Throws if input is not a buffer
     * @param {Buffer} input value to check
     */
    var assertIsBuffer = function (input) {
        if (!Buffer$g.isBuffer(input)) {
            var msg = "This method only supports Buffer but input was: ".concat(input);
            throw new Error(msg);
        }
    };
    helpers.assertIsBuffer = assertIsBuffer;
    /**
     * Throws if input is not an array
     * @param {number[]} input value to check
     */
    var assertIsArray = function (input) {
        if (!Array.isArray(input)) {
            var msg = "This method only supports number arrays but input was: ".concat(input);
            throw new Error(msg);
        }
    };
    helpers.assertIsArray = assertIsArray;
    /**
     * Throws if input is not a string
     * @param {string} input value to check
     */
    var assertIsString = function (input) {
        if (typeof input !== 'string') {
            var msg = "This method only supports strings but input was: ".concat(input);
            throw new Error(msg);
        }
    };
    helpers.assertIsString = assertIsString;

    (function (exports) {
    	var __values = (commonjsGlobal && commonjsGlobal.__values) || function(o) {
    	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    	    if (m) return m.call(o);
    	    if (o && typeof o.length === "number") return {
    	        next: function () {
    	            if (o && i >= o.length) o = void 0;
    	            return { value: o && o[i++], done: !o };
    	        }
    	    };
    	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    	};
    	var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
    	var externals_1 = externals;
    	var internal_1 = internal;
    	var helpers_1 = helpers;
    	/**
    	 * Converts a `Number` into a hex `String`
    	 * @param {Number} i
    	 * @return {String}
    	 */
    	var intToHex = function (i) {
    	    if (!Number.isSafeInteger(i) || i < 0) {
    	        throw new Error("Received an invalid integer type: ".concat(i));
    	    }
    	    return "0x".concat(i.toString(16));
    	};
    	exports.intToHex = intToHex;
    	/**
    	 * Converts an `Number` to a `Buffer`
    	 * @param {Number} i
    	 * @return {Buffer}
    	 */
    	var intToBuffer = function (i) {
    	    var hex = (0, exports.intToHex)(i);
    	    return Buffer$g.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');
    	};
    	exports.intToBuffer = intToBuffer;
    	/**
    	 * Returns a buffer filled with 0s.
    	 * @param bytes the number of bytes the buffer should be
    	 */
    	var zeros = function (bytes) {
    	    return Buffer$g.allocUnsafe(bytes).fill(0);
    	};
    	exports.zeros = zeros;
    	/**
    	 * Pads a `Buffer` with zeros till it has `length` bytes.
    	 * Truncates the beginning or end of input if its length exceeds `length`.
    	 * @param msg the value to pad (Buffer)
    	 * @param length the number of bytes the output should be
    	 * @param right whether to start padding form the left or right
    	 * @return (Buffer)
    	 */
    	var setLength = function (msg, length, right) {
    	    var buf = (0, exports.zeros)(length);
    	    if (right) {
    	        if (msg.length < length) {
    	            msg.copy(buf);
    	            return buf;
    	        }
    	        return msg.slice(0, length);
    	    }
    	    else {
    	        if (msg.length < length) {
    	            msg.copy(buf, length - msg.length);
    	            return buf;
    	        }
    	        return msg.slice(-length);
    	    }
    	};
    	/**
    	 * Left Pads a `Buffer` with leading zeros till it has `length` bytes.
    	 * Or it truncates the beginning if it exceeds.
    	 * @param msg the value to pad (Buffer)
    	 * @param length the number of bytes the output should be
    	 * @return (Buffer)
    	 */
    	var setLengthLeft = function (msg, length) {
    	    (0, helpers_1.assertIsBuffer)(msg);
    	    return setLength(msg, length, false);
    	};
    	exports.setLengthLeft = setLengthLeft;
    	/**
    	 * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.
    	 * it truncates the end if it exceeds.
    	 * @param msg the value to pad (Buffer)
    	 * @param length the number of bytes the output should be
    	 * @return (Buffer)
    	 */
    	var setLengthRight = function (msg, length) {
    	    (0, helpers_1.assertIsBuffer)(msg);
    	    return setLength(msg, length, true);
    	};
    	exports.setLengthRight = setLengthRight;
    	/**
    	 * Trims leading zeros from a `Buffer`, `String` or `Number[]`.
    	 * @param a (Buffer|Array|String)
    	 * @return (Buffer|Array|String)
    	 */
    	var stripZeros = function (a) {
    	    var first = a[0];
    	    while (a.length > 0 && first.toString() === '0') {
    	        a = a.slice(1);
    	        first = a[0];
    	    }
    	    return a;
    	};
    	/**
    	 * Trims leading zeros from a `Buffer`.
    	 * @param a (Buffer)
    	 * @return (Buffer)
    	 */
    	var unpadBuffer = function (a) {
    	    (0, helpers_1.assertIsBuffer)(a);
    	    return stripZeros(a);
    	};
    	exports.unpadBuffer = unpadBuffer;
    	/**
    	 * Trims leading zeros from an `Array` (of numbers).
    	 * @param a (number[])
    	 * @return (number[])
    	 */
    	var unpadArray = function (a) {
    	    (0, helpers_1.assertIsArray)(a);
    	    return stripZeros(a);
    	};
    	exports.unpadArray = unpadArray;
    	/**
    	 * Trims leading zeros from a hex-prefixed `String`.
    	 * @param a (String)
    	 * @return (String)
    	 */
    	var unpadHexString = function (a) {
    	    (0, helpers_1.assertIsHexString)(a);
    	    a = (0, internal_1.stripHexPrefix)(a);
    	    return stripZeros(a);
    	};
    	exports.unpadHexString = unpadHexString;
    	/**
    	 * Attempts to turn a value into a `Buffer`.
    	 * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects
    	 * with a `toArray()` or `toBuffer()` method.
    	 * @param v the value
    	 */
    	var toBuffer = function (v) {
    	    if (v === null || v === undefined) {
    	        return Buffer$g.allocUnsafe(0);
    	    }
    	    if (Buffer$g.isBuffer(v)) {
    	        return Buffer$g.from(v);
    	    }
    	    if (Array.isArray(v) || v instanceof Uint8Array) {
    	        return Buffer$g.from(v);
    	    }
    	    if (typeof v === 'string') {
    	        if (!(0, internal_1.isHexString)(v)) {
    	            throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
    	        }
    	        return Buffer$g.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');
    	    }
    	    if (typeof v === 'number') {
    	        return (0, exports.intToBuffer)(v);
    	    }
    	    if (externals_1.BN.isBN(v)) {
    	        if (v.isNeg()) {
    	            throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
    	        }
    	        return v.toArrayLike(Buffer$g);
    	    }
    	    if (v.toArray) {
    	        // converts a BN to a Buffer
    	        return Buffer$g.from(v.toArray());
    	    }
    	    if (v.toBuffer) {
    	        return Buffer$g.from(v.toBuffer());
    	    }
    	    throw new Error('invalid type');
    	};
    	exports.toBuffer = toBuffer;
    	/**
    	 * Converts a `Buffer` to a `Number`.
    	 * @param buf `Buffer` object to convert
    	 * @throws If the input number exceeds 53 bits.
    	 */
    	var bufferToInt = function (buf) {
    	    return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
    	};
    	exports.bufferToInt = bufferToInt;
    	/**
    	 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
    	 * @param buf `Buffer` object to convert
    	 */
    	var bufferToHex = function (buf) {
    	    buf = (0, exports.toBuffer)(buf);
    	    return '0x' + buf.toString('hex');
    	};
    	exports.bufferToHex = bufferToHex;
    	/**
    	 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
    	 * @param num Signed integer value
    	 */
    	var fromSigned = function (num) {
    	    return new externals_1.BN(num).fromTwos(256);
    	};
    	exports.fromSigned = fromSigned;
    	/**
    	 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
    	 * @param num
    	 */
    	var toUnsigned = function (num) {
    	    return Buffer$g.from(num.toTwos(256).toArray());
    	};
    	exports.toUnsigned = toUnsigned;
    	/**
    	 * Adds "0x" to a given `String` if it does not already start with "0x".
    	 */
    	var addHexPrefix = function (str) {
    	    if (typeof str !== 'string') {
    	        return str;
    	    }
    	    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;
    	};
    	exports.addHexPrefix = addHexPrefix;
    	/**
    	 * Returns the utf8 string representation from a hex string.
    	 *
    	 * Examples:
    	 *
    	 * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'
    	 * Input 2: '657468657265756d'
    	 * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'
    	 *
    	 * Output (all 3 input variants): 'ethereum'
    	 *
    	 * Note that this method is not intended to be used with hex strings
    	 * representing quantities in both big endian or little endian notation.
    	 *
    	 * @param string Hex string, should be `0x` prefixed
    	 * @return Utf8 string
    	 */
    	var toUtf8 = function (hex) {
    	    var zerosRegexp = /^(00)+|(00)+$/g;
    	    hex = (0, internal_1.stripHexPrefix)(hex);
    	    if (hex.length % 2 !== 0) {
    	        throw new Error('Invalid non-even hex string input for toUtf8() provided');
    	    }
    	    var bufferVal = Buffer$g.from(hex.replace(zerosRegexp, ''), 'hex');
    	    return bufferVal.toString('utf8');
    	};
    	exports.toUtf8 = toUtf8;
    	/**
    	 * Converts a `Buffer` or `Array` to JSON.
    	 * @param ba (Buffer|Array)
    	 * @return (Array|String|null)
    	 */
    	var baToJSON = function (ba) {
    	    if (Buffer$g.isBuffer(ba)) {
    	        return "0x".concat(ba.toString('hex'));
    	    }
    	    else if (ba instanceof Array) {
    	        var array = [];
    	        for (var i = 0; i < ba.length; i++) {
    	            array.push((0, exports.baToJSON)(ba[i]));
    	        }
    	        return array;
    	    }
    	};
    	exports.baToJSON = baToJSON;
    	/**
    	 * Checks provided Buffers for leading zeroes and throws if found.
    	 *
    	 * Examples:
    	 *
    	 * Valid values: 0x1, 0x, 0x01, 0x1234
    	 * Invalid values: 0x0, 0x00, 0x001, 0x0001
    	 *
    	 * Note: This method is useful for validating that RLP encoded integers comply with the rule that all
    	 * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes
    	 * @param values An object containing string keys and Buffer values
    	 * @throws if any provided value is found to have leading zero bytes
    	 */
    	var validateNoLeadingZeroes = function (values) {
    	    var e_1, _a;
    	    try {
    	        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
    	            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
    	            if (v !== undefined && v.length > 0 && v[0] === 0) {
    	                throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString('hex')));
    	            }
    	        }
    	    }
    	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    	    finally {
    	        try {
    	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    	        }
    	        finally { if (e_1) throw e_1.error; }
    	    }
    	};
    	exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
    	function arrToBufArr(arr) {
    	    if (!Array.isArray(arr)) {
    	        return Buffer$g.from(arr);
    	    }
    	    return arr.map(function (a) { return arrToBufArr(a); });
    	}
    	exports.arrToBufArr = arrToBufArr;
    	function bufArrToArr(arr) {
    	    if (!Array.isArray(arr)) {
    	        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
    	    }
    	    return arr.map(function (a) { return bufArrToArr(a); });
    	}
    	exports.bufArrToArr = bufArrToArr;
    	
    } (bytes));

    var hash$1 = {};

    var keccak$2 = {};

    var hashUtils = {};

    Object.defineProperty(hashUtils, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
        return function (msg) {
            var hash = hashConstructor();
            hash.update(msg);
            return Buffer$g.from(hash.digest());
        };
    }
    hashUtils.createHashFunction = createHashFunction;

    var readableBrowser = {exports: {}};

    var domain;

    // This constructor is used to store event handlers. Instantiating this is
    // faster than explicitly calling `Object.create(null)` to get a "clean" empty
    // object (tested with v8 v4.9).
    function EventHandlers() {}
    EventHandlers.prototype = Object.create(null);

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    // nodejs oddity
    // require('events') === require('events').EventEmitter
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.usingDomains = false;

    EventEmitter.prototype.domain = undefined;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

    EventEmitter.init = function() {
      this.domain = null;
      if (EventEmitter.usingDomains) {
        // if there is an active domain, then attach to it.
        if (domain.active ) ;
      }

      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events, domain;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      domain = this.domain;

      // If there is no 'error' event listener then throw.
      if (doError) {
        er = arguments[1];
        if (domain) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain;
          er.domainThrown = false;
          domain.emit('error', er);
        } else if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = new EventHandlers();
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] :
                                              [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + type + ' listeners added. ' +
                                'Use emitter.setMaxListeners() to increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            emitWarning(w);
          }
        }
      }

      return target;
    }
    function emitWarning(e) {
      typeof console.warn === 'function' ? console.warn(e) : console.log(e);
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function _onceWrap(target, type, listener) {
      var fired = false;
      function g() {
        target.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(target, arguments);
        }
      }
      g.listener = listener;
      return g;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || (list.listener && list.listener === listener)) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length; i-- > 0;) {
              if (list[i] === listener ||
                  (list[i].listener && list[i].listener === listener)) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (list.length === 1) {
              list[0] = undefined;
              if (--this._eventsCount === 0) {
                this._events = new EventHandlers();
                return this;
              } else {
                delete events[type];
              }
            } else {
              spliceOne(list, position);
            }

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };
        
    // Alias for removeListener added in NodeJS 10.0
    // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
    EventEmitter.prototype.off = function(type, listener){
        return this.removeListener(type, listener);
    };

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = new EventHandlers();
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = new EventHandlers();
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            for (var i = 0, key; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = new EventHandlers();
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            do {
              this.removeListener(type, listeners[listeners.length - 1]);
            } while (listeners[0]);
          }

          return this;
        };

    EventEmitter.prototype.listeners = function listeners(type) {
      var evlistener;
      var ret;
      var events = this._events;

      if (!events)
        ret = [];
      else {
        evlistener = events[type];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === 'function')
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }

      return ret;
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount$1.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount$1;
    function listenerCount$1(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, i) {
      var copy = new Array(i);
      while (i--)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    var _polyfillNode_events = /*#__PURE__*/Object.freeze({
        __proto__: null,
        EventEmitter: EventEmitter,
        default: EventEmitter
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_events);

    var streamBrowser = require$$0.EventEmitter;

    var require$$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_util$1);

    var buffer_list;
    var hasRequiredBuffer_list;

    function requireBuffer_list () {
    	if (hasRequiredBuffer_list) return buffer_list;
    	hasRequiredBuffer_list = 1;

    	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
    	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
    	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
    	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
    	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
    	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
    	var _require = require$$0$5,
    	  Buffer = _require.Buffer;
    	var _require2 = require$$3,
    	  inspect = _require2.inspect;
    	var custom = inspect && inspect.custom || 'inspect';
    	function copyBuffer(src, target, offset) {
    	  Buffer.prototype.copy.call(src, target, offset);
    	}
    	buffer_list = /*#__PURE__*/function () {
    	  function BufferList() {
    	    _classCallCheck(this, BufferList);
    	    this.head = null;
    	    this.tail = null;
    	    this.length = 0;
    	  }
    	  _createClass(BufferList, [{
    	    key: "push",
    	    value: function push(v) {
    	      var entry = {
    	        data: v,
    	        next: null
    	      };
    	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
    	      this.tail = entry;
    	      ++this.length;
    	    }
    	  }, {
    	    key: "unshift",
    	    value: function unshift(v) {
    	      var entry = {
    	        data: v,
    	        next: this.head
    	      };
    	      if (this.length === 0) this.tail = entry;
    	      this.head = entry;
    	      ++this.length;
    	    }
    	  }, {
    	    key: "shift",
    	    value: function shift() {
    	      if (this.length === 0) return;
    	      var ret = this.head.data;
    	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    	      --this.length;
    	      return ret;
    	    }
    	  }, {
    	    key: "clear",
    	    value: function clear() {
    	      this.head = this.tail = null;
    	      this.length = 0;
    	    }
    	  }, {
    	    key: "join",
    	    value: function join(s) {
    	      if (this.length === 0) return '';
    	      var p = this.head;
    	      var ret = '' + p.data;
    	      while (p = p.next) ret += s + p.data;
    	      return ret;
    	    }
    	  }, {
    	    key: "concat",
    	    value: function concat(n) {
    	      if (this.length === 0) return Buffer.alloc(0);
    	      var ret = Buffer.allocUnsafe(n >>> 0);
    	      var p = this.head;
    	      var i = 0;
    	      while (p) {
    	        copyBuffer(p.data, ret, i);
    	        i += p.data.length;
    	        p = p.next;
    	      }
    	      return ret;
    	    }

    	    // Consumes a specified amount of bytes or characters from the buffered data.
    	  }, {
    	    key: "consume",
    	    value: function consume(n, hasStrings) {
    	      var ret;
    	      if (n < this.head.data.length) {
    	        // `slice` is the same for buffers and strings.
    	        ret = this.head.data.slice(0, n);
    	        this.head.data = this.head.data.slice(n);
    	      } else if (n === this.head.data.length) {
    	        // First chunk is a perfect match.
    	        ret = this.shift();
    	      } else {
    	        // Result spans more than one buffer.
    	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
    	      }
    	      return ret;
    	    }
    	  }, {
    	    key: "first",
    	    value: function first() {
    	      return this.head.data;
    	    }

    	    // Consumes a specified amount of characters from the buffered data.
    	  }, {
    	    key: "_getString",
    	    value: function _getString(n) {
    	      var p = this.head;
    	      var c = 1;
    	      var ret = p.data;
    	      n -= ret.length;
    	      while (p = p.next) {
    	        var str = p.data;
    	        var nb = n > str.length ? str.length : n;
    	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
    	        n -= nb;
    	        if (n === 0) {
    	          if (nb === str.length) {
    	            ++c;
    	            if (p.next) this.head = p.next;else this.head = this.tail = null;
    	          } else {
    	            this.head = p;
    	            p.data = str.slice(nb);
    	          }
    	          break;
    	        }
    	        ++c;
    	      }
    	      this.length -= c;
    	      return ret;
    	    }

    	    // Consumes a specified amount of bytes from the buffered data.
    	  }, {
    	    key: "_getBuffer",
    	    value: function _getBuffer(n) {
    	      var ret = Buffer.allocUnsafe(n);
    	      var p = this.head;
    	      var c = 1;
    	      p.data.copy(ret);
    	      n -= p.data.length;
    	      while (p = p.next) {
    	        var buf = p.data;
    	        var nb = n > buf.length ? buf.length : n;
    	        buf.copy(ret, ret.length - n, 0, nb);
    	        n -= nb;
    	        if (n === 0) {
    	          if (nb === buf.length) {
    	            ++c;
    	            if (p.next) this.head = p.next;else this.head = this.tail = null;
    	          } else {
    	            this.head = p;
    	            p.data = buf.slice(nb);
    	          }
    	          break;
    	        }
    	        ++c;
    	      }
    	      this.length -= c;
    	      return ret;
    	    }

    	    // Make sure the linked list only shows the minimal necessary information.
    	  }, {
    	    key: custom,
    	    value: function value(_, options) {
    	      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
    	        // Only inspect one level.
    	        depth: 0,
    	        // It should not recurse.
    	        customInspect: false
    	      }));
    	    }
    	  }]);
    	  return BufferList;
    	}();
    	return buffer_list;
    }

    // undocumented cb() API, needed for core, not for public API
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }

      // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks

      if (this._readableState) {
        this._readableState.destroyed = true;
      }

      // if this is a duplex stream mark the writable part as destroyed as well
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function (err) {
        if (!cb && err) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self, err) {
      emitErrorNT(self, err);
      emitCloseNT(self);
    }
    function emitCloseNT(self) {
      if (self._writableState && !self._writableState.emitClose) return;
      if (self._readableState && !self._readableState.emitClose) return;
      self.emit('close');
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self, err) {
      self.emit('error', err);
    }
    function errorOrDestroy(stream, err) {
      // We have tests that rely on errors being emitted
      // in the same tick, so changing this is semver major.
      // For now when you opt-in to autoDestroy we allow
      // the error to be emitted nextTick. In a future
      // semver major update we should change the default to this.

      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
    }
    var destroy_1 = {
      destroy: destroy,
      undestroy: undestroy,
      errorOrDestroy: errorOrDestroy
    };

    var errorsBrowser = {};

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

    var codes = {};

    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }

      var NodeError =
      /*#__PURE__*/
      function (_Base) {
        _inheritsLoose(NodeError, _Base);

        function NodeError(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }

        return NodeError;
      }(Base);

      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });

        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


    function endsWith$1(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }

      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      var determiner;

      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      var msg;

      if (endsWith$1(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      }

      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented';
    });
    createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg;
    }, TypeError);
    createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
    errorsBrowser.codes = codes;

    var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }

      // Default value
      return state.objectMode ? 16 : 16 * 1024;
    }
    var state = {
      getHighWaterMark: getHighWaterMark
    };

    /**
     * Module exports.
     */

    var browser$2 = deprecate;

    /**
     * Mark that a method should not be used.
     * Returns a modified function which warns once by default.
     *
     * If `localStorage.noDeprecation = true` is set, then it is a no-op.
     *
     * If `localStorage.throwDeprecation = true` is set, then deprecated functions
     * will throw an Error when invoked.
     *
     * If `localStorage.traceDeprecation = true` is set, then deprecated functions
     * will invoke `console.trace()` instead of `console.error()`.
     *
     * @param {Function} fn - the function to deprecate
     * @param {String} msg - the string to print to the console when `fn` is invoked
     * @returns {Function} a new "deprecated" version of `fn`
     * @api public
     */

    function deprecate (fn, msg) {
      if (config('noDeprecation')) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config('throwDeprecation')) {
            throw new Error(msg);
          } else if (config('traceDeprecation')) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    /**
     * Checks `localStorage` for boolean values for the given `name`.
     *
     * @param {String} name
     * @returns {Boolean}
     * @api private
     */

    function config (name) {
      // accessing global.localStorage can trigger a DOMException in sandboxed iframes
      try {
        if (!commonjsGlobal.localStorage) return false;
      } catch (_) {
        return false;
      }
      var val = commonjsGlobal.localStorage[name];
      if (null == val) return false;
      return String(val).toLowerCase() === 'true';
    }

    var _stream_writable;
    var hasRequired_stream_writable;

    function require_stream_writable () {
    	if (hasRequired_stream_writable) return _stream_writable;
    	hasRequired_stream_writable = 1;

    	_stream_writable = Writable;

    	// It seems a linked list but it is not
    	// there will be only 2 of these for each stream
    	function CorkedRequest(state) {
    	  var _this = this;
    	  this.next = null;
    	  this.entry = null;
    	  this.finish = function () {
    	    onCorkedFinish(_this, state);
    	  };
    	}
    	/* </replacement> */

    	/*<replacement>*/
    	var Duplex;
    	/*</replacement>*/

    	Writable.WritableState = WritableState;

    	/*<replacement>*/
    	var internalUtil = {
    	  deprecate: browser$2
    	};
    	/*</replacement>*/

    	/*<replacement>*/
    	var Stream = streamBrowser;
    	/*</replacement>*/

    	var Buffer = require$$0$5.Buffer;
    	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
    	function _uint8ArrayToBuffer(chunk) {
    	  return Buffer.from(chunk);
    	}
    	function _isUint8Array(obj) {
    	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    	}
    	var destroyImpl = destroy_1;
    	var _require = state,
    	  getHighWaterMark = _require.getHighWaterMark;
    	var _require$codes = errorsBrowser.codes,
    	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    	  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    	  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    	  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    	  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    	var errorOrDestroy = destroyImpl.errorOrDestroy;
    	require$$0$2(Writable, Stream);
    	function nop() {}
    	function WritableState(options, stream, isDuplex) {
    	  Duplex = Duplex || require_stream_duplex();
    	  options = options || {};

    	  // Duplex streams are both readable and writable, but share
    	  // the same options object.
    	  // However, some cases require setting options to different
    	  // values for the readable and the writable sides of the duplex stream,
    	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

    	  // object stream flag to indicate whether or not this stream
    	  // contains buffers or objects.
    	  this.objectMode = !!options.objectMode;
    	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

    	  // the point at which write() starts returning false
    	  // Note: 0 is a valid value, means that we always return false if
    	  // the entire buffer is not flushed immediately on write()
    	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

    	  // if _final has been called
    	  this.finalCalled = false;

    	  // drain event flag.
    	  this.needDrain = false;
    	  // at the start of calling end()
    	  this.ending = false;
    	  // when end() has been called, and returned
    	  this.ended = false;
    	  // when 'finish' is emitted
    	  this.finished = false;

    	  // has it been destroyed
    	  this.destroyed = false;

    	  // should we decode strings into buffers before passing to _write?
    	  // this is here so that some node-core streams can optimize string
    	  // handling at a lower level.
    	  var noDecode = options.decodeStrings === false;
    	  this.decodeStrings = !noDecode;

    	  // Crypto is kind of old and crusty.  Historically, its default string
    	  // encoding is 'binary' so we have to make this configurable.
    	  // Everything else in the universe uses 'utf8', though.
    	  this.defaultEncoding = options.defaultEncoding || 'utf8';

    	  // not an actual buffer we keep track of, but a measurement
    	  // of how much we're waiting to get pushed to some underlying
    	  // socket or file.
    	  this.length = 0;

    	  // a flag to see when we're in the middle of a write.
    	  this.writing = false;

    	  // when true all writes will be buffered until .uncork() call
    	  this.corked = 0;

    	  // a flag to be able to tell if the onwrite cb is called immediately,
    	  // or on a later tick.  We set this to true at first, because any
    	  // actions that shouldn't happen until "later" should generally also
    	  // not happen before the first write call.
    	  this.sync = true;

    	  // a flag to know if we're processing previously buffered items, which
    	  // may call the _write() callback in the same tick, so that we don't
    	  // end up in an overlapped onwrite situation.
    	  this.bufferProcessing = false;

    	  // the callback that's passed to _write(chunk,cb)
    	  this.onwrite = function (er) {
    	    onwrite(stream, er);
    	  };

    	  // the callback that the user supplies to write(chunk,encoding,cb)
    	  this.writecb = null;

    	  // the amount that is being written when _write is called.
    	  this.writelen = 0;
    	  this.bufferedRequest = null;
    	  this.lastBufferedRequest = null;

    	  // number of pending user-supplied write callbacks
    	  // this must be 0 before 'finish' can be emitted
    	  this.pendingcb = 0;

    	  // emit prefinish if the only thing we're waiting for is _write cbs
    	  // This is relevant for synchronous Transform streams
    	  this.prefinished = false;

    	  // True if the error was already emitted and should not be thrown again
    	  this.errorEmitted = false;

    	  // Should close be emitted on destroy. Defaults to true.
    	  this.emitClose = options.emitClose !== false;

    	  // Should .destroy() be called after 'finish' (and potentially 'end')
    	  this.autoDestroy = !!options.autoDestroy;

    	  // count buffered requests
    	  this.bufferedRequestCount = 0;

    	  // allocate the first CorkedRequest, there is always
    	  // one allocated and free to use, and we maintain at most two
    	  this.corkedRequestsFree = new CorkedRequest(this);
    	}
    	WritableState.prototype.getBuffer = function getBuffer() {
    	  var current = this.bufferedRequest;
    	  var out = [];
    	  while (current) {
    	    out.push(current);
    	    current = current.next;
    	  }
    	  return out;
    	};
    	(function () {
    	  try {
    	    Object.defineProperty(WritableState.prototype, 'buffer', {
    	      get: internalUtil.deprecate(function writableStateBufferGetter() {
    	        return this.getBuffer();
    	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    	    });
    	  } catch (_) {}
    	})();

    	// Test _writableState for inheritance to account for Duplex streams,
    	// whose prototype chain only points to Readable.
    	var realHasInstance;
    	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    	  realHasInstance = Function.prototype[Symbol.hasInstance];
    	  Object.defineProperty(Writable, Symbol.hasInstance, {
    	    value: function value(object) {
    	      if (realHasInstance.call(this, object)) return true;
    	      if (this !== Writable) return false;
    	      return object && object._writableState instanceof WritableState;
    	    }
    	  });
    	} else {
    	  realHasInstance = function realHasInstance(object) {
    	    return object instanceof this;
    	  };
    	}
    	function Writable(options) {
    	  Duplex = Duplex || require_stream_duplex();

    	  // Writable ctor is applied to Duplexes, too.
    	  // `realHasInstance` is necessary because using plain `instanceof`
    	  // would return false, as no `_writableState` property is attached.

    	  // Trying to use the custom `instanceof` for Writable here will also break the
    	  // Node.js LazyTransform implementation, which has a non-trivial getter for
    	  // `_writableState` that would lead to infinite recursion.

    	  // Checking for a Stream.Duplex instance is faster here instead of inside
    	  // the WritableState constructor, at least with V8 6.5
    	  var isDuplex = this instanceof Duplex;
    	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    	  this._writableState = new WritableState(options, this, isDuplex);

    	  // legacy.
    	  this.writable = true;
    	  if (options) {
    	    if (typeof options.write === 'function') this._write = options.write;
    	    if (typeof options.writev === 'function') this._writev = options.writev;
    	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    	    if (typeof options.final === 'function') this._final = options.final;
    	  }
    	  Stream.call(this);
    	}

    	// Otherwise people can pipe Writable streams, which is just wrong.
    	Writable.prototype.pipe = function () {
    	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    	};
    	function writeAfterEnd(stream, cb) {
    	  var er = new ERR_STREAM_WRITE_AFTER_END();
    	  // TODO: defer error events consistently everywhere, not just the cb
    	  errorOrDestroy(stream, er);
    	  process.nextTick(cb, er);
    	}

    	// Checks that a user-supplied chunk is valid, especially for the particular
    	// mode the stream is in. Currently this means that `null` is never accepted
    	// and undefined/non-string values are only allowed in object mode.
    	function validChunk(stream, state, chunk, cb) {
    	  var er;
    	  if (chunk === null) {
    	    er = new ERR_STREAM_NULL_VALUES();
    	  } else if (typeof chunk !== 'string' && !state.objectMode) {
    	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
    	  }
    	  if (er) {
    	    errorOrDestroy(stream, er);
    	    process.nextTick(cb, er);
    	    return false;
    	  }
    	  return true;
    	}
    	Writable.prototype.write = function (chunk, encoding, cb) {
    	  var state = this._writableState;
    	  var ret = false;
    	  var isBuf = !state.objectMode && _isUint8Array(chunk);
    	  if (isBuf && !Buffer.isBuffer(chunk)) {
    	    chunk = _uint8ArrayToBuffer(chunk);
    	  }
    	  if (typeof encoding === 'function') {
    	    cb = encoding;
    	    encoding = null;
    	  }
    	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
    	  if (typeof cb !== 'function') cb = nop;
    	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    	    state.pendingcb++;
    	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    	  }
    	  return ret;
    	};
    	Writable.prototype.cork = function () {
    	  this._writableState.corked++;
    	};
    	Writable.prototype.uncork = function () {
    	  var state = this._writableState;
    	  if (state.corked) {
    	    state.corked--;
    	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    	  }
    	};
    	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    	  // node::ParseEncoding() requires lower case.
    	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    	  this._writableState.defaultEncoding = encoding;
    	  return this;
    	};
    	Object.defineProperty(Writable.prototype, 'writableBuffer', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._writableState && this._writableState.getBuffer();
    	  }
    	});
    	function decodeChunk(state, chunk, encoding) {
    	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    	    chunk = Buffer.from(chunk, encoding);
    	  }
    	  return chunk;
    	}
    	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._writableState.highWaterMark;
    	  }
    	});

    	// if we're already writing something, then just put this
    	// in the queue, and wait our turn.  Otherwise, call _write
    	// If we return false, then we need a drain event, so set that flag.
    	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    	  if (!isBuf) {
    	    var newChunk = decodeChunk(state, chunk, encoding);
    	    if (chunk !== newChunk) {
    	      isBuf = true;
    	      encoding = 'buffer';
    	      chunk = newChunk;
    	    }
    	  }
    	  var len = state.objectMode ? 1 : chunk.length;
    	  state.length += len;
    	  var ret = state.length < state.highWaterMark;
    	  // we must ensure that previous needDrain will not be reset to false.
    	  if (!ret) state.needDrain = true;
    	  if (state.writing || state.corked) {
    	    var last = state.lastBufferedRequest;
    	    state.lastBufferedRequest = {
    	      chunk: chunk,
    	      encoding: encoding,
    	      isBuf: isBuf,
    	      callback: cb,
    	      next: null
    	    };
    	    if (last) {
    	      last.next = state.lastBufferedRequest;
    	    } else {
    	      state.bufferedRequest = state.lastBufferedRequest;
    	    }
    	    state.bufferedRequestCount += 1;
    	  } else {
    	    doWrite(stream, state, false, len, chunk, encoding, cb);
    	  }
    	  return ret;
    	}
    	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    	  state.writelen = len;
    	  state.writecb = cb;
    	  state.writing = true;
    	  state.sync = true;
    	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    	  state.sync = false;
    	}
    	function onwriteError(stream, state, sync, er, cb) {
    	  --state.pendingcb;
    	  if (sync) {
    	    // defer the callback if we are being called synchronously
    	    // to avoid piling up things on the stack
    	    process.nextTick(cb, er);
    	    // this can emit finish, and it will always happen
    	    // after error
    	    process.nextTick(finishMaybe, stream, state);
    	    stream._writableState.errorEmitted = true;
    	    errorOrDestroy(stream, er);
    	  } else {
    	    // the caller expect this to happen before if
    	    // it is async
    	    cb(er);
    	    stream._writableState.errorEmitted = true;
    	    errorOrDestroy(stream, er);
    	    // this can emit finish, but finish must
    	    // always follow error
    	    finishMaybe(stream, state);
    	  }
    	}
    	function onwriteStateUpdate(state) {
    	  state.writing = false;
    	  state.writecb = null;
    	  state.length -= state.writelen;
    	  state.writelen = 0;
    	}
    	function onwrite(stream, er) {
    	  var state = stream._writableState;
    	  var sync = state.sync;
    	  var cb = state.writecb;
    	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    	  onwriteStateUpdate(state);
    	  if (er) onwriteError(stream, state, sync, er, cb);else {
    	    // Check if we're actually ready to finish, but don't emit yet
    	    var finished = needFinish(state) || stream.destroyed;
    	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
    	      clearBuffer(stream, state);
    	    }
    	    if (sync) {
    	      process.nextTick(afterWrite, stream, state, finished, cb);
    	    } else {
    	      afterWrite(stream, state, finished, cb);
    	    }
    	  }
    	}
    	function afterWrite(stream, state, finished, cb) {
    	  if (!finished) onwriteDrain(stream, state);
    	  state.pendingcb--;
    	  cb();
    	  finishMaybe(stream, state);
    	}

    	// Must force callback to be called on nextTick, so that we don't
    	// emit 'drain' before the write() consumer gets the 'false' return
    	// value, and has a chance to attach a 'drain' listener.
    	function onwriteDrain(stream, state) {
    	  if (state.length === 0 && state.needDrain) {
    	    state.needDrain = false;
    	    stream.emit('drain');
    	  }
    	}

    	// if there's something in the buffer waiting, then process it
    	function clearBuffer(stream, state) {
    	  state.bufferProcessing = true;
    	  var entry = state.bufferedRequest;
    	  if (stream._writev && entry && entry.next) {
    	    // Fast case, write everything using _writev()
    	    var l = state.bufferedRequestCount;
    	    var buffer = new Array(l);
    	    var holder = state.corkedRequestsFree;
    	    holder.entry = entry;
    	    var count = 0;
    	    var allBuffers = true;
    	    while (entry) {
    	      buffer[count] = entry;
    	      if (!entry.isBuf) allBuffers = false;
    	      entry = entry.next;
    	      count += 1;
    	    }
    	    buffer.allBuffers = allBuffers;
    	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    	    // doWrite is almost always async, defer these to save a bit of time
    	    // as the hot path ends with doWrite
    	    state.pendingcb++;
    	    state.lastBufferedRequest = null;
    	    if (holder.next) {
    	      state.corkedRequestsFree = holder.next;
    	      holder.next = null;
    	    } else {
    	      state.corkedRequestsFree = new CorkedRequest(state);
    	    }
    	    state.bufferedRequestCount = 0;
    	  } else {
    	    // Slow case, write chunks one-by-one
    	    while (entry) {
    	      var chunk = entry.chunk;
    	      var encoding = entry.encoding;
    	      var cb = entry.callback;
    	      var len = state.objectMode ? 1 : chunk.length;
    	      doWrite(stream, state, false, len, chunk, encoding, cb);
    	      entry = entry.next;
    	      state.bufferedRequestCount--;
    	      // if we didn't call the onwrite immediately, then
    	      // it means that we need to wait until it does.
    	      // also, that means that the chunk and cb are currently
    	      // being processed, so move the buffer counter past them.
    	      if (state.writing) {
    	        break;
    	      }
    	    }
    	    if (entry === null) state.lastBufferedRequest = null;
    	  }
    	  state.bufferedRequest = entry;
    	  state.bufferProcessing = false;
    	}
    	Writable.prototype._write = function (chunk, encoding, cb) {
    	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
    	};
    	Writable.prototype._writev = null;
    	Writable.prototype.end = function (chunk, encoding, cb) {
    	  var state = this._writableState;
    	  if (typeof chunk === 'function') {
    	    cb = chunk;
    	    chunk = null;
    	    encoding = null;
    	  } else if (typeof encoding === 'function') {
    	    cb = encoding;
    	    encoding = null;
    	  }
    	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    	  // .end() fully uncorks
    	  if (state.corked) {
    	    state.corked = 1;
    	    this.uncork();
    	  }

    	  // ignore unnecessary end() calls.
    	  if (!state.ending) endWritable(this, state, cb);
    	  return this;
    	};
    	Object.defineProperty(Writable.prototype, 'writableLength', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._writableState.length;
    	  }
    	});
    	function needFinish(state) {
    	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    	}
    	function callFinal(stream, state) {
    	  stream._final(function (err) {
    	    state.pendingcb--;
    	    if (err) {
    	      errorOrDestroy(stream, err);
    	    }
    	    state.prefinished = true;
    	    stream.emit('prefinish');
    	    finishMaybe(stream, state);
    	  });
    	}
    	function prefinish(stream, state) {
    	  if (!state.prefinished && !state.finalCalled) {
    	    if (typeof stream._final === 'function' && !state.destroyed) {
    	      state.pendingcb++;
    	      state.finalCalled = true;
    	      process.nextTick(callFinal, stream, state);
    	    } else {
    	      state.prefinished = true;
    	      stream.emit('prefinish');
    	    }
    	  }
    	}
    	function finishMaybe(stream, state) {
    	  var need = needFinish(state);
    	  if (need) {
    	    prefinish(stream, state);
    	    if (state.pendingcb === 0) {
    	      state.finished = true;
    	      stream.emit('finish');
    	      if (state.autoDestroy) {
    	        // In case of duplex streams we need a way to detect
    	        // if the readable side is ready for autoDestroy as well
    	        var rState = stream._readableState;
    	        if (!rState || rState.autoDestroy && rState.endEmitted) {
    	          stream.destroy();
    	        }
    	      }
    	    }
    	  }
    	  return need;
    	}
    	function endWritable(stream, state, cb) {
    	  state.ending = true;
    	  finishMaybe(stream, state);
    	  if (cb) {
    	    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
    	  }
    	  state.ended = true;
    	  stream.writable = false;
    	}
    	function onCorkedFinish(corkReq, state, err) {
    	  var entry = corkReq.entry;
    	  corkReq.entry = null;
    	  while (entry) {
    	    var cb = entry.callback;
    	    state.pendingcb--;
    	    cb(err);
    	    entry = entry.next;
    	  }

    	  // reuse the free corkReq.
    	  state.corkedRequestsFree.next = corkReq;
    	}
    	Object.defineProperty(Writable.prototype, 'destroyed', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    if (this._writableState === undefined) {
    	      return false;
    	    }
    	    return this._writableState.destroyed;
    	  },
    	  set: function set(value) {
    	    // we ignore the value if the stream
    	    // has not been initialized yet
    	    if (!this._writableState) {
    	      return;
    	    }

    	    // backward compatibility, the user is explicitly
    	    // managing destroyed
    	    this._writableState.destroyed = value;
    	  }
    	});
    	Writable.prototype.destroy = destroyImpl.destroy;
    	Writable.prototype._undestroy = destroyImpl.undestroy;
    	Writable.prototype._destroy = function (err, cb) {
    	  cb(err);
    	};
    	return _stream_writable;
    }

    var _stream_duplex;
    var hasRequired_stream_duplex;

    function require_stream_duplex () {
    	if (hasRequired_stream_duplex) return _stream_duplex;
    	hasRequired_stream_duplex = 1;

    	/*<replacement>*/
    	var objectKeys = Object.keys || function (obj) {
    	  var keys = [];
    	  for (var key in obj) keys.push(key);
    	  return keys;
    	};
    	/*</replacement>*/

    	_stream_duplex = Duplex;
    	var Readable = require_stream_readable();
    	var Writable = require_stream_writable();
    	require$$0$2(Duplex, Readable);
    	{
    	  // Allow the keys array to be GC'ed.
    	  var keys = objectKeys(Writable.prototype);
    	  for (var v = 0; v < keys.length; v++) {
    	    var method = keys[v];
    	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    	  }
    	}
    	function Duplex(options) {
    	  if (!(this instanceof Duplex)) return new Duplex(options);
    	  Readable.call(this, options);
    	  Writable.call(this, options);
    	  this.allowHalfOpen = true;
    	  if (options) {
    	    if (options.readable === false) this.readable = false;
    	    if (options.writable === false) this.writable = false;
    	    if (options.allowHalfOpen === false) {
    	      this.allowHalfOpen = false;
    	      this.once('end', onend);
    	    }
    	  }
    	}
    	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._writableState.highWaterMark;
    	  }
    	});
    	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._writableState && this._writableState.getBuffer();
    	  }
    	});
    	Object.defineProperty(Duplex.prototype, 'writableLength', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._writableState.length;
    	  }
    	});

    	// the no-half-open enforcer
    	function onend() {
    	  // If the writable side ended, then we're ok.
    	  if (this._writableState.ended) return;

    	  // no more data can be written.
    	  // But allow more writes to happen in this tick.
    	  process.nextTick(onEndNT, this);
    	}
    	function onEndNT(self) {
    	  self.end();
    	}
    	Object.defineProperty(Duplex.prototype, 'destroyed', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    if (this._readableState === undefined || this._writableState === undefined) {
    	      return false;
    	    }
    	    return this._readableState.destroyed && this._writableState.destroyed;
    	  },
    	  set: function set(value) {
    	    // we ignore the value if the stream
    	    // has not been initialized yet
    	    if (this._readableState === undefined || this._writableState === undefined) {
    	      return;
    	    }

    	    // backward compatibility, the user is explicitly
    	    // managing destroyed
    	    this._readableState.destroyed = value;
    	    this._writableState.destroyed = value;
    	  }
    	});
    	return _stream_duplex;
    }

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var isBufferEncoding = Buffer$g.isEncoding
      || function(encoding) {
           switch (encoding && encoding.toLowerCase()) {
             case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
             default: return false;
           }
         };


    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    function StringDecoder$1(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer$g(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    }

    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder$1.prototype.write = function(buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
            buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder$1.prototype.detectIncompleteChar = function(buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = (buffer.length >= 3) ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder$1.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }

    var _polyfillNode_string_decoder = /*#__PURE__*/Object.freeze({
        __proto__: null,
        StringDecoder: StringDecoder$1
    });

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_string_decoder);

    var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;
    function once$1(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop$2() {}
    function isRequest$1(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }
    function eos$1(stream, opts, callback) {
      if (typeof opts === 'function') return eos$1(stream, null, opts);
      if (!opts) opts = {};
      callback = once$1(callback || noop$2);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };
      var onerror = function onerror(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };
      if (isRequest$1(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }
      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }
    var endOfStream = eos$1;

    var async_iterator;
    var hasRequiredAsync_iterator;

    function requireAsync_iterator () {
    	if (hasRequiredAsync_iterator) return async_iterator;
    	hasRequiredAsync_iterator = 1;

    	var _Object$setPrototypeO;
    	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
    	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
    	var finished = endOfStream;
    	var kLastResolve = Symbol('lastResolve');
    	var kLastReject = Symbol('lastReject');
    	var kError = Symbol('error');
    	var kEnded = Symbol('ended');
    	var kLastPromise = Symbol('lastPromise');
    	var kHandlePromise = Symbol('handlePromise');
    	var kStream = Symbol('stream');
    	function createIterResult(value, done) {
    	  return {
    	    value: value,
    	    done: done
    	  };
    	}
    	function readAndResolve(iter) {
    	  var resolve = iter[kLastResolve];
    	  if (resolve !== null) {
    	    var data = iter[kStream].read();
    	    // we defer if data is null
    	    // we can be expecting either 'end' or
    	    // 'error'
    	    if (data !== null) {
    	      iter[kLastPromise] = null;
    	      iter[kLastResolve] = null;
    	      iter[kLastReject] = null;
    	      resolve(createIterResult(data, false));
    	    }
    	  }
    	}
    	function onReadable(iter) {
    	  // we wait for the next tick, because it might
    	  // emit an error with process.nextTick
    	  process.nextTick(readAndResolve, iter);
    	}
    	function wrapForNext(lastPromise, iter) {
    	  return function (resolve, reject) {
    	    lastPromise.then(function () {
    	      if (iter[kEnded]) {
    	        resolve(createIterResult(undefined, true));
    	        return;
    	      }
    	      iter[kHandlePromise](resolve, reject);
    	    }, reject);
    	  };
    	}
    	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
    	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    	  get stream() {
    	    return this[kStream];
    	  },
    	  next: function next() {
    	    var _this = this;
    	    // if we have detected an error in the meanwhile
    	    // reject straight away
    	    var error = this[kError];
    	    if (error !== null) {
    	      return Promise.reject(error);
    	    }
    	    if (this[kEnded]) {
    	      return Promise.resolve(createIterResult(undefined, true));
    	    }
    	    if (this[kStream].destroyed) {
    	      // We need to defer via nextTick because if .destroy(err) is
    	      // called, the error will be emitted via nextTick, and
    	      // we cannot guarantee that there is no error lingering around
    	      // waiting to be emitted.
    	      return new Promise(function (resolve, reject) {
    	        process.nextTick(function () {
    	          if (_this[kError]) {
    	            reject(_this[kError]);
    	          } else {
    	            resolve(createIterResult(undefined, true));
    	          }
    	        });
    	      });
    	    }

    	    // if we have multiple next() calls
    	    // we will wait for the previous Promise to finish
    	    // this logic is optimized to support for await loops,
    	    // where next() is only called once at a time
    	    var lastPromise = this[kLastPromise];
    	    var promise;
    	    if (lastPromise) {
    	      promise = new Promise(wrapForNext(lastPromise, this));
    	    } else {
    	      // fast path needed to support multiple this.push()
    	      // without triggering the next() queue
    	      var data = this[kStream].read();
    	      if (data !== null) {
    	        return Promise.resolve(createIterResult(data, false));
    	      }
    	      promise = new Promise(this[kHandlePromise]);
    	    }
    	    this[kLastPromise] = promise;
    	    return promise;
    	  }
    	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
    	  return this;
    	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    	  var _this2 = this;
    	  // destroy(err, cb) is a private API
    	  // we can guarantee we have that here, because we control the
    	  // Readable class this is attached to
    	  return new Promise(function (resolve, reject) {
    	    _this2[kStream].destroy(null, function (err) {
    	      if (err) {
    	        reject(err);
    	        return;
    	      }
    	      resolve(createIterResult(undefined, true));
    	    });
    	  });
    	}), _Object$setPrototypeO), AsyncIteratorPrototype);
    	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    	  var _Object$create;
    	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    	    value: stream,
    	    writable: true
    	  }), _defineProperty(_Object$create, kLastResolve, {
    	    value: null,
    	    writable: true
    	  }), _defineProperty(_Object$create, kLastReject, {
    	    value: null,
    	    writable: true
    	  }), _defineProperty(_Object$create, kError, {
    	    value: null,
    	    writable: true
    	  }), _defineProperty(_Object$create, kEnded, {
    	    value: stream._readableState.endEmitted,
    	    writable: true
    	  }), _defineProperty(_Object$create, kHandlePromise, {
    	    value: function value(resolve, reject) {
    	      var data = iterator[kStream].read();
    	      if (data) {
    	        iterator[kLastPromise] = null;
    	        iterator[kLastResolve] = null;
    	        iterator[kLastReject] = null;
    	        resolve(createIterResult(data, false));
    	      } else {
    	        iterator[kLastResolve] = resolve;
    	        iterator[kLastReject] = reject;
    	      }
    	    },
    	    writable: true
    	  }), _Object$create));
    	  iterator[kLastPromise] = null;
    	  finished(stream, function (err) {
    	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
    	      var reject = iterator[kLastReject];
    	      // reject if we are waiting for data in the Promise
    	      // returned by next() and store the error
    	      if (reject !== null) {
    	        iterator[kLastPromise] = null;
    	        iterator[kLastResolve] = null;
    	        iterator[kLastReject] = null;
    	        reject(err);
    	      }
    	      iterator[kError] = err;
    	      return;
    	    }
    	    var resolve = iterator[kLastResolve];
    	    if (resolve !== null) {
    	      iterator[kLastPromise] = null;
    	      iterator[kLastResolve] = null;
    	      iterator[kLastReject] = null;
    	      resolve(createIterResult(undefined, true));
    	    }
    	    iterator[kEnded] = true;
    	  });
    	  stream.on('readable', onReadable.bind(null, iterator));
    	  return iterator;
    	};
    	async_iterator = createReadableStreamAsyncIterator;
    	return async_iterator;
    }

    var fromBrowser;
    var hasRequiredFromBrowser;

    function requireFromBrowser () {
    	if (hasRequiredFromBrowser) return fromBrowser;
    	hasRequiredFromBrowser = 1;
    	fromBrowser = function () {
    	  throw new Error('Readable.from is not available in the browser')
    	};
    	return fromBrowser;
    }

    var _stream_readable;
    var hasRequired_stream_readable;

    function require_stream_readable () {
    	if (hasRequired_stream_readable) return _stream_readable;
    	hasRequired_stream_readable = 1;

    	_stream_readable = Readable;

    	/*<replacement>*/
    	var Duplex;
    	/*</replacement>*/

    	Readable.ReadableState = ReadableState;

    	/*<replacement>*/
    	require$$0.EventEmitter;
    	var EElistenerCount = function EElistenerCount(emitter, type) {
    	  return emitter.listeners(type).length;
    	};
    	/*</replacement>*/

    	/*<replacement>*/
    	var Stream = streamBrowser;
    	/*</replacement>*/

    	var Buffer = require$$0$5.Buffer;
    	var OurUint8Array = (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
    	function _uint8ArrayToBuffer(chunk) {
    	  return Buffer.from(chunk);
    	}
    	function _isUint8Array(obj) {
    	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    	}

    	/*<replacement>*/
    	var debugUtil = require$$3;
    	var debug;
    	if (debugUtil && debugUtil.debuglog) {
    	  debug = debugUtil.debuglog('stream');
    	} else {
    	  debug = function debug() {};
    	}
    	/*</replacement>*/

    	var BufferList = requireBuffer_list();
    	var destroyImpl = destroy_1;
    	var _require = state,
    	  getHighWaterMark = _require.getHighWaterMark;
    	var _require$codes = errorsBrowser.codes,
    	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    	  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    	  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

    	// Lazy loaded to improve the startup performance.
    	var StringDecoder;
    	var createReadableStreamAsyncIterator;
    	var from;
    	require$$0$2(Readable, Stream);
    	var errorOrDestroy = destroyImpl.errorOrDestroy;
    	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
    	function prependListener(emitter, event, fn) {
    	  // Sadly this is not cacheable as some libraries bundle their own
    	  // event emitter implementation with them.
    	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

    	  // This is a hack to make sure that our error handler is attached before any
    	  // userland ones.  NEVER DO THIS. This is here only because this code needs
    	  // to continue to work with older versions of Node.js that do not include
    	  // the prependListener() method. The goal is to eventually remove this hack.
    	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    	}
    	function ReadableState(options, stream, isDuplex) {
    	  Duplex = Duplex || require_stream_duplex();
    	  options = options || {};

    	  // Duplex streams are both readable and writable, but share
    	  // the same options object.
    	  // However, some cases require setting options to different
    	  // values for the readable and the writable sides of the duplex stream.
    	  // These options can be provided separately as readableXXX and writableXXX.
    	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

    	  // object stream flag. Used to make read(n) ignore n and to
    	  // make all the buffer merging and length checks go away
    	  this.objectMode = !!options.objectMode;
    	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

    	  // the point at which it stops calling _read() to fill the buffer
    	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
    	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

    	  // A linked list is used to store data chunks instead of an array because the
    	  // linked list can remove elements from the beginning faster than
    	  // array.shift()
    	  this.buffer = new BufferList();
    	  this.length = 0;
    	  this.pipes = null;
    	  this.pipesCount = 0;
    	  this.flowing = null;
    	  this.ended = false;
    	  this.endEmitted = false;
    	  this.reading = false;

    	  // a flag to be able to tell if the event 'readable'/'data' is emitted
    	  // immediately, or on a later tick.  We set this to true at first, because
    	  // any actions that shouldn't happen until "later" should generally also
    	  // not happen before the first read call.
    	  this.sync = true;

    	  // whenever we return null, then we set a flag to say
    	  // that we're awaiting a 'readable' event emission.
    	  this.needReadable = false;
    	  this.emittedReadable = false;
    	  this.readableListening = false;
    	  this.resumeScheduled = false;
    	  this.paused = true;

    	  // Should close be emitted on destroy. Defaults to true.
    	  this.emitClose = options.emitClose !== false;

    	  // Should .destroy() be called after 'end' (and potentially 'finish')
    	  this.autoDestroy = !!options.autoDestroy;

    	  // has it been destroyed
    	  this.destroyed = false;

    	  // Crypto is kind of old and crusty.  Historically, its default string
    	  // encoding is 'binary' so we have to make this configurable.
    	  // Everything else in the universe uses 'utf8', though.
    	  this.defaultEncoding = options.defaultEncoding || 'utf8';

    	  // the number of writers that are awaiting a drain event in .pipe()s
    	  this.awaitDrain = 0;

    	  // if true, a maybeReadMore has been scheduled
    	  this.readingMore = false;
    	  this.decoder = null;
    	  this.encoding = null;
    	  if (options.encoding) {
    	    if (!StringDecoder) StringDecoder = require$$2.StringDecoder;
    	    this.decoder = new StringDecoder(options.encoding);
    	    this.encoding = options.encoding;
    	  }
    	}
    	function Readable(options) {
    	  Duplex = Duplex || require_stream_duplex();
    	  if (!(this instanceof Readable)) return new Readable(options);

    	  // Checking for a Stream.Duplex instance is faster here instead of inside
    	  // the ReadableState constructor, at least with V8 6.5
    	  var isDuplex = this instanceof Duplex;
    	  this._readableState = new ReadableState(options, this, isDuplex);

    	  // legacy
    	  this.readable = true;
    	  if (options) {
    	    if (typeof options.read === 'function') this._read = options.read;
    	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    	  }
    	  Stream.call(this);
    	}
    	Object.defineProperty(Readable.prototype, 'destroyed', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    if (this._readableState === undefined) {
    	      return false;
    	    }
    	    return this._readableState.destroyed;
    	  },
    	  set: function set(value) {
    	    // we ignore the value if the stream
    	    // has not been initialized yet
    	    if (!this._readableState) {
    	      return;
    	    }

    	    // backward compatibility, the user is explicitly
    	    // managing destroyed
    	    this._readableState.destroyed = value;
    	  }
    	});
    	Readable.prototype.destroy = destroyImpl.destroy;
    	Readable.prototype._undestroy = destroyImpl.undestroy;
    	Readable.prototype._destroy = function (err, cb) {
    	  cb(err);
    	};

    	// Manually shove something into the read() buffer.
    	// This returns true if the highWaterMark has not been hit yet,
    	// similar to how Writable.write() returns true if you should
    	// write() some more.
    	Readable.prototype.push = function (chunk, encoding) {
    	  var state = this._readableState;
    	  var skipChunkCheck;
    	  if (!state.objectMode) {
    	    if (typeof chunk === 'string') {
    	      encoding = encoding || state.defaultEncoding;
    	      if (encoding !== state.encoding) {
    	        chunk = Buffer.from(chunk, encoding);
    	        encoding = '';
    	      }
    	      skipChunkCheck = true;
    	    }
    	  } else {
    	    skipChunkCheck = true;
    	  }
    	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    	};

    	// Unshift should *always* be something directly out of read()
    	Readable.prototype.unshift = function (chunk) {
    	  return readableAddChunk(this, chunk, null, true, false);
    	};
    	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    	  debug('readableAddChunk', chunk);
    	  var state = stream._readableState;
    	  if (chunk === null) {
    	    state.reading = false;
    	    onEofChunk(stream, state);
    	  } else {
    	    var er;
    	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    	    if (er) {
    	      errorOrDestroy(stream, er);
    	    } else if (state.objectMode || chunk && chunk.length > 0) {
    	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
    	        chunk = _uint8ArrayToBuffer(chunk);
    	      }
    	      if (addToFront) {
    	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
    	      } else if (state.ended) {
    	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
    	      } else if (state.destroyed) {
    	        return false;
    	      } else {
    	        state.reading = false;
    	        if (state.decoder && !encoding) {
    	          chunk = state.decoder.write(chunk);
    	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
    	        } else {
    	          addChunk(stream, state, chunk, false);
    	        }
    	      }
    	    } else if (!addToFront) {
    	      state.reading = false;
    	      maybeReadMore(stream, state);
    	    }
    	  }

    	  // We can push more data if we are below the highWaterMark.
    	  // Also, if we have no data yet, we can stand some more bytes.
    	  // This is to work around cases where hwm=0, such as the repl.
    	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    	}
    	function addChunk(stream, state, chunk, addToFront) {
    	  if (state.flowing && state.length === 0 && !state.sync) {
    	    state.awaitDrain = 0;
    	    stream.emit('data', chunk);
    	  } else {
    	    // update the buffer info.
    	    state.length += state.objectMode ? 1 : chunk.length;
    	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    	    if (state.needReadable) emitReadable(stream);
    	  }
    	  maybeReadMore(stream, state);
    	}
    	function chunkInvalid(state, chunk) {
    	  var er;
    	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
    	  }
    	  return er;
    	}
    	Readable.prototype.isPaused = function () {
    	  return this._readableState.flowing === false;
    	};

    	// backwards compatibility.
    	Readable.prototype.setEncoding = function (enc) {
    	  if (!StringDecoder) StringDecoder = require$$2.StringDecoder;
    	  var decoder = new StringDecoder(enc);
    	  this._readableState.decoder = decoder;
    	  // If setEncoding(null), decoder.encoding equals utf8
    	  this._readableState.encoding = this._readableState.decoder.encoding;

    	  // Iterate over current buffer to convert already stored Buffers:
    	  var p = this._readableState.buffer.head;
    	  var content = '';
    	  while (p !== null) {
    	    content += decoder.write(p.data);
    	    p = p.next;
    	  }
    	  this._readableState.buffer.clear();
    	  if (content !== '') this._readableState.buffer.push(content);
    	  this._readableState.length = content.length;
    	  return this;
    	};

    	// Don't raise the hwm > 1GB
    	var MAX_HWM = 0x40000000;
    	function computeNewHighWaterMark(n) {
    	  if (n >= MAX_HWM) {
    	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    	    n = MAX_HWM;
    	  } else {
    	    // Get the next highest power of 2 to prevent increasing hwm excessively in
    	    // tiny amounts
    	    n--;
    	    n |= n >>> 1;
    	    n |= n >>> 2;
    	    n |= n >>> 4;
    	    n |= n >>> 8;
    	    n |= n >>> 16;
    	    n++;
    	  }
    	  return n;
    	}

    	// This function is designed to be inlinable, so please take care when making
    	// changes to the function body.
    	function howMuchToRead(n, state) {
    	  if (n <= 0 || state.length === 0 && state.ended) return 0;
    	  if (state.objectMode) return 1;
    	  if (n !== n) {
    	    // Only flow one buffer at a time
    	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    	  }
    	  // If we're asking for more than the current hwm, then raise the hwm.
    	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    	  if (n <= state.length) return n;
    	  // Don't have enough
    	  if (!state.ended) {
    	    state.needReadable = true;
    	    return 0;
    	  }
    	  return state.length;
    	}

    	// you can override either this method, or the async _read(n) below.
    	Readable.prototype.read = function (n) {
    	  debug('read', n);
    	  n = parseInt(n, 10);
    	  var state = this._readableState;
    	  var nOrig = n;
    	  if (n !== 0) state.emittedReadable = false;

    	  // if we're doing read(0) to trigger a readable event, but we
    	  // already have a bunch of data in the buffer, then just trigger
    	  // the 'readable' event and move on.
    	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    	    debug('read: emitReadable', state.length, state.ended);
    	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    	    return null;
    	  }
    	  n = howMuchToRead(n, state);

    	  // if we've ended, and we're now clear, then finish it up.
    	  if (n === 0 && state.ended) {
    	    if (state.length === 0) endReadable(this);
    	    return null;
    	  }

    	  // All the actual chunk generation logic needs to be
    	  // *below* the call to _read.  The reason is that in certain
    	  // synthetic stream cases, such as passthrough streams, _read
    	  // may be a completely synchronous operation which may change
    	  // the state of the read buffer, providing enough data when
    	  // before there was *not* enough.
    	  //
    	  // So, the steps are:
    	  // 1. Figure out what the state of things will be after we do
    	  // a read from the buffer.
    	  //
    	  // 2. If that resulting state will trigger a _read, then call _read.
    	  // Note that this may be asynchronous, or synchronous.  Yes, it is
    	  // deeply ugly to write APIs this way, but that still doesn't mean
    	  // that the Readable class should behave improperly, as streams are
    	  // designed to be sync/async agnostic.
    	  // Take note if the _read call is sync or async (ie, if the read call
    	  // has returned yet), so that we know whether or not it's safe to emit
    	  // 'readable' etc.
    	  //
    	  // 3. Actually pull the requested chunks out of the buffer and return.

    	  // if we need a readable event, then we need to do some reading.
    	  var doRead = state.needReadable;
    	  debug('need readable', doRead);

    	  // if we currently have less than the highWaterMark, then also read some
    	  if (state.length === 0 || state.length - n < state.highWaterMark) {
    	    doRead = true;
    	    debug('length less than watermark', doRead);
    	  }

    	  // however, if we've ended, then there's no point, and if we're already
    	  // reading, then it's unnecessary.
    	  if (state.ended || state.reading) {
    	    doRead = false;
    	    debug('reading or ended', doRead);
    	  } else if (doRead) {
    	    debug('do read');
    	    state.reading = true;
    	    state.sync = true;
    	    // if the length is currently zero, then we *need* a readable event.
    	    if (state.length === 0) state.needReadable = true;
    	    // call internal read method
    	    this._read(state.highWaterMark);
    	    state.sync = false;
    	    // If _read pushed data synchronously, then `reading` will be false,
    	    // and we need to re-evaluate how much data we can return to the user.
    	    if (!state.reading) n = howMuchToRead(nOrig, state);
    	  }
    	  var ret;
    	  if (n > 0) ret = fromList(n, state);else ret = null;
    	  if (ret === null) {
    	    state.needReadable = state.length <= state.highWaterMark;
    	    n = 0;
    	  } else {
    	    state.length -= n;
    	    state.awaitDrain = 0;
    	  }
    	  if (state.length === 0) {
    	    // If we have nothing in the buffer, then we want to know
    	    // as soon as we *do* get something into the buffer.
    	    if (!state.ended) state.needReadable = true;

    	    // If we tried to read() past the EOF, then emit end on the next tick.
    	    if (nOrig !== n && state.ended) endReadable(this);
    	  }
    	  if (ret !== null) this.emit('data', ret);
    	  return ret;
    	};
    	function onEofChunk(stream, state) {
    	  debug('onEofChunk');
    	  if (state.ended) return;
    	  if (state.decoder) {
    	    var chunk = state.decoder.end();
    	    if (chunk && chunk.length) {
    	      state.buffer.push(chunk);
    	      state.length += state.objectMode ? 1 : chunk.length;
    	    }
    	  }
    	  state.ended = true;
    	  if (state.sync) {
    	    // if we are sync, wait until next tick to emit the data.
    	    // Otherwise we risk emitting data in the flow()
    	    // the readable code triggers during a read() call
    	    emitReadable(stream);
    	  } else {
    	    // emit 'readable' now to make sure it gets picked up.
    	    state.needReadable = false;
    	    if (!state.emittedReadable) {
    	      state.emittedReadable = true;
    	      emitReadable_(stream);
    	    }
    	  }
    	}

    	// Don't emit readable right away in sync mode, because this can trigger
    	// another read() call => stack overflow.  This way, it might trigger
    	// a nextTick recursion warning, but that's not so bad.
    	function emitReadable(stream) {
    	  var state = stream._readableState;
    	  debug('emitReadable', state.needReadable, state.emittedReadable);
    	  state.needReadable = false;
    	  if (!state.emittedReadable) {
    	    debug('emitReadable', state.flowing);
    	    state.emittedReadable = true;
    	    process.nextTick(emitReadable_, stream);
    	  }
    	}
    	function emitReadable_(stream) {
    	  var state = stream._readableState;
    	  debug('emitReadable_', state.destroyed, state.length, state.ended);
    	  if (!state.destroyed && (state.length || state.ended)) {
    	    stream.emit('readable');
    	    state.emittedReadable = false;
    	  }

    	  // The stream needs another readable event if
    	  // 1. It is not flowing, as the flow mechanism will take
    	  //    care of it.
    	  // 2. It is not ended.
    	  // 3. It is below the highWaterMark, so we can schedule
    	  //    another readable later.
    	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    	  flow(stream);
    	}

    	// at this point, the user has presumably seen the 'readable' event,
    	// and called read() to consume some data.  that may have triggered
    	// in turn another _read(n) call, in which case reading = true if
    	// it's in progress.
    	// However, if we're not ended, or reading, and the length < hwm,
    	// then go ahead and try to read some more preemptively.
    	function maybeReadMore(stream, state) {
    	  if (!state.readingMore) {
    	    state.readingMore = true;
    	    process.nextTick(maybeReadMore_, stream, state);
    	  }
    	}
    	function maybeReadMore_(stream, state) {
    	  // Attempt to read more data if we should.
    	  //
    	  // The conditions for reading more data are (one of):
    	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
    	  //   is responsible for filling the buffer with enough data if such data
    	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
    	  //   we should _not_ attempt to buffer any extra data. We'll get more data
    	  //   when the stream consumer calls read() instead.
    	  // - No data in the buffer, and the stream is in flowing mode. In this mode
    	  //   the loop below is responsible for ensuring read() is called. Failing to
    	  //   call read here would abort the flow and there's no other mechanism for
    	  //   continuing the flow if the stream consumer has just subscribed to the
    	  //   'data' event.
    	  //
    	  // In addition to the above conditions to keep reading data, the following
    	  // conditions prevent the data from being read:
    	  // - The stream has ended (state.ended).
    	  // - There is already a pending 'read' operation (state.reading). This is a
    	  //   case where the the stream has called the implementation defined _read()
    	  //   method, but they are processing the call asynchronously and have _not_
    	  //   called push() with new data. In this case we skip performing more
    	  //   read()s. The execution ends in this method again after the _read() ends
    	  //   up calling push() with more data.
    	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    	    var len = state.length;
    	    debug('maybeReadMore read 0');
    	    stream.read(0);
    	    if (len === state.length)
    	      // didn't get any data, stop spinning.
    	      break;
    	  }
    	  state.readingMore = false;
    	}

    	// abstract method.  to be overridden in specific implementation classes.
    	// call cb(er, data) where data is <= n in length.
    	// for virtual (non-string, non-buffer) streams, "length" is somewhat
    	// arbitrary, and perhaps not very meaningful.
    	Readable.prototype._read = function (n) {
    	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
    	};
    	Readable.prototype.pipe = function (dest, pipeOpts) {
    	  var src = this;
    	  var state = this._readableState;
    	  switch (state.pipesCount) {
    	    case 0:
    	      state.pipes = dest;
    	      break;
    	    case 1:
    	      state.pipes = [state.pipes, dest];
    	      break;
    	    default:
    	      state.pipes.push(dest);
    	      break;
    	  }
    	  state.pipesCount += 1;
    	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    	  var endFn = doEnd ? onend : unpipe;
    	  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
    	  dest.on('unpipe', onunpipe);
    	  function onunpipe(readable, unpipeInfo) {
    	    debug('onunpipe');
    	    if (readable === src) {
    	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
    	        unpipeInfo.hasUnpiped = true;
    	        cleanup();
    	      }
    	    }
    	  }
    	  function onend() {
    	    debug('onend');
    	    dest.end();
    	  }

    	  // when the dest drains, it reduces the awaitDrain counter
    	  // on the source.  This would be more elegant with a .once()
    	  // handler in flow(), but adding and removing repeatedly is
    	  // too slow.
    	  var ondrain = pipeOnDrain(src);
    	  dest.on('drain', ondrain);
    	  var cleanedUp = false;
    	  function cleanup() {
    	    debug('cleanup');
    	    // cleanup event handlers once the pipe is broken
    	    dest.removeListener('close', onclose);
    	    dest.removeListener('finish', onfinish);
    	    dest.removeListener('drain', ondrain);
    	    dest.removeListener('error', onerror);
    	    dest.removeListener('unpipe', onunpipe);
    	    src.removeListener('end', onend);
    	    src.removeListener('end', unpipe);
    	    src.removeListener('data', ondata);
    	    cleanedUp = true;

    	    // if the reader is waiting for a drain event from this
    	    // specific writer, then it would cause it to never start
    	    // flowing again.
    	    // So, if this is awaiting a drain, then we just call it now.
    	    // If we don't know, then assume that we are waiting for one.
    	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    	  }
    	  src.on('data', ondata);
    	  function ondata(chunk) {
    	    debug('ondata');
    	    var ret = dest.write(chunk);
    	    debug('dest.write', ret);
    	    if (ret === false) {
    	      // If the user unpiped during `dest.write()`, it is possible
    	      // to get stuck in a permanently paused state if that write
    	      // also returned false.
    	      // => Check whether `dest` is still a piping destination.
    	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
    	        debug('false write response, pause', state.awaitDrain);
    	        state.awaitDrain++;
    	      }
    	      src.pause();
    	    }
    	  }

    	  // if the dest has an error, then stop piping into it.
    	  // however, don't suppress the throwing behavior for this.
    	  function onerror(er) {
    	    debug('onerror', er);
    	    unpipe();
    	    dest.removeListener('error', onerror);
    	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    	  }

    	  // Make sure our error handler is attached before userland ones.
    	  prependListener(dest, 'error', onerror);

    	  // Both close and finish should trigger unpipe, but only once.
    	  function onclose() {
    	    dest.removeListener('finish', onfinish);
    	    unpipe();
    	  }
    	  dest.once('close', onclose);
    	  function onfinish() {
    	    debug('onfinish');
    	    dest.removeListener('close', onclose);
    	    unpipe();
    	  }
    	  dest.once('finish', onfinish);
    	  function unpipe() {
    	    debug('unpipe');
    	    src.unpipe(dest);
    	  }

    	  // tell the dest that it's being piped to
    	  dest.emit('pipe', src);

    	  // start the flow if it hasn't been started already.
    	  if (!state.flowing) {
    	    debug('pipe resume');
    	    src.resume();
    	  }
    	  return dest;
    	};
    	function pipeOnDrain(src) {
    	  return function pipeOnDrainFunctionResult() {
    	    var state = src._readableState;
    	    debug('pipeOnDrain', state.awaitDrain);
    	    if (state.awaitDrain) state.awaitDrain--;
    	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
    	      state.flowing = true;
    	      flow(src);
    	    }
    	  };
    	}
    	Readable.prototype.unpipe = function (dest) {
    	  var state = this._readableState;
    	  var unpipeInfo = {
    	    hasUnpiped: false
    	  };

    	  // if we're not piping anywhere, then do nothing.
    	  if (state.pipesCount === 0) return this;

    	  // just one destination.  most common case.
    	  if (state.pipesCount === 1) {
    	    // passed in one, but it's not the right one.
    	    if (dest && dest !== state.pipes) return this;
    	    if (!dest) dest = state.pipes;

    	    // got a match.
    	    state.pipes = null;
    	    state.pipesCount = 0;
    	    state.flowing = false;
    	    if (dest) dest.emit('unpipe', this, unpipeInfo);
    	    return this;
    	  }

    	  // slow case. multiple pipe destinations.

    	  if (!dest) {
    	    // remove all.
    	    var dests = state.pipes;
    	    var len = state.pipesCount;
    	    state.pipes = null;
    	    state.pipesCount = 0;
    	    state.flowing = false;
    	    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
    	      hasUnpiped: false
    	    });
    	    return this;
    	  }

    	  // try to find the right one.
    	  var index = indexOf(state.pipes, dest);
    	  if (index === -1) return this;
    	  state.pipes.splice(index, 1);
    	  state.pipesCount -= 1;
    	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
    	  dest.emit('unpipe', this, unpipeInfo);
    	  return this;
    	};

    	// set up data events if they are asked for
    	// Ensure readable listeners eventually get something
    	Readable.prototype.on = function (ev, fn) {
    	  var res = Stream.prototype.on.call(this, ev, fn);
    	  var state = this._readableState;
    	  if (ev === 'data') {
    	    // update readableListening so that resume() may be a no-op
    	    // a few lines down. This is needed to support once('readable').
    	    state.readableListening = this.listenerCount('readable') > 0;

    	    // Try start flowing on next tick if stream isn't explicitly paused
    	    if (state.flowing !== false) this.resume();
    	  } else if (ev === 'readable') {
    	    if (!state.endEmitted && !state.readableListening) {
    	      state.readableListening = state.needReadable = true;
    	      state.flowing = false;
    	      state.emittedReadable = false;
    	      debug('on readable', state.length, state.reading);
    	      if (state.length) {
    	        emitReadable(this);
    	      } else if (!state.reading) {
    	        process.nextTick(nReadingNextTick, this);
    	      }
    	    }
    	  }
    	  return res;
    	};
    	Readable.prototype.addListener = Readable.prototype.on;
    	Readable.prototype.removeListener = function (ev, fn) {
    	  var res = Stream.prototype.removeListener.call(this, ev, fn);
    	  if (ev === 'readable') {
    	    // We need to check if there is someone still listening to
    	    // readable and reset the state. However this needs to happen
    	    // after readable has been emitted but before I/O (nextTick) to
    	    // support once('readable', fn) cycles. This means that calling
    	    // resume within the same tick will have no
    	    // effect.
    	    process.nextTick(updateReadableListening, this);
    	  }
    	  return res;
    	};
    	Readable.prototype.removeAllListeners = function (ev) {
    	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    	  if (ev === 'readable' || ev === undefined) {
    	    // We need to check if there is someone still listening to
    	    // readable and reset the state. However this needs to happen
    	    // after readable has been emitted but before I/O (nextTick) to
    	    // support once('readable', fn) cycles. This means that calling
    	    // resume within the same tick will have no
    	    // effect.
    	    process.nextTick(updateReadableListening, this);
    	  }
    	  return res;
    	};
    	function updateReadableListening(self) {
    	  var state = self._readableState;
    	  state.readableListening = self.listenerCount('readable') > 0;
    	  if (state.resumeScheduled && !state.paused) {
    	    // flowing needs to be set to true now, otherwise
    	    // the upcoming resume will not flow.
    	    state.flowing = true;

    	    // crude way to check if we should resume
    	  } else if (self.listenerCount('data') > 0) {
    	    self.resume();
    	  }
    	}
    	function nReadingNextTick(self) {
    	  debug('readable nexttick read 0');
    	  self.read(0);
    	}

    	// pause() and resume() are remnants of the legacy readable stream API
    	// If the user uses them, then switch into old mode.
    	Readable.prototype.resume = function () {
    	  var state = this._readableState;
    	  if (!state.flowing) {
    	    debug('resume');
    	    // we flow only if there is no one listening
    	    // for readable, but we still have to call
    	    // resume()
    	    state.flowing = !state.readableListening;
    	    resume(this, state);
    	  }
    	  state.paused = false;
    	  return this;
    	};
    	function resume(stream, state) {
    	  if (!state.resumeScheduled) {
    	    state.resumeScheduled = true;
    	    process.nextTick(resume_, stream, state);
    	  }
    	}
    	function resume_(stream, state) {
    	  debug('resume', state.reading);
    	  if (!state.reading) {
    	    stream.read(0);
    	  }
    	  state.resumeScheduled = false;
    	  stream.emit('resume');
    	  flow(stream);
    	  if (state.flowing && !state.reading) stream.read(0);
    	}
    	Readable.prototype.pause = function () {
    	  debug('call pause flowing=%j', this._readableState.flowing);
    	  if (this._readableState.flowing !== false) {
    	    debug('pause');
    	    this._readableState.flowing = false;
    	    this.emit('pause');
    	  }
    	  this._readableState.paused = true;
    	  return this;
    	};
    	function flow(stream) {
    	  var state = stream._readableState;
    	  debug('flow', state.flowing);
    	  while (state.flowing && stream.read() !== null);
    	}

    	// wrap an old-style stream as the async data source.
    	// This is *not* part of the readable stream interface.
    	// It is an ugly unfortunate mess of history.
    	Readable.prototype.wrap = function (stream) {
    	  var _this = this;
    	  var state = this._readableState;
    	  var paused = false;
    	  stream.on('end', function () {
    	    debug('wrapped end');
    	    if (state.decoder && !state.ended) {
    	      var chunk = state.decoder.end();
    	      if (chunk && chunk.length) _this.push(chunk);
    	    }
    	    _this.push(null);
    	  });
    	  stream.on('data', function (chunk) {
    	    debug('wrapped data');
    	    if (state.decoder) chunk = state.decoder.write(chunk);

    	    // don't skip over falsy values in objectMode
    	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    	    var ret = _this.push(chunk);
    	    if (!ret) {
    	      paused = true;
    	      stream.pause();
    	    }
    	  });

    	  // proxy all the other methods.
    	  // important when wrapping filters and duplexes.
    	  for (var i in stream) {
    	    if (this[i] === undefined && typeof stream[i] === 'function') {
    	      this[i] = function methodWrap(method) {
    	        return function methodWrapReturnFunction() {
    	          return stream[method].apply(stream, arguments);
    	        };
    	      }(i);
    	    }
    	  }

    	  // proxy certain important events.
    	  for (var n = 0; n < kProxyEvents.length; n++) {
    	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    	  }

    	  // when we try to consume some more bytes, simply unpause the
    	  // underlying stream.
    	  this._read = function (n) {
    	    debug('wrapped _read', n);
    	    if (paused) {
    	      paused = false;
    	      stream.resume();
    	    }
    	  };
    	  return this;
    	};
    	if (typeof Symbol === 'function') {
    	  Readable.prototype[Symbol.asyncIterator] = function () {
    	    if (createReadableStreamAsyncIterator === undefined) {
    	      createReadableStreamAsyncIterator = requireAsync_iterator();
    	    }
    	    return createReadableStreamAsyncIterator(this);
    	  };
    	}
    	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._readableState.highWaterMark;
    	  }
    	});
    	Object.defineProperty(Readable.prototype, 'readableBuffer', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._readableState && this._readableState.buffer;
    	  }
    	});
    	Object.defineProperty(Readable.prototype, 'readableFlowing', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._readableState.flowing;
    	  },
    	  set: function set(state) {
    	    if (this._readableState) {
    	      this._readableState.flowing = state;
    	    }
    	  }
    	});

    	// exposed for testing purposes only.
    	Readable._fromList = fromList;
    	Object.defineProperty(Readable.prototype, 'readableLength', {
    	  // making it explicit this property is not enumerable
    	  // because otherwise some prototype manipulation in
    	  // userland will fail
    	  enumerable: false,
    	  get: function get() {
    	    return this._readableState.length;
    	  }
    	});

    	// Pluck off n bytes from an array of buffers.
    	// Length is the combined lengths of all the buffers in the list.
    	// This function is designed to be inlinable, so please take care when making
    	// changes to the function body.
    	function fromList(n, state) {
    	  // nothing buffered
    	  if (state.length === 0) return null;
    	  var ret;
    	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    	    // read it all, truncate the list
    	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    	    state.buffer.clear();
    	  } else {
    	    // read part of list
    	    ret = state.buffer.consume(n, state.decoder);
    	  }
    	  return ret;
    	}
    	function endReadable(stream) {
    	  var state = stream._readableState;
    	  debug('endReadable', state.endEmitted);
    	  if (!state.endEmitted) {
    	    state.ended = true;
    	    process.nextTick(endReadableNT, state, stream);
    	  }
    	}
    	function endReadableNT(state, stream) {
    	  debug('endReadableNT', state.endEmitted, state.length);

    	  // Check that we didn't get one last unshift.
    	  if (!state.endEmitted && state.length === 0) {
    	    state.endEmitted = true;
    	    stream.readable = false;
    	    stream.emit('end');
    	    if (state.autoDestroy) {
    	      // In case of duplex streams we need a way to detect
    	      // if the writable side is ready for autoDestroy as well
    	      var wState = stream._writableState;
    	      if (!wState || wState.autoDestroy && wState.finished) {
    	        stream.destroy();
    	      }
    	    }
    	  }
    	}
    	if (typeof Symbol === 'function') {
    	  Readable.from = function (iterable, opts) {
    	    if (from === undefined) {
    	      from = requireFromBrowser();
    	    }
    	    return from(Readable, iterable, opts);
    	  };
    	}
    	function indexOf(xs, x) {
    	  for (var i = 0, l = xs.length; i < l; i++) {
    	    if (xs[i] === x) return i;
    	  }
    	  return -1;
    	}
    	return _stream_readable;
    }

    var _stream_transform = Transform$6;
    var _require$codes$1 = errorsBrowser.codes,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
      ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
      ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex$1 = require_stream_duplex();
    require$$0$2(Transform$6, Duplex$1);
    function afterTransform$1(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform$6(options) {
      if (!(this instanceof Transform$6)) return new Transform$6(options);
      Duplex$1.call(this, options);
      this._transformState = {
        afterTransform: afterTransform$1.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      // When the writable side finishes, then flush out anything remaining.
      this.on('prefinish', prefinish$1);
    }
    function prefinish$1() {
      var _this = this;
      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done$1(_this, er, data);
        });
      } else {
        done$1(this, null, null);
      }
    }
    Transform$6.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex$1.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform$6.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
    };
    Transform$6.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform$6.prototype._read = function (n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };
    Transform$6.prototype._destroy = function (err, cb) {
      Duplex$1.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };
    function done$1(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null)
        // single equals check for both `null` and `undefined`
        stream.push(data);

      // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }

    var _stream_passthrough = PassThrough$1;
    var Transform$5 = _stream_transform;
    require$$0$2(PassThrough$1, Transform$5);
    function PassThrough$1(options) {
      if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);
      Transform$5.call(this, options);
    }
    PassThrough$1.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    var eos;
    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = errorsBrowser.codes,
      ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop$1(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos === undefined) eos = endOfStream;
      eos(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;

        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length) return noop$1;
      if (typeof streams[streams.length - 1] !== 'function') return noop$1;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS('streams');
      }
      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    var pipeline_1 = pipeline;

    (function (module, exports) {
    	exports = module.exports = require_stream_readable();
    	exports.Stream = exports;
    	exports.Readable = exports;
    	exports.Writable = require_stream_writable();
    	exports.Duplex = require_stream_duplex();
    	exports.Transform = _stream_transform;
    	exports.PassThrough = _stream_passthrough;
    	exports.finished = endOfStream;
    	exports.pipeline = pipeline_1; 
    } (readableBrowser, readableBrowser.exports));

    var readableBrowserExports = readableBrowser.exports;

    const { Transform: Transform$4 } = readableBrowserExports;

    var keccak$1 = (KeccakState) => class Keccak extends Transform$4 {
      constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
        super(options);

        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._hashBitLength = hashBitLength;
        this._options = options;

        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }

      _transform (chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }

        callback(error);
      }

      _flush (callback) {
        let error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }

        callback(error);
      }

      update (data, encoding) {
        if (!Buffer$g.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
        if (this._finalized) throw new Error('Digest already called')
        if (!Buffer$g.isBuffer(data)) data = Buffer$g.from(data, encoding);

        this._state.absorb(data);

        return this
      }

      digest (encoding) {
        if (this._finalized) throw new Error('Digest already called')
        this._finalized = true;

        if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
        let digest = this._state.squeeze(this._hashBitLength / 8);
        if (encoding !== undefined) digest = digest.toString(encoding);

        this._resetState();

        return digest
      }

      // remove result from memory
      _resetState () {
        this._state.initialize(this._rate, this._capacity);
        return this
      }

      // because sometimes we need hash right now and little later
      _clone () {
        const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;

        return clone
      }
    };

    const { Transform: Transform$3 } = readableBrowserExports;

    var shake = (KeccakState) => class Shake extends Transform$3 {
      constructor (rate, capacity, delimitedSuffix, options) {
        super(options);

        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._options = options;

        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }

      _transform (chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }

        callback(error);
      }

      _flush () {}

      _read (size) {
        this.push(this.squeeze(size));
      }

      update (data, encoding) {
        if (!Buffer$g.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
        if (this._finalized) throw new Error('Squeeze already called')
        if (!Buffer$g.isBuffer(data)) data = Buffer$g.from(data, encoding);

        this._state.absorb(data);

        return this
      }

      squeeze (dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true;
          this._state.absorbLastFewBits(this._delimitedSuffix);
        }

        let data = this._state.squeeze(dataByteLength);
        if (encoding !== undefined) data = data.toString(encoding);

        return data
      }

      _resetState () {
        this._state.initialize(this._rate, this._capacity);
        return this
      }

      _clone () {
        const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;

        return clone
      }
    };

    const createKeccak = keccak$1;
    const createShake = shake;

    var api = function (KeccakState) {
      const Keccak = createKeccak(KeccakState);
      const Shake = createShake(KeccakState);

      return function (algorithm, options) {
        const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
        switch (hash) {
          case 'keccak224': return new Keccak(1152, 448, null, 224, options)
          case 'keccak256': return new Keccak(1088, 512, null, 256, options)
          case 'keccak384': return new Keccak(832, 768, null, 384, options)
          case 'keccak512': return new Keccak(576, 1024, null, 512, options)

          case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
          case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
          case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
          case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)

          case 'shake128': return new Shake(1344, 256, 0x1f, options)
          case 'shake256': return new Shake(1088, 512, 0x1f, options)

          default: throw new Error('Invald algorithm: ' + algorithm)
        }
      }
    };

    var keccakStateUnroll = {};

    const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

    keccakStateUnroll.p1600 = function (s) {
      for (let round = 0; round < 24; ++round) {
        // theta
        const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
        let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
        const t1slo0 = s[0] ^ lo;
        const t1shi0 = s[1] ^ hi;
        const t1slo5 = s[10] ^ lo;
        const t1shi5 = s[11] ^ hi;
        const t1slo10 = s[20] ^ lo;
        const t1shi10 = s[21] ^ hi;
        const t1slo15 = s[30] ^ lo;
        const t1shi15 = s[31] ^ hi;
        const t1slo20 = s[40] ^ lo;
        const t1shi20 = s[41] ^ hi;
        lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
        const t1slo1 = s[2] ^ lo;
        const t1shi1 = s[3] ^ hi;
        const t1slo6 = s[12] ^ lo;
        const t1shi6 = s[13] ^ hi;
        const t1slo11 = s[22] ^ lo;
        const t1shi11 = s[23] ^ hi;
        const t1slo16 = s[32] ^ lo;
        const t1shi16 = s[33] ^ hi;
        const t1slo21 = s[42] ^ lo;
        const t1shi21 = s[43] ^ hi;
        lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
        const t1slo2 = s[4] ^ lo;
        const t1shi2 = s[5] ^ hi;
        const t1slo7 = s[14] ^ lo;
        const t1shi7 = s[15] ^ hi;
        const t1slo12 = s[24] ^ lo;
        const t1shi12 = s[25] ^ hi;
        const t1slo17 = s[34] ^ lo;
        const t1shi17 = s[35] ^ hi;
        const t1slo22 = s[44] ^ lo;
        const t1shi22 = s[45] ^ hi;
        lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
        const t1slo3 = s[6] ^ lo;
        const t1shi3 = s[7] ^ hi;
        const t1slo8 = s[16] ^ lo;
        const t1shi8 = s[17] ^ hi;
        const t1slo13 = s[26] ^ lo;
        const t1shi13 = s[27] ^ hi;
        const t1slo18 = s[36] ^ lo;
        const t1shi18 = s[37] ^ hi;
        const t1slo23 = s[46] ^ lo;
        const t1shi23 = s[47] ^ hi;
        lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
        const t1slo4 = s[8] ^ lo;
        const t1shi4 = s[9] ^ hi;
        const t1slo9 = s[18] ^ lo;
        const t1shi9 = s[19] ^ hi;
        const t1slo14 = s[28] ^ lo;
        const t1shi14 = s[29] ^ hi;
        const t1slo19 = s[38] ^ lo;
        const t1shi19 = s[39] ^ hi;
        const t1slo24 = s[48] ^ lo;
        const t1shi24 = s[49] ^ hi;

        // rho & pi
        const t2slo0 = t1slo0;
        const t2shi0 = t1shi0;
        const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28);
        const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28);
        const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29);
        const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29);
        const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23);
        const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23);
        const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14);
        const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14);
        const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31);
        const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31);
        const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20);
        const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20);
        const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22);
        const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22);
        const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19);
        const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19);
        const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30);
        const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30);
        const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2);
        const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2);
        const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26);
        const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26);
        const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21);
        const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21);
        const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17);
        const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17);
        const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3);
        const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3);
        const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4);
        const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4);
        const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9);
        const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9);
        const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7);
        const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7);
        const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11);
        const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11);
        const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8);
        const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8);
        const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5);
        const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5);
        const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12);
        const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12);
        const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25);
        const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25);
        const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24);
        const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24);
        const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18);
        const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18);

        // chi
        s[0] = t2slo0 ^ (~t2slo1 & t2slo2);
        s[1] = t2shi0 ^ (~t2shi1 & t2shi2);
        s[10] = t2slo5 ^ (~t2slo6 & t2slo7);
        s[11] = t2shi5 ^ (~t2shi6 & t2shi7);
        s[20] = t2slo10 ^ (~t2slo11 & t2slo12);
        s[21] = t2shi10 ^ (~t2shi11 & t2shi12);
        s[30] = t2slo15 ^ (~t2slo16 & t2slo17);
        s[31] = t2shi15 ^ (~t2shi16 & t2shi17);
        s[40] = t2slo20 ^ (~t2slo21 & t2slo22);
        s[41] = t2shi20 ^ (~t2shi21 & t2shi22);
        s[2] = t2slo1 ^ (~t2slo2 & t2slo3);
        s[3] = t2shi1 ^ (~t2shi2 & t2shi3);
        s[12] = t2slo6 ^ (~t2slo7 & t2slo8);
        s[13] = t2shi6 ^ (~t2shi7 & t2shi8);
        s[22] = t2slo11 ^ (~t2slo12 & t2slo13);
        s[23] = t2shi11 ^ (~t2shi12 & t2shi13);
        s[32] = t2slo16 ^ (~t2slo17 & t2slo18);
        s[33] = t2shi16 ^ (~t2shi17 & t2shi18);
        s[42] = t2slo21 ^ (~t2slo22 & t2slo23);
        s[43] = t2shi21 ^ (~t2shi22 & t2shi23);
        s[4] = t2slo2 ^ (~t2slo3 & t2slo4);
        s[5] = t2shi2 ^ (~t2shi3 & t2shi4);
        s[14] = t2slo7 ^ (~t2slo8 & t2slo9);
        s[15] = t2shi7 ^ (~t2shi8 & t2shi9);
        s[24] = t2slo12 ^ (~t2slo13 & t2slo14);
        s[25] = t2shi12 ^ (~t2shi13 & t2shi14);
        s[34] = t2slo17 ^ (~t2slo18 & t2slo19);
        s[35] = t2shi17 ^ (~t2shi18 & t2shi19);
        s[44] = t2slo22 ^ (~t2slo23 & t2slo24);
        s[45] = t2shi22 ^ (~t2shi23 & t2shi24);
        s[6] = t2slo3 ^ (~t2slo4 & t2slo0);
        s[7] = t2shi3 ^ (~t2shi4 & t2shi0);
        s[16] = t2slo8 ^ (~t2slo9 & t2slo5);
        s[17] = t2shi8 ^ (~t2shi9 & t2shi5);
        s[26] = t2slo13 ^ (~t2slo14 & t2slo10);
        s[27] = t2shi13 ^ (~t2shi14 & t2shi10);
        s[36] = t2slo18 ^ (~t2slo19 & t2slo15);
        s[37] = t2shi18 ^ (~t2shi19 & t2shi15);
        s[46] = t2slo23 ^ (~t2slo24 & t2slo20);
        s[47] = t2shi23 ^ (~t2shi24 & t2shi20);
        s[8] = t2slo4 ^ (~t2slo0 & t2slo1);
        s[9] = t2shi4 ^ (~t2shi0 & t2shi1);
        s[18] = t2slo9 ^ (~t2slo5 & t2slo6);
        s[19] = t2shi9 ^ (~t2shi5 & t2shi6);
        s[28] = t2slo14 ^ (~t2slo10 & t2slo11);
        s[29] = t2shi14 ^ (~t2shi10 & t2shi11);
        s[38] = t2slo19 ^ (~t2slo15 & t2slo16);
        s[39] = t2shi19 ^ (~t2shi15 & t2shi16);
        s[48] = t2slo24 ^ (~t2slo20 & t2slo21);
        s[49] = t2shi24 ^ (~t2shi20 & t2shi21);

        // iota
        s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
        s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
      }
    };

    const keccakState = keccakStateUnroll;

    function Keccak () {
      // much faster than `new Array(50)`
      this.state = [
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0
      ];

      this.blockSize = null;
      this.count = 0;
      this.squeezing = false;
    }

    Keccak.prototype.initialize = function (rate, capacity) {
      for (let i = 0; i < 50; ++i) this.state[i] = 0;
      this.blockSize = rate / 8;
      this.count = 0;
      this.squeezing = false;
    };

    Keccak.prototype.absorb = function (data) {
      for (let i = 0; i < data.length; ++i) {
        this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4));
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
    };

    Keccak.prototype.absorbLastFewBits = function (bits) {
      this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4));
      if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state);
      this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4));
      keccakState.p1600(this.state);
      this.count = 0;
      this.squeezing = true;
    };

    Keccak.prototype.squeeze = function (length) {
      if (!this.squeezing) this.absorbLastFewBits(0x01);

      const output = Buffer$g.alloc(length);
      for (let i = 0; i < length; ++i) {
        output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff;
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }

      return output
    };

    Keccak.prototype.copy = function (dest) {
      for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i];
      dest.blockSize = this.blockSize;
      dest.count = this.count;
      dest.squeezing = this.squeezing;
    };

    var keccak = Keccak;

    var js = api(keccak);

    Object.defineProperty(keccak$2, "__esModule", { value: true });
    var hash_utils_1$2 = hashUtils;
    var createKeccakHash = js;
    keccak$2.keccak224 = hash_utils_1$2.createHashFunction(function () {
        return createKeccakHash("keccak224");
    });
    keccak$2.keccak256 = hash_utils_1$2.createHashFunction(function () {
        return createKeccakHash("keccak256");
    });
    keccak$2.keccak384 = hash_utils_1$2.createHashFunction(function () {
        return createKeccakHash("keccak384");
    });
    keccak$2.keccak512 = hash_utils_1$2.createHashFunction(function () {
        return createKeccakHash("keccak512");
    });

    var Buffer$e = safeBufferExports.Buffer;
    var Transform$2 = readableBrowserExports.Transform;
    var inherits$d = require$$0$2;

    function throwIfNotStringOrBuffer (val, prefix) {
      if (!Buffer$e.isBuffer(val) && typeof val !== 'string') {
        throw new TypeError(prefix + ' must be a string or a buffer')
      }
    }

    function HashBase$2 (blockSize) {
      Transform$2.call(this);

      this._block = Buffer$e.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];

      this._finalized = false;
    }

    inherits$d(HashBase$2, Transform$2);

    HashBase$2.prototype._transform = function (chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    HashBase$2.prototype._flush = function (callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }

      callback(error);
    };

    HashBase$2.prototype.update = function (data, encoding) {
      throwIfNotStringOrBuffer(data, 'Data');
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer$e.isBuffer(data)) data = Buffer$e.from(data, encoding);

      // consume data
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];

      // update length
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = (this._length[j] / 0x0100000000) | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
      }

      return this
    };

    HashBase$2.prototype._update = function () {
      throw new Error('_update is not implemented')
    };

    HashBase$2.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true;

      var digest = this._digest();
      if (encoding !== undefined) digest = digest.toString(encoding);

      // reset state
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) this._length[i] = 0;

      return digest
    };

    HashBase$2.prototype._digest = function () {
      throw new Error('_digest is not implemented')
    };

    var hashBase = HashBase$2;

    var inherits$c = require$$0$2;
    var HashBase$1 = hashBase;
    var Buffer$d = safeBufferExports.Buffer;

    var ARRAY16$1 = new Array(16);

    function MD5$2 () {
      HashBase$1.call(this, 64);

      // state
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
    }

    inherits$c(MD5$2, HashBase$1);

    MD5$2.prototype._update = function () {
      var M = ARRAY16$1;
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;

      a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
      d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
      c = fnF(c, d, a, b, M[2], 0x242070db, 17);
      b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
      a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
      d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
      c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
      b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
      a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
      d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
      c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
      b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
      a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
      d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
      c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
      b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

      a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
      d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
      c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
      b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
      a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
      d = fnG(d, a, b, c, M[10], 0x02441453, 9);
      c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
      b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
      a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
      d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
      c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
      b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
      a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
      d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
      c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
      b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

      a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
      d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
      c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
      b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
      a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
      d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
      c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
      b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
      a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
      d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
      c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
      b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
      a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
      d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
      c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
      b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

      a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
      d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
      c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
      b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
      a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
      d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
      c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
      b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
      a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
      d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
      c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
      b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
      a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
      d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
      c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
      b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

      this._a = (this._a + a) | 0;
      this._b = (this._b + b) | 0;
      this._c = (this._c + c) | 0;
      this._d = (this._d + d) | 0;
    };

    MD5$2.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }

      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();

      // produce result
      var buffer = Buffer$d.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer
    };

    function rotl$1 (x, n) {
      return (x << n) | (x >>> (32 - n))
    }

    function fnF (a, b, c, d, m, k, s) {
      return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
    }

    function fnG (a, b, c, d, m, k, s) {
      return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
    }

    function fnH (a, b, c, d, m, k, s) {
      return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
    }

    function fnI (a, b, c, d, m, k, s) {
      return (rotl$1((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
    }

    var md5_js = MD5$2;

    var Buffer$c = require$$0$5.Buffer;
    var inherits$b = require$$0$2;
    var HashBase = hashBase;

    var ARRAY16 = new Array(16);

    var zl = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var zr$1 = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var sl = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sr$1 = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
    var hr$1 = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

    function RIPEMD160$2 () {
      HashBase.call(this, 64);

      // state
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
    }

    inherits$b(RIPEMD160$2, HashBase);

    RIPEMD160$2.prototype._update = function () {
      var words = ARRAY16;
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;

      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;

      // computation
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr$1[i]], hr$1[0], sr$1[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr$1[i]], hr$1[1], sr$1[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr$1[i]], hr$1[2], sr$1[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr$1[i]], hr$1[3], sr$1[i]);
        } else { // if (i<80) {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr$1[i]], hr$1[4], sr$1[i]);
        }

        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;

        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }

      // update state
      var t = (this._b + cl + dr) | 0;
      this._b = (this._c + dl + er) | 0;
      this._c = (this._d + el + ar) | 0;
      this._d = (this._e + al + br) | 0;
      this._e = (this._a + bl + cr) | 0;
      this._a = t;
    };

    RIPEMD160$2.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }

      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();

      // produce result
      var buffer = Buffer$c.alloc ? Buffer$c.alloc(20) : new Buffer$c(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer
    };

    function rotl (x, n) {
      return (x << n) | (x >>> (32 - n))
    }

    function fn1 (a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
    }

    function fn2 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
    }

    function fn3 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
    }

    function fn4 (a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
    }

    function fn5 (a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
    }

    var ripemd160$1 = RIPEMD160$2;

    var sha_js = {exports: {}};

    var Buffer$b = safeBufferExports.Buffer;

    // prototype class for hash functions
    function Hash$8 (blockSize, finalSize) {
      this._block = Buffer$b.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }

    Hash$8.prototype.update = function (data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer$b.from(data, enc);
      }

      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;

      for (var offset = 0; offset < length;) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);

        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i];
        }

        accum += remainder;
        offset += remainder;

        if ((accum % blockSize) === 0) {
          this._update(block);
        }
      }

      this._len += length;
      return this
    };

    Hash$8.prototype.digest = function (enc) {
      var rem = this._len % this._blockSize;

      this._block[rem] = 0x80;

      // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
      // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
      this._block.fill(0, rem + 1);

      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }

      var bits = this._len * 8;

      // uint32
      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);

      // uint64
      } else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;

        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }

      this._update(this._block);
      var hash = this._hash();

      return enc ? hash.toString(enc) : hash
    };

    Hash$8.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    };

    var hash = Hash$8;

    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
     * in FIPS PUB 180-1
     * This source code is derived from sha1.js of the same repository.
     * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
     * operation was added.
     */

    var inherits$a = require$$0$2;
    var Hash$7 = hash;
    var Buffer$a = safeBufferExports.Buffer;

    var K$5 = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ];

    var W$7 = new Array(80);

    function Sha () {
      this.init();
      this._w = W$7;

      Hash$7.call(this, 64, 56);
    }

    inherits$a(Sha, Hash$7);

    Sha.prototype.init = function () {
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;

      return this
    };

    function rotl5$1 (num) {
      return (num << 5) | (num >>> 27)
    }

    function rotl30$1 (num) {
      return (num << 30) | (num >>> 2)
    }

    function ft$4 (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }

    Sha.prototype._update = function (M) {
      var W = this._w;

      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = (rotl5$1(a) + ft$4(s, b, c, d) + e + W[j] + K$5[s]) | 0;

        e = d;
        d = c;
        c = rotl30$1(b);
        b = a;
        a = t;
      }

      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
    };

    Sha.prototype._hash = function () {
      var H = Buffer$a.allocUnsafe(20);

      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);

      return H
    };

    var sha$2 = Sha;

    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     * Version 2.1a Copyright Paul Johnston 2000 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for details.
     */

    var inherits$9 = require$$0$2;
    var Hash$6 = hash;
    var Buffer$9 = safeBufferExports.Buffer;

    var K$4 = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ];

    var W$6 = new Array(80);

    function Sha1 () {
      this.init();
      this._w = W$6;

      Hash$6.call(this, 64, 56);
    }

    inherits$9(Sha1, Hash$6);

    Sha1.prototype.init = function () {
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;

      return this
    };

    function rotl1 (num) {
      return (num << 1) | (num >>> 31)
    }

    function rotl5 (num) {
      return (num << 5) | (num >>> 27)
    }

    function rotl30 (num) {
      return (num << 30) | (num >>> 2)
    }

    function ft$3 (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }

    Sha1.prototype._update = function (M) {
      var W = this._w;

      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = (rotl5(a) + ft$3(s, b, c, d) + e + W[j] + K$4[s]) | 0;

        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }

      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
    };

    Sha1.prototype._hash = function () {
      var H = Buffer$9.allocUnsafe(20);

      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);

      return H
    };

    var sha1$1 = Sha1;

    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */

    var inherits$8 = require$$0$2;
    var Hash$5 = hash;
    var Buffer$8 = safeBufferExports.Buffer;

    var K$3 = [
      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
    ];

    var W$5 = new Array(64);

    function Sha256$1 () {
      this.init();

      this._w = W$5; // new Array(64)

      Hash$5.call(this, 64, 56);
    }

    inherits$8(Sha256$1, Hash$5);

    Sha256$1.prototype.init = function () {
      this._a = 0x6a09e667;
      this._b = 0xbb67ae85;
      this._c = 0x3c6ef372;
      this._d = 0xa54ff53a;
      this._e = 0x510e527f;
      this._f = 0x9b05688c;
      this._g = 0x1f83d9ab;
      this._h = 0x5be0cd19;

      return this
    };

    function ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }

    function maj$1 (x, y, z) {
      return (x & y) | (z & (x | y))
    }

    function sigma0$1 (x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
    }

    function sigma1$1 (x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
    }

    function gamma0 (x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
    }

    function gamma1 (x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
    }

    Sha256$1.prototype._update = function (M) {
      var W = this._w;

      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

      for (var j = 0; j < 64; ++j) {
        var T1 = (h + sigma1$1(e) + ch(e, f, g) + K$3[j] + W[j]) | 0;
        var T2 = (sigma0$1(a) + maj$1(a, b, c)) | 0;

        h = g;
        g = f;
        f = e;
        e = (d + T1) | 0;
        d = c;
        c = b;
        b = a;
        a = (T1 + T2) | 0;
      }

      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
      this._f = (f + this._f) | 0;
      this._g = (g + this._g) | 0;
      this._h = (h + this._h) | 0;
    };

    Sha256$1.prototype._hash = function () {
      var H = Buffer$8.allocUnsafe(32);

      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);

      return H
    };

    var sha256$3 = Sha256$1;

    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */

    var inherits$7 = require$$0$2;
    var Sha256 = sha256$3;
    var Hash$4 = hash;
    var Buffer$7 = safeBufferExports.Buffer;

    var W$4 = new Array(64);

    function Sha224 () {
      this.init();

      this._w = W$4; // new Array(64)

      Hash$4.call(this, 64, 56);
    }

    inherits$7(Sha224, Sha256);

    Sha224.prototype.init = function () {
      this._a = 0xc1059ed8;
      this._b = 0x367cd507;
      this._c = 0x3070dd17;
      this._d = 0xf70e5939;
      this._e = 0xffc00b31;
      this._f = 0x68581511;
      this._g = 0x64f98fa7;
      this._h = 0xbefa4fa4;

      return this
    };

    Sha224.prototype._hash = function () {
      var H = Buffer$7.allocUnsafe(28);

      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);

      return H
    };

    var sha224 = Sha224;

    var inherits$6 = require$$0$2;
    var Hash$3 = hash;
    var Buffer$6 = safeBufferExports.Buffer;

    var K$2 = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    var W$3 = new Array(160);

    function Sha512 () {
      this.init();
      this._w = W$3;

      Hash$3.call(this, 128, 112);
    }

    inherits$6(Sha512, Hash$3);

    Sha512.prototype.init = function () {
      this._ah = 0x6a09e667;
      this._bh = 0xbb67ae85;
      this._ch = 0x3c6ef372;
      this._dh = 0xa54ff53a;
      this._eh = 0x510e527f;
      this._fh = 0x9b05688c;
      this._gh = 0x1f83d9ab;
      this._hh = 0x5be0cd19;

      this._al = 0xf3bcc908;
      this._bl = 0x84caa73b;
      this._cl = 0xfe94f82b;
      this._dl = 0x5f1d36f1;
      this._el = 0xade682d1;
      this._fl = 0x2b3e6c1f;
      this._gl = 0xfb41bd6b;
      this._hl = 0x137e2179;

      return this
    };

    function Ch (x, y, z) {
      return z ^ (x & (y ^ z))
    }

    function maj (x, y, z) {
      return (x & y) | (z & (x | y))
    }

    function sigma0 (x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
    }

    function sigma1 (x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
    }

    function Gamma0 (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
    }

    function Gamma0l (x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
    }

    function Gamma1 (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
    }

    function Gamma1l (x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
    }

    function getCarry (a, b) {
      return (a >>> 0) < (b >>> 0) ? 1 : 0
    }

    Sha512.prototype._update = function (M) {
      var W = this._w;

      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;

      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;

      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
      }
      for (; i < 160; i += 2) {
        var xh = W[i - 15 * 2];
        var xl = W[i - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);

        xh = W[i - 2 * 2];
        xl = W[i - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);

        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 7 * 2];
        var Wi7l = W[i - 7 * 2 + 1];

        var Wi16h = W[i - 16 * 2];
        var Wi16l = W[i - 16 * 2 + 1];

        var Wil = (gamma0l + Wi7l) | 0;
        var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
        Wil = (Wil + gamma1l) | 0;
        Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
        Wil = (Wil + Wi16l) | 0;
        Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

        W[i] = Wih;
        W[i + 1] = Wil;
      }

      for (var j = 0; j < 160; j += 2) {
        Wih = W[j];
        Wil = W[j + 1];

        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);

        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);

        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K$2[j];
        var Kil = K$2[j + 1];

        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);

        var t1l = (hl + sigma1l) | 0;
        var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
        t1l = (t1l + chl) | 0;
        t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
        t1l = (t1l + Kil) | 0;
        t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
        t1l = (t1l + Wil) | 0;
        t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

        // t2 = sigma0 + maj
        var t2l = (sigma0l + majl) | 0;
        var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = (dl + t1l) | 0;
        eh = (dh + t1h + getCarry(el, dl)) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = (t1l + t2l) | 0;
        ah = (t1h + t2h + getCarry(al, t1l)) | 0;
      }

      this._al = (this._al + al) | 0;
      this._bl = (this._bl + bl) | 0;
      this._cl = (this._cl + cl) | 0;
      this._dl = (this._dl + dl) | 0;
      this._el = (this._el + el) | 0;
      this._fl = (this._fl + fl) | 0;
      this._gl = (this._gl + gl) | 0;
      this._hl = (this._hl + hl) | 0;

      this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
      this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
      this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
      this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
      this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
      this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
      this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
      this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
    };

    Sha512.prototype._hash = function () {
      var H = Buffer$6.allocUnsafe(64);

      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }

      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);

      return H
    };

    var sha512 = Sha512;

    var inherits$5 = require$$0$2;
    var SHA512 = sha512;
    var Hash$2 = hash;
    var Buffer$5 = safeBufferExports.Buffer;

    var W$2 = new Array(160);

    function Sha384 () {
      this.init();
      this._w = W$2;

      Hash$2.call(this, 128, 112);
    }

    inherits$5(Sha384, SHA512);

    Sha384.prototype.init = function () {
      this._ah = 0xcbbb9d5d;
      this._bh = 0x629a292a;
      this._ch = 0x9159015a;
      this._dh = 0x152fecd8;
      this._eh = 0x67332667;
      this._fh = 0x8eb44a87;
      this._gh = 0xdb0c2e0d;
      this._hh = 0x47b5481d;

      this._al = 0xc1059ed8;
      this._bl = 0x367cd507;
      this._cl = 0x3070dd17;
      this._dl = 0xf70e5939;
      this._el = 0xffc00b31;
      this._fl = 0x68581511;
      this._gl = 0x64f98fa7;
      this._hl = 0xbefa4fa4;

      return this
    };

    Sha384.prototype._hash = function () {
      var H = Buffer$5.allocUnsafe(48);

      function writeInt64BE (h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }

      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);

      return H
    };

    var sha384 = Sha384;

    var exports$1 = sha_js.exports = function SHA (algorithm) {
      algorithm = algorithm.toLowerCase();

      var Algorithm = exports$1[algorithm];
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

      return new Algorithm()
    };

    exports$1.sha = sha$2;
    exports$1.sha1 = sha1$1;
    exports$1.sha224 = sha224;
    exports$1.sha256 = sha256$3;
    exports$1.sha384 = sha384;
    exports$1.sha512 = sha512;

    var sha_jsExports = sha_js.exports;

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return Buffer$g.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer$g.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    Readable.ReadableState = ReadableState;

    var debug = debuglog('stream');
    inherits$f(Readable, EventEmitter);

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') {
        return emitter.prependListener(event, fn);
      } else {
        // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
    }
    function listenerCount (emitter, type) {
      return emitter.listeners(type).length;
    }
    function ReadableState(options, stream) {

      options = options || {};

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder$1(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options && typeof options.read === 'function') this._read = options.read;

      EventEmitter.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;

      if (!state.objectMode && typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer$g.from(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error('stream.unshift() after end event');
          stream.emit('error', _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }

          if (!addToFront) state.reading = false;

          // Don't add to the buffer if we've decoded to an empty string chunk and
          // we're not in object mode
          if (!skipAdd) {
            // if we want the data now, just emit it.
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
          }

          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData(state);
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      this._readableState.decoder = new StringDecoder$1(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function chunkInvalid(state, chunk) {
      var er = null;
      if (!Buffer$g.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false);

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners('data').length) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit('unpipe', this);
        }return this;
      }

      // try to find the right one.
      var i = indexOf(state.pipes, dest);
      if (i === -1) return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = EventEmitter.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach$2(events, function (ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer$g.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function forEach$2(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // A bit simpler than readable streams.
    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
    // the drain event emission and buffering.

    Writable.WritableState = WritableState;
    inherits$f(Writable, EventEmitter);

    function nop() {}

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }

    function WritableState(options, stream) {
      Object.defineProperty(this, 'buffer', {
        get: deprecate$1(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
      });
      options = options || {};

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable(options) {

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;
      }

      EventEmitter.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      nextTick(cb, er);
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      // Always throw error if a null is written
      // if we are not in object mode then throw
      // if it is not a buffer, string, or undefined.
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (!Buffer$g.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (Buffer$g.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer$g.from(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);

      if (Buffer$g.isBuffer(chunk)) encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) nextTick(cb, er);else cb(er);

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
            nextTick(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
            afterWrite(stream, state, finished, cb);
          }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        while (entry) {
          buffer[count] = entry;
          entry = entry.next;
          count += 1;
        }

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function prefinish(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else {
          prefinish(stream, state);
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function (err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }

    inherits$f(Duplex, Readable);

    var keys = Object.keys(Writable.prototype);
    for (var v$1 = 0; v$1 < keys.length; v$1++) {
      var method = keys[v$1];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.

    inherits$f(Transform$1, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform$1(options) {
      if (!(this instanceof Transform$1)) return new Transform$1(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform$1.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform$1.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform$1.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform$1.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    inherits$f(PassThrough, Transform$1);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform$1.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    inherits$f(Stream, EventEmitter);
    Stream.Readable = Readable;
    Stream.Writable = Writable;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform$1;
    Stream.PassThrough = PassThrough;

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EventEmitter.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EventEmitter.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

    var _polyfillNode_stream = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Duplex: Duplex,
        PassThrough: PassThrough,
        Readable: Readable,
        Stream: Stream,
        Transform: Transform$1,
        Writable: Writable,
        default: Stream
    });

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_stream);

    var Buffer$4 = safeBufferExports.Buffer;
    var Transform = require$$1.Transform;
    var StringDecoder = require$$2.StringDecoder;
    var inherits$4 = require$$0$2;

    function CipherBase (hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === 'string';
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this.final = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits$4(CipherBase, Transform);

    CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
      if (typeof data === 'string') {
        data = Buffer$4.from(data, inputEnc);
      }

      var outData = this._update(data);
      if (this.hashMode) return this

      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }

      return outData
    };

    CipherBase.prototype.setAutoPadding = function () {};
    CipherBase.prototype.getAuthTag = function () {
      throw new Error('trying to get auth tag in unsupported state')
    };

    CipherBase.prototype.setAuthTag = function () {
      throw new Error('trying to set auth tag in unsupported state')
    };

    CipherBase.prototype.setAAD = function () {
      throw new Error('trying to set aad in unsupported state')
    };

    CipherBase.prototype._transform = function (data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function (done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }

      done(err);
    };
    CipherBase.prototype._finalOrDigest = function (outputEnc) {
      var outData = this.__final() || Buffer$4.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData
    };

    CipherBase.prototype._toString = function (value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }

      if (this._encoding !== enc) throw new Error('can\'t switch encodings')

      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }

      return out
    };

    var cipherBase = CipherBase;

    var inherits$3 = require$$0$2;
    var MD5$1 = md5_js;
    var RIPEMD160$1 = ripemd160$1;
    var sha$1 = sha_jsExports;
    var Base$2 = cipherBase;

    function Hash$1 (hash) {
      Base$2.call(this, 'digest');

      this._hash = hash;
    }

    inherits$3(Hash$1, Base$2);

    Hash$1.prototype._update = function (data) {
      this._hash.update(data);
    };

    Hash$1.prototype._final = function () {
      return this._hash.digest()
    };

    var browser$1 = function createHash (alg) {
      alg = alg.toLowerCase();
      if (alg === 'md5') return new MD5$1()
      if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160$1()

      return new Hash$1(sha$1(alg))
    };

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
    	var keccak_1 = keccak$2;
    	var createHash = browser$1;
    	var externals_1 = externals;
    	var bytes_1 = bytes;
    	var helpers_1 = helpers;
    	/**
    	 * Creates Keccak hash of a Buffer input
    	 * @param a The input data (Buffer)
    	 * @param bits (number = 256) The Keccak width
    	 */
    	var keccak = function (a, bits) {
    	    if (bits === void 0) { bits = 256; }
    	    (0, helpers_1.assertIsBuffer)(a);
    	    switch (bits) {
    	        case 224: {
    	            return (0, keccak_1.keccak224)(a);
    	        }
    	        case 256: {
    	            return (0, keccak_1.keccak256)(a);
    	        }
    	        case 384: {
    	            return (0, keccak_1.keccak384)(a);
    	        }
    	        case 512: {
    	            return (0, keccak_1.keccak512)(a);
    	        }
    	        default: {
    	            throw new Error("Invald algorithm: keccak".concat(bits));
    	        }
    	    }
    	};
    	exports.keccak = keccak;
    	/**
    	 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
    	 * @param a The input data (Buffer)
    	 */
    	var keccak256 = function (a) {
    	    return (0, exports.keccak)(a);
    	};
    	exports.keccak256 = keccak256;
    	/**
    	 * Creates Keccak hash of a utf-8 string input
    	 * @param a The input data (String)
    	 * @param bits (number = 256) The Keccak width
    	 */
    	var keccakFromString = function (a, bits) {
    	    if (bits === void 0) { bits = 256; }
    	    (0, helpers_1.assertIsString)(a);
    	    var buf = Buffer$g.from(a, 'utf8');
    	    return (0, exports.keccak)(buf, bits);
    	};
    	exports.keccakFromString = keccakFromString;
    	/**
    	 * Creates Keccak hash of an 0x-prefixed string input
    	 * @param a The input data (String)
    	 * @param bits (number = 256) The Keccak width
    	 */
    	var keccakFromHexString = function (a, bits) {
    	    if (bits === void 0) { bits = 256; }
    	    (0, helpers_1.assertIsHexString)(a);
    	    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    	};
    	exports.keccakFromHexString = keccakFromHexString;
    	/**
    	 * Creates Keccak hash of a number array input
    	 * @param a The input data (number[])
    	 * @param bits (number = 256) The Keccak width
    	 */
    	var keccakFromArray = function (a, bits) {
    	    if (bits === void 0) { bits = 256; }
    	    (0, helpers_1.assertIsArray)(a);
    	    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    	};
    	exports.keccakFromArray = keccakFromArray;
    	/**
    	 * Creates SHA256 hash of an input.
    	 * @param  a The input data (Buffer|Array|String)
    	 */
    	var _sha256 = function (a) {
    	    a = (0, bytes_1.toBuffer)(a);
    	    return createHash('sha256').update(a).digest();
    	};
    	/**
    	 * Creates SHA256 hash of a Buffer input.
    	 * @param a The input data (Buffer)
    	 */
    	var sha256 = function (a) {
    	    (0, helpers_1.assertIsBuffer)(a);
    	    return _sha256(a);
    	};
    	exports.sha256 = sha256;
    	/**
    	 * Creates SHA256 hash of a string input.
    	 * @param a The input data (string)
    	 */
    	var sha256FromString = function (a) {
    	    (0, helpers_1.assertIsString)(a);
    	    return _sha256(a);
    	};
    	exports.sha256FromString = sha256FromString;
    	/**
    	 * Creates SHA256 hash of a number[] input.
    	 * @param a The input data (number[])
    	 */
    	var sha256FromArray = function (a) {
    	    (0, helpers_1.assertIsArray)(a);
    	    return _sha256(a);
    	};
    	exports.sha256FromArray = sha256FromArray;
    	/**
    	 * Creates RIPEMD160 hash of the input.
    	 * @param a The input data (Buffer|Array|String|Number)
    	 * @param padded Whether it should be padded to 256 bits or not
    	 */
    	var _ripemd160 = function (a, padded) {
    	    a = (0, bytes_1.toBuffer)(a);
    	    var hash = createHash('rmd160').update(a).digest();
    	    if (padded === true) {
    	        return (0, bytes_1.setLengthLeft)(hash, 32);
    	    }
    	    else {
    	        return hash;
    	    }
    	};
    	/**
    	 * Creates RIPEMD160 hash of a Buffer input.
    	 * @param a The input data (Buffer)
    	 * @param padded Whether it should be padded to 256 bits or not
    	 */
    	var ripemd160 = function (a, padded) {
    	    (0, helpers_1.assertIsBuffer)(a);
    	    return _ripemd160(a, padded);
    	};
    	exports.ripemd160 = ripemd160;
    	/**
    	 * Creates RIPEMD160 hash of a string input.
    	 * @param a The input data (String)
    	 * @param padded Whether it should be padded to 256 bits or not
    	 */
    	var ripemd160FromString = function (a, padded) {
    	    (0, helpers_1.assertIsString)(a);
    	    return _ripemd160(a, padded);
    	};
    	exports.ripemd160FromString = ripemd160FromString;
    	/**
    	 * Creates RIPEMD160 hash of a number[] input.
    	 * @param a The input data (number[])
    	 * @param padded Whether it should be padded to 256 bits or not
    	 */
    	var ripemd160FromArray = function (a, padded) {
    	    (0, helpers_1.assertIsArray)(a);
    	    return _ripemd160(a, padded);
    	};
    	exports.ripemd160FromArray = ripemd160FromArray;
    	/**
    	 * Creates SHA-3 hash of the RLP encoded version of the input.
    	 * @param a The input data
    	 */
    	var rlphash = function (a) {
    	    return (0, exports.keccak)(externals_1.rlp.encode(a));
    	};
    	exports.rlphash = rlphash;
    	
    } (hash$1));

    var types = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
    	var externals_1 = externals;
    	var internal_1 = internal;
    	var bytes_1 = bytes;
    	/**
    	 * Convert BN to 0x-prefixed hex string.
    	 */
    	function bnToHex(value) {
    	    return "0x".concat(value.toString(16));
    	}
    	exports.bnToHex = bnToHex;
    	/**
    	 * Convert value from BN to an unpadded Buffer
    	 * (useful for RLP transport)
    	 * @param value value to convert
    	 */
    	function bnToUnpaddedBuffer(value) {
    	    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`
    	    // for compatibility with browserify and similar tools
    	    return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer$g));
    	}
    	exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
    	/**
    	 * Deprecated alias for {@link bnToUnpaddedBuffer}
    	 * @deprecated
    	 */
    	function bnToRlp(value) {
    	    return bnToUnpaddedBuffer(value);
    	}
    	exports.bnToRlp = bnToRlp;
    	/**
    	 * Type output options
    	 */
    	var TypeOutput;
    	(function (TypeOutput) {
    	    TypeOutput[TypeOutput["Number"] = 0] = "Number";
    	    TypeOutput[TypeOutput["BN"] = 1] = "BN";
    	    TypeOutput[TypeOutput["Buffer"] = 2] = "Buffer";
    	    TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
    	})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
    	function toType(input, outputType) {
    	    if (input === null) {
    	        return null;
    	    }
    	    if (input === undefined) {
    	        return undefined;
    	    }
    	    if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {
    	        throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
    	    }
    	    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
    	        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
    	    }
    	    var output = (0, bytes_1.toBuffer)(input);
    	    if (outputType === TypeOutput.Buffer) {
    	        return output;
    	    }
    	    else if (outputType === TypeOutput.BN) {
    	        return new externals_1.BN(output);
    	    }
    	    else if (outputType === TypeOutput.Number) {
    	        var bn = new externals_1.BN(output);
    	        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
    	        if (bn.gt(max)) {
    	            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
    	        }
    	        return bn.toNumber();
    	    }
    	    else {
    	        // outputType === TypeOutput.PrefixedHexString
    	        return "0x".concat(output.toString('hex'));
    	    }
    	}
    	exports.toType = toType;
    	
    } (types));

    (function (exports) {
    	var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
    	    var m = typeof Symbol === "function" && o[Symbol.iterator];
    	    if (!m) return o;
    	    var i = m.call(o), r, ar = [], e;
    	    try {
    	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    	    }
    	    catch (error) { e = { error: error }; }
    	    finally {
    	        try {
    	            if (r && !r.done && (m = i["return"])) m.call(i);
    	        }
    	        finally { if (e) throw e.error; }
    	    }
    	    return ar;
    	};
    	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
    	var assert_1 = __importDefault(require$$0$1);
    	var externals_1 = externals;
    	var secp256k1_1 = secp256k1$1;
    	var internal_1 = internal;
    	var constants_1 = constants;
    	var bytes_1 = bytes;
    	var hash_1 = hash$1;
    	var helpers_1 = helpers;
    	var types_1 = types;
    	var Account = /** @class */ (function () {
    	    /**
    	     * This constructor assigns and validates the values.
    	     * Use the static factory methods to assist in creating an Account from varying data types.
    	     */
    	    function Account(nonce, balance, stateRoot, codeHash) {
    	        if (nonce === void 0) { nonce = new externals_1.BN(0); }
    	        if (balance === void 0) { balance = new externals_1.BN(0); }
    	        if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }
    	        if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }
    	        this.nonce = nonce;
    	        this.balance = balance;
    	        this.stateRoot = stateRoot;
    	        this.codeHash = codeHash;
    	        this._validate();
    	    }
    	    Account.fromAccountData = function (accountData) {
    	        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
    	        return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);
    	    };
    	    Account.fromRlpSerializedAccount = function (serialized) {
    	        var values = externals_1.rlp.decode(serialized);
    	        if (!Array.isArray(values)) {
    	            throw new Error('Invalid serialized account input. Must be array');
    	        }
    	        return this.fromValuesArray(values);
    	    };
    	    Account.fromValuesArray = function (values) {
    	        var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];
    	        return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
    	    };
    	    Account.prototype._validate = function () {
    	        if (this.nonce.lt(new externals_1.BN(0))) {
    	            throw new Error('nonce must be greater than zero');
    	        }
    	        if (this.balance.lt(new externals_1.BN(0))) {
    	            throw new Error('balance must be greater than zero');
    	        }
    	        if (this.stateRoot.length !== 32) {
    	            throw new Error('stateRoot must have a length of 32');
    	        }
    	        if (this.codeHash.length !== 32) {
    	            throw new Error('codeHash must have a length of 32');
    	        }
    	    };
    	    /**
    	     * Returns a Buffer Array of the raw Buffers for the account, in order.
    	     */
    	    Account.prototype.raw = function () {
    	        return [
    	            (0, types_1.bnToUnpaddedBuffer)(this.nonce),
    	            (0, types_1.bnToUnpaddedBuffer)(this.balance),
    	            this.stateRoot,
    	            this.codeHash,
    	        ];
    	    };
    	    /**
    	     * Returns the RLP serialization of the account as a `Buffer`.
    	     */
    	    Account.prototype.serialize = function () {
    	        return externals_1.rlp.encode(this.raw());
    	    };
    	    /**
    	     * Returns a `Boolean` determining if the account is a contract.
    	     */
    	    Account.prototype.isContract = function () {
    	        return !this.codeHash.equals(constants_1.KECCAK256_NULL);
    	    };
    	    /**
    	     * Returns a `Boolean` determining if the account is empty complying to the definition of
    	     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
    	     * "An account is considered empty when it has no code and zero nonce and zero balance."
    	     */
    	    Account.prototype.isEmpty = function () {
    	        return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
    	    };
    	    return Account;
    	}());
    	exports.Account = Account;
    	/**
    	 * Checks if the address is a valid. Accepts checksummed addresses too.
    	 */
    	var isValidAddress = function (hexAddress) {
    	    try {
    	        (0, helpers_1.assertIsString)(hexAddress);
    	    }
    	    catch (e) {
    	        return false;
    	    }
    	    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    	};
    	exports.isValidAddress = isValidAddress;
    	/**
    	 * Returns a checksummed address.
    	 *
    	 * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
    	 * has the effect of checksummed addresses for one chain having invalid checksums for others.
    	 * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).
    	 *
    	 * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not
    	 * backwards compatible to the original widely adopted checksum format standard introduced in
    	 * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.
    	 * Usage of this EIP is therefore discouraged unless you have a very targeted use case.
    	 */
    	var toChecksumAddress = function (hexAddress, eip1191ChainId) {
    	    (0, helpers_1.assertIsHexString)(hexAddress);
    	    var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
    	    var prefix = '';
    	    if (eip1191ChainId) {
    	        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
    	        prefix = chainId.toString() + '0x';
    	    }
    	    var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');
    	    var ret = '0x';
    	    for (var i = 0; i < address.length; i++) {
    	        if (parseInt(hash[i], 16) >= 8) {
    	            ret += address[i].toUpperCase();
    	        }
    	        else {
    	            ret += address[i];
    	        }
    	    }
    	    return ret;
    	};
    	exports.toChecksumAddress = toChecksumAddress;
    	/**
    	 * Checks if the address is a valid checksummed address.
    	 *
    	 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
    	 */
    	var isValidChecksumAddress = function (hexAddress, eip1191ChainId) {
    	    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    	};
    	exports.isValidChecksumAddress = isValidChecksumAddress;
    	/**
    	 * Generates an address of a newly created contract.
    	 * @param from The address which is creating this new address
    	 * @param nonce The nonce of the from account
    	 */
    	var generateAddress = function (from, nonce) {
    	    (0, helpers_1.assertIsBuffer)(from);
    	    (0, helpers_1.assertIsBuffer)(nonce);
    	    var nonceBN = new externals_1.BN(nonce);
    	    if (nonceBN.isZero()) {
    	        // in RLP we want to encode null in the case of zero nonce
    	        // read the RLP documentation for an answer if you dare
    	        return (0, hash_1.rlphash)([from, null]).slice(-20);
    	    }
    	    // Only take the lower 160bits of the hash
    	    return (0, hash_1.rlphash)([from, Buffer$g.from(nonceBN.toArray())]).slice(-20);
    	};
    	exports.generateAddress = generateAddress;
    	/**
    	 * Generates an address for a contract created using CREATE2.
    	 * @param from The address which is creating this new address
    	 * @param salt A salt
    	 * @param initCode The init code of the contract being created
    	 */
    	var generateAddress2 = function (from, salt, initCode) {
    	    (0, helpers_1.assertIsBuffer)(from);
    	    (0, helpers_1.assertIsBuffer)(salt);
    	    (0, helpers_1.assertIsBuffer)(initCode);
    	    (0, assert_1.default)(from.length === 20);
    	    (0, assert_1.default)(salt.length === 32);
    	    var address = (0, hash_1.keccak256)(Buffer$g.concat([Buffer$g.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));
    	    return address.slice(-20);
    	};
    	exports.generateAddress2 = generateAddress2;
    	/**
    	 * Checks if the private key satisfies the rules of the curve secp256k1.
    	 */
    	var isValidPrivate = function (privateKey) {
    	    return (0, secp256k1_1.privateKeyVerify)(privateKey);
    	};
    	exports.isValidPrivate = isValidPrivate;
    	/**
    	 * Checks if the public key satisfies the rules of the curve secp256k1
    	 * and the requirements of Ethereum.
    	 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
    	 * @param sanitize Accept public keys in other formats
    	 */
    	var isValidPublic = function (publicKey, sanitize) {
    	    if (sanitize === void 0) { sanitize = false; }
    	    (0, helpers_1.assertIsBuffer)(publicKey);
    	    if (publicKey.length === 64) {
    	        // Convert to SEC1 for secp256k1
    	        return (0, secp256k1_1.publicKeyVerify)(Buffer$g.concat([Buffer$g.from([4]), publicKey]));
    	    }
    	    if (!sanitize) {
    	        return false;
    	    }
    	    return (0, secp256k1_1.publicKeyVerify)(publicKey);
    	};
    	exports.isValidPublic = isValidPublic;
    	/**
    	 * Returns the ethereum address of a given public key.
    	 * Accepts "Ethereum public keys" and SEC1 encoded keys.
    	 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
    	 * @param sanitize Accept public keys in other formats
    	 */
    	var pubToAddress = function (pubKey, sanitize) {
    	    if (sanitize === void 0) { sanitize = false; }
    	    (0, helpers_1.assertIsBuffer)(pubKey);
    	    if (sanitize && pubKey.length !== 64) {
    	        pubKey = Buffer$g.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
    	    }
    	    (0, assert_1.default)(pubKey.length === 64);
    	    // Only take the lower 160bits of the hash
    	    return (0, hash_1.keccak)(pubKey).slice(-20);
    	};
    	exports.pubToAddress = pubToAddress;
    	exports.publicToAddress = exports.pubToAddress;
    	/**
    	 * Returns the ethereum public key of a given private key.
    	 * @param privateKey A private key must be 256 bits wide
    	 */
    	var privateToPublic = function (privateKey) {
    	    (0, helpers_1.assertIsBuffer)(privateKey);
    	    // skip the type flag and use the X, Y points
    	    return Buffer$g.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
    	};
    	exports.privateToPublic = privateToPublic;
    	/**
    	 * Returns the ethereum address of a given private key.
    	 * @param privateKey A private key must be 256 bits wide
    	 */
    	var privateToAddress = function (privateKey) {
    	    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
    	};
    	exports.privateToAddress = privateToAddress;
    	/**
    	 * Converts a public key to the Ethereum format.
    	 */
    	var importPublic = function (publicKey) {
    	    (0, helpers_1.assertIsBuffer)(publicKey);
    	    if (publicKey.length !== 64) {
    	        publicKey = Buffer$g.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
    	    }
    	    return publicKey;
    	};
    	exports.importPublic = importPublic;
    	/**
    	 * Returns the zero address.
    	 */
    	var zeroAddress = function () {
    	    var addressLength = 20;
    	    var addr = (0, bytes_1.zeros)(addressLength);
    	    return (0, bytes_1.bufferToHex)(addr);
    	};
    	exports.zeroAddress = zeroAddress;
    	/**
    	 * Checks if a given address is the zero address.
    	 */
    	var isZeroAddress = function (hexAddress) {
    	    try {
    	        (0, helpers_1.assertIsString)(hexAddress);
    	    }
    	    catch (e) {
    	        return false;
    	    }
    	    var zeroAddr = (0, exports.zeroAddress)();
    	    return zeroAddr === hexAddress;
    	};
    	exports.isZeroAddress = isZeroAddress;
    	
    } (account));

    var address = {};

    var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(address, "__esModule", { value: true });
    address.Address = void 0;
    var assert_1$1 = __importDefault$1(require$$0$1);
    var externals_1$2 = externals;
    var bytes_1$2 = bytes;
    var account_1 = account;
    var Address = /** @class */ (function () {
        function Address(buf) {
            (0, assert_1$1.default)(buf.length === 20, 'Invalid address length');
            this.buf = buf;
        }
        /**
         * Returns the zero address.
         */
        Address.zero = function () {
            return new Address((0, bytes_1$2.zeros)(20));
        };
        /**
         * Returns an Address object from a hex-encoded string.
         * @param str - Hex-encoded address
         */
        Address.fromString = function (str) {
            (0, assert_1$1.default)((0, account_1.isValidAddress)(str), 'Invalid address');
            return new Address((0, bytes_1$2.toBuffer)(str));
        };
        /**
         * Returns an address for a given public key.
         * @param pubKey The two points of an uncompressed key
         */
        Address.fromPublicKey = function (pubKey) {
            (0, assert_1$1.default)(Buffer$g.isBuffer(pubKey), 'Public key should be Buffer');
            var buf = (0, account_1.pubToAddress)(pubKey);
            return new Address(buf);
        };
        /**
         * Returns an address for a given private key.
         * @param privateKey A private key must be 256 bits wide
         */
        Address.fromPrivateKey = function (privateKey) {
            (0, assert_1$1.default)(Buffer$g.isBuffer(privateKey), 'Private key should be Buffer');
            var buf = (0, account_1.privateToAddress)(privateKey);
            return new Address(buf);
        };
        /**
         * Generates an address for a newly created contract.
         * @param from The address which is creating this new address
         * @param nonce The nonce of the from account
         */
        Address.generate = function (from, nonce) {
            (0, assert_1$1.default)(externals_1$2.BN.isBN(nonce));
            return new Address((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer$g)));
        };
        /**
         * Generates an address for a contract created using CREATE2.
         * @param from The address which is creating this new address
         * @param salt A salt
         * @param initCode The init code of the contract being created
         */
        Address.generate2 = function (from, salt, initCode) {
            (0, assert_1$1.default)(Buffer$g.isBuffer(salt));
            (0, assert_1$1.default)(Buffer$g.isBuffer(initCode));
            return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));
        };
        /**
         * Is address equal to another.
         */
        Address.prototype.equals = function (address) {
            return this.buf.equals(address.buf);
        };
        /**
         * Is address zero.
         */
        Address.prototype.isZero = function () {
            return this.equals(Address.zero());
        };
        /**
         * True if address is in the address range defined
         * by EIP-1352
         */
        Address.prototype.isPrecompileOrSystemAddress = function () {
            var addressBN = new externals_1$2.BN(this.buf);
            var rangeMin = new externals_1$2.BN(0);
            var rangeMax = new externals_1$2.BN('ffff', 'hex');
            return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
        };
        /**
         * Returns hex encoding of address.
         */
        Address.prototype.toString = function () {
            return '0x' + this.buf.toString('hex');
        };
        /**
         * Returns Buffer representation of address.
         */
        Address.prototype.toBuffer = function () {
            return Buffer$g.from(this.buf);
        };
        return Address;
    }());
    address.Address = Address;

    var signature = {};

    Object.defineProperty(signature, "__esModule", { value: true });
    signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toCompactSig = signature.toRpcSig = signature.ecrecover = signature.ecsign = void 0;
    var secp256k1_1 = secp256k1$1;
    var externals_1$1 = externals;
    var bytes_1$1 = bytes;
    var hash_1 = hash$1;
    var helpers_1 = helpers;
    var types_1 = types;
    function ecsign(msgHash, privateKey, chainId) {
        var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;
        var r = Buffer$g.from(signature.slice(0, 32));
        var s = Buffer$g.from(signature.slice(32, 64));
        if (!chainId || typeof chainId === 'number') {
            // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)
            if (chainId && !Number.isSafeInteger(chainId)) {
                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
            }
            var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
            return { r: r, s: s, v: v_1 };
        }
        var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
        var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer$g);
        return { r: r, s: s, v: v };
    }
    signature.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
        var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
        if (vBN.eqn(0) || vBN.eqn(1))
            return (0, types_1.toType)(v, types_1.TypeOutput.BN);
        if (!chainId) {
            return vBN.subn(27);
        }
        var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
        return vBN.sub(chainIdBN.muln(2).addn(35));
    }
    function isValidSigRecovery(recovery) {
        var rec = new externals_1$1.BN(recovery);
        return rec.eqn(0) || rec.eqn(1);
    }
    /**
     * ECDSA public key recovery from signature.
     * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
     * @returns Recovered public key
     */
    var ecrecover = function (msgHash, v, r, s, chainId) {
        var signature = Buffer$g.concat([(0, bytes_1$1.setLengthLeft)(r, 32), (0, bytes_1$1.setLengthLeft)(s, 32)], 64);
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
            throw new Error('Invalid signature v value');
        }
        var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
        return Buffer$g.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
    };
    signature.ecrecover = ecrecover;
    /**
     * Convert signature parameters into the format of `eth_sign` RPC method.
     * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
     * @returns Signature
     */
    var toRpcSig = function (v, r, s, chainId) {
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
            throw new Error('Invalid signature v value');
        }
        // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
        return (0, bytes_1$1.bufferToHex)(Buffer$g.concat([(0, bytes_1$1.setLengthLeft)(r, 32), (0, bytes_1$1.setLengthLeft)(s, 32), (0, bytes_1$1.toBuffer)(v)]));
    };
    signature.toRpcSig = toRpcSig;
    /**
     * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).
     * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
     * @returns Signature
     */
    var toCompactSig = function (v, r, s, chainId) {
        var recovery = calculateSigRecovery(v, chainId);
        if (!isValidSigRecovery(recovery)) {
            throw new Error('Invalid signature v value');
        }
        var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
        var ss = s;
        if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {
            ss = Buffer$g.from(s);
            ss[0] |= 0x80;
        }
        return (0, bytes_1$1.bufferToHex)(Buffer$g.concat([(0, bytes_1$1.setLengthLeft)(r, 32), (0, bytes_1$1.setLengthLeft)(ss, 32)]));
    };
    signature.toCompactSig = toCompactSig;
    /**
     * Convert signature format of the `eth_sign` RPC method to signature parameters
     * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
     * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes
     * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.
     */
    var fromRpcSig = function (sig) {
        var buf = (0, bytes_1$1.toBuffer)(sig);
        var r;
        var s;
        var v;
        if (buf.length >= 65) {
            r = buf.slice(0, 32);
            s = buf.slice(32, 64);
            v = (0, bytes_1$1.bufferToInt)(buf.slice(64));
        }
        else if (buf.length === 64) {
            // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)
            r = buf.slice(0, 32);
            s = buf.slice(32, 64);
            v = (0, bytes_1$1.bufferToInt)(buf.slice(32, 33)) >> 7;
            s[0] &= 0x7f;
        }
        else {
            throw new Error('Invalid signature length');
        }
        // support both versions of `eth_sign` responses
        if (v < 27) {
            v += 27;
        }
        return {
            v: v,
            r: r,
            s: s,
        };
    };
    signature.fromRpcSig = fromRpcSig;
    /**
     * Validate a ECDSA signature.
     * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
     * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
     */
    var isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
        if (homesteadOrLater === void 0) { homesteadOrLater = true; }
        var SECP256K1_N_DIV_2 = new externals_1$1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
        var SECP256K1_N = new externals_1$1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
        if (r.length !== 32 || s.length !== 32) {
            return false;
        }
        if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
            return false;
        }
        var rBN = new externals_1$1.BN(r);
        var sBN = new externals_1$1.BN(s);
        if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
            return false;
        }
        if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
            return false;
        }
        return true;
    };
    signature.isValidSignature = isValidSignature;
    /**
     * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
     * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
     * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
     * used to produce the signature.
     */
    var hashPersonalMessage = function (message) {
        (0, helpers_1.assertIsBuffer)(message);
        var prefix = Buffer$g.from("\u0019Ethereum Signed Message:\n".concat(message.length), 'utf-8');
        return (0, hash_1.keccak)(Buffer$g.concat([prefix, message]));
    };
    signature.hashPersonalMessage = hashPersonalMessage;

    var object = {};

    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(object, "__esModule", { value: true });
    object.defineProperties = void 0;
    var assert_1 = __importDefault(require$$0$1);
    var internal_1 = internal;
    var externals_1 = externals;
    var bytes_1 = bytes;
    /**
     * Defines properties on a `Object`. It make the assumption that underlying data is binary.
     * @param self the `Object` to define properties on
     * @param fields an array fields to define. Fields can contain:
     * * `name` - the name of the properties
     * * `length` - the number of bytes the field can have
     * * `allowLess` - if the field can be less than the length
     * * `allowEmpty`
     * @param data data to be validated against the definitions
     * @deprecated
     */
    var defineProperties = function (self, fields, data) {
        self.raw = [];
        self._fields = [];
        // attach the `toJSON`
        self.toJSON = function (label) {
            if (label === void 0) { label = false; }
            if (label) {
                var obj_1 = {};
                self._fields.forEach(function (field) {
                    obj_1[field] = "0x".concat(self[field].toString('hex'));
                });
                return obj_1;
            }
            return (0, bytes_1.baToJSON)(self.raw);
        };
        self.serialize = function serialize() {
            return externals_1.rlp.encode(self.raw);
        };
        fields.forEach(function (field, i) {
            self._fields.push(field.name);
            function getter() {
                return self.raw[i];
            }
            function setter(v) {
                v = (0, bytes_1.toBuffer)(v);
                if (v.toString('hex') === '00' && !field.allowZero) {
                    v = Buffer$g.allocUnsafe(0);
                }
                if (field.allowLess && field.length) {
                    v = (0, bytes_1.unpadBuffer)(v);
                    (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
                }
                else if (!(field.allowZero && v.length === 0) && field.length) {
                    (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
                }
                self.raw[i] = v;
            }
            Object.defineProperty(self, field.name, {
                enumerable: true,
                configurable: true,
                get: getter,
                set: setter,
            });
            if (field.default) {
                self[field.name] = field.default;
            }
            // attach alias
            if (field.alias) {
                Object.defineProperty(self, field.alias, {
                    enumerable: false,
                    configurable: true,
                    set: setter,
                    get: getter,
                });
            }
        });
        // if the constuctor is passed data
        if (data) {
            if (typeof data === 'string') {
                data = Buffer$g.from((0, internal_1.stripHexPrefix)(data), 'hex');
            }
            if (Buffer$g.isBuffer(data)) {
                data = externals_1.rlp.decode(data);
            }
            if (Array.isArray(data)) {
                if (data.length > self._fields.length) {
                    throw new Error('wrong number of fields in data');
                }
                // make sure all the items are buffers
                data.forEach(function (d, i) {
                    self[self._fields[i]] = (0, bytes_1.toBuffer)(d);
                });
            }
            else if (typeof data === 'object') {
                var keys_1 = Object.keys(data);
                fields.forEach(function (field) {
                    if (keys_1.indexOf(field.name) !== -1)
                        self[field.name] = data[field.name];
                    if (keys_1.indexOf(field.alias) !== -1)
                        self[field.alias] = data[field.alias];
                });
            }
            else {
                throw new Error('invalid data');
            }
        }
    };
    object.defineProperties = defineProperties;

    (function (exports) {
    	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    var desc = Object.getOwnPropertyDescriptor(m, k);
    	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    	      desc = { enumerable: true, get: function() { return m[k]; } };
    	    }
    	    Object.defineProperty(o, k2, desc);
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
    	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    	};
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    	/**
    	 * Constants
    	 */
    	__exportStar(constants, exports);
    	/**
    	 * Account class and helper functions
    	 */
    	__exportStar(account, exports);
    	/**
    	 * Address type
    	 */
    	__exportStar(address, exports);
    	/**
    	 * Hash functions
    	 */
    	__exportStar(hash$1, exports);
    	/**
    	 * ECDSA signature
    	 */
    	__exportStar(signature, exports);
    	/**
    	 * Utilities for manipulating Buffers, byte arrays, etc.
    	 */
    	__exportStar(bytes, exports);
    	/**
    	 * Function for definining properties on an object
    	 */
    	__exportStar(object, exports);
    	/**
    	 * External exports (BN, rlp)
    	 */
    	__exportStar(externals, exports);
    	/**
    	 * Helpful TypeScript types
    	 */
    	__exportStar(types, exports);
    	/**
    	 * Export ethjs-util methods
    	 */
    	var internal_1 = internal;
    	Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function () { return internal_1.isHexPrefixed; } });
    	Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function () { return internal_1.stripHexPrefix; } });
    	Object.defineProperty(exports, "padToEven", { enumerable: true, get: function () { return internal_1.padToEven; } });
    	Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function () { return internal_1.getBinarySize; } });
    	Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function () { return internal_1.arrayContainsArray; } });
    	Object.defineProperty(exports, "toAscii", { enumerable: true, get: function () { return internal_1.toAscii; } });
    	Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function () { return internal_1.fromUtf8; } });
    	Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function () { return internal_1.fromAscii; } });
    	Object.defineProperty(exports, "getKeys", { enumerable: true, get: function () { return internal_1.getKeys; } });
    	Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return internal_1.isHexString; } });
    	
    } (dist_browser$1));

    var hdkey$3 = {};

    var hdkey$2 = {};

    // base-x encoding / decoding
    // Copyright (c) 2018 base-x contributors
    // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
    // Distributed under the MIT software license, see the accompanying
    // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
    // @ts-ignore
    var _Buffer = safeBufferExports.Buffer;
    function base$1 (ALPHABET) {
      if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
      var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
      function encode (source) {
        if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
        if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
        if (source.length === 0) { return '' }
            // Skip & count leading zeroes.
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
            // Allocate enough space in big-endian base58 representation.
        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
        var b58 = new Uint8Array(size);
            // Process the bytes.
        while (pbegin !== pend) {
          var carry = source[pbegin];
                // Apply "b58 = b58 * 256 + ch".
          var i = 0;
          for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
            carry += (256 * b58[it1]) >>> 0;
            b58[it1] = (carry % BASE) >>> 0;
            carry = (carry / BASE) >>> 0;
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i;
          pbegin++;
        }
            // Skip leading zeroes in base58 result.
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
            // Translate the result into a string.
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
        return str
      }
      function decodeUnsafe (source) {
        if (typeof source !== 'string') { throw new TypeError('Expected String') }
        if (source.length === 0) { return _Buffer.alloc(0) }
        var psz = 0;
            // Skip and count leading '1's.
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
            // Allocate enough space in big-endian base256 representation.
        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
        var b256 = new Uint8Array(size);
            // Process the characters.
        while (source[psz]) {
                // Decode character
          var carry = BASE_MAP[source.charCodeAt(psz)];
                // Invalid character
          if (carry === 255) { return }
          var i = 0;
          for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
            carry += (BASE * b256[it3]) >>> 0;
            b256[it3] = (carry % 256) >>> 0;
            carry = (carry / 256) >>> 0;
          }
          if (carry !== 0) { throw new Error('Non-zero carry') }
          length = i;
          psz++;
        }
            // Skip leading zeroes in b256.
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0x00, 0, zeroes);
        var j = zeroes;
        while (it4 !== size) {
          vch[j++] = b256[it4++];
        }
        return vch
      }
      function decode (string) {
        var buffer = decodeUnsafe(string);
        if (buffer) { return buffer }
        throw new Error('Non-base' + BASE + ' character')
      }
      return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
      }
    }
    var src = base$1;

    var basex = src;
    var ALPHABET$1 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

    var bs58 = basex(ALPHABET$1);

    var base58 = bs58;
    var Buffer$3 = safeBufferExports.Buffer;

    var base = function (checksumFn) {
      // Encode a buffer as a base58-check encoded string
      function encode (payload) {
        var checksum = checksumFn(payload);

        return base58.encode(Buffer$3.concat([
          payload,
          checksum
        ], payload.length + 4))
      }

      function decodeRaw (buffer) {
        var payload = buffer.slice(0, -4);
        var checksum = buffer.slice(-4);
        var newChecksum = checksumFn(payload);

        if (checksum[0] ^ newChecksum[0] |
            checksum[1] ^ newChecksum[1] |
            checksum[2] ^ newChecksum[2] |
            checksum[3] ^ newChecksum[3]) return

        return payload
      }

      // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
      function decodeUnsafe (string) {
        var buffer = base58.decodeUnsafe(string);
        if (!buffer) return

        return decodeRaw(buffer)
      }

      function decode (string) {
        var buffer = base58.decode(string);
        var payload = decodeRaw(buffer);
        if (!payload) throw new Error('Invalid checksum')
        return payload
      }

      return {
        encode: encode,
        decode: decode,
        decodeUnsafe: decodeUnsafe
      }
    };

    var createHash = browser$1;
    var bs58checkBase = base;

    // SHA256(SHA256(buffer))
    function sha256x2 (buffer) {
      var tmp = createHash('sha256').update(buffer).digest();
      return createHash('sha256').update(tmp).digest()
    }

    var bs58check$1 = bs58checkBase(sha256x2);

    var hdkeyCrypto = {};

    var ripemd160 = {};

    Object.defineProperty(ripemd160, "__esModule", { value: true });
    var Ripemd160 = ripemd.ripemd160;
    var hash_utils_1$1 = hashUtils;
    ripemd160.ripemd160 = hash_utils_1$1.createHashFunction(function () { return new Ripemd160(); });

    var sha256$2 = {};

    Object.defineProperty(sha256$2, "__esModule", { value: true });
    var Sha256Hash = _256;
    var hash_utils_1 = hashUtils;
    sha256$2.sha256 = hash_utils_1.createHashFunction(function () { return new Sha256Hash(); });

    var inherits$2 = require$$0$2;
    var Buffer$2 = safeBufferExports.Buffer;

    var Base$1 = cipherBase;

    var ZEROS$1 = Buffer$2.alloc(128);
    var blocksize = 64;

    function Hmac$1 (alg, key) {
      Base$1.call(this, 'digest');
      if (typeof key === 'string') {
        key = Buffer$2.from(key);
      }

      this._alg = alg;
      this._key = key;

      if (key.length > blocksize) {
        key = alg(key);
      } else if (key.length < blocksize) {
        key = Buffer$2.concat([key, ZEROS$1], blocksize);
      }

      var ipad = this._ipad = Buffer$2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer$2.allocUnsafe(blocksize);

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }

      this._hash = [ipad];
    }

    inherits$2(Hmac$1, Base$1);

    Hmac$1.prototype._update = function (data) {
      this._hash.push(data);
    };

    Hmac$1.prototype._final = function () {
      var h = this._alg(Buffer$2.concat(this._hash));
      return this._alg(Buffer$2.concat([this._opad, h]))
    };
    var legacy = Hmac$1;

    var MD5 = md5_js;

    var md5$2 = function (buffer) {
      return new MD5().update(buffer).digest()
    };

    var inherits$1 = require$$0$2;
    var Legacy = legacy;
    var Base = cipherBase;
    var Buffer$1 = safeBufferExports.Buffer;
    var md5$1 = md5$2;
    var RIPEMD160 = ripemd160$1;

    var sha = sha_jsExports;

    var ZEROS = Buffer$1.alloc(128);

    function Hmac (alg, key) {
      Base.call(this, 'digest');
      if (typeof key === 'string') {
        key = Buffer$1.from(key);
      }

      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
      } else if (key.length < blocksize) {
        key = Buffer$1.concat([key, ZEROS], blocksize);
      }

      var ipad = this._ipad = Buffer$1.allocUnsafe(blocksize);
      var opad = this._opad = Buffer$1.allocUnsafe(blocksize);

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }
      this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
      this._hash.update(ipad);
    }

    inherits$1(Hmac, Base);

    Hmac.prototype._update = function (data) {
      this._hash.update(data);
    };

    Hmac.prototype._final = function () {
      var h = this._hash.digest();
      var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
      return hash.update(this._opad).update(h).digest()
    };

    var browser = function createHmac (alg, key) {
      alg = alg.toLowerCase();
      if (alg === 'rmd160' || alg === 'ripemd160') {
        return new Hmac('rmd160', key)
      }
      if (alg === 'md5') {
        return new Legacy(md5$1, key)
      }
      return new Hmac(alg, key)
    };

    Object.defineProperty(hdkeyCrypto, "__esModule", { value: true });
    var ripemd160_1 = ripemd160;
    var sha256_1 = sha256$2;
    hdkeyCrypto.createHmac = browser;
    hdkeyCrypto.randomBytes = browserExports;
    var Hash = /** @class */ (function () {
        function Hash(hashFunction) {
            this.hashFunction = hashFunction;
            this.buffers = [];
        }
        Hash.prototype.update = function (buffer) {
            if (!Buffer$g.isBuffer(buffer)) {
                throw new Error("hdkey-crypto shim is outdated");
            }
            this.buffers.push(buffer);
            return this;
        };
        Hash.prototype.digest = function (param) {
            if (param) {
                throw new Error("hdkey-crypto shim is outdated");
            }
            return this.hashFunction(Buffer$g.concat(this.buffers));
        };
        return Hash;
    }());
    // We don't use create-hash here, as it doesn't work well with Rollup
    hdkeyCrypto.createHash = function (name) {
        if (name === "ripemd160") {
            return new Hash(ripemd160_1.ripemd160);
        }
        if (name === "sha256") {
            return new Hash(sha256_1.sha256);
        }
        throw new Error("hdkey-crypto shim is outdated");
    };

    var hdkeySecp256k1v3$1 = {};

    var hdkeySecp256k1v3 = {};

    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };
    Object.defineProperty(hdkeySecp256k1v3, "__esModule", { value: true });
    var secp256k1 = __importStar(elliptic);
    function privateKeyVerify(privateKey) {
        return secp256k1.privateKeyVerify(privateKey);
    }
    hdkeySecp256k1v3.privateKeyVerify = privateKeyVerify;
    function publicKeyCreate(privateKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        return Buffer$g.from(secp256k1.publicKeyCreate(privateKey, compressed));
    }
    hdkeySecp256k1v3.publicKeyCreate = publicKeyCreate;
    function publicKeyVerify(publicKey) {
        return secp256k1.publicKeyVerify(publicKey);
    }
    hdkeySecp256k1v3.publicKeyVerify = publicKeyVerify;
    function publicKeyConvert(publicKey, compressed) {
        if (compressed === void 0) { compressed = true; }
        return Buffer$g.from(secp256k1.publicKeyConvert(publicKey, compressed));
    }
    hdkeySecp256k1v3.publicKeyConvert = publicKeyConvert;
    function privateKeyTweakAdd(publicKey, tweak) {
        return Buffer$g.from(secp256k1.privateKeyTweakAdd(Buffer$g.from(publicKey), tweak));
    }
    hdkeySecp256k1v3.privateKeyTweakAdd = privateKeyTweakAdd;
    function publicKeyTweakAdd(publicKey, tweak, compressed) {
        if (compressed === void 0) { compressed = true; }
        return Buffer$g.from(secp256k1.publicKeyTweakAdd(Buffer$g.from(publicKey), tweak, compressed));
    }
    hdkeySecp256k1v3.publicKeyTweakAdd = publicKeyTweakAdd;
    function sign(message, privateKey) {
        var ret = secp256k1.ecdsaSign(message, privateKey);
        return { signature: Buffer$g.from(ret.signature), recovery: ret.recid };
    }
    hdkeySecp256k1v3.sign = sign;
    function verify(message, signature, publicKey) {
        return secp256k1.ecdsaVerify(signature, message, publicKey);
    }
    hdkeySecp256k1v3.verify = verify;

    (function (exports) {
    	function __export(m) {
    	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    	}
    	Object.defineProperty(exports, "__esModule", { value: true });
    	__export(hdkeySecp256k1v3);
    	
    } (hdkeySecp256k1v3$1));

    function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var assert = _interopDefault$1(require$$0$1);
    var safeBuffer = _interopDefault$1(safeBufferExports);
    var bs58check = _interopDefault$1(bs58check$1);

    var cryptoShim = hdkeyCrypto;

    var secp256k1Shim = hdkeySecp256k1v3$1;

    var Buffer = safeBuffer.Buffer;




    var MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8');
    var HARDENED_OFFSET = 0x80000000;
    var LEN = 78;

    // Bitcoin hardcoded by default, can use package `coininfo` for others
    var BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E};

    function HDKey (versions) {
      this.versions = versions || BITCOIN_VERSIONS;
      this.depth = 0;
      this.index = 0;
      this._privateKey = null;
      this._publicKey = null;
      this.chainCode = null;
      this._fingerprint = 0;
      this.parentFingerprint = 0;
    }

    Object.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } });
    Object.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } });
    Object.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } });

    Object.defineProperty(HDKey.prototype, 'privateKey', {
      get: function () {
        return this._privateKey
      },
      set: function (value) {
        assert.equal(value.length, 32, 'Private key must be 32 bytes.');
        assert(secp256k1Shim.privateKeyVerify(value) === true, 'Invalid private key');

        this._privateKey = value;
        this._publicKey = secp256k1Shim.publicKeyCreate(value, true);
        this._identifier = hash160(this.publicKey);
        this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
      }
    });

    Object.defineProperty(HDKey.prototype, 'publicKey', {
      get: function () {
        return this._publicKey
      },
      set: function (value) {
        assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');
        assert(secp256k1Shim.publicKeyVerify(value) === true, 'Invalid public key');

        this._publicKey = secp256k1Shim.publicKeyConvert(value, true); // force compressed point
        this._identifier = hash160(this.publicKey);
        this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
        this._privateKey = null;
      }
    });

    Object.defineProperty(HDKey.prototype, 'privateExtendedKey', {
      get: function () {
        if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))
        else return null
      }
    });

    Object.defineProperty(HDKey.prototype, 'publicExtendedKey', {
      get: function () {
        return bs58check.encode(serialize(this, this.versions.public, this.publicKey))
      }
    });

    HDKey.prototype.derive = function (path) {
      if (path === 'm' || path === 'M' || path === "m'" || path === "M'") {
        return this
      }

      var entries = path.split('/');
      var hdkey = this;
      entries.forEach(function (c, i) {
        if (i === 0) {
          assert(/^[mM]{1}/.test(c), 'Path must start with "m" or "M"');
          return
        }

        var hardened = (c.length > 1) && (c[c.length - 1] === "'");
        var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)
        assert(childIndex < HARDENED_OFFSET, 'Invalid index');
        if (hardened) childIndex += HARDENED_OFFSET;

        hdkey = hdkey.deriveChild(childIndex);
      });

      return hdkey
    };

    HDKey.prototype.deriveChild = function (index) {
      var isHardened = index >= HARDENED_OFFSET;
      var indexBuffer = Buffer.allocUnsafe(4);
      indexBuffer.writeUInt32BE(index, 0);

      var data;

      if (isHardened) { // Hardened child
        assert(this.privateKey, 'Could not derive hardened child key');

        var pk = this.privateKey;
        var zb = Buffer.alloc(1, 0);
        pk = Buffer.concat([zb, pk]);

        // data = 0x00 || ser256(kpar) || ser32(index)
        data = Buffer.concat([pk, indexBuffer]);
      } else { // Normal child
        // data = serP(point(kpar)) || ser32(index)
        //      = serP(Kpar) || ser32(index)
        data = Buffer.concat([this.publicKey, indexBuffer]);
      }

      var I = cryptoShim.createHmac('sha512', this.chainCode).update(data).digest();
      var IL = I.slice(0, 32);
      var IR = I.slice(32);

      var hd = new HDKey(this.versions);

      // Private parent key -> private child key
      if (this.privateKey) {
        // ki = parse256(IL) + kpar (mod n)
        try {
          hd.privateKey = secp256k1Shim.privateKeyTweakAdd(this.privateKey, IL);
          // throw if IL >= n || (privateKey + IL) === 0
        } catch (err) {
          // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i
          return this.deriveChild(index + 1)
        }
      // Public parent key -> public child key
      } else {
        // Ki = point(parse256(IL)) + Kpar
        //    = G*IL + Kpar
        try {
          hd.publicKey = secp256k1Shim.publicKeyTweakAdd(this.publicKey, IL, true);
          // throw if IL >= n || (g**IL + publicKey) is infinity
        } catch (err) {
          // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i
          return this.deriveChild(index + 1)
        }
      }

      hd.chainCode = IR;
      hd.depth = this.depth + 1;
      hd.parentFingerprint = this.fingerprint;// .readUInt32BE(0)
      hd.index = index;

      return hd
    };

    HDKey.prototype.sign = function (hash) {
      return secp256k1Shim.sign(hash, this.privateKey).signature
    };

    HDKey.prototype.verify = function (hash, signature) {
      return secp256k1Shim.verify(hash, signature, this.publicKey)
    };

    HDKey.prototype.wipePrivateData = function () {
      if (this._privateKey) cryptoShim.randomBytes(this._privateKey.length).copy(this._privateKey);
      this._privateKey = null;
      return this
    };

    HDKey.prototype.toJSON = function () {
      return {
        xpriv: this.privateExtendedKey,
        xpub: this.publicExtendedKey
      }
    };

    HDKey.fromMasterSeed = function (seedBuffer, versions) {
      var I = cryptoShim.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();
      var IL = I.slice(0, 32);
      var IR = I.slice(32);

      var hdkey = new HDKey(versions);
      hdkey.chainCode = IR;
      hdkey.privateKey = IL;

      return hdkey
    };

    HDKey.fromExtendedKey = function (base58key, versions) {
      // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
      versions = versions || BITCOIN_VERSIONS;
      var hdkey = new HDKey(versions);

      var keyBuffer = bs58check.decode(base58key);

      var version = keyBuffer.readUInt32BE(0);
      assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');

      hdkey.depth = keyBuffer.readUInt8(4);
      hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);
      hdkey.index = keyBuffer.readUInt32BE(9);
      hdkey.chainCode = keyBuffer.slice(13, 45);

      var key = keyBuffer.slice(45);
      if (key.readUInt8(0) === 0) { // private
        assert(version === versions.private, 'Version mismatch: version does not match private');
        hdkey.privateKey = key.slice(1); // cut off first 0x0 byte
      } else {
        assert(version === versions.public, 'Version mismatch: version does not match public');
        hdkey.publicKey = key;
      }

      return hdkey
    };

    HDKey.fromJSON = function (obj) {
      return HDKey.fromExtendedKey(obj.xpriv)
    };

    function serialize (hdkey, version, key) {
      // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
      var buffer = Buffer.allocUnsafe(LEN);

      buffer.writeUInt32BE(version, 0);
      buffer.writeUInt8(hdkey.depth, 4);

      var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;
      buffer.writeUInt32BE(fingerprint, 5);
      buffer.writeUInt32BE(hdkey.index, 9);

      hdkey.chainCode.copy(buffer, 13);
      key.copy(buffer, 45);

      return buffer
    }

    function hash160 (buf) {
      var sha = cryptoShim.createHash('sha256').update(buf).digest();
      return cryptoShim.createHash('ripemd160').update(sha).digest()
    }

    HDKey.HARDENED_OFFSET = HARDENED_OFFSET;
    var hdkey$1 = HDKey;

    var hdkeyWithoutCrypto = hdkey$1;

    Object.defineProperty(hdkey$2, "__esModule", { value: true });
    var hdkey = hdkeyWithoutCrypto;
    hdkey$2.HDKey = hdkey;

    var hasRequiredHdkey;

    function requireHdkey () {
    	if (hasRequiredHdkey) return hdkey$3;
    	hasRequiredHdkey = 1;
    	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(hdkey$3, "__esModule", { value: true });
    	var index_1 = __importDefault(requireDist_browser());
    	var hdkey_1 = hdkey$2;
    	var EthereumHDKey = /** @class */ (function () {
    	    function EthereumHDKey(_hdkey) {
    	        this._hdkey = _hdkey;
    	    }
    	    /**
    	     * Creates an instance based on a seed.
    	     *
    	     * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to
    	     * create one from a BIP39 mnemonic.
    	     */
    	    EthereumHDKey.fromMasterSeed = function (seedBuffer) {
    	        return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));
    	    };
    	    /**
    	     * Create an instance based on a BIP32 extended private or public key.
    	     */
    	    EthereumHDKey.fromExtendedKey = function (base58Key) {
    	        return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));
    	    };
    	    /**
    	     * Returns a BIP32 extended private key (xprv)
    	     */
    	    EthereumHDKey.prototype.privateExtendedKey = function () {
    	        if (!this._hdkey.privateExtendedKey) {
    	            throw new Error('This is a public key only wallet');
    	        }
    	        return this._hdkey.privateExtendedKey;
    	    };
    	    /**
    	     * Return a BIP32 extended public key (xpub)
    	     */
    	    EthereumHDKey.prototype.publicExtendedKey = function () {
    	        return this._hdkey.publicExtendedKey;
    	    };
    	    /**
    	     * Derives a node based on a path (e.g. m/44'/0'/0/1)
    	     */
    	    EthereumHDKey.prototype.derivePath = function (path) {
    	        return new EthereumHDKey(this._hdkey.derive(path));
    	    };
    	    /**
    	     * Derive a node based on a child index
    	     */
    	    EthereumHDKey.prototype.deriveChild = function (index) {
    	        return new EthereumHDKey(this._hdkey.deriveChild(index));
    	    };
    	    /**
    	     * Return a `Wallet` instance as seen above
    	     */
    	    EthereumHDKey.prototype.getWallet = function () {
    	        if (this._hdkey._privateKey) {
    	            return index_1.default.fromPrivateKey(this._hdkey._privateKey);
    	        }
    	        return index_1.default.fromPublicKey(this._hdkey._publicKey, true);
    	    };
    	    return EthereumHDKey;
    	}());
    	hdkey$3.default = EthereumHDKey;
    	
    	return hdkey$3;
    }

    var thirdparty = {};

    var utf8 = {};

    /*! https://mths.be/utf8js v3.0.0 by @mathias */

    (function (exports) {
    (function(root) {

    		var stringFromCharCode = String.fromCharCode;

    		// Taken from https://mths.be/punycode
    		function ucs2decode(string) {
    			var output = [];
    			var counter = 0;
    			var length = string.length;
    			var value;
    			var extra;
    			while (counter < length) {
    				value = string.charCodeAt(counter++);
    				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    					// high surrogate, and there is a next character
    					extra = string.charCodeAt(counter++);
    					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
    						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    					} else {
    						// unmatched surrogate; only append this code unit, in case the next
    						// code unit is the high surrogate of a surrogate pair
    						output.push(value);
    						counter--;
    					}
    				} else {
    					output.push(value);
    				}
    			}
    			return output;
    		}

    		// Taken from https://mths.be/punycode
    		function ucs2encode(array) {
    			var length = array.length;
    			var index = -1;
    			var value;
    			var output = '';
    			while (++index < length) {
    				value = array[index];
    				if (value > 0xFFFF) {
    					value -= 0x10000;
    					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
    					value = 0xDC00 | value & 0x3FF;
    				}
    				output += stringFromCharCode(value);
    			}
    			return output;
    		}

    		function checkScalarValue(codePoint) {
    			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
    				throw Error(
    					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
    					' is not a scalar value'
    				);
    			}
    		}
    		/*--------------------------------------------------------------------------*/

    		function createByte(codePoint, shift) {
    			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
    		}

    		function encodeCodePoint(codePoint) {
    			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
    				return stringFromCharCode(codePoint);
    			}
    			var symbol = '';
    			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
    				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
    			}
    			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
    				checkScalarValue(codePoint);
    				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
    				symbol += createByte(codePoint, 6);
    			}
    			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
    				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
    				symbol += createByte(codePoint, 12);
    				symbol += createByte(codePoint, 6);
    			}
    			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
    			return symbol;
    		}

    		function utf8encode(string) {
    			var codePoints = ucs2decode(string);
    			var length = codePoints.length;
    			var index = -1;
    			var codePoint;
    			var byteString = '';
    			while (++index < length) {
    				codePoint = codePoints[index];
    				byteString += encodeCodePoint(codePoint);
    			}
    			return byteString;
    		}

    		/*--------------------------------------------------------------------------*/

    		function readContinuationByte() {
    			if (byteIndex >= byteCount) {
    				throw Error('Invalid byte index');
    			}

    			var continuationByte = byteArray[byteIndex] & 0xFF;
    			byteIndex++;

    			if ((continuationByte & 0xC0) == 0x80) {
    				return continuationByte & 0x3F;
    			}

    			// If we end up here, it’s not a continuation byte
    			throw Error('Invalid continuation byte');
    		}

    		function decodeSymbol() {
    			var byte1;
    			var byte2;
    			var byte3;
    			var byte4;
    			var codePoint;

    			if (byteIndex > byteCount) {
    				throw Error('Invalid byte index');
    			}

    			if (byteIndex == byteCount) {
    				return false;
    			}

    			// Read first byte
    			byte1 = byteArray[byteIndex] & 0xFF;
    			byteIndex++;

    			// 1-byte sequence (no continuation bytes)
    			if ((byte1 & 0x80) == 0) {
    				return byte1;
    			}

    			// 2-byte sequence
    			if ((byte1 & 0xE0) == 0xC0) {
    				byte2 = readContinuationByte();
    				codePoint = ((byte1 & 0x1F) << 6) | byte2;
    				if (codePoint >= 0x80) {
    					return codePoint;
    				} else {
    					throw Error('Invalid continuation byte');
    				}
    			}

    			// 3-byte sequence (may include unpaired surrogates)
    			if ((byte1 & 0xF0) == 0xE0) {
    				byte2 = readContinuationByte();
    				byte3 = readContinuationByte();
    				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
    				if (codePoint >= 0x0800) {
    					checkScalarValue(codePoint);
    					return codePoint;
    				} else {
    					throw Error('Invalid continuation byte');
    				}
    			}

    			// 4-byte sequence
    			if ((byte1 & 0xF8) == 0xF0) {
    				byte2 = readContinuationByte();
    				byte3 = readContinuationByte();
    				byte4 = readContinuationByte();
    				codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
    					(byte3 << 0x06) | byte4;
    				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
    					return codePoint;
    				}
    			}

    			throw Error('Invalid UTF-8 detected');
    		}

    		var byteArray;
    		var byteCount;
    		var byteIndex;
    		function utf8decode(byteString) {
    			byteArray = ucs2decode(byteString);
    			byteCount = byteArray.length;
    			byteIndex = 0;
    			var codePoints = [];
    			var tmp;
    			while ((tmp = decodeSymbol()) !== false) {
    				codePoints.push(tmp);
    			}
    			return ucs2encode(codePoints);
    		}

    		/*--------------------------------------------------------------------------*/

    		root.version = '3.0.0';
    		root.encode = utf8encode;
    		root.decode = utf8decode;

    	}(exports)); 
    } (utf8));

    var aesJs = {exports: {}};

    /*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */

    (function (module, exports) {
    	(function(root) {

    	    function checkInt(value) {
    	        return (parseInt(value) === value);
    	    }

    	    function checkInts(arrayish) {
    	        if (!checkInt(arrayish.length)) { return false; }

    	        for (var i = 0; i < arrayish.length; i++) {
    	            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
    	                return false;
    	            }
    	        }

    	        return true;
    	    }

    	    function coerceArray(arg, copy) {

    	        // ArrayBuffer view
    	        if (arg.buffer && arg.name === 'Uint8Array') {

    	            if (copy) {
    	                if (arg.slice) {
    	                    arg = arg.slice();
    	                } else {
    	                    arg = Array.prototype.slice.call(arg);
    	                }
    	            }

    	            return arg;
    	        }

    	        // It's an array; check it is a valid representation of a byte
    	        if (Array.isArray(arg)) {
    	            if (!checkInts(arg)) {
    	                throw new Error('Array contains invalid value: ' + arg);
    	            }

    	            return new Uint8Array(arg);
    	        }

    	        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
    	        if (checkInt(arg.length) && checkInts(arg)) {
    	            return new Uint8Array(arg);
    	        }

    	        throw new Error('unsupported array-like object');
    	    }

    	    function createArray(length) {
    	        return new Uint8Array(length);
    	    }

    	    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
    	        if (sourceStart != null || sourceEnd != null) {
    	            if (sourceArray.slice) {
    	                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
    	            } else {
    	                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
    	            }
    	        }
    	        targetArray.set(sourceArray, targetStart);
    	    }



    	    var convertUtf8 = (function() {
    	        function toBytes(text) {
    	            var result = [], i = 0;
    	            text = encodeURI(text);
    	            while (i < text.length) {
    	                var c = text.charCodeAt(i++);

    	                // if it is a % sign, encode the following 2 bytes as a hex value
    	                if (c === 37) {
    	                    result.push(parseInt(text.substr(i, 2), 16));
    	                    i += 2;

    	                // otherwise, just the actual byte
    	                } else {
    	                    result.push(c);
    	                }
    	            }

    	            return coerceArray(result);
    	        }

    	        function fromBytes(bytes) {
    	            var result = [], i = 0;

    	            while (i < bytes.length) {
    	                var c = bytes[i];

    	                if (c < 128) {
    	                    result.push(String.fromCharCode(c));
    	                    i++;
    	                } else if (c > 191 && c < 224) {
    	                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
    	                    i += 2;
    	                } else {
    	                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
    	                    i += 3;
    	                }
    	            }

    	            return result.join('');
    	        }

    	        return {
    	            toBytes: toBytes,
    	            fromBytes: fromBytes,
    	        }
    	    })();

    	    var convertHex = (function() {
    	        function toBytes(text) {
    	            var result = [];
    	            for (var i = 0; i < text.length; i += 2) {
    	                result.push(parseInt(text.substr(i, 2), 16));
    	            }

    	            return result;
    	        }

    	        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
    	        var Hex = '0123456789abcdef';

    	        function fromBytes(bytes) {
    	                var result = [];
    	                for (var i = 0; i < bytes.length; i++) {
    	                    var v = bytes[i];
    	                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
    	                }
    	                return result.join('');
    	        }

    	        return {
    	            toBytes: toBytes,
    	            fromBytes: fromBytes,
    	        }
    	    })();


    	    // Number of rounds by keysize
    	    var numberOfRounds = {16: 10, 24: 12, 32: 14};

    	    // Round constant words
    	    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    	    // S-box and Inverse S-box (S is for Substitution)
    	    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    	    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    	    // Transformations for encryption
    	    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    	    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    	    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    	    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    	    // Transformations for decryption
    	    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    	    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    	    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    	    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    	    // Transformations for decryption key expansion
    	    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    	    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    	    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    	    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    	    function convertToInt32(bytes) {
    	        var result = [];
    	        for (var i = 0; i < bytes.length; i += 4) {
    	            result.push(
    	                (bytes[i    ] << 24) |
    	                (bytes[i + 1] << 16) |
    	                (bytes[i + 2] <<  8) |
    	                 bytes[i + 3]
    	            );
    	        }
    	        return result;
    	    }

    	    var AES = function(key) {
    	        if (!(this instanceof AES)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        Object.defineProperty(this, 'key', {
    	            value: coerceArray(key, true)
    	        });

    	        this._prepare();
    	    };


    	    AES.prototype._prepare = function() {

    	        var rounds = numberOfRounds[this.key.length];
    	        if (rounds == null) {
    	            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
    	        }

    	        // encryption round keys
    	        this._Ke = [];

    	        // decryption round keys
    	        this._Kd = [];

    	        for (var i = 0; i <= rounds; i++) {
    	            this._Ke.push([0, 0, 0, 0]);
    	            this._Kd.push([0, 0, 0, 0]);
    	        }

    	        var roundKeyCount = (rounds + 1) * 4;
    	        var KC = this.key.length / 4;

    	        // convert the key into ints
    	        var tk = convertToInt32(this.key);

    	        // copy values into round key arrays
    	        var index;
    	        for (var i = 0; i < KC; i++) {
    	            index = i >> 2;
    	            this._Ke[index][i % 4] = tk[i];
    	            this._Kd[rounds - index][i % 4] = tk[i];
    	        }

    	        // key expansion (fips-197 section 5.2)
    	        var rconpointer = 0;
    	        var t = KC, tt;
    	        while (t < roundKeyCount) {
    	            tt = tk[KC - 1];
    	            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
    	                      (S[(tt >>  8) & 0xFF] << 16) ^
    	                      (S[ tt        & 0xFF] <<  8) ^
    	                       S[(tt >> 24) & 0xFF]        ^
    	                      (rcon[rconpointer] << 24));
    	            rconpointer += 1;

    	            // key expansion (for non-256 bit)
    	            if (KC != 8) {
    	                for (var i = 1; i < KC; i++) {
    	                    tk[i] ^= tk[i - 1];
    	                }

    	            // key expansion for 256-bit keys is "slightly different" (fips-197)
    	            } else {
    	                for (var i = 1; i < (KC / 2); i++) {
    	                    tk[i] ^= tk[i - 1];
    	                }
    	                tt = tk[(KC / 2) - 1];

    	                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
    	                              (S[(tt >>  8) & 0xFF] <<  8) ^
    	                              (S[(tt >> 16) & 0xFF] << 16) ^
    	                              (S[(tt >> 24) & 0xFF] << 24));

    	                for (var i = (KC / 2) + 1; i < KC; i++) {
    	                    tk[i] ^= tk[i - 1];
    	                }
    	            }

    	            // copy values into round key arrays
    	            var i = 0, r, c;
    	            while (i < KC && t < roundKeyCount) {
    	                r = t >> 2;
    	                c = t % 4;
    	                this._Ke[r][c] = tk[i];
    	                this._Kd[rounds - r][c] = tk[i++];
    	                t++;
    	            }
    	        }

    	        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
    	        for (var r = 1; r < rounds; r++) {
    	            for (var c = 0; c < 4; c++) {
    	                tt = this._Kd[r][c];
    	                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
    	                                  U2[(tt >> 16) & 0xFF] ^
    	                                  U3[(tt >>  8) & 0xFF] ^
    	                                  U4[ tt        & 0xFF]);
    	            }
    	        }
    	    };

    	    AES.prototype.encrypt = function(plaintext) {
    	        if (plaintext.length != 16) {
    	            throw new Error('invalid plaintext size (must be 16 bytes)');
    	        }

    	        var rounds = this._Ke.length - 1;
    	        var a = [0, 0, 0, 0];

    	        // convert plaintext to (ints ^ key)
    	        var t = convertToInt32(plaintext);
    	        for (var i = 0; i < 4; i++) {
    	            t[i] ^= this._Ke[0][i];
    	        }

    	        // apply round transforms
    	        for (var r = 1; r < rounds; r++) {
    	            for (var i = 0; i < 4; i++) {
    	                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
    	                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
    	                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
    	                        T4[ t[(i + 3) % 4]        & 0xff] ^
    	                        this._Ke[r][i]);
    	            }
    	            t = a.slice();
    	        }

    	        // the last round is special
    	        var result = createArray(16), tt;
    	        for (var i = 0; i < 4; i++) {
    	            tt = this._Ke[rounds][i];
    	            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
    	            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
    	            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
    	            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
    	        }

    	        return result;
    	    };

    	    AES.prototype.decrypt = function(ciphertext) {
    	        if (ciphertext.length != 16) {
    	            throw new Error('invalid ciphertext size (must be 16 bytes)');
    	        }

    	        var rounds = this._Kd.length - 1;
    	        var a = [0, 0, 0, 0];

    	        // convert plaintext to (ints ^ key)
    	        var t = convertToInt32(ciphertext);
    	        for (var i = 0; i < 4; i++) {
    	            t[i] ^= this._Kd[0][i];
    	        }

    	        // apply round transforms
    	        for (var r = 1; r < rounds; r++) {
    	            for (var i = 0; i < 4; i++) {
    	                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
    	                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
    	                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
    	                        T8[ t[(i + 1) % 4]        & 0xff] ^
    	                        this._Kd[r][i]);
    	            }
    	            t = a.slice();
    	        }

    	        // the last round is special
    	        var result = createArray(16), tt;
    	        for (var i = 0; i < 4; i++) {
    	            tt = this._Kd[rounds][i];
    	            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
    	            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
    	            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
    	            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
    	        }

    	        return result;
    	    };


    	    /**
    	     *  Mode Of Operation - Electonic Codebook (ECB)
    	     */
    	    var ModeOfOperationECB = function(key) {
    	        if (!(this instanceof ModeOfOperationECB)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Electronic Code Block";
    	        this.name = "ecb";

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
    	        plaintext = coerceArray(plaintext);

    	        if ((plaintext.length % 16) !== 0) {
    	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
    	        }

    	        var ciphertext = createArray(plaintext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < plaintext.length; i += 16) {
    	            copyArray(plaintext, block, 0, i, i + 16);
    	            block = this._aes.encrypt(block);
    	            copyArray(block, ciphertext, i);
    	        }

    	        return ciphertext;
    	    };

    	    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
    	        ciphertext = coerceArray(ciphertext);

    	        if ((ciphertext.length % 16) !== 0) {
    	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
    	        }

    	        var plaintext = createArray(ciphertext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < ciphertext.length; i += 16) {
    	            copyArray(ciphertext, block, 0, i, i + 16);
    	            block = this._aes.decrypt(block);
    	            copyArray(block, plaintext, i);
    	        }

    	        return plaintext;
    	    };


    	    /**
    	     *  Mode Of Operation - Cipher Block Chaining (CBC)
    	     */
    	    var ModeOfOperationCBC = function(key, iv) {
    	        if (!(this instanceof ModeOfOperationCBC)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Cipher Block Chaining";
    	        this.name = "cbc";

    	        if (!iv) {
    	            iv = createArray(16);

    	        } else if (iv.length != 16) {
    	            throw new Error('invalid initialation vector size (must be 16 bytes)');
    	        }

    	        this._lastCipherblock = coerceArray(iv, true);

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
    	        plaintext = coerceArray(plaintext);

    	        if ((plaintext.length % 16) !== 0) {
    	            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
    	        }

    	        var ciphertext = createArray(plaintext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < plaintext.length; i += 16) {
    	            copyArray(plaintext, block, 0, i, i + 16);

    	            for (var j = 0; j < 16; j++) {
    	                block[j] ^= this._lastCipherblock[j];
    	            }

    	            this._lastCipherblock = this._aes.encrypt(block);
    	            copyArray(this._lastCipherblock, ciphertext, i);
    	        }

    	        return ciphertext;
    	    };

    	    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
    	        ciphertext = coerceArray(ciphertext);

    	        if ((ciphertext.length % 16) !== 0) {
    	            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
    	        }

    	        var plaintext = createArray(ciphertext.length);
    	        var block = createArray(16);

    	        for (var i = 0; i < ciphertext.length; i += 16) {
    	            copyArray(ciphertext, block, 0, i, i + 16);
    	            block = this._aes.decrypt(block);

    	            for (var j = 0; j < 16; j++) {
    	                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
    	            }

    	            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
    	        }

    	        return plaintext;
    	    };


    	    /**
    	     *  Mode Of Operation - Cipher Feedback (CFB)
    	     */
    	    var ModeOfOperationCFB = function(key, iv, segmentSize) {
    	        if (!(this instanceof ModeOfOperationCFB)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Cipher Feedback";
    	        this.name = "cfb";

    	        if (!iv) {
    	            iv = createArray(16);

    	        } else if (iv.length != 16) {
    	            throw new Error('invalid initialation vector size (must be 16 size)');
    	        }

    	        if (!segmentSize) { segmentSize = 1; }

    	        this.segmentSize = segmentSize;

    	        this._shiftRegister = coerceArray(iv, true);

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
    	        if ((plaintext.length % this.segmentSize) != 0) {
    	            throw new Error('invalid plaintext size (must be segmentSize bytes)');
    	        }

    	        var encrypted = coerceArray(plaintext, true);

    	        var xorSegment;
    	        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
    	            xorSegment = this._aes.encrypt(this._shiftRegister);
    	            for (var j = 0; j < this.segmentSize; j++) {
    	                encrypted[i + j] ^= xorSegment[j];
    	            }

    	            // Shift the register
    	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
    	            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
    	        }

    	        return encrypted;
    	    };

    	    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
    	        if ((ciphertext.length % this.segmentSize) != 0) {
    	            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
    	        }

    	        var plaintext = coerceArray(ciphertext, true);

    	        var xorSegment;
    	        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
    	            xorSegment = this._aes.encrypt(this._shiftRegister);

    	            for (var j = 0; j < this.segmentSize; j++) {
    	                plaintext[i + j] ^= xorSegment[j];
    	            }

    	            // Shift the register
    	            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
    	            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
    	        }

    	        return plaintext;
    	    };

    	    /**
    	     *  Mode Of Operation - Output Feedback (OFB)
    	     */
    	    var ModeOfOperationOFB = function(key, iv) {
    	        if (!(this instanceof ModeOfOperationOFB)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Output Feedback";
    	        this.name = "ofb";

    	        if (!iv) {
    	            iv = createArray(16);

    	        } else if (iv.length != 16) {
    	            throw new Error('invalid initialation vector size (must be 16 bytes)');
    	        }

    	        this._lastPrecipher = coerceArray(iv, true);
    	        this._lastPrecipherIndex = 16;

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
    	        var encrypted = coerceArray(plaintext, true);

    	        for (var i = 0; i < encrypted.length; i++) {
    	            if (this._lastPrecipherIndex === 16) {
    	                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
    	                this._lastPrecipherIndex = 0;
    	            }
    	            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
    	        }

    	        return encrypted;
    	    };

    	    // Decryption is symetric
    	    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    	    /**
    	     *  Counter object for CTR common mode of operation
    	     */
    	    var Counter = function(initialValue) {
    	        if (!(this instanceof Counter)) {
    	            throw Error('Counter must be instanitated with `new`');
    	        }

    	        // We allow 0, but anything false-ish uses the default 1
    	        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

    	        if (typeof(initialValue) === 'number') {
    	            this._counter = createArray(16);
    	            this.setValue(initialValue);

    	        } else {
    	            this.setBytes(initialValue);
    	        }
    	    };

    	    Counter.prototype.setValue = function(value) {
    	        if (typeof(value) !== 'number' || parseInt(value) != value) {
    	            throw new Error('invalid counter value (must be an integer)');
    	        }

    	        // We cannot safely handle numbers beyond the safe range for integers
    	        if (value > Number.MAX_SAFE_INTEGER) {
    	            throw new Error('integer value out of safe range');
    	        }

    	        for (var index = 15; index >= 0; --index) {
    	            this._counter[index] = value % 256;
    	            value = parseInt(value / 256);
    	        }
    	    };

    	    Counter.prototype.setBytes = function(bytes) {
    	        bytes = coerceArray(bytes, true);

    	        if (bytes.length != 16) {
    	            throw new Error('invalid counter bytes size (must be 16 bytes)');
    	        }

    	        this._counter = bytes;
    	    };

    	    Counter.prototype.increment = function() {
    	        for (var i = 15; i >= 0; i--) {
    	            if (this._counter[i] === 255) {
    	                this._counter[i] = 0;
    	            } else {
    	                this._counter[i]++;
    	                break;
    	            }
    	        }
    	    };


    	    /**
    	     *  Mode Of Operation - Counter (CTR)
    	     */
    	    var ModeOfOperationCTR = function(key, counter) {
    	        if (!(this instanceof ModeOfOperationCTR)) {
    	            throw Error('AES must be instanitated with `new`');
    	        }

    	        this.description = "Counter";
    	        this.name = "ctr";

    	        if (!(counter instanceof Counter)) {
    	            counter = new Counter(counter);
    	        }

    	        this._counter = counter;

    	        this._remainingCounter = null;
    	        this._remainingCounterIndex = 16;

    	        this._aes = new AES(key);
    	    };

    	    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
    	        var encrypted = coerceArray(plaintext, true);

    	        for (var i = 0; i < encrypted.length; i++) {
    	            if (this._remainingCounterIndex === 16) {
    	                this._remainingCounter = this._aes.encrypt(this._counter._counter);
    	                this._remainingCounterIndex = 0;
    	                this._counter.increment();
    	            }
    	            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
    	        }

    	        return encrypted;
    	    };

    	    // Decryption is symetric
    	    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    	    ///////////////////////
    	    // Padding

    	    // See:https://tools.ietf.org/html/rfc2315
    	    function pkcs7pad(data) {
    	        data = coerceArray(data, true);
    	        var padder = 16 - (data.length % 16);
    	        var result = createArray(data.length + padder);
    	        copyArray(data, result);
    	        for (var i = data.length; i < result.length; i++) {
    	            result[i] = padder;
    	        }
    	        return result;
    	    }

    	    function pkcs7strip(data) {
    	        data = coerceArray(data, true);
    	        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

    	        var padder = data[data.length - 1];
    	        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

    	        var length = data.length - padder;
    	        for (var i = 0; i < padder; i++) {
    	            if (data[length + i] !== padder) {
    	                throw new Error('PKCS#7 invalid padding byte');
    	            }
    	        }

    	        var result = createArray(length);
    	        copyArray(data, result, 0, 0, length);
    	        return result;
    	    }

    	    ///////////////////////
    	    // Exporting


    	    // The block cipher
    	    var aesjs = {
    	        AES: AES,
    	        Counter: Counter,

    	        ModeOfOperation: {
    	            ecb: ModeOfOperationECB,
    	            cbc: ModeOfOperationCBC,
    	            cfb: ModeOfOperationCFB,
    	            ofb: ModeOfOperationOFB,
    	            ctr: ModeOfOperationCTR
    	        },

    	        utils: {
    	            hex: convertHex,
    	            utf8: convertUtf8
    	        },

    	        padding: {
    	            pkcs7: {
    	                pad: pkcs7pad,
    	                strip: pkcs7strip
    	            }
    	        },

    	        _arrayTest: {
    	            coerceArray: coerceArray,
    	            createArray: createArray,
    	            copyArray: copyArray,
    	        }
    	    };


    	    // node.js
    	    {
    	        module.exports = aesjs;

    	    // RequireJS/AMD
    	    // http://www.requirejs.org/docs/api.html
    	    // https://github.com/amdjs/amdjs-api/wiki/AMD
    	    }


    	})(); 
    } (aesJs));

    var aesJsExports = aesJs.exports;

    var hasRequiredThirdparty;

    function requireThirdparty () {
    	if (hasRequiredThirdparty) return thirdparty;
    	hasRequiredThirdparty = 1;
    	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    	}) : (function(o, m, k, k2) {
    	    if (k2 === undefined) k2 = k;
    	    o[k2] = m[k];
    	}));
    	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    	    Object.defineProperty(o, "default", { enumerable: true, value: v });
    	}) : function(o, v) {
    	    o["default"] = v;
    	});
    	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    	    if (mod && mod.__esModule) return mod;
    	    var result = {};
    	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    	    __setModuleDefault(result, mod);
    	    return result;
    	};
    	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    	    return new (P || (P = Promise))(function (resolve, reject) {
    	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
    	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
    	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
    	        step((generator = generator.apply(thisArg, _arguments || [])).next());
    	    });
    	};
    	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    	    function verb(n) { return function (v) { return step([n, v]); }; }
    	    function step(op) {
    	        if (f) throw new TypeError("Generator is already executing.");
    	        while (_) try {
    	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
    	            if (y = 0, t) op = [op[0] & 2, t.value];
    	            switch (op[0]) {
    	                case 0: case 1: t = op; break;
    	                case 4: _.label++; return { value: op[1], done: false };
    	                case 5: _.label++; y = op[1]; op = [0]; continue;
    	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
    	                default:
    	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
    	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
    	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
    	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
    	                    if (t[2]) _.ops.pop();
    	                    _.trys.pop(); continue;
    	            }
    	            op = body.call(thisArg, _);
    	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
    	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    	    }
    	};
    	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    	    return (mod && mod.__esModule) ? mod : { "default": mod };
    	};
    	Object.defineProperty(thirdparty, "__esModule", { value: true });
    	thirdparty.fromQuorumWallet = thirdparty.fromKryptoKit = thirdparty.fromEtherCamp = thirdparty.fromEtherWallet = void 0;
    	var crypto = __importStar(require$$0$3);
    	var ethereumjs_util_1 = dist_browser$1;
    	var scrypt_js_1 = scryptExports;
    	var index_1 = __importDefault(requireDist_browser());
    	var utf8$1 = utf8;
    	var aesjs = aesJsExports;
    	function runCipherBuffer(cipher, data) {
    	    return Buffer$g.concat([cipher.update(data), cipher.final()]);
    	}
    	var evpKdfDefaults = {
    	    count: 1,
    	    keysize: 16,
    	    ivsize: 16,
    	    digest: 'md5',
    	};
    	function mergeEvpKdfOptsWithDefaults(opts) {
    	    if (!opts) {
    	        return evpKdfDefaults;
    	    }
    	    return {
    	        count: opts.count || evpKdfDefaults.count,
    	        keysize: opts.keysize || evpKdfDefaults.keysize,
    	        ivsize: opts.ivsize || evpKdfDefaults.ivsize,
    	        digest: opts.digest || evpKdfDefaults.digest,
    	    };
    	}
    	/*
    	 * opts:
    	 * - digest - digest algorithm, defaults to md5
    	 * - count - hash iterations
    	 * - keysize - desired key size
    	 * - ivsize - desired IV size
    	 *
    	 * Algorithm form https://www.openssl.org/docs/manmaster/crypto/EVP_BytesToKey.html
    	 *
    	 * FIXME: not optimised at all
    	 */
    	function evp_kdf(data, salt, opts) {
    	    var params = mergeEvpKdfOptsWithDefaults(opts);
    	    // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`
    	    function iter(block) {
    	        var hash = crypto.createHash(params.digest);
    	        hash.update(block);
    	        hash.update(data);
    	        hash.update(salt);
    	        block = hash.digest();
    	        for (var i_1 = 1, len = params.count; i_1 < len; i_1++) {
    	            hash = crypto.createHash(params.digest);
    	            hash.update(block);
    	            block = hash.digest();
    	        }
    	        return block;
    	    }
    	    var ret = [];
    	    var i = 0;
    	    while (Buffer$g.concat(ret).length < params.keysize + params.ivsize) {
    	        ret[i] = iter(i === 0 ? Buffer$g.alloc(0) : ret[i - 1]);
    	        i++;
    	    }
    	    var tmp = Buffer$g.concat(ret);
    	    return {
    	        key: tmp.slice(0, params.keysize),
    	        iv: tmp.slice(params.keysize, params.keysize + params.ivsize),
    	    };
    	}
    	// http://stackoverflow.com/questions/25288311/cryptojs-aes-pattern-always-ends-with
    	function decodeCryptojsSalt(input) {
    	    var ciphertext = Buffer$g.from(input, 'base64');
    	    if (ciphertext.slice(0, 8).toString() === 'Salted__') {
    	        return {
    	            salt: ciphertext.slice(8, 16),
    	            ciphertext: ciphertext.slice(16),
    	        };
    	    }
    	    return { ciphertext: ciphertext };
    	}
    	/*
    	 * Third Party API: Import a wallet generated by EtherWallet
    	 * This wallet format is created by https://github.com/SilentCicero/ethereumjs-accounts
    	 * and used on https://www.myetherwallet.com/
    	 */
    	function fromEtherWallet(input, password) {
    	    var json = typeof input === 'object' ? input : JSON.parse(input);
    	    var privateKey;
    	    if (!json.locked) {
    	        if (json.private.length !== 64) {
    	            throw new Error('Invalid private key length');
    	        }
    	        privateKey = Buffer$g.from(json.private, 'hex');
    	    }
    	    else {
    	        if (typeof password !== 'string') {
    	            throw new Error('Password required');
    	        }
    	        if (password.length < 7) {
    	            throw new Error('Password must be at least 7 characters');
    	        }
    	        // the "encrypted" version has the low 4 bytes
    	        // of the hash of the address appended
    	        var hash = json.encrypted ? json.private.slice(0, 128) : json.private;
    	        // decode openssl ciphertext + salt encoding
    	        var cipher = decodeCryptojsSalt(hash);
    	        if (!cipher.salt) {
    	            throw new Error('Unsupported EtherWallet key format');
    	        }
    	        // derive key/iv using OpenSSL EVP as implemented in CryptoJS
    	        var evp = evp_kdf(Buffer$g.from(password), cipher.salt, { keysize: 32, ivsize: 16 });
    	        var decipher = crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);
    	        privateKey = runCipherBuffer(decipher, Buffer$g.from(cipher.ciphertext));
    	        // NOTE: yes, they've run it through UTF8
    	        privateKey = Buffer$g.from(utf8$1.decode(privateKey.toString()), 'hex');
    	    }
    	    var wallet = new index_1.default(privateKey);
    	    if (wallet.getAddressString() !== json.address) {
    	        throw new Error('Invalid private key or address');
    	    }
    	    return wallet;
    	}
    	thirdparty.fromEtherWallet = fromEtherWallet;
    	/**
    	 * Third Party API: Import a brain wallet used by Ether.Camp
    	 */
    	function fromEtherCamp(passphrase) {
    	    return new index_1.default((0, ethereumjs_util_1.keccak256)(Buffer$g.from(passphrase)));
    	}
    	thirdparty.fromEtherCamp = fromEtherCamp;
    	/**
    	 * Third Party API: Import a wallet from a KryptoKit seed
    	 */
    	function fromKryptoKit(entropy, password) {
    	    return __awaiter(this, void 0, void 0, function () {
    	        function kryptoKitBrokenScryptSeed(buf) {
    	            // js-scrypt calls `Buffer.from(String(salt), 'utf8')` on the seed even though it is a buffer
    	            //
    	            // The `buffer`` implementation used does the below transformation (doesn't matches the current version):
    	            // https://github.com/feross/buffer/blob/67c61181b938b17d10dbfc0a545f713b8bd59de8/index.js
    	            function decodeUtf8Char(str) {
    	                try {
    	                    return decodeURIComponent(str);
    	                }
    	                catch (err) {
    	                    return String.fromCharCode(0xfffd); // UTF 8 invalid char
    	                }
    	            }
    	            var res = '', tmp = '';
    	            for (var i = 0; i < buf.length; i++) {
    	                if (buf[i] <= 0x7f) {
    	                    res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
    	                    tmp = '';
    	                }
    	                else {
    	                    tmp += '%' + buf[i].toString(16);
    	                }
    	            }
    	            return Buffer$g.from(res + decodeUtf8Char(tmp));
    	        }
    	        var type, privateKey, encryptedSeed, checksum, salt, aesKey, decipher;
    	        return __generator(this, function (_a) {
    	            switch (_a.label) {
    	                case 0:
    	                    if (entropy[0] === '#') {
    	                        entropy = entropy.slice(1);
    	                    }
    	                    type = entropy[0];
    	                    entropy = entropy.slice(1);
    	                    if (!(type === 'd')) return [3 /*break*/, 1];
    	                    privateKey = (0, ethereumjs_util_1.sha256)((0, ethereumjs_util_1.toBuffer)(entropy));
    	                    return [3 /*break*/, 4];
    	                case 1:
    	                    if (!(type === 'q')) return [3 /*break*/, 3];
    	                    if (typeof password !== 'string') {
    	                        throw new Error('Password required');
    	                    }
    	                    encryptedSeed = (0, ethereumjs_util_1.sha256)(Buffer$g.from(entropy.slice(0, 30)));
    	                    checksum = entropy.slice(30, 46);
    	                    salt = kryptoKitBrokenScryptSeed(encryptedSeed);
    	                    return [4 /*yield*/, (0, scrypt_js_1.scrypt)(Buffer$g.from(password, 'utf8'), salt, 16384, 8, 1, 32)
    	                        /* FIXME: try to use `crypto` instead of `aesjs`
    	                    
    	                        // NOTE: ECB doesn't use the IV, so it can be anything
    	                        var decipher = crypto.createDecipheriv("aes-256-ecb", aesKey, Buffer.from(0))
    	                    
    	                        // FIXME: this is a clear abuse, but seems to match how ECB in aesjs works
    	                        privKey = Buffer.concat([
    	                          decipher.update(encryptedSeed).slice(0, 16),
    	                          decipher.update(encryptedSeed).slice(0, 16),
    	                        ])
    	                        */
    	                    ];
    	                case 2:
    	                    aesKey = _a.sent();
    	                    decipher = new aesjs.ModeOfOperation.ecb(aesKey);
    	                    /* decrypt returns an Uint8Array, perhaps there is a better way to concatenate */
    	                    privateKey = Buffer$g.concat([
    	                        Buffer$g.from(decipher.decrypt(encryptedSeed.slice(0, 16))),
    	                        Buffer$g.from(decipher.decrypt(encryptedSeed.slice(16, 32))),
    	                    ]);
    	                    if (checksum.length > 0) {
    	                        if (checksum !== (0, ethereumjs_util_1.sha256)((0, ethereumjs_util_1.sha256)(privateKey)).slice(0, 8).toString('hex')) {
    	                            throw new Error('Failed to decrypt input - possibly invalid passphrase');
    	                        }
    	                    }
    	                    return [3 /*break*/, 4];
    	                case 3: throw new Error('Unsupported or invalid entropy type');
    	                case 4: return [2 /*return*/, new index_1.default(privateKey)];
    	            }
    	        });
    	    });
    	}
    	thirdparty.fromKryptoKit = fromKryptoKit;
    	/**
    	 * Third Party API: Import a brain wallet used by Quorum Wallet
    	 */
    	function fromQuorumWallet(passphrase, userid) {
    	    if (passphrase.length < 10) {
    	        throw new Error('Passphrase must be at least 10 characters');
    	    }
    	    if (userid.length < 10) {
    	        throw new Error('User id must be at least 10 characters');
    	    }
    	    var merged = passphrase + userid;
    	    var seed = crypto.pbkdf2Sync(merged, merged, 2000, 32, 'sha256');
    	    return new index_1.default(seed);
    	}
    	thirdparty.fromQuorumWallet = fromQuorumWallet;
    	var Thirdparty = {
    	    fromEtherWallet: fromEtherWallet,
    	    fromEtherCamp: fromEtherCamp,
    	    fromKryptoKit: fromKryptoKit,
    	    fromQuorumWallet: fromQuorumWallet,
    	};
    	thirdparty.default = Thirdparty;
    	
    	return thirdparty;
    }

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

    function validate(uuid) {
      return typeof uuid === 'string' && REGEX.test(uuid);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    var byteToHex = [];

    for (var i$2 = 0; i$2 < 256; ++i$2) {
      byteToHex.push((i$2 + 0x100).toString(16).substr(1));
    }

    function stringify(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!validate(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }

      return uuid;
    }

    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    var _nodeId;

    var _clockseq; // Previous uuid creation time


    var _lastMSecs = 0;
    var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || new Array(16);
      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189

      if (node == null || clockseq == null) {
        var seedBytes = options.random || (options.rng || rng)();

        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }

        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


      var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock

      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval


      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      } // Per 4.2.1.2 Throw error if too many uuids are requested


      if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

      msecs += 12219292800000; // `time_low`

      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff; // `time_mid`

      var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff; // `time_high_and_version`

      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

      b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

      b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

      b[i++] = clockseq & 0xff; // `node`

      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf || stringify(b);
    }

    function parse(uuid) {
      if (!validate(uuid)) {
        throw TypeError('Invalid UUID');
      }

      var v;
      var arr = new Uint8Array(16); // Parse ########-....-....-....-............

      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 0xff;
      arr[2] = v >>> 8 & 0xff;
      arr[3] = v & 0xff; // Parse ........-####-....-....-............

      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 0xff; // Parse ........-....-####-....-............

      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 0xff; // Parse ........-....-....-####-............

      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 0xff; // Parse ........-....-....-....-############
      // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
      arr[11] = v / 0x100000000 & 0xff;
      arr[12] = v >>> 24 & 0xff;
      arr[13] = v >>> 16 & 0xff;
      arr[14] = v >>> 8 & 0xff;
      arr[15] = v & 0xff;
      return arr;
    }

    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str)); // UTF8 escape

      var bytes = [];

      for (var i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }

      return bytes;
    }

    var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    var URL$1 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
    function v35 (name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === 'string') {
          value = stringToBytes(value);
        }

        if (typeof namespace === 'string') {
          namespace = parse(namespace);
        }

        if (namespace.length !== 16) {
          throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`


        var bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;

        if (buf) {
          offset = offset || 0;

          for (var i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }

          return buf;
        }

        return stringify(bytes);
      } // Function#name is not settable on some platforms (#270)


      try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
      } catch (err) {} // For CommonJS default export support


      generateUUID.DNS = DNS;
      generateUUID.URL = URL$1;
      return generateUUID;
    }

    /*
     * Browser-compatible JavaScript MD5
     *
     * Modification of JavaScript MD5
     * https://github.com/blueimp/JavaScript-MD5
     *
     * Copyright 2011, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * https://opensource.org/licenses/MIT
     *
     * Based on
     * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
     * Digest Algorithm, as defined in RFC 1321.
     * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for more info.
     */
    function md5(bytes) {
      if (typeof bytes === 'string') {
        var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

        bytes = new Uint8Array(msg.length);

        for (var i = 0; i < msg.length; ++i) {
          bytes[i] = msg.charCodeAt(i);
        }
      }

      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    /*
     * Convert an array of little-endian words to an array of bytes
     */


    function md5ToHexEncodedArray(input) {
      var output = [];
      var length32 = input.length * 32;
      var hexTab = '0123456789abcdef';

      for (var i = 0; i < length32; i += 8) {
        var x = input[i >> 5] >>> i % 32 & 0xff;
        var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
        output.push(hex);
      }

      return output;
    }
    /**
     * Calculate output length with padding and bit length
     */


    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    /*
     * Calculate the MD5 of an array of little-endian words, and a bit length.
     */


    function wordsToMd5(x, len) {
      /* append padding */
      x[len >> 5] |= 0x80 << len % 32;
      x[getOutputLength(len) - 1] = len;
      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;

      for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }

      return [a, b, c, d];
    }
    /*
     * Convert an array bytes to an array of little-endian words
     * Characters >255 have their high-byte silently ignored.
     */


    function bytesToWords(input) {
      if (input.length === 0) {
        return [];
      }

      var length8 = input.length * 8;
      var output = new Uint32Array(getOutputLength(length8));

      for (var i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
      }

      return output;
    }
    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     */


    function safeAdd(x, y) {
      var lsw = (x & 0xffff) + (y & 0xffff);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 0xffff;
    }
    /*
     * Bitwise rotate a 32-bit number to the left.
     */


    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    /*
     * These functions implement the four basic operations the algorithm uses.
     */


    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }

    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }

    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }

    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }

    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }

    var v3 = v35('v3', 0x30, md5);
    var v3$1 = v3;

    function v4(options, buf, offset) {
      options = options || {};
      var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return stringify(rnds);
    }

    // Adapted from Chris Veness' SHA1 code at
    // http://www.movable-type.co.uk/scripts/sha1.html
    function f$1(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;

        case 1:
          return x ^ y ^ z;

        case 2:
          return x & y ^ x & z ^ y & z;

        case 3:
          return x ^ y ^ z;
      }
    }

    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }

    function sha1(bytes) {
      var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
      var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

      if (typeof bytes === 'string') {
        var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

        bytes = [];

        for (var i = 0; i < msg.length; ++i) {
          bytes.push(msg.charCodeAt(i));
        }
      } else if (!Array.isArray(bytes)) {
        // Convert Array-like to Array
        bytes = Array.prototype.slice.call(bytes);
      }

      bytes.push(0x80);
      var l = bytes.length / 4 + 2;
      var N = Math.ceil(l / 16);
      var M = new Array(N);

      for (var _i = 0; _i < N; ++_i) {
        var arr = new Uint32Array(16);

        for (var j = 0; j < 16; ++j) {
          arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
        }

        M[_i] = arr;
      }

      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

      for (var _i2 = 0; _i2 < N; ++_i2) {
        var W = new Uint32Array(80);

        for (var t = 0; t < 16; ++t) {
          W[t] = M[_i2][t];
        }

        for (var _t = 16; _t < 80; ++_t) {
          W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
        }

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];

        for (var _t2 = 0; _t2 < 80; ++_t2) {
          var s = Math.floor(_t2 / 20);
          var T = ROTL(a, 5) + f$1(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }

        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }

      return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
    }

    var v5 = v35('v5', 0x50, sha1);
    var v5$1 = v5;

    var nil = '00000000-0000-0000-0000-000000000000';

    function version(uuid) {
      if (!validate(uuid)) {
        throw TypeError('Invalid UUID');
      }

      return parseInt(uuid.substr(14, 1), 16);
    }

    var esmBrowser = /*#__PURE__*/Object.freeze({
        __proto__: null,
        NIL: nil,
        parse: parse,
        stringify: stringify,
        v1: v1,
        v3: v3$1,
        v4: v4,
        v5: v5$1,
        validate: validate,
        version: version
    });

    var require$$7 = /*@__PURE__*/getAugmentedNamespace(esmBrowser);

    var hasRequiredDist_browser;

    function requireDist_browser () {
    	if (hasRequiredDist_browser) return dist_browser$2;
    	hasRequiredDist_browser = 1;
    	(function (exports) {
    		var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
    		    __assign = Object.assign || function(t) {
    		        for (var s, i = 1, n = arguments.length; i < n; i++) {
    		            s = arguments[i];
    		            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
    		                t[p] = s[p];
    		        }
    		        return t;
    		    };
    		    return __assign.apply(this, arguments);
    		};
    		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    		    if (k2 === undefined) k2 = k;
    		    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    		}) : (function(o, m, k, k2) {
    		    if (k2 === undefined) k2 = k;
    		    o[k2] = m[k];
    		}));
    		var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    		    Object.defineProperty(o, "default", { enumerable: true, value: v });
    		}) : function(o, v) {
    		    o["default"] = v;
    		});
    		var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    		    if (mod && mod.__esModule) return mod;
    		    var result = {};
    		    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    		    __setModuleDefault(result, mod);
    		    return result;
    		};
    		var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    		    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    		    return new (P || (P = Promise))(function (resolve, reject) {
    		        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
    		        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
    		        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
    		        step((generator = generator.apply(thisArg, _arguments || [])).next());
    		    });
    		};
    		var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    		    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    		    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    		    function verb(n) { return function (v) { return step([n, v]); }; }
    		    function step(op) {
    		        if (f) throw new TypeError("Generator is already executing.");
    		        while (_) try {
    		            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
    		            if (y = 0, t) op = [op[0] & 2, t.value];
    		            switch (op[0]) {
    		                case 0: case 1: t = op; break;
    		                case 4: _.label++; return { value: op[1], done: false };
    		                case 5: _.label++; y = op[1]; op = [0]; continue;
    		                case 7: op = _.ops.pop(); _.trys.pop(); continue;
    		                default:
    		                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
    		                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
    		                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
    		                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
    		                    if (t[2]) _.ops.pop();
    		                    _.trys.pop(); continue;
    		            }
    		            op = body.call(thisArg, _);
    		        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
    		        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    		    }
    		};
    		var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    		    return (mod && mod.__esModule) ? mod : { "default": mod };
    		};
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.thirdparty = exports.hdkey = void 0;
    		var crypto = __importStar(require$$0$3);
    		var ethereumjs_util_1 = dist_browser$1;
    		var scrypt_js_1 = scryptExports;
    		var hdkey_1 = requireHdkey();
    		Object.defineProperty(exports, "hdkey", { enumerable: true, get: function () { return __importDefault(hdkey_1).default; } });
    		var thirdparty_1 = requireThirdparty();
    		Object.defineProperty(exports, "thirdparty", { enumerable: true, get: function () { return __importDefault(thirdparty_1).default; } });
    		var bs58check = bs58check$1;
    		var randomBytes = browserExports;
    		var uuidv4 = require$$7.v4;
    		function validateHexString(paramName, str, length) {
    		    if (str.toLowerCase().startsWith('0x')) {
    		        str = str.slice(2);
    		    }
    		    if (!str && !length) {
    		        return str;
    		    }
    		    if (length % 2) {
    		        throw new Error("Invalid length argument, must be an even number");
    		    }
    		    if (typeof length === 'number' && str.length !== length) {
    		        throw new Error("Invalid " + paramName + ", string must be " + length + " hex characters");
    		    }
    		    if (!/^([0-9a-f]{2})+$/i.test(str)) {
    		        var howMany = typeof length === 'number' ? length : 'empty or a non-zero even number of';
    		        throw new Error("Invalid " + paramName + ", string must be " + howMany + " hex characters");
    		    }
    		    return str;
    		}
    		function validateBuffer(paramName, buff, length) {
    		    if (!Buffer$g.isBuffer(buff)) {
    		        var howManyHex = typeof length === 'number' ? "" + length * 2 : 'empty or a non-zero even number of';
    		        var howManyBytes = typeof length === 'number' ? " (" + length + " bytes)" : '';
    		        throw new Error("Invalid " + paramName + ", must be a string (" + howManyHex + " hex characters) or buffer" + howManyBytes);
    		    }
    		    if (typeof length === 'number' && buff.length !== length) {
    		        throw new Error("Invalid " + paramName + ", buffer must be " + length + " bytes");
    		    }
    		    return buff;
    		}
    		function mergeToV3ParamsWithDefaults(params) {
    		    var v3Defaults = {
    		        cipher: 'aes-128-ctr',
    		        kdf: 'scrypt',
    		        salt: randomBytes(32),
    		        iv: randomBytes(16),
    		        uuid: randomBytes(16),
    		        dklen: 32,
    		        c: 262144,
    		        n: 262144,
    		        r: 8,
    		        p: 1,
    		    };
    		    if (!params) {
    		        return v3Defaults;
    		    }
    		    if (typeof params.salt === 'string') {
    		        params.salt = Buffer$g.from(validateHexString('salt', params.salt), 'hex');
    		    }
    		    if (typeof params.iv === 'string') {
    		        params.iv = Buffer$g.from(validateHexString('iv', params.iv, 32), 'hex');
    		    }
    		    if (typeof params.uuid === 'string') {
    		        params.uuid = Buffer$g.from(validateHexString('uuid', params.uuid, 32), 'hex');
    		    }
    		    if (params.salt) {
    		        validateBuffer('salt', params.salt);
    		    }
    		    if (params.iv) {
    		        validateBuffer('iv', params.iv, 16);
    		    }
    		    if (params.uuid) {
    		        validateBuffer('uuid', params.uuid, 16);
    		    }
    		    return __assign(__assign({}, v3Defaults), params);
    		}
    		function kdfParamsForPBKDF(opts) {
    		    return {
    		        dklen: opts.dklen,
    		        salt: opts.salt,
    		        c: opts.c,
    		        prf: 'hmac-sha256',
    		    };
    		}
    		function kdfParamsForScrypt(opts) {
    		    return {
    		        dklen: opts.dklen,
    		        salt: opts.salt,
    		        n: opts.n,
    		        r: opts.r,
    		        p: opts.p,
    		    };
    		}
    		// wallet implementation
    		var Wallet = /** @class */ (function () {
    		    function Wallet(privateKey, publicKey) {
    		        if (publicKey === void 0) { publicKey = undefined; }
    		        this.privateKey = privateKey;
    		        this.publicKey = publicKey;
    		        if (privateKey && publicKey) {
    		            throw new Error('Cannot supply both a private and a public key to the constructor');
    		        }
    		        if (privateKey && !(0, ethereumjs_util_1.isValidPrivate)(privateKey)) {
    		            throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');
    		        }
    		        if (publicKey && !(0, ethereumjs_util_1.isValidPublic)(publicKey)) {
    		            throw new Error('Invalid public key');
    		        }
    		    }
    		    // static methods
    		    /**
    		     * Create an instance based on a new random key.
    		     *
    		     * @param icapDirect setting this to `true` will generate an address suitable for the `ICAP Direct mode`
    		     */
    		    Wallet.generate = function (icapDirect) {
    		        if (icapDirect === void 0) { icapDirect = false; }
    		        if (icapDirect) {
    		            var max = new ethereumjs_util_1.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);
    		            while (true) {
    		                var privateKey = randomBytes(32);
    		                if (new ethereumjs_util_1.BN((0, ethereumjs_util_1.privateToAddress)(privateKey)).lte(max)) {
    		                    return new Wallet(privateKey);
    		                }
    		            }
    		        }
    		        else {
    		            return new Wallet(randomBytes(32));
    		        }
    		    };
    		    /**
    		     * Create an instance where the address is valid against the supplied pattern (**this will be very slow**)
    		     */
    		    Wallet.generateVanityAddress = function (pattern) {
    		        if (!(pattern instanceof RegExp)) {
    		            pattern = new RegExp(pattern);
    		        }
    		        while (true) {
    		            var privateKey = randomBytes(32);
    		            var address = (0, ethereumjs_util_1.privateToAddress)(privateKey);
    		            if (pattern.test(address.toString('hex'))) {
    		                return new Wallet(privateKey);
    		            }
    		        }
    		    };
    		    /**
    		     * Create an instance based on a public key (certain methods will not be available)
    		     *
    		     * This method only accepts uncompressed Ethereum-style public keys, unless
    		     * the `nonStrict` flag is set to true.
    		     */
    		    Wallet.fromPublicKey = function (publicKey, nonStrict) {
    		        if (nonStrict === void 0) { nonStrict = false; }
    		        if (nonStrict) {
    		            publicKey = (0, ethereumjs_util_1.importPublic)(publicKey);
    		        }
    		        return new Wallet(undefined, publicKey);
    		    };
    		    /**
    		     * Create an instance based on a BIP32 extended public key (xpub)
    		     */
    		    Wallet.fromExtendedPublicKey = function (extendedPublicKey) {
    		        if (extendedPublicKey.slice(0, 4) !== 'xpub') {
    		            throw new Error('Not an extended public key');
    		        }
    		        var publicKey = bs58check.decode(extendedPublicKey).slice(45);
    		        // Convert to an Ethereum public key
    		        return Wallet.fromPublicKey(publicKey, true);
    		    };
    		    /**
    		     * Create an instance based on a raw private key
    		     */
    		    Wallet.fromPrivateKey = function (privateKey) {
    		        return new Wallet(privateKey);
    		    };
    		    /**
    		     * Create an instance based on a BIP32 extended private key (xprv)
    		     */
    		    Wallet.fromExtendedPrivateKey = function (extendedPrivateKey) {
    		        if (extendedPrivateKey.slice(0, 4) !== 'xprv') {
    		            throw new Error('Not an extended private key');
    		        }
    		        var tmp = bs58check.decode(extendedPrivateKey);
    		        if (tmp[45] !== 0) {
    		            throw new Error('Invalid extended private key');
    		        }
    		        return Wallet.fromPrivateKey(tmp.slice(46));
    		    };
    		    /**
    		     * Import a wallet (Version 1 of the Ethereum wallet format).
    		     *
    		     * @param input A JSON serialized string, or an object representing V1 Keystore.
    		     * @param password The keystore password.
    		     */
    		    Wallet.fromV1 = function (input, password) {
    		        return __awaiter(this, void 0, void 0, function () {
    		            var json, kdfparams, derivedKey, ciphertext, mac, decipher, seed;
    		            return __generator(this, function (_a) {
    		                switch (_a.label) {
    		                    case 0:
    		                        json = typeof input === 'object' ? input : JSON.parse(input);
    		                        if (json.Version !== '1') {
    		                            throw new Error('Not a V1 Wallet');
    		                        }
    		                        if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {
    		                            throw new Error('Unsupported key derivation scheme');
    		                        }
    		                        kdfparams = json.Crypto.KeyHeader.KdfParams;
    		                        return [4 /*yield*/, (0, scrypt_js_1.scrypt)(Buffer$g.from(password), Buffer$g.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen)];
    		                    case 1:
    		                        derivedKey = _a.sent();
    		                        ciphertext = Buffer$g.from(json.Crypto.CipherText, 'hex');
    		                        mac = (0, ethereumjs_util_1.keccak256)(Buffer$g.concat([derivedKey.slice(16, 32), ciphertext]));
    		                        if (mac.toString('hex') !== json.Crypto.MAC) {
    		                            throw new Error('Key derivation failed - possibly wrong passphrase');
    		                        }
    		                        decipher = crypto.createDecipheriv('aes-128-cbc', (0, ethereumjs_util_1.keccak256)(derivedKey.slice(0, 16)).slice(0, 16), Buffer$g.from(json.Crypto.IV, 'hex'));
    		                        seed = runCipherBuffer(decipher, ciphertext);
    		                        return [2 /*return*/, new Wallet(seed)];
    		                }
    		            });
    		        });
    		    };
    		    /**
    		     * Import a wallet (Version 3 of the Ethereum wallet format). Set `nonStrict` true to accept files with mixed-caps.
    		     *
    		     * @param input A JSON serialized string, or an object representing V3 Keystore.
    		     * @param password The keystore password.
    		     */
    		    Wallet.fromV3 = function (input, password, nonStrict) {
    		        if (nonStrict === void 0) { nonStrict = false; }
    		        return __awaiter(this, void 0, void 0, function () {
    		            var json, derivedKey, kdfparams, ciphertext, mac, decipher, seed;
    		            return __generator(this, function (_a) {
    		                switch (_a.label) {
    		                    case 0:
    		                        json = typeof input === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);
    		                        if (json.version !== 3) {
    		                            throw new Error('Not a V3 wallet');
    		                        }
    		                        if (!(json.crypto.kdf === 'scrypt')) return [3 /*break*/, 2];
    		                        kdfparams = json.crypto.kdfparams;
    		                        return [4 /*yield*/, (0, scrypt_js_1.scrypt)(Buffer$g.from(password), Buffer$g.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen)];
    		                    case 1:
    		                        // FIXME: support progress reporting callback
    		                        derivedKey = _a.sent();
    		                        return [3 /*break*/, 3];
    		                    case 2:
    		                        if (json.crypto.kdf === 'pbkdf2') {
    		                            kdfparams = json.crypto.kdfparams;
    		                            if (kdfparams.prf !== 'hmac-sha256') {
    		                                throw new Error('Unsupported parameters to PBKDF2');
    		                            }
    		                            derivedKey = crypto.pbkdf2Sync(Buffer$g.from(password), Buffer$g.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
    		                        }
    		                        else {
    		                            throw new Error('Unsupported key derivation scheme');
    		                        }
    		                        _a.label = 3;
    		                    case 3:
    		                        ciphertext = Buffer$g.from(json.crypto.ciphertext, 'hex');
    		                        mac = (0, ethereumjs_util_1.keccak256)(Buffer$g.concat([Buffer$g.from(derivedKey.slice(16, 32)), ciphertext]));
    		                        if (mac.toString('hex') !== json.crypto.mac) {
    		                            throw new Error('Key derivation failed - possibly wrong passphrase');
    		                        }
    		                        decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer$g.from(json.crypto.cipherparams.iv, 'hex'));
    		                        seed = runCipherBuffer(decipher, ciphertext);
    		                        return [2 /*return*/, new Wallet(seed)];
    		                }
    		            });
    		        });
    		    };
    		    /*
    		     * Import an Ethereum Pre Sale wallet.
    		     * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py
    		     * JSON fields: encseed, ethaddr, btcaddr, email
    		     *
    		     * @param input A JSON serialized string, or an object representing EthSale Keystore.
    		     * @param password The keystore password.
    		     */
    		    Wallet.fromEthSale = function (input, password) {
    		        var json = typeof input === 'object' ? input : JSON.parse(input);
    		        var encseed = Buffer$g.from(json.encseed, 'hex');
    		        // key derivation
    		        var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);
    		        // seed decoding (IV is first 16 bytes)
    		        // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally
    		        //       see also http://stackoverflow.com/a/31614770/4964819
    		        var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));
    		        var seed = runCipherBuffer(decipher, encseed.slice(16));
    		        var wallet = new Wallet((0, ethereumjs_util_1.keccak256)(seed));
    		        if (wallet.getAddress().toString('hex') !== json.ethaddr) {
    		            throw new Error('Decoded key mismatch - possibly wrong passphrase');
    		        }
    		        return wallet;
    		    };
    		    Object.defineProperty(Wallet.prototype, "pubKey", {
    		        // private getters
    		        /**
    		         * Returns the wallet's public key.
    		         */
    		        get: function () {
    		            if (!keyExists(this.publicKey)) {
    		                this.publicKey = (0, ethereumjs_util_1.privateToPublic)(this.privateKey);
    		            }
    		            return this.publicKey;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    Object.defineProperty(Wallet.prototype, "privKey", {
    		        /**
    		         * Returns the wallet's private key.
    		         */
    		        get: function () {
    		            if (!keyExists(this.privateKey)) {
    		                throw new Error('This is a public key only wallet');
    		            }
    		            return this.privateKey;
    		        },
    		        enumerable: false,
    		        configurable: true
    		    });
    		    // public instance methods
    		    /**
    		     * Returns the wallet's private key.
    		     *
    		     */
    		    // tslint:disable-next-line
    		    Wallet.prototype.getPrivateKey = function () {
    		        return this.privKey;
    		    };
    		    Wallet.prototype.getPrivateKeyString = function () {
    		        return (0, ethereumjs_util_1.bufferToHex)(this.privKey);
    		    };
    		    /**
    		     * Returns the wallet's public key.
    		     */
    		    // tslint:disable-next-line
    		    Wallet.prototype.getPublicKey = function () {
    		        return this.pubKey;
    		    };
    		    /**
    		     * Returns the wallet's public key as a "0x" prefixed hex string
    		     */
    		    Wallet.prototype.getPublicKeyString = function () {
    		        return (0, ethereumjs_util_1.bufferToHex)(this.getPublicKey());
    		    };
    		    /**
    		     * Returns the wallet's address.
    		     */
    		    Wallet.prototype.getAddress = function () {
    		        return (0, ethereumjs_util_1.publicToAddress)(this.pubKey);
    		    };
    		    /**
    		     * Returns the wallet's address as a "0x" prefixed hex string
    		     */
    		    Wallet.prototype.getAddressString = function () {
    		        return (0, ethereumjs_util_1.bufferToHex)(this.getAddress());
    		    };
    		    /**
    		     * Returns the wallet's private key as a "0x" prefixed hex string checksummed
    		     * according to [EIP 55](https://github.com/ethereum/EIPs/issues/55).
    		     */
    		    Wallet.prototype.getChecksumAddressString = function () {
    		        return (0, ethereumjs_util_1.toChecksumAddress)(this.getAddressString());
    		    };
    		    /**
    		     * Returns an Etherem Version 3 Keystore Format object representing the wallet
    		     *
    		     * @param password The password used to encrypt the Keystore.
    		     * @param opts The options for the keystore. See [its spec](https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition) for more info.
    		     */
    		    Wallet.prototype.toV3 = function (password, opts) {
    		        return __awaiter(this, void 0, void 0, function () {
    		            var v3Params, kdfParams, derivedKey, _a, cipher, ciphertext, mac;
    		            return __generator(this, function (_b) {
    		                switch (_b.label) {
    		                    case 0:
    		                        if (!keyExists(this.privateKey)) {
    		                            throw new Error('This is a public key only wallet');
    		                        }
    		                        v3Params = mergeToV3ParamsWithDefaults(opts);
    		                        _a = v3Params.kdf;
    		                        switch (_a) {
    		                            case "pbkdf2" /* PBKDF */: return [3 /*break*/, 1];
    		                            case "scrypt" /* Scrypt */: return [3 /*break*/, 2];
    		                        }
    		                        return [3 /*break*/, 4];
    		                    case 1:
    		                        kdfParams = kdfParamsForPBKDF(v3Params);
    		                        derivedKey = crypto.pbkdf2Sync(Buffer$g.from(password), kdfParams.salt, kdfParams.c, kdfParams.dklen, 'sha256');
    		                        return [3 /*break*/, 5];
    		                    case 2:
    		                        kdfParams = kdfParamsForScrypt(v3Params);
    		                        return [4 /*yield*/, (0, scrypt_js_1.scrypt)(Buffer$g.from(password), kdfParams.salt, kdfParams.n, kdfParams.r, kdfParams.p, kdfParams.dklen)];
    		                    case 3:
    		                        // FIXME: support progress reporting callback
    		                        derivedKey = _b.sent();
    		                        return [3 /*break*/, 5];
    		                    case 4: throw new Error('Unsupported kdf');
    		                    case 5:
    		                        cipher = crypto.createCipheriv(v3Params.cipher, derivedKey.slice(0, 16), v3Params.iv);
    		                        if (!cipher) {
    		                            throw new Error('Unsupported cipher');
    		                        }
    		                        ciphertext = runCipherBuffer(cipher, this.privKey);
    		                        mac = (0, ethereumjs_util_1.keccak256)(Buffer$g.concat([Buffer$g.from(derivedKey.slice(16, 32)), Buffer$g.from(ciphertext)]));
    		                        return [2 /*return*/, {
    		                                version: 3,
    		                                id: uuidv4({ random: v3Params.uuid }),
    		                                // @ts-ignore - the official V3 keystore spec omits the address key
    		                                address: this.getAddress().toString('hex'),
    		                                crypto: {
    		                                    ciphertext: ciphertext.toString('hex'),
    		                                    cipherparams: { iv: v3Params.iv.toString('hex') },
    		                                    cipher: v3Params.cipher,
    		                                    kdf: v3Params.kdf,
    		                                    kdfparams: __assign(__assign({}, kdfParams), { salt: kdfParams.salt.toString('hex') }),
    		                                    mac: mac.toString('hex'),
    		                                },
    		                            }];
    		                }
    		            });
    		        });
    		    };
    		    /**
    		     * Return the suggested filename for V3 keystores.
    		     */
    		    Wallet.prototype.getV3Filename = function (timestamp) {
    		        /*
    		         * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting
    		         * is a pain in Javascript, everbody knows that. We could use moment.js,
    		         * but decide to do it manually in order to save space.
    		         *
    		         * toJSON() returns a pretty close version, so let's use it. It is not UTC though,
    		         * but does it really matter?
    		         *
    		         * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819
    		         *
    		         */
    		        var ts = timestamp ? new Date(timestamp) : new Date();
    		        return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');
    		    };
    		    Wallet.prototype.toV3String = function (password, opts) {
    		        return __awaiter(this, void 0, void 0, function () {
    		            var _a, _b;
    		            return __generator(this, function (_c) {
    		                switch (_c.label) {
    		                    case 0:
    		                        _b = (_a = JSON).stringify;
    		                        return [4 /*yield*/, this.toV3(password, opts)];
    		                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
    		                }
    		            });
    		        });
    		    };
    		    return Wallet;
    		}());
    		exports.default = Wallet;
    		// helpers
    		function runCipherBuffer(cipher, data) {
    		    return Buffer$g.concat([cipher.update(data), cipher.final()]);
    		}
    		function keyExists(k) {
    		    return k !== undefined && k !== null;
    		}
    		
    	} (dist_browser$2));
    	return dist_browser$2;
    }

    var axios$3 = {exports: {}};

    var bind$3 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    var bind$2 = bind$3;

    // utils is a library of generic helper functions non-specific to axios

    var toString$1 = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray$1(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined$1(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer$1(val) {
      return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer$1(val) {
      return toString$1.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData$1(val) {
      return toString$1.call(val) === '[object FormData]';
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView$1(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer$1(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString$1(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber$1(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject$1(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject$1(val) {
      if (toString$1.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate$1(val) {
      return toString$1.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile$1(val) {
      return toString$1.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob$1(val) {
      return toString$1.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction$1(val) {
      return toString$1.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream$1(val) {
      return isObject$1(val) && isFunction$1(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams$1(val) {
      return toString$1.call(val) === '[object URLSearchParams]';
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim$1(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv$1() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach$1(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray$1(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge$1(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject$1(result[key]) && isPlainObject$1(val)) {
          result[key] = merge$1(result[key], val);
        } else if (isPlainObject$1(val)) {
          result[key] = merge$1({}, val);
        } else if (isArray$1(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach$1(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend$1(a, b, thisArg) {
      forEach$1(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind$2(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM$1(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    var utils$a = {
      isArray: isArray$1,
      isArrayBuffer: isArrayBuffer$1,
      isBuffer: isBuffer$1,
      isFormData: isFormData$1,
      isArrayBufferView: isArrayBufferView$1,
      isString: isString$1,
      isNumber: isNumber$1,
      isObject: isObject$1,
      isPlainObject: isPlainObject$1,
      isUndefined: isUndefined$1,
      isDate: isDate$1,
      isFile: isFile$1,
      isBlob: isBlob$1,
      isFunction: isFunction$1,
      isStream: isStream$1,
      isURLSearchParams: isURLSearchParams$1,
      isStandardBrowserEnv: isStandardBrowserEnv$1,
      forEach: forEach$1,
      merge: merge$1,
      extend: extend$1,
      trim: trim$1,
      stripBOM: stripBOM$1
    };

    var utils$9 = utils$a;

    function encode$2(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL$2 = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils$9.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils$9.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils$9.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils$9.forEach(val, function parseValue(v) {
            if (utils$9.isDate(v)) {
              v = v.toISOString();
            } else if (utils$9.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode$2(key) + '=' + encode$2(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    var utils$8 = utils$a;

    function InterceptorManager$3() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager$3.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager$3.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager$3.prototype.forEach = function forEach(fn) {
      utils$8.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager$3;

    var utils$7 = utils$a;

    var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
      utils$7.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError$1 = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };

    var transitional = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    var createError;
    var hasRequiredCreateError;

    function requireCreateError () {
    	if (hasRequiredCreateError) return createError;
    	hasRequiredCreateError = 1;

    	var enhanceError = enhanceError$1;

    	/**
    	 * Create an Error with the specified message, config, error code, request and response.
    	 *
    	 * @param {string} message The error message.
    	 * @param {Object} config The config.
    	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
    	 * @param {Object} [request] The request.
    	 * @param {Object} [response] The response.
    	 * @returns {Error} The created error.
    	 */
    	createError = function createError(message, config, code, request, response) {
    	  var error = new Error(message);
    	  return enhanceError(error, config, code, request, response);
    	};
    	return createError;
    }

    var settle$1;
    var hasRequiredSettle;

    function requireSettle () {
    	if (hasRequiredSettle) return settle$1;
    	hasRequiredSettle = 1;

    	var createError = requireCreateError();

    	/**
    	 * Resolve or reject a Promise based on response status.
    	 *
    	 * @param {Function} resolve A function that resolves the promise.
    	 * @param {Function} reject A function that rejects the promise.
    	 * @param {object} response The response.
    	 */
    	settle$1 = function settle(resolve, reject, response) {
    	  var validateStatus = response.config.validateStatus;
    	  if (!response.status || !validateStatus || validateStatus(response.status)) {
    	    resolve(response);
    	  } else {
    	    reject(createError(
    	      'Request failed with status code ' + response.status,
    	      response.config,
    	      null,
    	      response.request,
    	      response
    	    ));
    	  }
    	};
    	return settle$1;
    }

    var cookies$1;
    var hasRequiredCookies;

    function requireCookies () {
    	if (hasRequiredCookies) return cookies$1;
    	hasRequiredCookies = 1;

    	var utils = utils$a;

    	cookies$1 = (
    	  utils.isStandardBrowserEnv() ?

    	  // Standard browser envs support document.cookie
    	    (function standardBrowserEnv() {
    	      return {
    	        write: function write(name, value, expires, path, domain, secure) {
    	          var cookie = [];
    	          cookie.push(name + '=' + encodeURIComponent(value));

    	          if (utils.isNumber(expires)) {
    	            cookie.push('expires=' + new Date(expires).toGMTString());
    	          }

    	          if (utils.isString(path)) {
    	            cookie.push('path=' + path);
    	          }

    	          if (utils.isString(domain)) {
    	            cookie.push('domain=' + domain);
    	          }

    	          if (secure === true) {
    	            cookie.push('secure');
    	          }

    	          document.cookie = cookie.join('; ');
    	        },

    	        read: function read(name) {
    	          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
    	          return (match ? decodeURIComponent(match[3]) : null);
    	        },

    	        remove: function remove(name) {
    	          this.write(name, '', Date.now() - 86400000);
    	        }
    	      };
    	    })() :

    	  // Non standard browser env (web workers, react-native) lack needed support.
    	    (function nonStandardBrowserEnv() {
    	      return {
    	        write: function write() {},
    	        read: function read() { return null; },
    	        remove: function remove() {}
    	      };
    	    })()
    	);
    	return cookies$1;
    }

    var isAbsoluteURL$1;
    var hasRequiredIsAbsoluteURL;

    function requireIsAbsoluteURL () {
    	if (hasRequiredIsAbsoluteURL) return isAbsoluteURL$1;
    	hasRequiredIsAbsoluteURL = 1;

    	/**
    	 * Determines whether the specified URL is absolute
    	 *
    	 * @param {string} url The URL to test
    	 * @returns {boolean} True if the specified URL is absolute, otherwise false
    	 */
    	isAbsoluteURL$1 = function isAbsoluteURL(url) {
    	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    	  // by any combination of letters, digits, plus, period, or hyphen.
    	  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    	};
    	return isAbsoluteURL$1;
    }

    var combineURLs$1;
    var hasRequiredCombineURLs;

    function requireCombineURLs () {
    	if (hasRequiredCombineURLs) return combineURLs$1;
    	hasRequiredCombineURLs = 1;

    	/**
    	 * Creates a new URL by combining the specified URLs
    	 *
    	 * @param {string} baseURL The base URL
    	 * @param {string} relativeURL The relative URL
    	 * @returns {string} The combined URL
    	 */
    	combineURLs$1 = function combineURLs(baseURL, relativeURL) {
    	  return relativeURL
    	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    	    : baseURL;
    	};
    	return combineURLs$1;
    }

    var buildFullPath$1;
    var hasRequiredBuildFullPath;

    function requireBuildFullPath () {
    	if (hasRequiredBuildFullPath) return buildFullPath$1;
    	hasRequiredBuildFullPath = 1;

    	var isAbsoluteURL = requireIsAbsoluteURL();
    	var combineURLs = requireCombineURLs();

    	/**
    	 * Creates a new URL by combining the baseURL with the requestedURL,
    	 * only when the requestedURL is not already an absolute URL.
    	 * If the requestURL is absolute, this function returns the requestedURL untouched.
    	 *
    	 * @param {string} baseURL The base URL
    	 * @param {string} requestedURL Absolute or relative URL to combine
    	 * @returns {string} The combined full path
    	 */
    	buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
    	  if (baseURL && !isAbsoluteURL(requestedURL)) {
    	    return combineURLs(baseURL, requestedURL);
    	  }
    	  return requestedURL;
    	};
    	return buildFullPath$1;
    }

    var parseHeaders$1;
    var hasRequiredParseHeaders;

    function requireParseHeaders () {
    	if (hasRequiredParseHeaders) return parseHeaders$1;
    	hasRequiredParseHeaders = 1;

    	var utils = utils$a;

    	// Headers whose duplicates are ignored by node
    	// c.f. https://nodejs.org/api/http.html#http_message_headers
    	var ignoreDuplicateOf = [
    	  'age', 'authorization', 'content-length', 'content-type', 'etag',
    	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    	  'referer', 'retry-after', 'user-agent'
    	];

    	/**
    	 * Parse headers into an object
    	 *
    	 * ```
    	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
    	 * Content-Type: application/json
    	 * Connection: keep-alive
    	 * Transfer-Encoding: chunked
    	 * ```
    	 *
    	 * @param {String} headers Headers needing to be parsed
    	 * @returns {Object} Headers parsed into an object
    	 */
    	parseHeaders$1 = function parseHeaders(headers) {
    	  var parsed = {};
    	  var key;
    	  var val;
    	  var i;

    	  if (!headers) { return parsed; }

    	  utils.forEach(headers.split('\n'), function parser(line) {
    	    i = line.indexOf(':');
    	    key = utils.trim(line.substr(0, i)).toLowerCase();
    	    val = utils.trim(line.substr(i + 1));

    	    if (key) {
    	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
    	        return;
    	      }
    	      if (key === 'set-cookie') {
    	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
    	      } else {
    	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    	      }
    	    }
    	  });

    	  return parsed;
    	};
    	return parseHeaders$1;
    }

    var isURLSameOrigin$1;
    var hasRequiredIsURLSameOrigin;

    function requireIsURLSameOrigin () {
    	if (hasRequiredIsURLSameOrigin) return isURLSameOrigin$1;
    	hasRequiredIsURLSameOrigin = 1;

    	var utils = utils$a;

    	isURLSameOrigin$1 = (
    	  utils.isStandardBrowserEnv() ?

    	  // Standard browser envs have full support of the APIs needed to test
    	  // whether the request URL is of the same origin as current location.
    	    (function standardBrowserEnv() {
    	      var msie = /(msie|trident)/i.test(navigator.userAgent);
    	      var urlParsingNode = document.createElement('a');
    	      var originURL;

    	      /**
    	    * Parse a URL to discover it's components
    	    *
    	    * @param {String} url The URL to be parsed
    	    * @returns {Object}
    	    */
    	      function resolveURL(url) {
    	        var href = url;

    	        if (msie) {
    	        // IE needs attribute set twice to normalize properties
    	          urlParsingNode.setAttribute('href', href);
    	          href = urlParsingNode.href;
    	        }

    	        urlParsingNode.setAttribute('href', href);

    	        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    	        return {
    	          href: urlParsingNode.href,
    	          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    	          host: urlParsingNode.host,
    	          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    	          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    	          hostname: urlParsingNode.hostname,
    	          port: urlParsingNode.port,
    	          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
    	            urlParsingNode.pathname :
    	            '/' + urlParsingNode.pathname
    	        };
    	      }

    	      originURL = resolveURL(window.location.href);

    	      /**
    	    * Determine if a URL shares the same origin as the current location
    	    *
    	    * @param {String} requestURL The URL to test
    	    * @returns {boolean} True if URL shares the same origin, otherwise false
    	    */
    	      return function isURLSameOrigin(requestURL) {
    	        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
    	        return (parsed.protocol === originURL.protocol &&
    	            parsed.host === originURL.host);
    	      };
    	    })() :

    	  // Non standard browser envs (web workers, react-native) lack needed support.
    	    (function nonStandardBrowserEnv() {
    	      return function isURLSameOrigin() {
    	        return true;
    	      };
    	    })()
    	);
    	return isURLSameOrigin$1;
    }

    var Cancel_1;
    var hasRequiredCancel;

    function requireCancel () {
    	if (hasRequiredCancel) return Cancel_1;
    	hasRequiredCancel = 1;

    	/**
    	 * A `Cancel` is an object that is thrown when an operation is canceled.
    	 *
    	 * @class
    	 * @param {string=} message The message.
    	 */
    	function Cancel(message) {
    	  this.message = message;
    	}

    	Cancel.prototype.toString = function toString() {
    	  return 'Cancel' + (this.message ? ': ' + this.message : '');
    	};

    	Cancel.prototype.__CANCEL__ = true;

    	Cancel_1 = Cancel;
    	return Cancel_1;
    }

    var xhr;
    var hasRequiredXhr;

    function requireXhr () {
    	if (hasRequiredXhr) return xhr;
    	hasRequiredXhr = 1;

    	var utils = utils$a;
    	var settle = requireSettle();
    	var cookies = requireCookies();
    	var buildURL = buildURL$2;
    	var buildFullPath = requireBuildFullPath();
    	var parseHeaders = requireParseHeaders();
    	var isURLSameOrigin = requireIsURLSameOrigin();
    	var createError = requireCreateError();
    	var transitionalDefaults = transitional;
    	var Cancel = requireCancel();

    	xhr = function xhrAdapter(config) {
    	  return new Promise(function dispatchXhrRequest(resolve, reject) {
    	    var requestData = config.data;
    	    var requestHeaders = config.headers;
    	    var responseType = config.responseType;
    	    var onCanceled;
    	    function done() {
    	      if (config.cancelToken) {
    	        config.cancelToken.unsubscribe(onCanceled);
    	      }

    	      if (config.signal) {
    	        config.signal.removeEventListener('abort', onCanceled);
    	      }
    	    }

    	    if (utils.isFormData(requestData)) {
    	      delete requestHeaders['Content-Type']; // Let the browser set it
    	    }

    	    var request = new XMLHttpRequest();

    	    // HTTP basic authentication
    	    if (config.auth) {
    	      var username = config.auth.username || '';
    	      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
    	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    	    }

    	    var fullPath = buildFullPath(config.baseURL, config.url);
    	    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    	    // Set the request timeout in MS
    	    request.timeout = config.timeout;

    	    function onloadend() {
    	      if (!request) {
    	        return;
    	      }
    	      // Prepare the response
    	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
    	      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
    	        request.responseText : request.response;
    	      var response = {
    	        data: responseData,
    	        status: request.status,
    	        statusText: request.statusText,
    	        headers: responseHeaders,
    	        config: config,
    	        request: request
    	      };

    	      settle(function _resolve(value) {
    	        resolve(value);
    	        done();
    	      }, function _reject(err) {
    	        reject(err);
    	        done();
    	      }, response);

    	      // Clean up request
    	      request = null;
    	    }

    	    if ('onloadend' in request) {
    	      // Use onloadend if available
    	      request.onloadend = onloadend;
    	    } else {
    	      // Listen for ready state to emulate onloadend
    	      request.onreadystatechange = function handleLoad() {
    	        if (!request || request.readyState !== 4) {
    	          return;
    	        }

    	        // The request errored out and we didn't get a response, this will be
    	        // handled by onerror instead
    	        // With one exception: request that using file: protocol, most browsers
    	        // will return status as 0 even though it's a successful request
    	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
    	          return;
    	        }
    	        // readystate handler is calling before onerror or ontimeout handlers,
    	        // so we should call onloadend on the next 'tick'
    	        setTimeout(onloadend);
    	      };
    	    }

    	    // Handle browser request cancellation (as opposed to a manual cancellation)
    	    request.onabort = function handleAbort() {
    	      if (!request) {
    	        return;
    	      }

    	      reject(createError('Request aborted', config, 'ECONNABORTED', request));

    	      // Clean up request
    	      request = null;
    	    };

    	    // Handle low level network errors
    	    request.onerror = function handleError() {
    	      // Real errors are hidden from us by the browser
    	      // onerror should only fire if it's a network error
    	      reject(createError('Network Error', config, null, request));

    	      // Clean up request
    	      request = null;
    	    };

    	    // Handle timeout
    	    request.ontimeout = function handleTimeout() {
    	      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
    	      var transitional = config.transitional || transitionalDefaults;
    	      if (config.timeoutErrorMessage) {
    	        timeoutErrorMessage = config.timeoutErrorMessage;
    	      }
    	      reject(createError(
    	        timeoutErrorMessage,
    	        config,
    	        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
    	        request));

    	      // Clean up request
    	      request = null;
    	    };

    	    // Add xsrf header
    	    // This is only done if running in a standard browser environment.
    	    // Specifically not if we're in a web worker, or react-native.
    	    if (utils.isStandardBrowserEnv()) {
    	      // Add xsrf header
    	      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
    	        cookies.read(config.xsrfCookieName) :
    	        undefined;

    	      if (xsrfValue) {
    	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
    	      }
    	    }

    	    // Add headers to the request
    	    if ('setRequestHeader' in request) {
    	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
    	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
    	          // Remove Content-Type if data is undefined
    	          delete requestHeaders[key];
    	        } else {
    	          // Otherwise add header to the request
    	          request.setRequestHeader(key, val);
    	        }
    	      });
    	    }

    	    // Add withCredentials to request if needed
    	    if (!utils.isUndefined(config.withCredentials)) {
    	      request.withCredentials = !!config.withCredentials;
    	    }

    	    // Add responseType to request if needed
    	    if (responseType && responseType !== 'json') {
    	      request.responseType = config.responseType;
    	    }

    	    // Handle progress if needed
    	    if (typeof config.onDownloadProgress === 'function') {
    	      request.addEventListener('progress', config.onDownloadProgress);
    	    }

    	    // Not all browsers support upload events
    	    if (typeof config.onUploadProgress === 'function' && request.upload) {
    	      request.upload.addEventListener('progress', config.onUploadProgress);
    	    }

    	    if (config.cancelToken || config.signal) {
    	      // Handle cancellation
    	      // eslint-disable-next-line func-names
    	      onCanceled = function(cancel) {
    	        if (!request) {
    	          return;
    	        }
    	        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
    	        request.abort();
    	        request = null;
    	      };

    	      config.cancelToken && config.cancelToken.subscribe(onCanceled);
    	      if (config.signal) {
    	        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
    	      }
    	    }

    	    if (!requestData) {
    	      requestData = null;
    	    }

    	    // Send the request
    	    request.send(requestData);
    	  });
    	};
    	return xhr;
    }

    var utils$6 = utils$a;
    var normalizeHeaderName = normalizeHeaderName$1;
    var enhanceError = enhanceError$1;
    var transitionalDefaults$1 = transitional;

    var DEFAULT_CONTENT_TYPE$1 = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils$6.isUndefined(headers) && utils$6.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = requireXhr();
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = requireXhr();
      }
      return adapter;
    }

    function stringifySafely$1(rawValue, parser, encoder) {
      if (utils$6.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$6.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults$5 = {

      transitional: transitionalDefaults$1,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils$6.isFormData(data) ||
          utils$6.isArrayBuffer(data) ||
          utils$6.isBuffer(data) ||
          utils$6.isStream(data) ||
          utils$6.isFile(data) ||
          utils$6.isBlob(data)
        ) {
          return data;
        }
        if (utils$6.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$6.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils$6.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely$1(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults$5.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils$6.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw enhanceError(e, this, 'E_JSON_PARSE');
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils$6.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults$5.headers[method] = {};
    });

    utils$6.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults$5.headers[method] = utils$6.merge(DEFAULT_CONTENT_TYPE$1);
    });

    var defaults_1 = defaults$5;

    var utils$5 = utils$a;
    var defaults$4 = defaults_1;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData$2 = function transformData(data, headers, fns) {
      var context = this || defaults$4;
      /*eslint no-param-reassign:0*/
      utils$5.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel$2;
    var hasRequiredIsCancel;

    function requireIsCancel () {
    	if (hasRequiredIsCancel) return isCancel$2;
    	hasRequiredIsCancel = 1;

    	isCancel$2 = function isCancel(value) {
    	  return !!(value && value.__CANCEL__);
    	};
    	return isCancel$2;
    }

    var utils$4 = utils$a;
    var transformData$1 = transformData$2;
    var isCancel$1 = requireIsCancel();
    var defaults$3 = defaults_1;
    var Cancel = requireCancel();

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested$1(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new Cancel('canceled');
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest$2 = function dispatchRequest(config) {
      throwIfCancellationRequested$1(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData$1.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils$4.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils$4.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults$3.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested$1(config);

        // Transform response data
        response.data = transformData$1.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel$1(reason)) {
          throwIfCancellationRequested$1(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData$1.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    var utils$3 = utils$a;

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig$3 = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source)) {
          return utils$3.merge(target, source);
        } else if (utils$3.isPlainObject(source)) {
          return utils$3.merge({}, source);
        } else if (utils$3.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils$3.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils$3.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils$3.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils$3.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils$3.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils$3.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils$3.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var data;
    var hasRequiredData;

    function requireData () {
    	if (hasRequiredData) return data;
    	hasRequiredData = 1;
    	data = {
    	  "version": "0.26.1"
    	};
    	return data;
    }

    var VERSION$1 = requireData().version;

    var validators$3 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$3[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings$1 = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$3.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
        }

        if (version && !deprecatedWarnings$1[opt]) {
          deprecatedWarnings$1[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions$1(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new TypeError('options must be an object');
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError('option ' + opt + ' must be ' + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error('Unknown option ' + opt);
        }
      }
    }

    var validator$2 = {
      assertOptions: assertOptions$1,
      validators: validators$3
    };

    var utils$2 = utils$a;
    var buildURL$1 = buildURL$2;
    var InterceptorManager$2 = InterceptorManager_1;
    var dispatchRequest$1 = dispatchRequest$2;
    var mergeConfig$2 = mergeConfig$3;
    var validator$1 = validator$2;

    var validators$2 = validator$1.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios$3(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager$2(),
        response: new InterceptorManager$2()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios$3.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig$2(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator$1.assertOptions(transitional, {
          silentJSONParsing: validators$2.transitional(validators$2.boolean),
          forcedJSONParsing: validators$2.transitional(validators$2.boolean),
          clarifyTimeoutError: validators$2.transitional(validators$2.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest$1, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest$1(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios$3.prototype.getUri = function getUri(config) {
      config = mergeConfig$2(this.defaults, config);
      return buildURL$1(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils$2.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios$3.prototype[method] = function(url, config) {
        return this.request(mergeConfig$2(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils$2.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios$3.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig$2(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1 = Axios$3;

    var CancelToken_1;
    var hasRequiredCancelToken;

    function requireCancelToken () {
    	if (hasRequiredCancelToken) return CancelToken_1;
    	hasRequiredCancelToken = 1;

    	var Cancel = requireCancel();

    	/**
    	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
    	 *
    	 * @class
    	 * @param {Function} executor The executor function.
    	 */
    	function CancelToken(executor) {
    	  if (typeof executor !== 'function') {
    	    throw new TypeError('executor must be a function.');
    	  }

    	  var resolvePromise;

    	  this.promise = new Promise(function promiseExecutor(resolve) {
    	    resolvePromise = resolve;
    	  });

    	  var token = this;

    	  // eslint-disable-next-line func-names
    	  this.promise.then(function(cancel) {
    	    if (!token._listeners) return;

    	    var i;
    	    var l = token._listeners.length;

    	    for (i = 0; i < l; i++) {
    	      token._listeners[i](cancel);
    	    }
    	    token._listeners = null;
    	  });

    	  // eslint-disable-next-line func-names
    	  this.promise.then = function(onfulfilled) {
    	    var _resolve;
    	    // eslint-disable-next-line func-names
    	    var promise = new Promise(function(resolve) {
    	      token.subscribe(resolve);
    	      _resolve = resolve;
    	    }).then(onfulfilled);

    	    promise.cancel = function reject() {
    	      token.unsubscribe(_resolve);
    	    };

    	    return promise;
    	  };

    	  executor(function cancel(message) {
    	    if (token.reason) {
    	      // Cancellation has already been requested
    	      return;
    	    }

    	    token.reason = new Cancel(message);
    	    resolvePromise(token.reason);
    	  });
    	}

    	/**
    	 * Throws a `Cancel` if cancellation has been requested.
    	 */
    	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    	  if (this.reason) {
    	    throw this.reason;
    	  }
    	};

    	/**
    	 * Subscribe to the cancel signal
    	 */

    	CancelToken.prototype.subscribe = function subscribe(listener) {
    	  if (this.reason) {
    	    listener(this.reason);
    	    return;
    	  }

    	  if (this._listeners) {
    	    this._listeners.push(listener);
    	  } else {
    	    this._listeners = [listener];
    	  }
    	};

    	/**
    	 * Unsubscribe from the cancel signal
    	 */

    	CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    	  if (!this._listeners) {
    	    return;
    	  }
    	  var index = this._listeners.indexOf(listener);
    	  if (index !== -1) {
    	    this._listeners.splice(index, 1);
    	  }
    	};

    	/**
    	 * Returns an object that contains a new `CancelToken` and a function that, when called,
    	 * cancels the `CancelToken`.
    	 */
    	CancelToken.source = function source() {
    	  var cancel;
    	  var token = new CancelToken(function executor(c) {
    	    cancel = c;
    	  });
    	  return {
    	    token: token,
    	    cancel: cancel
    	  };
    	};

    	CancelToken_1 = CancelToken;
    	return CancelToken_1;
    }

    var spread$1;
    var hasRequiredSpread;

    function requireSpread () {
    	if (hasRequiredSpread) return spread$1;
    	hasRequiredSpread = 1;

    	/**
    	 * Syntactic sugar for invoking a function and expanding an array for arguments.
    	 *
    	 * Common use case would be to use `Function.prototype.apply`.
    	 *
    	 *  ```js
    	 *  function f(x, y, z) {}
    	 *  var args = [1, 2, 3];
    	 *  f.apply(null, args);
    	 *  ```
    	 *
    	 * With `spread` this example can be re-written.
    	 *
    	 *  ```js
    	 *  spread(function(x, y, z) {})([1, 2, 3]);
    	 *  ```
    	 *
    	 * @param {Function} callback
    	 * @returns {Function}
    	 */
    	spread$1 = function spread(callback) {
    	  return function wrap(arr) {
    	    return callback.apply(null, arr);
    	  };
    	};
    	return spread$1;
    }

    var isAxiosError$1;
    var hasRequiredIsAxiosError;

    function requireIsAxiosError () {
    	if (hasRequiredIsAxiosError) return isAxiosError$1;
    	hasRequiredIsAxiosError = 1;

    	var utils = utils$a;

    	/**
    	 * Determines whether the payload is an error thrown by Axios
    	 *
    	 * @param {*} payload The value to test
    	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
    	 */
    	isAxiosError$1 = function isAxiosError(payload) {
    	  return utils.isObject(payload) && (payload.isAxiosError === true);
    	};
    	return isAxiosError$1;
    }

    var utils$1 = utils$a;
    var bind$1 = bind$3;
    var Axios$2 = Axios_1;
    var mergeConfig$1 = mergeConfig$3;
    var defaults$2 = defaults_1;

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance$1(defaultConfig) {
      var context = new Axios$2(defaultConfig);
      var instance = bind$1(Axios$2.prototype.request, context);

      // Copy axios.prototype to instance
      utils$1.extend(instance, Axios$2.prototype, context);

      // Copy context to instance
      utils$1.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance$1(mergeConfig$1(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios$2 = createInstance$1(defaults$2);

    // Expose Axios class to allow class inheritance
    axios$2.Axios = Axios$2;

    // Expose Cancel & CancelToken
    axios$2.Cancel = requireCancel();
    axios$2.CancelToken = requireCancelToken();
    axios$2.isCancel = requireIsCancel();
    axios$2.VERSION = requireData().version;

    // Expose all/spread
    axios$2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$2.spread = requireSpread();

    // Expose isAxiosError
    axios$2.isAxiosError = requireIsAxiosError();

    axios$3.exports = axios$2;

    // Allow use of default import syntax in TypeScript
    axios$3.exports.default = axios$2;

    var axiosExports = axios$3.exports;

    var axios$1 = axiosExports;

    var generateLegacyStarkPrivateKey;
    var createStarkSigner;
    var ImmutableX;
    var Config;
    Object.defineProperty(index_cjs,"__esModule",{value:!0});var e$1=lib$w,t$1=bnExports$1,n$1=cjs,r$2=hash$4,a$2=elliptic$2,i$1=lib$s,s=requireDist_browser(),o$3=axios$1;function u$1(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function c$1(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}});}})),t.default=e,Object.freeze(t)}var f=u$1(t$1),p$1=c$1(n$1),d$1=u$1(r$2),l=u$1(o$3);function h$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y$1(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r);}}function m$2(e,t,n){return t&&y$1(e.prototype,t),n&&y$1(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function g$1(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b$1=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],v=function(){function t(){h$1(this,t);}return m$2(t,null,[{key:"createInterface",value:function(){return new e$1.utils.Interface(b$1)}},{key:"connect",value:function(t,n){return new e$1.Contract(t,b$1,n)}}]),t}();g$1(v,"abi",b$1);var w$1=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"approved",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"operator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"_approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"}],x$1=function(){function t(){h$1(this,t);}return m$2(t,null,[{key:"createInterface",value:function(){return new e$1.utils.Interface(w$1)}},{key:"connect",value:function(t,n){return new e$1.Contract(t,w$1,n)}}]),t}();g$1(x$1,"abi",w$1);var T$1=[{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}];g$1(function(){function t(){h$1(this,t);}return m$2(t,null,[{key:"createInterface",value:function(){return new e$1.utils.Interface(T$1)}},{key:"connect",value:function(t,n){return new e$1.Contract(t,T$1,n)}}]),t}(),"abi",T$1);var k$1=[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"depositorEthKey",type:"address"},{indexed:!1,internalType:"uint256",name:"starkKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"nonQuantizedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"LogDeposit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"starkKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"}],name:"LogDepositCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"starkKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"nonQuantizedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"LogDepositCancelReclaimed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"starkKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"}],name:"LogDepositNftCancelReclaimed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"starkKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultId",type:"uint256"}],name:"LogFullWithdrawalRequest",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ownerKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"nonQuantizedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"quantizedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"}],name:"LogMintWithdrawalPerformed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ownerKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"LogMintableWithdrawalAllowed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"depositorEthKey",type:"address"},{indexed:!1,internalType:"uint256",name:"starkKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"}],name:"LogNftDeposit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ownerKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"}],name:"LogNftWithdrawalAllowed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ownerKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"},{indexed:!1,internalType:"address",name:"recipient",type:"address"}],name:"LogNftWithdrawalPerformed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"sequenceNumber",type:"uint256"},{indexed:!1,internalType:"uint256",name:"batchId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultRoot",type:"uint256"},{indexed:!1,internalType:"uint256",name:"orderRoot",type:"uint256"}],name:"LogRootUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"stateTransitionFact",type:"bytes32"}],name:"LogStateTransitionFact",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"ethKey",type:"address"},{indexed:!1,internalType:"uint256",name:"assetId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultId",type:"uint256"},{indexed:!1,internalType:"int256",name:"quantizedAmountChange",type:"int256"}],name:"LogVaultBalanceChangeApplied",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ownerKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"nonQuantizedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"LogWithdrawalAllowed",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ownerKey",type:"uint256"},{indexed:!1,internalType:"uint256",name:"assetType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"nonQuantizedAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"quantizedAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"recipient",type:"address"}],name:"LogWithdrawalPerformed",type:"event"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"announceAvailabilityVerifierRemovalIntent",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"announceVerifierRemovalIntent",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetId",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"depositCancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"depositERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"depositEth",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"depositNft",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"depositNftReclaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetId",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"depositReclaim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"assetId",type:"uint256"},{internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"escape",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"freezeRequest",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"fullWithdrawalRequest",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"assetType",type:"uint256"}],name:"getAssetInfo",outputs:[{internalType:"bytes",name:"assetInfo",type:"bytes"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetId",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"getCancellationRequest",outputs:[{internalType:"uint256",name:"request",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetId",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"getDepositBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"}],name:"getEthKey",outputs:[{internalType:"address",name:"ethKey",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"getFullWithdrawalRequest",outputs:[{internalType:"uint256",name:"res",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getLastBatchId",outputs:[{internalType:"uint256",name:"batchId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getOrderRoot",outputs:[{internalType:"uint256",name:"root",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getOrderTreeHeight",outputs:[{internalType:"uint256",name:"height",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"uint256",name:"assetId",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"getQuantizedDepositBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"presumedAssetType",type:"uint256"}],name:"getQuantum",outputs:[{internalType:"uint256",name:"quantum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRegisteredAvailabilityVerifiers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getRegisteredVerifiers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getSequenceNumber",outputs:[{internalType:"uint256",name:"seq",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getVaultRoot",outputs:[{internalType:"uint256",name:"root",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getVaultTreeHeight",outputs:[{internalType:"uint256",name:"height",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"ownerKey",type:"uint256"},{internalType:"uint256",name:"assetId",type:"uint256"}],name:"getWithdrawalBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isAvailabilityVerifier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isFrozen",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isOperator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isTokenAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isUserAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isVerifier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"mainAcceptGovernance",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"mainCancelNomination",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"mainIsGovernor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"mainNominateNewGovernor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"mainRemoveGovernor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"quantizedAmount",type:"uint256"}],name:"registerAndDepositERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"}],name:"registerAndDepositEth",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"string",name:"",type:"string"}],name:"registerAvailabilityVerifier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"registerOperator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"registerToken",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"registerTokenAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"registerUser",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"registerUserAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"string",name:"",type:"string"}],name:"registerVerifier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"removeAvailabilityVerifier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"removeVerifier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unFreeze",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"unregisterOperator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"unregisterTokenAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"unregisterUserAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"publicInput",type:"uint256[]"},{internalType:"uint256[]",name:"applicationData",type:"uint256[]"}],name:"updateState",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"ownerKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"ownerKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"bytes",name:"mintingBlob",type:"bytes"}],name:"withdrawAndMint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"ownerKey",type:"uint256"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"withdrawNft",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"withdrawNftTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"withdrawTo",outputs:[],stateMutability:"nonpayable",type:"function"}],O=function(){function t(){h$1(this,t);}return m$2(t,null,[{key:"createInterface",value:function(){return new e$1.utils.Interface(k$1)}},{key:"connect",value:function(t,n){return new e$1.Contract(t,k$1,n)}}]),t}();function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}function _$1(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}function S$1(){return S$1="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=_$1(e,t);if(r){var a=Object.getOwnPropertyDescriptor(r,t);return a.get?a.get.call(arguments.length<3?e:n):a.value}},S$1.apply(this,arguments)}function A(e,t){return A=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},A(e,t)}function R(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&A(e,t);}function E$1(e){return E$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E$1(e)}function C$1(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function j$1(e,t){if(t&&("object"===E$1(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return C$1(e)}function I$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}g$1(O,"abi",k$1);var M$1=[{inputs:[{internalType:"contract Core",name:"_imx",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"imx",outputs:[{internalType:"contract Core",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"starkKey",type:"uint256"}],name:"isRegistered",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"registerAndDepositNft",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"}],name:"registerAndWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"registerAndWithdrawNft",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"registerAndWithdrawNftTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"registerAndWithdrawTo",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ethKey",type:"address"},{internalType:"uint256",name:"starkKey",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"uint256",name:"assetType",type:"uint256"},{internalType:"bytes",name:"mintingBlob",type:"bytes"}],name:"regsiterAndWithdrawAndMint",outputs:[],stateMutability:"nonpayable",type:"function"}],N$1="0x60806040523480156200001157600080fd5b5060405162001313380380620013138339818101604052810190620000379190620000fc565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200012e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b6000620000c482620000a3565b9050919050565b620000d681620000b7565b8114620000e257600080fd5b50565b600081519050620000f681620000cb565b92915050565b6000602082840312156200011557620001146200007e565b5b60006200012584828501620000e5565b91505092915050565b6111d5806200013e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634280d50a1161005b5780634280d50a146100ff5780634627d5981461011b578063579a698814610137578063ea864adf1461016757610088565b80630a9c3beb1461008d5780630f08025f146100a95780631259cc6c146100c7578063352eb84c146100e3575b600080fd5b6100a760048036038101906100a29190610a72565b610183565b005b6100b16102ae565b6040516100be9190610b8d565b60405180910390f35b6100e160048036038101906100dc9190610ba8565b6102d2565b005b6100fd60048036038101906100f89190610c57565b6103fd565b005b61011960048036038101906101149190610cf1565b610525565b005b61013560048036038101906101309190610da0565b610650565b005b610151600480360381019061014c9190610e3a565b610778565b60405161015e9190610e82565b60405180910390f35b610181600480360381019061017c9190610e9d565b61084a565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd2414d4888888886040518563ffffffff1660e01b81526004016101e29493929190610fa1565b600060405180830381600087803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d91443b7878585856040518563ffffffff1660e01b81526004016102739493929190610fe1565b600060405180830381600087803b15801561028d57600080fd5b505af11580156102a1573d6000803e3d6000fd5b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd2414d4888888886040518563ffffffff1660e01b81526004016103319493929190610fa1565b600060405180830381600087803b15801561034b57600080fd5b505af115801561035f573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ebef0fd0878585856040518563ffffffff1660e01b81526004016103c29493929190611021565b600060405180830381600087803b1580156103dc57600080fd5b505af11580156103f0573d6000803e3d6000fd5b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd2414d4878787876040518563ffffffff1660e01b815260040161045c9493929190610fa1565b600060405180830381600087803b15801561047657600080fd5b505af115801561048a573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663019b417a8684846040518463ffffffff1660e01b81526004016104eb93929190611066565b600060405180830381600087803b15801561050557600080fd5b505af1158015610519573d6000803e3d6000fd5b50505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd2414d4888888886040518563ffffffff1660e01b81526004016105849493929190610fa1565b600060405180830381600087803b15801561059e57600080fd5b505af11580156105b2573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae1cdde6878585856040518563ffffffff1660e01b8152600401610615949392919061109d565b600060405180830381600087803b15801561062f57600080fd5b505af1158015610643573d6000803e3d6000fd5b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd2414d4878787876040518563ffffffff1660e01b81526004016106af9493929190610fa1565b600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314cd70e48684846040518463ffffffff1660e01b815260040161073e939291906110e2565b600060405180830381600087803b15801561075857600080fd5b505af115801561076c573d6000803e3d6000fd5b50505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631dbd1da7846040518263ffffffff1660e01b81526004016107ea9190611119565b602060405180830381865afa158015610807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b9190611149565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd2414d4868686866040518563ffffffff1660e01b81526004016108a99493929190610fa1565b600060405180830381600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e7085836040518363ffffffff1660e01b8152600401610936929190611176565b600060405180830381600087803b15801561095057600080fd5b505af1158015610964573d6000803e3d6000fd5b505050505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109a482610979565b9050919050565b6109b481610999565b81146109bf57600080fd5b50565b6000813590506109d1816109ab565b92915050565b6000819050919050565b6109ea816109d7565b81146109f557600080fd5b50565b600081359050610a07816109e1565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a3257610a31610a0d565b5b8235905067ffffffffffffffff811115610a4f57610a4e610a12565b5b602083019150836001820283011115610a6b57610a6a610a17565b5b9250929050565b600080600080600080600060a0888a031215610a9157610a9061096f565b5b6000610a9f8a828b016109c2565b9750506020610ab08a828b016109f8565b965050604088013567ffffffffffffffff811115610ad157610ad0610974565b5b610add8a828b01610a1c565b95509550506060610af08a828b016109f8565b935050608088013567ffffffffffffffff811115610b1157610b10610974565b5b610b1d8a828b01610a1c565b925092505092959891949750929550565b6000819050919050565b6000610b53610b4e610b4984610979565b610b2e565b610979565b9050919050565b6000610b6582610b38565b9050919050565b6000610b7782610b5a565b9050919050565b610b8781610b6c565b82525050565b6000602082019050610ba26000830184610b7e565b92915050565b600080600080600080600060c0888a031215610bc757610bc661096f565b5b6000610bd58a828b016109c2565b9750506020610be68a828b016109f8565b965050604088013567ffffffffffffffff811115610c0757610c06610974565b5b610c138a828b01610a1c565b95509550506060610c268a828b016109f8565b9350506080610c378a828b016109f8565b92505060a0610c488a828b016109c2565b91505092959891949750929550565b60008060008060008060a08789031215610c7457610c7361096f565b5b6000610c8289828a016109c2565b9650506020610c9389828a016109f8565b955050604087013567ffffffffffffffff811115610cb457610cb3610974565b5b610cc089828a01610a1c565b94509450506060610cd389828a016109f8565b9250506080610ce489828a016109f8565b9150509295509295509295565b600080600080600080600060c0888a031215610d1057610d0f61096f565b5b6000610d1e8a828b016109c2565b9750506020610d2f8a828b016109f8565b965050604088013567ffffffffffffffff811115610d5057610d4f610974565b5b610d5c8a828b01610a1c565b95509550506060610d6f8a828b016109f8565b9350506080610d808a828b016109f8565b92505060a0610d918a828b016109f8565b91505092959891949750929550565b60008060008060008060a08789031215610dbd57610dbc61096f565b5b6000610dcb89828a016109c2565b9650506020610ddc89828a016109f8565b955050604087013567ffffffffffffffff811115610dfd57610dfc610974565b5b610e0989828a01610a1c565b94509450506060610e1c89828a016109f8565b9250506080610e2d89828a016109c2565b9150509295509295509295565b600060208284031215610e5057610e4f61096f565b5b6000610e5e848285016109f8565b91505092915050565b60008115159050919050565b610e7c81610e67565b82525050565b6000602082019050610e976000830184610e73565b92915050565b600080600080600060808688031215610eb957610eb861096f565b5b6000610ec7888289016109c2565b9550506020610ed8888289016109f8565b945050604086013567ffffffffffffffff811115610ef957610ef8610974565b5b610f0588828901610a1c565b93509350506060610f18888289016109f8565b9150509295509295909350565b610f2e81610999565b82525050565b610f3d816109d7565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f808385610f43565b9350610f8d838584610f54565b610f9683610f63565b840190509392505050565b6000606082019050610fb66000830187610f25565b610fc36020830186610f34565b8181036040830152610fd6818486610f74565b905095945050505050565b6000606082019050610ff66000830187610f34565b6110036020830186610f34565b8181036040830152611016818486610f74565b905095945050505050565b60006080820190506110366000830187610f34565b6110436020830186610f34565b6110506040830185610f34565b61105d6060830184610f25565b95945050505050565b600060608201905061107b6000830186610f34565b6110886020830185610f34565b6110956040830184610f34565b949350505050565b60006080820190506110b26000830187610f34565b6110bf6020830186610f34565b6110cc6040830185610f34565b6110d96060830184610f34565b95945050505050565b60006060820190506110f76000830186610f34565b6111046020830185610f34565b6111116040830184610f25565b949350505050565b600060208201905061112e6000830184610f34565b92915050565b600081519050611143816109ab565b92915050565b60006020828403121561115f5761115e61096f565b5b600061116d84828501611134565b91505092915050565b600060408201905061118b6000830185610f34565b6111986020830184610f34565b939250505056fea264697066735822122032218b31f9c0e88bb1991ae2275255c3d0cb01b4bf63a689bcaeccdcc791192c64736f6c634300080b0033",B=function(e){return e.length>1},D$1=function(t){R(r,e$1.ContractFactory);var n=I$1(r);function r(){h$1(this,r);for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];return j$1(B(t)?n.call.apply(n,[this].concat(t)):n.call(this,M$1,N$1,t[0]))}return m$2(r,[{key:"deploy",value:function(e,t){return S$1(P(r.prototype),"deploy",this).call(this,e,t||{})}},{key:"getDeployTransaction",value:function(e,t){return S$1(P(r.prototype),"getDeployTransaction",this).call(this,e,t||{})}},{key:"attach",value:function(e){return S$1(P(r.prototype),"attach",this).call(this,e)}},{key:"connect",value:function(e){return S$1(P(r.prototype),"connect",this).call(this,e)}}],[{key:"createInterface",value:function(){return new e$1.utils.Interface(M$1)}},{key:"connect",value:function(t,n){return new e$1.Contract(t,M$1,n)}}]),r}();g$1(D$1,"bytecode",N$1),g$1(D$1,"abi",M$1);var U=Object.freeze({__proto__:null,Core:O,Registration:D$1,IERC20:v,IERC721:x$1});function F$1(e,t,n,r,a,i,s){try{var o=e[i](s),u=o.value;}catch(e){return void n(e)}o.done?t(u):Promise.resolve(u).then(r,a);}function L$1(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var i=e.apply(t,n);function s(e){F$1(i,r,a,s,o,"next",e);}function o(e){F$1(i,r,a,s,o,"throw",e);}s(void 0);}))}}var q$1="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:{},V={exports:{}},G$1={exports:{}};!function(e){function t(n){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(n)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports;}(G$1),function(e){var t=G$1.exports.default;function n(){
    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
    e.exports=n=function(){return r},e.exports.__esModule=!0,e.exports.default=e.exports;var r={},a=Object.prototype,i=a.hasOwnProperty,s="function"==typeof Symbol?Symbol:{},o=s.iterator||"@@iterator",u=s.asyncIterator||"@@asyncIterator",c=s.toStringTag||"@@toStringTag";function f(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{f({},"");}catch(e){f=function(e,t,n){return e[t]=n};}function p(e,t,n,r){var a=t&&t.prototype instanceof h?t:h,i=Object.create(a.prototype),s=new _(r||[]);return i._invoke=function(e,t,n){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return A()}for(n.method=a,n.arg=i;;){var s=n.delegate;if(s){var o=k(s,n);if(o){if(o===l)continue;return o}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg);}else "return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=d(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===l)continue;return {value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg);}}}(e,n,s),i}function d(e,t,n){try{return {type:"normal",arg:e.call(t,n)}}catch(e){return {type:"throw",arg:e}}}r.wrap=p;var l={};function h(){}function y(){}function m(){}var g={};f(g,o,(function(){return this}));var b=Object.getPrototypeOf,v=b&&b(b(S([])));v&&v!==a&&i.call(v,o)&&(g=v);var w=m.prototype=h.prototype=Object.create(g);function x(e){["next","throw","return"].forEach((function(t){f(e,t,(function(e){return this._invoke(t,e)}));}));}function T(e,n){function r(a,s,o,u){var c=d(e[a],e,s);if("throw"!==c.type){var f=c.arg,p=f.value;return p&&"object"==t(p)&&i.call(p,"__await")?n.resolve(p.__await).then((function(e){r("next",e,o,u);}),(function(e){r("throw",e,o,u);})):n.resolve(p).then((function(e){f.value=e,o(f);}),(function(e){return r("throw",e,o,u)}))}u(c.arg);}var a;this._invoke=function(e,t){function i(){return new n((function(n,a){r(e,t,n,a);}))}return a=a?a.then(i,i):i()};}function k(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method))return l;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method");}return l}var r=d(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,l;var a=r.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,l):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,l)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t);}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t;}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0);}function S(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,r=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return {next:A}}function A(){return {value:void 0,done:!0}}return y.prototype=m,f(w,"constructor",m),f(m,"constructor",y),y.displayName=f(m,c,"GeneratorFunction"),r.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return !!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},r.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,f(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},r.awrap=function(e){return {__await:e}},x(T.prototype),f(T.prototype,u,(function(){return this})),r.AsyncIterator=T,r.async=function(e,t,n,a,i){void 0===i&&(i=Promise);var s=new T(p(e,t,n,a),i);return r.isGeneratorFunction(t)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},x(w),f(w,c,"Generator"),f(w,o,(function(){return this})),f(w,"toString",(function(){return "[object Generator]"})),r.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},r.values=S,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0);},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return s.type="throw",s.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r],s=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var o=i.call(a,"catchLoc"),u=i.call(a,"finallyLoc");if(o&&u){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(o){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else {if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var s=a?a.completion:{};return s.type=e,s.arg=t,a?(this.method="next",this.next=a.finallyLoc,l):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return "break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),l},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),l}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;P(n);}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),l}},r}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports;}(V);var z$1=V.exports(),W$1=z$1;try{regeneratorRuntime=z$1;}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=z$1:Function("r","regeneratorRuntime = r")(z$1);}function X$1(e){var t;return p$1.addHexPrefix(p$1.padLeft(e.r.toString(16),64)+p$1.padLeft(e.s.toString(16),64)+p$1.padLeft((null===(t=e.recoveryParam)||void 0===t?void 0:t.toString(16))||"",2))}function K$1(e){return e.trim()?-1!==new f.default(e,16).cmp(new f.default(27))?new f.default(e,16).sub(new f.default(27)).toNumber():new f.default(e,16).toNumber():void 0}function H$1(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:64;return e=p$1.removeHexPrefix(e),{r:new f.default(e.substring(0,t),"hex"),s:new f.default(e.substring(t,2*t),"hex"),recoveryParam:K$1(e.substring(2*t,2*t+2))}}function Q$1(e,t){return J$1.apply(this,arguments)}function J$1(){return (J$1=L$1(W$1.mark((function e(t,n){var r;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=H$1,e.next=3,n.signMessage(t);case 3:return e.t1=e.sent,r=(0, e.t0)(e.t1),e.abrupt("return",X$1(r));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function $$1(e){return Z$1.apply(this,arguments)}function Z$1(){return (Z$1=L$1(W$1.mark((function e(t){var n,r;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=Math.floor(Date.now()/1e3).toString(),e.next=3,Q$1(n,t);case 3:return r=e.sent,e.abrupt("return",{timestamp:n,signature:r});case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Y$1(e,t){return ee$1.apply(this,arguments)}function ee$1(){return (ee$1=L$1(W$1.mark((function e(t,n){var r,a;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.getAddress();case 2:return r=e.sent,e.next=5,Q$1(t,n);case 5:return a=e.sent,e.abrupt("return",{message:t,ethAddress:r,ethSignature:a});case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var te$1,ne$1=new f.default("08000000 00000010 ffffffff ffffffff b781126d cae7b232 1e66a241 adc64d2f",16),re$1=new a$2.ec(new a$2.curves.PresetCurve({type:"short",prime:null,p:"08000000 00000011 00000000 00000000 00000000 00000000 00000000 00000001",a:"00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001",b:"06f21413 efbe40de 150e596d 72f7a8c5 609ad26c 15c915c1 f4cdfcb9 9cee9e89",n:ne$1.toString("hex"),hash:d$1.default.sha256,gRed:!1,g:["1ef15c18599971b7beced415a40f0c7deacfd9b0d1819e03d723d8bc943cfca","5668060aa49730b7be4801df46ec62de53ecd11abe43a32873000c36e8dc1f"]}));function ae$1(e,t){return new f.default(d$1.default.sha256().update(p$1.hexToBuffer(p$1.removeHexPrefix(e)+p$1.sanitizeBytes(p$1.numberToHex(t),2))).digest("hex"),16)}function ie(e,t){for(var n=new f.default("1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",16),r=n.sub(n.mod(t)),a=ae$1(e.toString("hex",64),0),i=1;a.gte(r);i++)a=ae$1(a.toString("hex"),i);return a.umod(t).toString("hex")}function se$2(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=p$1.hexToBinary(e),a=r.slice(t,n),i=p$1.binaryToNumber(a);return i}function oe(e,t,n,r){var a=d$1.default.sha256().update(e).digest("hex"),i=d$1.default.sha256().update(t).digest("hex"),s=se$2(a,-31),o=se$2(i,-31),u=se$2(n,-31),c=se$2(n,-62,-31);return "m/2645'/".concat(s,"'/").concat(o,"'/").concat(u,"'/").concat(c,"'/").concat(r)}function ue$1(e,t){var n=s.hdkey.fromMasterSeed(Buffer$g.from(e.slice(2),"hex")).derivePath(t).getWallet().getPrivateKey();return ie(new f.default(n),ne$1)}function ce$1(){return (ce$1=L$1(W$1.mark((function e(t){var n,r,a,s,o;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return n=e.sent.toLowerCase(),e.next=5,t.signMessage("Only sign this request if you’ve initiated an action with Immutable X.");case 5:return r=e.sent,a=i$1.splitSignature(r).s,s=oe("starkex","immutablex",n,"1"),o=ue$1(a,s),e.abrupt("return",o.padStart(64,"0"));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(e){e.StarkCurveInvalidMessageLength="invalid message length";}(te$1||(te$1={}));var fe$1=function(){function e(t){h$1(this,e),this.privateKey=t,this.keyPair=re$1.keyFromPrivate(t,"hex");}return m$2(e,[{key:"getAddress",value:function(){var e=this.keyPair.getPublic().getX().toString("hex");return p$1.sanitizeHex(e)}},{key:"signMessage",value:function(){var e=L$1(W$1.mark((function e(t){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.serialize(this.keyPair.sign(this.fixMsgHashLen(t))));case 1:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"serialize",value:function(e){return p$1.addHexPrefix(p$1.padLeft(e.r.toString("hex"),64)+p$1.padLeft(e.s.toString("hex"),64))}},{key:"fixMsgHashLen",value:function(e){if(e=p$1.removeHexPrefix(e),(e=new f.default(e,"hex").toString("hex")).length<=62)return e;if(63!==e.length)throw new Error(te$1.StarkCurveInvalidMessageLength);return "".concat(e,"0")}}]),e}();function pe$2(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}function de$1(e,t,n){return de$1=pe$2()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var a=new(Function.bind.apply(e,r));return n&&A(a,n.prototype),a},de$1.apply(null,arguments)}function le$1(e){var t="function"==typeof Map?new Map:void 0;return le$1=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r);}function r(){return de$1(e,arguments,P(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),A(r,e)},le$1(e)}function he$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}var ye$1="https://api.sandbox.x.immutable.com".replace(/\/+$/,""),me$1=m$2((function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ye$1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default;h$1(this,e),this.basePath=n,this.axios=r,t&&(this.configuration=t,this.basePath=t.basePath||this.basePath);})),ge$2=function(e){R(n,le$1(Error));var t=he$1(n);function n(e,r){var a;return h$1(this,n),g$1(C$1(a=t.call(this,r)),"name","RequiredError"),a.field=e,a}return m$2(n)}();function be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function ve$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?be(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var we$1="https://example.com",xe$1=function(e,t,n){if(null==n)throw new ge$2(t,"Required parameter ".concat(t," was null or undefined when calling ").concat(e,"."))};function Te$2(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";"object"===E$1(t)?Array.isArray(t)?t.forEach((function(t){return Te$2(e,t,n)})):Object.keys(t).forEach((function(r){return Te$2(e,t[r],"".concat(n).concat(""!==n?".":"").concat(r))})):e.has(n)?e.append(n,t):e.set(n,t);}var ke$2=function(e){for(var t=new URLSearchParams(e.search),n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];Te$2(t,r),e.search=t.toString();},Oe$1=function(e,t,n){var r="string"!=typeof e;return (r&&n&&n.isJsonMime?n.isJsonMime(t.headers["Content-Type"]):r)?JSON.stringify(void 0!==e?e:{}):e||""},Pe$1=function(e){return e.pathname+e.search+e.hash},_e$1=function(e,t,n,r){return function(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,s=ve$1(ve$1({},e.options),{},{url:((null==r?void 0:r.basePath)||i)+e.url});return a.request(s)}};function Se$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Ae$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Re$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ae$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ae$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Ee$1=function(e){return {getAsset:(n=L$1(W$1.mark((function t(n,r,a){var i,s,o,u,c,f,p,d,l=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=l.length>3&&void 0!==l[3]?l[3]:{},xe$1("getAsset","tokenAddress",n),xe$1("getAsset","tokenId",r),s="/v1/assets/{token_address}/{token_id}".replace("{".concat("token_address","}"),encodeURIComponent(String(n))).replace("{".concat("token_id","}"),encodeURIComponent(String(r))),o=new URL(s,we$1),e&&(u=e.baseOptions),c=Re$1(Re$1({method:"GET"},u),i),f={},p={},void 0!==a&&(p.include_fees=a),ke$2(o,p),d=u&&u.headers?u.headers:{},c.headers=Re$1(Re$1(Re$1({},f),d),i.headers),t.abrupt("return",{url:Pe$1(o),options:c});case 14:case"end":return t.stop()}}),t)}))),function(e,t,r){return n.apply(this,arguments)}),listAssets:(t=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g){var b,v,w,x,T,k,O,P,_=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return b=_.length>16&&void 0!==_[16]?_[16]:{},v="/v1/assets",w=new URL(v,we$1),e&&(x=e.baseOptions),T=Re$1(Re$1({method:"GET"},x),b),k={},O={},void 0!==n&&(O.page_size=n),void 0!==r&&(O.cursor=r),void 0!==a&&(O.order_by=a),void 0!==i&&(O.direction=i),void 0!==s&&(O.user=s),void 0!==o&&(O.status=o),void 0!==u&&(O.name=u),void 0!==c&&(O.metadata=c),void 0!==f&&(O.sell_orders=f),void 0!==p&&(O.buy_orders=p),void 0!==d&&(O.include_fees=d),void 0!==l&&(O.collection=l),void 0!==h&&(O.updated_min_timestamp=h),void 0!==y&&(O.updated_max_timestamp=y),void 0!==m&&(O.auxiliary_fee_percentages=m),void 0!==g&&(O.auxiliary_fee_recipients=g),ke$2(w,O),P=x&&x.headers?x.headers:{},T.headers=Re$1(Re$1(Re$1({},k),P),b.headers),t.abrupt("return",{url:Pe$1(w),options:T});case 27:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s,o,u,c,f,p,d,l,h,y,m){return t.apply(this,arguments)})};var t,n;},Ce$1=function(e){var t=Ee$1(e);return {getAsset:function(n,r,a,i){return L$1(W$1.mark((function s(){var o;return W$1.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,t.getAsset(n,r,a,i);case 2:return o=s.sent,s.abrupt("return",_e$1(o,l.default,ye$1,e));case 4:case"end":return s.stop()}}),s)})))()},listAssets:function(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v){return L$1(W$1.mark((function w(){var x;return W$1.wrap((function(w){for(;;)switch(w.prev=w.next){case 0:return w.next=2,t.listAssets(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v);case 2:return x=w.sent,w.abrupt("return",_e$1(x,l.default,ye$1,e));case 4:case"end":return w.stop()}}),w)})))()}}},je$1=function(e){R(n,me$1);var t=Se$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"getAsset",value:function(e,t){var n=this;return Ce$1(this.configuration).getAsset(e.tokenAddress,e.tokenId,e.includeFees,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listAssets",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Ce$1(this.configuration).listAssets(t.pageSize,t.cursor,t.orderBy,t.direction,t.user,t.status,t.name,t.metadata,t.sellOrders,t.buyOrders,t.includeFees,t.collection,t.updatedMinTimestamp,t.updatedMaxTimestamp,t.auxiliaryFeePercentages,t.auxiliaryFeeRecipients,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}();function Ie$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Me$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Ne$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Me$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Me$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Be$1=function(e){return {getBalance:(n=L$1(W$1.mark((function t(n,r){var a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=p.length>2&&void 0!==p[2]?p[2]:{},xe$1("getBalance","owner",n),xe$1("getBalance","address",r),i="/v2/balances/{owner}/{address}".replace("{".concat("owner","}"),encodeURIComponent(String(n))).replace("{".concat("address","}"),encodeURIComponent(String(r))),s=new URL(i,we$1),e&&(o=e.baseOptions),u=Ne$1(Ne$1({method:"GET"},o),a),c={},ke$2(s,{}),f=o&&o.headers?o.headers:{},u.headers=Ne$1(Ne$1(Ne$1({},c),f),a.headers),t.abrupt("return",{url:Pe$1(s),options:u});case 13:case"end":return t.stop()}}),t)}))),function(e,t){return n.apply(this,arguments)}),listBalances:(t=L$1(W$1.mark((function t(n,r,a,i,s){var o,u,c,f,p,d,l,h,y=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=y.length>5&&void 0!==y[5]?y[5]:{},xe$1("listBalances","owner",n),u="/v2/balances/{owner}".replace("{".concat("owner","}"),encodeURIComponent(String(n))),c=new URL(u,we$1),e&&(f=e.baseOptions),p=Ne$1(Ne$1({method:"GET"},f),o),d={},l={},void 0!==r&&(l.page_size=r),void 0!==a&&(l.cursor=a),void 0!==i&&(l.order_by=i),void 0!==s&&(l.direction=s),ke$2(c,l),h=f&&f.headers?f.headers:{},p.headers=Ne$1(Ne$1(Ne$1({},d),h),o.headers),t.abrupt("return",{url:Pe$1(c),options:p});case 16:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i){return t.apply(this,arguments)})};var t,n;},De$1=function(e){var t=Be$1(e);return {getBalance:function(n,r,a){return L$1(W$1.mark((function i(){var s;return W$1.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,t.getBalance(n,r,a);case 2:return s=i.sent,i.abrupt("return",_e$1(s,l.default,ye$1,e));case 4:case"end":return i.stop()}}),i)})))()},listBalances:function(n,r,a,i,s,o){return L$1(W$1.mark((function u(){var c;return W$1.wrap((function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,t.listBalances(n,r,a,i,s,o);case 2:return c=u.sent,u.abrupt("return",_e$1(c,l.default,ye$1,e));case 4:case"end":return u.stop()}}),u)})))()}}},Ue$1=function(e){R(n,me$1);var t=Ie$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"getBalance",value:function(e,t){var n=this;return De$1(this.configuration).getBalance(e.owner,e.address,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listBalances",value:function(e,t){var n=this;return De$1(this.configuration).listBalances(e.owner,e.pageSize,e.cursor,e.orderBy,e.direction,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function Fe$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Le$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function qe$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Le$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Le$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Ve$1=function(e){return {createCollection:(i=L$1(W$1.mark((function t(n,r,a){var i,s,o,u,c,f,p,d,l=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=l.length>3&&void 0!==l[3]?l[3]:{},xe$1("createCollection","iMXSignature",n),xe$1("createCollection","iMXTimestamp",r),xe$1("createCollection","createCollectionRequest",a),s="/v1/collections",o=new URL(s,we$1),e&&(u=e.baseOptions),c=qe$1(qe$1({method:"POST"},u),i),f={},p={},null!=n&&(f["IMX-Signature"]=String(n)),null!=r&&(f["IMX-Timestamp"]=String(r)),f["Content-Type"]="application/json",ke$2(o,p),d=u&&u.headers?u.headers:{},c.headers=qe$1(qe$1(qe$1({},f),d),i.headers),c.data=Oe$1(a,c,e),t.abrupt("return",{url:Pe$1(o),options:c});case 18:case"end":return t.stop()}}),t)}))),function(e,t,n){return i.apply(this,arguments)}),getCollection:(a=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getCollection","address",n),a="/v1/collections/{address}".replace("{".concat("address","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=qe$1(qe$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=qe$1(qe$1(qe$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return a.apply(this,arguments)}),listCollectionFilters:(r=L$1(W$1.mark((function t(n,r,a){var i,s,o,u,c,f,p,d,l=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=l.length>3&&void 0!==l[3]?l[3]:{},xe$1("listCollectionFilters","address",n),s="/v1/collections/{address}/filters".replace("{".concat("address","}"),encodeURIComponent(String(n))),o=new URL(s,we$1),e&&(u=e.baseOptions),c=qe$1(qe$1({method:"GET"},u),i),f={},p={},void 0!==r&&(p.page_size=r),void 0!==a&&(p.next_page_token=a),ke$2(o,p),d=u&&u.headers?u.headers:{},c.headers=qe$1(qe$1(qe$1({},f),d),i.headers),t.abrupt("return",{url:Pe$1(o),options:c});case 14:case"end":return t.stop()}}),t)}))),function(e,t,n){return r.apply(this,arguments)}),listCollections:(n=L$1(W$1.mark((function t(n,r,a,i,s,o,u){var c,f,p,d,l,h,y,m,g=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return c=g.length>7&&void 0!==g[7]?g[7]:{},f="/v1/collections",p=new URL(f,we$1),e&&(d=e.baseOptions),l=qe$1(qe$1({method:"GET"},d),c),h={},y={},void 0!==n&&(y.page_size=n),void 0!==r&&(y.cursor=r),void 0!==a&&(y.order_by=a),void 0!==i&&(y.direction=i),void 0!==s&&(y.blacklist=s),void 0!==o&&(y.whitelist=o),void 0!==u&&(y.keyword=u),ke$2(p,y),m=d&&d.headers?d.headers:{},l.headers=qe$1(qe$1(qe$1({},h),m),c.headers),t.abrupt("return",{url:Pe$1(p),options:l});case 18:case"end":return t.stop()}}),t)}))),function(e,t,r,a,i,s,o){return n.apply(this,arguments)}),updateCollection:(t=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("updateCollection","address",n),xe$1("updateCollection","iMXSignature",r),xe$1("updateCollection","iMXTimestamp",a),xe$1("updateCollection","updateCollectionRequest",i),o="/v1/collections/{address}".replace("{".concat("address","}"),encodeURIComponent(String(n))),u=new URL(o,we$1),e&&(c=e.baseOptions),f=qe$1(qe$1({method:"PATCH"},c),s),p={},d={},null!=r&&(p["IMX-Signature"]=String(r)),null!=a&&(p["IMX-Timestamp"]=String(a)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=qe$1(qe$1(qe$1({},p),l),s.headers),f.data=Oe$1(i,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 19:case"end":return t.stop()}}),t)}))),function(e,n,r,a){return t.apply(this,arguments)})};var t,n,r,a,i;},Ge$1=function(e){var t=Ve$1(e);return {createCollection:function(n,r,a,i){return L$1(W$1.mark((function s(){var o;return W$1.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,t.createCollection(n,r,a,i);case 2:return o=s.sent,s.abrupt("return",_e$1(o,l.default,ye$1,e));case 4:case"end":return s.stop()}}),s)})))()},getCollection:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getCollection(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},listCollectionFilters:function(n,r,a,i){return L$1(W$1.mark((function s(){var o;return W$1.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,t.listCollectionFilters(n,r,a,i);case 2:return o=s.sent,s.abrupt("return",_e$1(o,l.default,ye$1,e));case 4:case"end":return s.stop()}}),s)})))()},listCollections:function(n,r,a,i,s,o,u,c){return L$1(W$1.mark((function f(){var p;return W$1.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:return f.next=2,t.listCollections(n,r,a,i,s,o,u,c);case 2:return p=f.sent,f.abrupt("return",_e$1(p,l.default,ye$1,e));case 4:case"end":return f.stop()}}),f)})))()},updateCollection:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.updateCollection(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()}}},ze$1=function(e){R(n,me$1);var t=Fe$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"createCollection",value:function(e,t){var n=this;return Ge$1(this.configuration).createCollection(e.iMXSignature,e.iMXTimestamp,e.createCollectionRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getCollection",value:function(e,t){var n=this;return Ge$1(this.configuration).getCollection(e.address,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listCollectionFilters",value:function(e,t){var n=this;return Ge$1(this.configuration).listCollectionFilters(e.address,e.pageSize,e.nextPageToken,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listCollections",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Ge$1(this.configuration).listCollections(t.pageSize,t.cursor,t.orderBy,t.direction,t.blacklist,t.whitelist,t.keyword,n).then((function(t){return t(e.axios,e.basePath)}))}},{key:"updateCollection",value:function(e,t){var n=this;return Ge$1(this.configuration).updateCollection(e.address,e.iMXSignature,e.iMXTimestamp,e.updateCollectionRequest,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function We$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Xe$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Ke$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xe$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xe$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var He$1=function(e){return {getDeposit:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getDeposit","id",n),a="/v1/deposits/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=Ke$1(Ke$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=Ke$1(Ke$1(Ke$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),getSignableDeposit:(n=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableDeposit","getSignableDepositRequest",n),a="/v1/signable-deposit-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=Ke$1(Ke$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=Ke$1(Ke$1(Ke$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return n.apply(this,arguments)}),listDeposits:(t=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g){var b,v,w,x,T,k,O,P,_=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return b=_.length>16&&void 0!==_[16]?_[16]:{},v="/v1/deposits",w=new URL(v,we$1),e&&(x=e.baseOptions),T=Ke$1(Ke$1({method:"GET"},x),b),k={},O={},void 0!==n&&(O.page_size=n),void 0!==r&&(O.cursor=r),void 0!==a&&(O.order_by=a),void 0!==i&&(O.direction=i),void 0!==s&&(O.user=s),void 0!==o&&(O.status=o),void 0!==u&&(O.min_timestamp=u),void 0!==c&&(O.max_timestamp=c),void 0!==f&&(O.token_type=f),void 0!==p&&(O.token_id=p),void 0!==d&&(O.asset_id=d),void 0!==l&&(O.token_address=l),void 0!==h&&(O.token_name=h),void 0!==y&&(O.min_quantity=y),void 0!==m&&(O.max_quantity=m),void 0!==g&&(O.metadata=g),ke$2(w,O),P=x&&x.headers?x.headers:{},T.headers=Ke$1(Ke$1(Ke$1({},k),P),b.headers),t.abrupt("return",{url:Pe$1(w),options:T});case 27:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s,o,u,c,f,p,d,l,h,y,m){return t.apply(this,arguments)})};var t,n,r;},Qe$1=function(e){var t=He$1(e);return {getDeposit:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getDeposit(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getSignableDeposit:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableDeposit(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},listDeposits:function(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v){return L$1(W$1.mark((function w(){var x;return W$1.wrap((function(w){for(;;)switch(w.prev=w.next){case 0:return w.next=2,t.listDeposits(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v);case 2:return x=w.sent,w.abrupt("return",_e$1(x,l.default,ye$1,e));case 4:case"end":return w.stop()}}),w)})))()}}},Je$2=function(e){R(n,me$1);var t=We$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"getDeposit",value:function(e,t){var n=this;return Qe$1(this.configuration).getDeposit(e.id,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableDeposit",value:function(e,t){var n=this;return Qe$1(this.configuration).getSignableDeposit(e.getSignableDepositRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listDeposits",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Qe$1(this.configuration).listDeposits(t.pageSize,t.cursor,t.orderBy,t.direction,t.user,t.status,t.minTimestamp,t.maxTimestamp,t.tokenType,t.tokenId,t.assetId,t.tokenAddress,t.tokenName,t.minQuantity,t.maxQuantity,t.metadata,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}();function $e$2(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Ze$2(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Ye$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ze$2(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ze$2(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var et$2=function(e){return {encodeAsset:(t=L$1(W$1.mark((function t(n,r){var a,i,s,o,u,c,f,p,d=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=d.length>2&&void 0!==d[2]?d[2]:{},xe$1("encodeAsset","assetType",n),xe$1("encodeAsset","encodeAssetRequest",r),i="/v1/encode/{assetType}".replace("{".concat("assetType","}"),encodeURIComponent(String(n))),s=new URL(i,we$1),e&&(o=e.baseOptions),u=Ye$1(Ye$1({method:"POST"},o),a),f={},(c={})["Content-Type"]="application/json",ke$2(s,f),p=o&&o.headers?o.headers:{},u.headers=Ye$1(Ye$1(Ye$1({},c),p),a.headers),u.data=Oe$1(r,u,e),t.abrupt("return",{url:Pe$1(s),options:u});case 15:case"end":return t.stop()}}),t)}))),function(e,n){return t.apply(this,arguments)})};var t;},tt$2=function(e){var t=et$2(e);return {encodeAsset:function(n,r,a){return L$1(W$1.mark((function i(){var s;return W$1.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,t.encodeAsset(n,r,a);case 2:return s=i.sent,i.abrupt("return",_e$1(s,l.default,ye$1,e));case 4:case"end":return i.stop()}}),i)})))()}}},nt$1=function(e){R(n,me$1);var t=$e$2(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"encodeAsset",value:function(e,t){var n=this;return tt$2(this.configuration).encodeAsset(e.assetType,e.encodeAssetRequest,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function rt$2(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function at$2(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function it$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?at$2(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):at$2(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var st$1=function(e){return {createExchange:(i=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("createExchange","createExchangeAPIRequest",n),a="/v3/exchanges",i=new URL(a,we$1),e&&(s=e.baseOptions),o=it$1(it$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=it$1(it$1(it$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return i.apply(this,arguments)}),createExchangeTransfer:(a=L$1(W$1.mark((function t(n,r,a,i,s){var o,u,c,f,p,d,l,h,y=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=y.length>5&&void 0!==y[5]?y[5]:{},xe$1("createExchangeTransfer","id",n),xe$1("createExchangeTransfer","createTransferRequest",r),u="/v2/exchanges/{id}/transfers".replace("{".concat("id","}"),encodeURIComponent(String(n))),c=new URL(u,we$1),e&&(f=e.baseOptions),p=it$1(it$1({method:"POST"},f),o),d={},l={},null!=a&&(d["x-imx-eth-address"]=String(a)),null!=i&&(d["x-imx-eth-signature"]=String(i)),null!=s&&(d.Authorization=String(s)),d["Content-Type"]="application/json",ke$2(c,l),h=f&&f.headers?f.headers:{},p.headers=it$1(it$1(it$1({},d),h),o.headers),p.data=Oe$1(r,p,e),t.abrupt("return",{url:Pe$1(c),options:p});case 18:case"end":return t.stop()}}),t)}))),function(e,t,n,r,i){return a.apply(this,arguments)}),getExchange:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getExchange","id",n),a="/v3/exchanges/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=it$1(it$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=it$1(it$1(it$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),getExchangeSignableTransfer:(n=L$1(W$1.mark((function t(n,r){var a,i,s,o,u,c,f,p,d=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=d.length>2&&void 0!==d[2]?d[2]:{},xe$1("getExchangeSignableTransfer","id",n),xe$1("getExchangeSignableTransfer","getSignableTransferRequest",r),i="/v2/exchanges/{id}/signable-transfer-details".replace("{".concat("id","}"),encodeURIComponent(String(n))),s=new URL(i,we$1),e&&(o=e.baseOptions),u=it$1(it$1({method:"POST"},o),a),f={},(c={})["Content-Type"]="application/json",ke$2(s,f),p=o&&o.headers?o.headers:{},u.headers=it$1(it$1(it$1({},c),p),a.headers),u.data=Oe$1(r,u,e),t.abrupt("return",{url:Pe$1(s),options:u});case 15:case"end":return t.stop()}}),t)}))),function(e,t){return n.apply(this,arguments)}),getExchanges:(t=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f){var p,d,l,h,y,m,g,b,v=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return p=v.length>9&&void 0!==v[9]?v[9]:{},d="/v3/exchanges",l=new URL(d,we$1),e&&(h=e.baseOptions),y=it$1(it$1({method:"GET"},h),p),m={},g={},void 0!==n&&(g.page_size=n),void 0!==r&&(g.cursor=r),void 0!==a&&(g.order_by=a),void 0!==i&&(g.direction=i),void 0!==s&&(g.id=s),void 0!==o&&(g.wallet_address=o),void 0!==u&&(g.status=u),void 0!==c&&(g.provider=c),void 0!==f&&(g.transfer_id=f),ke$2(l,g),b=h&&h.headers?h.headers:{},y.headers=it$1(it$1(it$1({},m),b),p.headers),t.abrupt("return",{url:Pe$1(l),options:y});case 20:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s,o,u,c){return t.apply(this,arguments)})};var t,n,r,a,i;},ot$1=function(e){var t=st$1(e);return {createExchange:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.createExchange(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},createExchangeTransfer:function(n,r,a,i,s,o){return L$1(W$1.mark((function u(){var c;return W$1.wrap((function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,t.createExchangeTransfer(n,r,a,i,s,o);case 2:return c=u.sent,u.abrupt("return",_e$1(c,l.default,ye$1,e));case 4:case"end":return u.stop()}}),u)})))()},getExchange:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getExchange(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getExchangeSignableTransfer:function(n,r,a){return L$1(W$1.mark((function i(){var s;return W$1.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,t.getExchangeSignableTransfer(n,r,a);case 2:return s=i.sent,i.abrupt("return",_e$1(s,l.default,ye$1,e));case 4:case"end":return i.stop()}}),i)})))()},getExchanges:function(n,r,a,i,s,o,u,c,f,p){return L$1(W$1.mark((function d(){var h;return W$1.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return d.next=2,t.getExchanges(n,r,a,i,s,o,u,c,f,p);case 2:return h=d.sent,d.abrupt("return",_e$1(h,l.default,ye$1,e));case 4:case"end":return d.stop()}}),d)})))()}}},ut$2=function(e){R(n,me$1);var t=rt$2(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"createExchange",value:function(e,t){var n=this;return ot$1(this.configuration).createExchange(e.createExchangeAPIRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"createExchangeTransfer",value:function(e,t){var n=this;return ot$1(this.configuration).createExchangeTransfer(e.id,e.createTransferRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getExchange",value:function(e,t){var n=this;return ot$1(this.configuration).getExchange(e.id,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getExchangeSignableTransfer",value:function(e,t){var n=this;return ot$1(this.configuration).getExchangeSignableTransfer(e.id,e.getSignableTransferRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getExchanges",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return ot$1(this.configuration).getExchanges(t.pageSize,t.cursor,t.orderBy,t.direction,t.id,t.walletAddress,t.status,t.provider,t.transferId,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}();function ct(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function ft$2(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function pt$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ft$2(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ft$2(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var dt$1=function(e){return {addMetadataSchemaToCollection:(r=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("addMetadataSchemaToCollection","address",n),xe$1("addMetadataSchemaToCollection","iMXSignature",r),xe$1("addMetadataSchemaToCollection","iMXTimestamp",a),xe$1("addMetadataSchemaToCollection","addMetadataSchemaToCollectionRequest",i),o="/v1/collections/{address}/metadata-schema".replace("{".concat("address","}"),encodeURIComponent(String(n))),u=new URL(o,we$1),e&&(c=e.baseOptions),f=pt$1(pt$1({method:"POST"},c),s),p={},d={},null!=r&&(p["IMX-Signature"]=String(r)),null!=a&&(p["IMX-Timestamp"]=String(a)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=pt$1(pt$1(pt$1({},p),l),s.headers),f.data=Oe$1(i,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 19:case"end":return t.stop()}}),t)}))),function(e,t,n,a){return r.apply(this,arguments)}),getMetadataSchema:(n=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getMetadataSchema","address",n),a="/v1/collections/{address}/metadata-schema".replace("{".concat("address","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=pt$1(pt$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=pt$1(pt$1(pt$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return n.apply(this,arguments)}),updateMetadataSchemaByName:(t=L$1(W$1.mark((function t(n,r,a,i,s){var o,u,c,f,p,d,l,h,y=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=y.length>5&&void 0!==y[5]?y[5]:{},xe$1("updateMetadataSchemaByName","address",n),xe$1("updateMetadataSchemaByName","name",r),xe$1("updateMetadataSchemaByName","iMXSignature",a),xe$1("updateMetadataSchemaByName","iMXTimestamp",i),xe$1("updateMetadataSchemaByName","metadataSchemaRequest",s),u="/v1/collections/{address}/metadata-schema/{name}".replace("{".concat("address","}"),encodeURIComponent(String(n))).replace("{".concat("name","}"),encodeURIComponent(String(r))),c=new URL(u,we$1),e&&(f=e.baseOptions),p=pt$1(pt$1({method:"PATCH"},f),o),d={},l={},null!=a&&(d["IMX-Signature"]=String(a)),null!=i&&(d["IMX-Timestamp"]=String(i)),d["Content-Type"]="application/json",ke$2(c,l),h=f&&f.headers?f.headers:{},p.headers=pt$1(pt$1(pt$1({},d),h),o.headers),p.data=Oe$1(s,p,e),t.abrupt("return",{url:Pe$1(c),options:p});case 20:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i){return t.apply(this,arguments)})};var t,n,r;},lt$1=function(e){var t=dt$1(e);return {addMetadataSchemaToCollection:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.addMetadataSchemaToCollection(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},getMetadataSchema:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getMetadataSchema(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},updateMetadataSchemaByName:function(n,r,a,i,s,o){return L$1(W$1.mark((function u(){var c;return W$1.wrap((function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,t.updateMetadataSchemaByName(n,r,a,i,s,o);case 2:return c=u.sent,u.abrupt("return",_e$1(c,l.default,ye$1,e));case 4:case"end":return u.stop()}}),u)})))()}}},ht$1=function(e){R(n,me$1);var t=ct(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"addMetadataSchemaToCollection",value:function(e,t){var n=this;return lt$1(this.configuration).addMetadataSchemaToCollection(e.address,e.iMXSignature,e.iMXTimestamp,e.addMetadataSchemaToCollectionRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getMetadataSchema",value:function(e,t){var n=this;return lt$1(this.configuration).getMetadataSchema(e.address,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"updateMetadataSchemaByName",value:function(e,t){var n=this;return lt$1(this.configuration).updateMetadataSchemaByName(e.address,e.name,e.iMXSignature,e.iMXTimestamp,e.metadataSchemaRequest,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function yt$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function mt$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function gt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mt$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mt$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var bt$2=function(e){return {getAListOfMetadataRefreshes:(a=L$1(W$1.mark((function t(n,r,a,i,s,o){var u,c,f,p,d,l,h,y,m=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return u=m.length>6&&void 0!==m[6]?m[6]:{},xe$1("getAListOfMetadataRefreshes","xImxEthSignature",n),xe$1("getAListOfMetadataRefreshes","xImxEthTimestamp",r),xe$1("getAListOfMetadataRefreshes","xImxEthAddress",a),c="/v1/metadata-refreshes",f=new URL(c,we$1),e&&(p=e.baseOptions),d=gt(gt({method:"GET"},p),u),l={},h={},void 0!==i&&(h.page_size=i),void 0!==s&&(h.cursor=s),void 0!==o&&(h.collection_address=o),null!=n&&(l["x-imx-eth-signature"]=String(n)),null!=r&&(l["x-imx-eth-timestamp"]=String(r)),null!=a&&(l["x-imx-eth-address"]=String(a)),ke$2(f,h),y=p&&p.headers?p.headers:{},d.headers=gt(gt(gt({},l),y),u.headers),t.abrupt("return",{url:Pe$1(f),options:d});case 20:case"end":return t.stop()}}),t)}))),function(e,t,n,r,i,s){return a.apply(this,arguments)}),getMetadataRefreshErrors:(r=L$1(W$1.mark((function t(n,r,a,i,s,o){var u,c,f,p,d,l,h,y,m=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return u=m.length>6&&void 0!==m[6]?m[6]:{},xe$1("getMetadataRefreshErrors","refreshId",n),xe$1("getMetadataRefreshErrors","xImxEthSignature",r),xe$1("getMetadataRefreshErrors","xImxEthTimestamp",a),xe$1("getMetadataRefreshErrors","xImxEthAddress",i),c="/v1/metadata-refreshes/{refresh_id}/errors".replace("{".concat("refresh_id","}"),encodeURIComponent(String(n))),f=new URL(c,we$1),e&&(p=e.baseOptions),d=gt(gt({method:"GET"},p),u),l={},h={},void 0!==s&&(h.page_size=s),void 0!==o&&(h.cursor=o),null!=r&&(l["x-imx-eth-signature"]=String(r)),null!=a&&(l["x-imx-eth-timestamp"]=String(a)),null!=i&&(l["x-imx-eth-address"]=String(i)),ke$2(f,h),y=p&&p.headers?p.headers:{},d.headers=gt(gt(gt({},l),y),u.headers),t.abrupt("return",{url:Pe$1(f),options:d});case 20:case"end":return t.stop()}}),t)}))),function(e,t,n,a,i,s){return r.apply(this,arguments)}),getMetadataRefreshResults:(n=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("getMetadataRefreshResults","refreshId",n),xe$1("getMetadataRefreshResults","xImxEthSignature",r),xe$1("getMetadataRefreshResults","xImxEthTimestamp",a),xe$1("getMetadataRefreshResults","xImxEthAddress",i),o="/v1/metadata-refreshes/{refresh_id}".replace("{".concat("refresh_id","}"),encodeURIComponent(String(n))),u=new URL(o,we$1),e&&(c=e.baseOptions),f=gt(gt({method:"GET"},c),s),p={},d={},null!=r&&(p["x-imx-eth-signature"]=String(r)),null!=a&&(p["x-imx-eth-timestamp"]=String(a)),null!=i&&(p["x-imx-eth-address"]=String(i)),ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=gt(gt(gt({},p),l),s.headers),t.abrupt("return",{url:Pe$1(u),options:f});case 18:case"end":return t.stop()}}),t)}))),function(e,t,r,a){return n.apply(this,arguments)}),requestAMetadataRefresh:(t=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("requestAMetadataRefresh","xImxEthSignature",n),xe$1("requestAMetadataRefresh","xImxEthTimestamp",r),xe$1("requestAMetadataRefresh","xImxEthAddress",a),xe$1("requestAMetadataRefresh","createMetadataRefreshRequest",i),o="/v1/metadata-refreshes",u=new URL(o,we$1),e&&(c=e.baseOptions),f=gt(gt({method:"POST"},c),s),p={},d={},null!=n&&(p["x-imx-eth-signature"]=String(n)),null!=r&&(p["x-imx-eth-timestamp"]=String(r)),null!=a&&(p["x-imx-eth-address"]=String(a)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=gt(gt(gt({},p),l),s.headers),f.data=Oe$1(i,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 20:case"end":return t.stop()}}),t)}))),function(e,n,r,a){return t.apply(this,arguments)})};var t,n,r,a;},vt$1=function(e){var t=bt$2(e);return {getAListOfMetadataRefreshes:function(n,r,a,i,s,o,u){return L$1(W$1.mark((function c(){var f;return W$1.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:return c.next=2,t.getAListOfMetadataRefreshes(n,r,a,i,s,o,u);case 2:return f=c.sent,c.abrupt("return",_e$1(f,l.default,ye$1,e));case 4:case"end":return c.stop()}}),c)})))()},getMetadataRefreshErrors:function(n,r,a,i,s,o,u){return L$1(W$1.mark((function c(){var f;return W$1.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:return c.next=2,t.getMetadataRefreshErrors(n,r,a,i,s,o,u);case 2:return f=c.sent,c.abrupt("return",_e$1(f,l.default,ye$1,e));case 4:case"end":return c.stop()}}),c)})))()},getMetadataRefreshResults:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.getMetadataRefreshResults(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},requestAMetadataRefresh:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.requestAMetadataRefresh(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()}}},wt$1=function(e){R(n,me$1);var t=yt$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"getAListOfMetadataRefreshes",value:function(e,t){var n=this;return vt$1(this.configuration).getAListOfMetadataRefreshes(e.xImxEthSignature,e.xImxEthTimestamp,e.xImxEthAddress,e.pageSize,e.cursor,e.collectionAddress,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getMetadataRefreshErrors",value:function(e,t){var n=this;return vt$1(this.configuration).getMetadataRefreshErrors(e.refreshId,e.xImxEthSignature,e.xImxEthTimestamp,e.xImxEthAddress,e.pageSize,e.cursor,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getMetadataRefreshResults",value:function(e,t){var n=this;return vt$1(this.configuration).getMetadataRefreshResults(e.refreshId,e.xImxEthSignature,e.xImxEthTimestamp,e.xImxEthAddress,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"requestAMetadataRefresh",value:function(e,t){var n=this;return vt$1(this.configuration).requestAMetadataRefresh(e.xImxEthSignature,e.xImxEthTimestamp,e.xImxEthAddress,e.createMetadataRefreshRequest,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function xt$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Tt$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function kt$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Tt$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Tt$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Ot$1=function(e){return {getMint:(a=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getMint","id",n),a="/v1/mints/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=kt$1(kt$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=kt$1(kt$1(kt$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return a.apply(this,arguments)}),getMintableTokenDetailsByClientTokenId:(r=L$1(W$1.mark((function t(n,r){var a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=p.length>2&&void 0!==p[2]?p[2]:{},xe$1("getMintableTokenDetailsByClientTokenId","tokenAddress",n),xe$1("getMintableTokenDetailsByClientTokenId","tokenId",r),i="/v1/mintable-token/{token_address}/{token_id}".replace("{".concat("token_address","}"),encodeURIComponent(String(n))).replace("{".concat("token_id","}"),encodeURIComponent(String(r))),s=new URL(i,we$1),e&&(o=e.baseOptions),u=kt$1(kt$1({method:"GET"},o),a),c={},ke$2(s,{}),f=o&&o.headers?o.headers:{},u.headers=kt$1(kt$1(kt$1({},c),f),a.headers),t.abrupt("return",{url:Pe$1(s),options:u});case 13:case"end":return t.stop()}}),t)}))),function(e,t){return r.apply(this,arguments)}),listMints:(n=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d,l,h,y,m){var g,b,v,w,x,T,k,O,P=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return g=P.length>15&&void 0!==P[15]?P[15]:{},b="/v1/mints",v=new URL(b,we$1),e&&(w=e.baseOptions),x=kt$1(kt$1({method:"GET"},w),g),T={},k={},void 0!==n&&(k.page_size=n),void 0!==r&&(k.cursor=r),void 0!==a&&(k.order_by=a),void 0!==i&&(k.direction=i),void 0!==s&&(k.user=s),void 0!==o&&(k.status=o),void 0!==u&&(k.min_timestamp=u),void 0!==c&&(k.max_timestamp=c),void 0!==f&&(k.token_type=f),void 0!==p&&(k.token_id=p),void 0!==d&&(k.token_name=d),void 0!==l&&(k.token_address=l),void 0!==h&&(k.min_quantity=h),void 0!==y&&(k.max_quantity=y),void 0!==m&&(k.metadata=m),ke$2(v,k),O=w&&w.headers?w.headers:{},x.headers=kt$1(kt$1(kt$1({},T),O),g.headers),t.abrupt("return",{url:Pe$1(v),options:x});case 26:case"end":return t.stop()}}),t)}))),function(e,t,r,a,i,s,o,u,c,f,p,d,l,h,y){return n.apply(this,arguments)}),mintTokens:(t=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("mintTokens","mintTokensRequestV2",n),a="/v2/mints",i=new URL(a,we$1),e&&(s=e.baseOptions),o=kt$1(kt$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=kt$1(kt$1(kt$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return t.apply(this,arguments)})};var t,n,r,a;},Pt$1=function(e){var t=Ot$1(e);return {getMint:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getMint(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getMintableTokenDetailsByClientTokenId:function(n,r,a){return L$1(W$1.mark((function i(){var s;return W$1.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,t.getMintableTokenDetailsByClientTokenId(n,r,a);case 2:return s=i.sent,i.abrupt("return",_e$1(s,l.default,ye$1,e));case 4:case"end":return i.stop()}}),i)})))()},listMints:function(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b){return L$1(W$1.mark((function v(){var w;return W$1.wrap((function(v){for(;;)switch(v.prev=v.next){case 0:return v.next=2,t.listMints(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b);case 2:return w=v.sent,v.abrupt("return",_e$1(w,l.default,ye$1,e));case 4:case"end":return v.stop()}}),v)})))()},mintTokens:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.mintTokens(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()}}},_t$1=function(e){R(n,me$1);var t=xt$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"getMint",value:function(e,t){var n=this;return Pt$1(this.configuration).getMint(e.id,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getMintableTokenDetailsByClientTokenId",value:function(e,t){var n=this;return Pt$1(this.configuration).getMintableTokenDetailsByClientTokenId(e.tokenAddress,e.tokenId,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listMints",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Pt$1(this.configuration).listMints(t.pageSize,t.cursor,t.orderBy,t.direction,t.user,t.status,t.minTimestamp,t.maxTimestamp,t.tokenType,t.tokenId,t.tokenName,t.tokenAddress,t.minQuantity,t.maxQuantity,t.metadata,n).then((function(t){return t(e.axios,e.basePath)}))}},{key:"mintTokens",value:function(e,t){var n=this;return Pt$1(this.configuration).mintTokens(e.mintTokensRequestV2,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function St$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function At$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Rt$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?At$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):At$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Et$1=function(e){return {createNftPrimary:(i=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("createNftPrimary","createAPIRequest",n),a="/v2/nft/primary",i=new URL(a,we$1),e&&(s=e.baseOptions),o=Rt$1(Rt$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=Rt$1(Rt$1(Rt$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return i.apply(this,arguments)}),getCurrenciesNFTCheckoutPrimary:(a=L$1(W$1.mark((function t(n,r){var a,i,s,o,u,c,f,p,d=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=d.length>2&&void 0!==d[2]?d[2]:{},i="/v2/nft/primary/currencies",s=new URL(i,we$1),e&&(o=e.baseOptions),u=Rt$1(Rt$1({method:"GET"},o),a),c={},f={},void 0!==n&&(f.provider=n),void 0!==r&&(f.include_limits=r),ke$2(s,f),p=o&&o.headers?o.headers:{},u.headers=Rt$1(Rt$1(Rt$1({},c),p),a.headers),t.abrupt("return",{url:Pe$1(s),options:u});case 13:case"end":return t.stop()}}),t)}))),function(e,t){return a.apply(this,arguments)}),getNftPrimaryTransaction:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getNftPrimaryTransaction","transactionId",n),a="/v2/nft/primary/{transaction_id}".replace("{".concat("transaction_id","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=Rt$1(Rt$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=Rt$1(Rt$1(Rt$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),getNftPrimaryTransactions:(n=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d){var l,h,y,m,g,b,v,w,x=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l=x.length>11&&void 0!==x[11]?x[11]:{},h="/v2/nft/primary",y=new URL(h,we$1),e&&(m=e.baseOptions),g=Rt$1(Rt$1({method:"GET"},m),l),b={},v={},void 0!==n&&(v.page_size=n),void 0!==r&&(v.cursor=r),void 0!==a&&(v.order_by=a),void 0!==i&&(v.direction=i),void 0!==s&&(v.transaction_id=s),void 0!==o&&(v.contract_address=o),void 0!==u&&(v.seller_wallet_address=u),void 0!==c&&(v.user_wallet_address=c),void 0!==f&&(v.status=f),void 0!==p&&(v.provider=p),void 0!==d&&(v.mint_id=d),ke$2(y,v),w=m&&m.headers?m.headers:{},g.headers=Rt$1(Rt$1(Rt$1({},b),w),l.headers),t.abrupt("return",{url:Pe$1(y),options:g});case 22:case"end":return t.stop()}}),t)}))),function(e,t,r,a,i,s,o,u,c,f,p){return n.apply(this,arguments)}),registerNftPrimarySalesContract:(t=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("registerNftPrimarySalesContract","createAPIRequest",n),a="/v2/nft/primary/register",i=new URL(a,we$1),e&&(s=e.baseOptions),o=Rt$1(Rt$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=Rt$1(Rt$1(Rt$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return t.apply(this,arguments)})};var t,n,r,a,i;},Ct$1=function(e){var t=Et$1(e);return {createNftPrimary:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.createNftPrimary(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getCurrenciesNFTCheckoutPrimary:function(n,r,a){return L$1(W$1.mark((function i(){var s;return W$1.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,t.getCurrenciesNFTCheckoutPrimary(n,r,a);case 2:return s=i.sent,i.abrupt("return",_e$1(s,l.default,ye$1,e));case 4:case"end":return i.stop()}}),i)})))()},getNftPrimaryTransaction:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getNftPrimaryTransaction(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getNftPrimaryTransactions:function(n,r,a,i,s,o,u,c,f,p,d,h){return L$1(W$1.mark((function y(){var m;return W$1.wrap((function(y){for(;;)switch(y.prev=y.next){case 0:return y.next=2,t.getNftPrimaryTransactions(n,r,a,i,s,o,u,c,f,p,d,h);case 2:return m=y.sent,y.abrupt("return",_e$1(m,l.default,ye$1,e));case 4:case"end":return y.stop()}}),y)})))()},registerNftPrimarySalesContract:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.registerNftPrimarySalesContract(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()}}},jt$1=function(e){R(n,me$1);var t=St$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"createNftPrimary",value:function(e,t){var n=this;return Ct$1(this.configuration).createNftPrimary(e.createAPIRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getCurrenciesNFTCheckoutPrimary",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Ct$1(this.configuration).getCurrenciesNFTCheckoutPrimary(t.provider,t.includeLimits,n).then((function(t){return t(e.axios,e.basePath)}))}},{key:"getNftPrimaryTransaction",value:function(e,t){var n=this;return Ct$1(this.configuration).getNftPrimaryTransaction(e.transactionId,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getNftPrimaryTransactions",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Ct$1(this.configuration).getNftPrimaryTransactions(t.pageSize,t.cursor,t.orderBy,t.direction,t.transactionId,t.contractAddress,t.sellerWalletAddress,t.userWalletAddress,t.status,t.provider,t.mintId,n).then((function(t){return t(e.axios,e.basePath)}))}},{key:"registerNftPrimarySalesContract",value:function(e,t){var n=this;return Ct$1(this.configuration).registerNftPrimarySalesContract(e.createAPIRequest,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function It$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Mt$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Nt$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mt$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mt$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Bt$1=function(e){return {cancelOrder:(p=L$1(W$1.mark((function t(n,r,a,i,s){var o,u,c,f,p,d,l,h,y=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=y.length>5&&void 0!==y[5]?y[5]:{},xe$1("cancelOrder","id",n),xe$1("cancelOrder","cancelOrderRequest",r),u="/v1/orders/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),c=new URL(u,we$1),e&&(f=e.baseOptions),p=Nt$1(Nt$1({method:"DELETE"},f),o),d={},l={},null!=a&&(d["x-imx-eth-address"]=String(a)),null!=i&&(d["x-imx-eth-signature"]=String(i)),null!=s&&(d.Authorization=String(s)),d["Content-Type"]="application/json",ke$2(c,l),h=f&&f.headers?f.headers:{},p.headers=Nt$1(Nt$1(Nt$1({},d),h),o.headers),p.data=Oe$1(r,p,e),t.abrupt("return",{url:Pe$1(c),options:p});case 18:case"end":return t.stop()}}),t)}))),function(e,t,n,r,a){return p.apply(this,arguments)}),cancelOrderV3:(f=L$1(W$1.mark((function t(n,r,a,i,s){var o,u,c,f,p,d,l,h,y=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=y.length>5&&void 0!==y[5]?y[5]:{},xe$1("cancelOrderV3","id",n),xe$1("cancelOrderV3","cancelOrderRequest",r),u="/v3/orders/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),c=new URL(u,we$1),e&&(f=e.baseOptions),p=Nt$1(Nt$1({method:"DELETE"},f),o),d={},l={},null!=a&&(d["x-imx-eth-address"]=String(a)),null!=i&&(d["x-imx-eth-signature"]=String(i)),null!=s&&(d.Authorization=String(s)),d["Content-Type"]="application/json",ke$2(c,l),h=f&&f.headers?f.headers:{},p.headers=Nt$1(Nt$1(Nt$1({},d),h),o.headers),p.data=Oe$1(r,p,e),t.abrupt("return",{url:Pe$1(c),options:p});case 18:case"end":return t.stop()}}),t)}))),function(e,t,n,r,a){return f.apply(this,arguments)}),createOrder:(c=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("createOrder","createOrderRequest",n),o="/v1/orders",u=new URL(o,we$1),e&&(c=e.baseOptions),f=Nt$1(Nt$1({method:"POST"},c),s),p={},d={},null!=r&&(p["x-imx-eth-address"]=String(r)),null!=a&&(p["x-imx-eth-signature"]=String(a)),null!=i&&(p.Authorization=String(i)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=Nt$1(Nt$1(Nt$1({},p),l),s.headers),f.data=Oe$1(n,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 17:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return c.apply(this,arguments)}),createOrderV3:(u=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("createOrderV3","createOrderRequest",n),o="/v3/orders",u=new URL(o,we$1),e&&(c=e.baseOptions),f=Nt$1(Nt$1({method:"POST"},c),s),p={},d={},null!=r&&(p["x-imx-eth-address"]=String(r)),null!=a&&(p["x-imx-eth-signature"]=String(a)),null!=i&&(p.Authorization=String(i)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=Nt$1(Nt$1(Nt$1({},p),l),s.headers),f.data=Oe$1(n,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 17:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return u.apply(this,arguments)}),getOrder:(o=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("getOrder","id",n),o="/v1/orders/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),u=new URL(o,we$1),e&&(c=e.baseOptions),f=Nt$1(Nt$1({method:"GET"},c),s),p={},d={},void 0!==r&&(d.include_fees=r),void 0!==a&&(d.auxiliary_fee_percentages=a),void 0!==i&&(d.auxiliary_fee_recipients=i),ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=Nt$1(Nt$1(Nt$1({},p),l),s.headers),t.abrupt("return",{url:Pe$1(u),options:f});case 15:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return o.apply(this,arguments)}),getOrderV3:(s=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("getOrderV3","id",n),o="/v3/orders/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),u=new URL(o,we$1),e&&(c=e.baseOptions),f=Nt$1(Nt$1({method:"GET"},c),s),p={},d={},void 0!==r&&(d.include_fees=r),void 0!==a&&(d.auxiliary_fee_percentages=a),void 0!==i&&(d.auxiliary_fee_recipients=i),ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=Nt$1(Nt$1(Nt$1({},p),l),s.headers),t.abrupt("return",{url:Pe$1(u),options:f});case 15:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return s.apply(this,arguments)}),getSignableCancelOrder:(i=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableCancelOrder","getSignableCancelOrderRequest",n),a="/v1/signable-cancel-order-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=Nt$1(Nt$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=Nt$1(Nt$1(Nt$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return i.apply(this,arguments)}),getSignableCancelOrderV3:(a=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableCancelOrderV3","getSignableCancelOrderRequest",n),a="/v3/signable-cancel-order-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=Nt$1(Nt$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=Nt$1(Nt$1(Nt$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return a.apply(this,arguments)}),getSignableOrder:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableOrder","getSignableOrderRequestV3",n),a="/v3/signable-order-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=Nt$1(Nt$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=Nt$1(Nt$1(Nt$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),listOrders:(n=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E){var C,j,I,M,N,B,D,U,F=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return C=F.length>29&&void 0!==F[29]?F[29]:{},j="/v1/orders",I=new URL(j,we$1),e&&(M=e.baseOptions),N=Nt$1(Nt$1({method:"GET"},M),C),B={},D={},void 0!==n&&(D.page_size=n),void 0!==r&&(D.cursor=r),void 0!==a&&(D.order_by=a),void 0!==i&&(D.direction=i),void 0!==s&&(D.user=s),void 0!==o&&(D.status=o),void 0!==u&&(D.min_timestamp=u),void 0!==c&&(D.max_timestamp=c),void 0!==f&&(D.updated_min_timestamp=f),void 0!==p&&(D.updated_max_timestamp=p),void 0!==d&&(D.buy_token_type=d),void 0!==l&&(D.buy_token_id=l),void 0!==h&&(D.buy_asset_id=h),void 0!==y&&(D.buy_token_address=y),void 0!==m&&(D.buy_token_name=m),void 0!==g&&(D.buy_min_quantity=g),void 0!==b&&(D.buy_max_quantity=b),void 0!==v&&(D.buy_metadata=v),void 0!==w&&(D.sell_token_type=w),void 0!==x&&(D.sell_token_id=x),void 0!==T&&(D.sell_asset_id=T),void 0!==k&&(D.sell_token_address=k),void 0!==O&&(D.sell_token_name=O),void 0!==P&&(D.sell_min_quantity=P),void 0!==_&&(D.sell_max_quantity=_),void 0!==S&&(D.sell_metadata=S),void 0!==A&&(D.auxiliary_fee_percentages=A),void 0!==R&&(D.auxiliary_fee_recipients=R),void 0!==E&&(D.include_fees=E),ke$2(I,D),U=M&&M.headers?M.headers:{},N.headers=Nt$1(Nt$1(Nt$1({},B),U),C.headers),t.abrupt("return",{url:Pe$1(I),options:N});case 40:case"end":return t.stop()}}),t)}))),function(e,t,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R){return n.apply(this,arguments)}),listOrdersV3:(t=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E){var C,j,I,M,N,B,D,U,F=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return C=F.length>29&&void 0!==F[29]?F[29]:{},j="/v3/orders",I=new URL(j,we$1),e&&(M=e.baseOptions),N=Nt$1(Nt$1({method:"GET"},M),C),B={},D={},void 0!==n&&(D.page_size=n),void 0!==r&&(D.cursor=r),void 0!==a&&(D.order_by=a),void 0!==i&&(D.direction=i),void 0!==s&&(D.user=s),void 0!==o&&(D.status=o),void 0!==u&&(D.min_timestamp=u),void 0!==c&&(D.max_timestamp=c),void 0!==f&&(D.updated_min_timestamp=f),void 0!==p&&(D.updated_max_timestamp=p),void 0!==d&&(D.buy_token_type=d),void 0!==l&&(D.buy_token_id=l),void 0!==h&&(D.buy_asset_id=h),void 0!==y&&(D.buy_token_address=y),void 0!==m&&(D.buy_token_name=m),void 0!==g&&(D.buy_min_quantity=g),void 0!==b&&(D.buy_max_quantity=b),void 0!==v&&(D.buy_metadata=v),void 0!==w&&(D.sell_token_type=w),void 0!==x&&(D.sell_token_id=x),void 0!==T&&(D.sell_asset_id=T),void 0!==k&&(D.sell_token_address=k),void 0!==O&&(D.sell_token_name=O),void 0!==P&&(D.sell_min_quantity=P),void 0!==_&&(D.sell_max_quantity=_),void 0!==S&&(D.sell_metadata=S),void 0!==A&&(D.auxiliary_fee_percentages=A),void 0!==R&&(D.auxiliary_fee_recipients=R),void 0!==E&&(D.include_fees=E),ke$2(I,D),U=M&&M.headers?M.headers:{},N.headers=Nt$1(Nt$1(Nt$1({},B),U),C.headers),t.abrupt("return",{url:Pe$1(I),options:N});case 40:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R){return t.apply(this,arguments)})};var t,n,r,a,i,s,o,u,c,f,p;},Dt$1=function(e){var t=Bt$1(e);return {cancelOrder:function(n,r,a,i,s,o){return L$1(W$1.mark((function u(){var c;return W$1.wrap((function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,t.cancelOrder(n,r,a,i,s,o);case 2:return c=u.sent,u.abrupt("return",_e$1(c,l.default,ye$1,e));case 4:case"end":return u.stop()}}),u)})))()},cancelOrderV3:function(n,r,a,i,s,o){return L$1(W$1.mark((function u(){var c;return W$1.wrap((function(u){for(;;)switch(u.prev=u.next){case 0:return u.next=2,t.cancelOrderV3(n,r,a,i,s,o);case 2:return c=u.sent,u.abrupt("return",_e$1(c,l.default,ye$1,e));case 4:case"end":return u.stop()}}),u)})))()},createOrder:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.createOrder(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},createOrderV3:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.createOrderV3(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},getOrder:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.getOrder(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},getOrderV3:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.getOrderV3(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},getSignableCancelOrder:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableCancelOrder(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getSignableCancelOrderV3:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableCancelOrderV3(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getSignableOrder:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableOrder(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},listOrders:function(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j){return L$1(W$1.mark((function I(){var M;return W$1.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,t.listOrders(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j);case 2:return M=I.sent,I.abrupt("return",_e$1(M,l.default,ye$1,e));case 4:case"end":return I.stop()}}),I)})))()},listOrdersV3:function(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j){return L$1(W$1.mark((function I(){var M;return W$1.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,t.listOrdersV3(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j);case 2:return M=I.sent,I.abrupt("return",_e$1(M,l.default,ye$1,e));case 4:case"end":return I.stop()}}),I)})))()}}},Ut$1=function(e){R(n,me$1);var t=It$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"cancelOrder",value:function(e,t){var n=this;return Dt$1(this.configuration).cancelOrder(e.id,e.cancelOrderRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"cancelOrderV3",value:function(e,t){var n=this;return Dt$1(this.configuration).cancelOrderV3(e.id,e.cancelOrderRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"createOrder",value:function(e,t){var n=this;return Dt$1(this.configuration).createOrder(e.createOrderRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"createOrderV3",value:function(e,t){var n=this;return Dt$1(this.configuration).createOrderV3(e.createOrderRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getOrder",value:function(e,t){var n=this;return Dt$1(this.configuration).getOrder(e.id,e.includeFees,e.auxiliaryFeePercentages,e.auxiliaryFeeRecipients,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getOrderV3",value:function(e,t){var n=this;return Dt$1(this.configuration).getOrderV3(e.id,e.includeFees,e.auxiliaryFeePercentages,e.auxiliaryFeeRecipients,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableCancelOrder",value:function(e,t){var n=this;return Dt$1(this.configuration).getSignableCancelOrder(e.getSignableCancelOrderRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableCancelOrderV3",value:function(e,t){var n=this;return Dt$1(this.configuration).getSignableCancelOrderV3(e.getSignableCancelOrderRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableOrder",value:function(e,t){var n=this;return Dt$1(this.configuration).getSignableOrder(e.getSignableOrderRequestV3,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listOrders",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Dt$1(this.configuration).listOrders(t.pageSize,t.cursor,t.orderBy,t.direction,t.user,t.status,t.minTimestamp,t.maxTimestamp,t.updatedMinTimestamp,t.updatedMaxTimestamp,t.buyTokenType,t.buyTokenId,t.buyAssetId,t.buyTokenAddress,t.buyTokenName,t.buyMinQuantity,t.buyMaxQuantity,t.buyMetadata,t.sellTokenType,t.sellTokenId,t.sellAssetId,t.sellTokenAddress,t.sellTokenName,t.sellMinQuantity,t.sellMaxQuantity,t.sellMetadata,t.auxiliaryFeePercentages,t.auxiliaryFeeRecipients,t.includeFees,n).then((function(t){return t(e.axios,e.basePath)}))}},{key:"listOrdersV3",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Dt$1(this.configuration).listOrdersV3(t.pageSize,t.cursor,t.orderBy,t.direction,t.user,t.status,t.minTimestamp,t.maxTimestamp,t.updatedMinTimestamp,t.updatedMaxTimestamp,t.buyTokenType,t.buyTokenId,t.buyAssetId,t.buyTokenAddress,t.buyTokenName,t.buyMinQuantity,t.buyMaxQuantity,t.buyMetadata,t.sellTokenType,t.sellTokenId,t.sellAssetId,t.sellTokenAddress,t.sellTokenName,t.sellMinQuantity,t.sellMaxQuantity,t.sellMetadata,t.auxiliaryFeePercentages,t.auxiliaryFeeRecipients,t.includeFees,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}();function Ft$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Lt$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function qt$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Lt$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Lt$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Vt$1=function(e){return {createProject:(r=L$1(W$1.mark((function t(n,r,a){var i,s,o,u,c,f,p,d,l=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=l.length>3&&void 0!==l[3]?l[3]:{},xe$1("createProject","iMXSignature",n),xe$1("createProject","iMXTimestamp",r),xe$1("createProject","createProjectRequest",a),s="/v1/projects",o=new URL(s,we$1),e&&(u=e.baseOptions),c=qt$1(qt$1({method:"POST"},u),i),f={},p={},null!=n&&(f["IMX-Signature"]=String(n)),null!=r&&(f["IMX-Timestamp"]=String(r)),f["Content-Type"]="application/json",ke$2(o,p),d=u&&u.headers?u.headers:{},c.headers=qt$1(qt$1(qt$1({},f),d),i.headers),c.data=Oe$1(a,c,e),t.abrupt("return",{url:Pe$1(o),options:c});case 18:case"end":return t.stop()}}),t)}))),function(e,t,n){return r.apply(this,arguments)}),getProject:(n=L$1(W$1.mark((function t(n,r,a){var i,s,o,u,c,f,p,d,l=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=l.length>3&&void 0!==l[3]?l[3]:{},xe$1("getProject","id",n),xe$1("getProject","iMXSignature",r),xe$1("getProject","iMXTimestamp",a),s="/v1/projects/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),o=new URL(s,we$1),e&&(u=e.baseOptions),c=qt$1(qt$1({method:"GET"},u),i),f={},p={},null!=r&&(f["IMX-Signature"]=String(r)),null!=a&&(f["IMX-Timestamp"]=String(a)),ke$2(o,p),d=u&&u.headers?u.headers:{},c.headers=qt$1(qt$1(qt$1({},f),d),i.headers),t.abrupt("return",{url:Pe$1(o),options:c});case 16:case"end":return t.stop()}}),t)}))),function(e,t,r){return n.apply(this,arguments)}),getProjects:(t=L$1(W$1.mark((function t(n,r,a,i,s,o){var u,c,f,p,d,l,h,y,m=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return u=m.length>6&&void 0!==m[6]?m[6]:{},xe$1("getProjects","iMXSignature",n),xe$1("getProjects","iMXTimestamp",r),c="/v1/projects",f=new URL(c,we$1),e&&(p=e.baseOptions),d=qt$1(qt$1({method:"GET"},p),u),l={},h={},void 0!==a&&(h.page_size=a),void 0!==i&&(h.cursor=i),void 0!==s&&(h.order_by=s),void 0!==o&&(h.direction=o),null!=n&&(l["IMX-Signature"]=String(n)),null!=r&&(l["IMX-Timestamp"]=String(r)),ke$2(f,h),y=p&&p.headers?p.headers:{},d.headers=qt$1(qt$1(qt$1({},l),y),u.headers),t.abrupt("return",{url:Pe$1(f),options:d});case 19:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s){return t.apply(this,arguments)})};var t,n,r;},Gt$1=function(e){var t=Vt$1(e);return {createProject:function(n,r,a,i){return L$1(W$1.mark((function s(){var o;return W$1.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,t.createProject(n,r,a,i);case 2:return o=s.sent,s.abrupt("return",_e$1(o,l.default,ye$1,e));case 4:case"end":return s.stop()}}),s)})))()},getProject:function(n,r,a,i){return L$1(W$1.mark((function s(){var o;return W$1.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,t.getProject(n,r,a,i);case 2:return o=s.sent,s.abrupt("return",_e$1(o,l.default,ye$1,e));case 4:case"end":return s.stop()}}),s)})))()},getProjects:function(n,r,a,i,s,o,u){return L$1(W$1.mark((function c(){var f;return W$1.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:return c.next=2,t.getProjects(n,r,a,i,s,o,u);case 2:return f=c.sent,c.abrupt("return",_e$1(f,l.default,ye$1,e));case 4:case"end":return c.stop()}}),c)})))()}}},zt$1=function(e){R(n,me$1);var t=Ft$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"createProject",value:function(e,t){var n=this;return Gt$1(this.configuration).createProject(e.iMXSignature,e.iMXTimestamp,e.createProjectRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getProject",value:function(e,t){var n=this;return Gt$1(this.configuration).getProject(e.id,e.iMXSignature,e.iMXTimestamp,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getProjects",value:function(e,t){var n=this;return Gt$1(this.configuration).getProjects(e.iMXSignature,e.iMXTimestamp,e.pageSize,e.cursor,e.orderBy,e.direction,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function Wt$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Xt$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Kt$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xt$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xt$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var Ht$1=function(e){return {getToken:(n=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getToken","address",n),a="/v1/tokens/{address}".replace("{".concat("address","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=Kt$1(Kt$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=Kt$1(Kt$1(Kt$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return n.apply(this,arguments)}),listTokens:(t=L$1(W$1.mark((function t(n,r,a,i,s,o){var u,c,f,p,d,l,h,y,m=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return u=m.length>6&&void 0!==m[6]?m[6]:{},c="/v1/tokens",f=new URL(c,we$1),e&&(p=e.baseOptions),d=Kt$1(Kt$1({method:"GET"},p),u),l={},h={},void 0!==n&&(h.page_size=n),void 0!==r&&(h.cursor=r),void 0!==a&&(h.order_by=a),void 0!==i&&(h.direction=i),void 0!==s&&(h.address=s),void 0!==o&&(h.symbols=o),ke$2(f,h),y=p&&p.headers?p.headers:{},d.headers=Kt$1(Kt$1(Kt$1({},l),y),u.headers),t.abrupt("return",{url:Pe$1(f),options:d});case 17:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s){return t.apply(this,arguments)})};var t,n;},Qt$1=function(e){var t=Ht$1(e);return {getToken:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getToken(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},listTokens:function(n,r,a,i,s,o,u){return L$1(W$1.mark((function c(){var f;return W$1.wrap((function(c){for(;;)switch(c.prev=c.next){case 0:return c.next=2,t.listTokens(n,r,a,i,s,o,u);case 2:return f=c.sent,c.abrupt("return",_e$1(f,l.default,ye$1,e));case 4:case"end":return c.stop()}}),c)})))()}}},Jt$1=function(e){R(n,me$1);var t=Wt$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"getToken",value:function(e,t){var n=this;return Qt$1(this.configuration).getToken(e.address,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listTokens",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return Qt$1(this.configuration).listTokens(t.pageSize,t.cursor,t.orderBy,t.direction,t.address,t.symbols,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}();function $t$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function Zt$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Yt$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zt$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zt$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var en$1=function(e){return {createTrade:(s=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("createTrade","createTradeRequest",n),o="/v1/trades",u=new URL(o,we$1),e&&(c=e.baseOptions),f=Yt$1(Yt$1({method:"POST"},c),s),p={},d={},null!=r&&(p["x-imx-eth-address"]=String(r)),null!=a&&(p["x-imx-eth-signature"]=String(a)),null!=i&&(p.Authorization=String(i)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=Yt$1(Yt$1(Yt$1({},p),l),s.headers),f.data=Oe$1(n,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 17:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return s.apply(this,arguments)}),createTradeV3:(i=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("createTradeV3","createTradeRequest",n),o="/v3/trades",u=new URL(o,we$1),e&&(c=e.baseOptions),f=Yt$1(Yt$1({method:"POST"},c),s),p={},d={},null!=r&&(p["x-imx-eth-address"]=String(r)),null!=a&&(p["x-imx-eth-signature"]=String(a)),null!=i&&(p.Authorization=String(i)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=Yt$1(Yt$1(Yt$1({},p),l),s.headers),f.data=Oe$1(n,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 17:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return i.apply(this,arguments)}),getSignableTrade:(a=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableTrade","getSignableTradeRequest",n),a="/v3/signable-trade-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=Yt$1(Yt$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=Yt$1(Yt$1(Yt$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return a.apply(this,arguments)}),getTrade:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getTrade","id",n),a="/v1/trades/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=Yt$1(Yt$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=Yt$1(Yt$1(Yt$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),listTrades:(n=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d){var l,h,y,m,g,b,v,w,x=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l=x.length>11&&void 0!==x[11]?x[11]:{},h="/v1/trades",y=new URL(h,we$1),e&&(m=e.baseOptions),g=Yt$1(Yt$1({method:"GET"},m),l),b={},v={},void 0!==n&&(v.party_a_token_type=n),void 0!==r&&(v.party_a_token_address=r),void 0!==a&&(v.party_b_token_type=a),void 0!==i&&(v.party_b_token_address=i),void 0!==s&&(v.party_b_token_id=s),void 0!==o&&(v.page_size=o),void 0!==u&&(v.cursor=u),void 0!==c&&(v.order_by=c),void 0!==f&&(v.direction=f),void 0!==p&&(v.min_timestamp=p),void 0!==d&&(v.max_timestamp=d),ke$2(y,v),w=m&&m.headers?m.headers:{},g.headers=Yt$1(Yt$1(Yt$1({},b),w),l.headers),t.abrupt("return",{url:Pe$1(y),options:g});case 22:case"end":return t.stop()}}),t)}))),function(e,t,r,a,i,s,o,u,c,f,p){return n.apply(this,arguments)}),listTradesV3:(t=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d){var l,h,y,m,g,b,v,w,x=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return l=x.length>11&&void 0!==x[11]?x[11]:{},h="/v3/trades",y=new URL(h,we$1),e&&(m=e.baseOptions),g=Yt$1(Yt$1({method:"GET"},m),l),b={},v={},void 0!==n&&(v.party_a_token_type=n),void 0!==r&&(v.party_a_token_address=r),void 0!==a&&(v.party_b_token_type=a),void 0!==i&&(v.party_b_token_address=i),void 0!==s&&(v.party_b_token_id=s),void 0!==o&&(v.page_size=o),void 0!==u&&(v.cursor=u),void 0!==c&&(v.order_by=c),void 0!==f&&(v.direction=f),void 0!==p&&(v.min_timestamp=p),void 0!==d&&(v.max_timestamp=d),ke$2(y,v),w=m&&m.headers?m.headers:{},g.headers=Yt$1(Yt$1(Yt$1({},b),w),l.headers),t.abrupt("return",{url:Pe$1(y),options:g});case 22:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s,o,u,c,f,p){return t.apply(this,arguments)})};var t,n,r,a,i,s;},tn$1=function(e){var t=en$1(e);return {createTrade:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.createTrade(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},createTradeV3:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.createTradeV3(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},getSignableTrade:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableTrade(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getTrade:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getTrade(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},listTrades:function(n,r,a,i,s,o,u,c,f,p,d,h){return L$1(W$1.mark((function y(){var m;return W$1.wrap((function(y){for(;;)switch(y.prev=y.next){case 0:return y.next=2,t.listTrades(n,r,a,i,s,o,u,c,f,p,d,h);case 2:return m=y.sent,y.abrupt("return",_e$1(m,l.default,ye$1,e));case 4:case"end":return y.stop()}}),y)})))()},listTradesV3:function(n,r,a,i,s,o,u,c,f,p,d,h){return L$1(W$1.mark((function y(){var m;return W$1.wrap((function(y){for(;;)switch(y.prev=y.next){case 0:return y.next=2,t.listTradesV3(n,r,a,i,s,o,u,c,f,p,d,h);case 2:return m=y.sent,y.abrupt("return",_e$1(m,l.default,ye$1,e));case 4:case"end":return y.stop()}}),y)})))()}}},nn$1=function(e){R(n,me$1);var t=$t$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"createTrade",value:function(e,t){var n=this;return tn$1(this.configuration).createTrade(e.createTradeRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"createTradeV3",value:function(e,t){var n=this;return tn$1(this.configuration).createTradeV3(e.createTradeRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableTrade",value:function(e,t){var n=this;return tn$1(this.configuration).getSignableTrade(e.getSignableTradeRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getTrade",value:function(e,t){var n=this;return tn$1(this.configuration).getTrade(e.id,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listTrades",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return tn$1(this.configuration).listTrades(t.partyATokenType,t.partyATokenAddress,t.partyBTokenType,t.partyBTokenAddress,t.partyBTokenId,t.pageSize,t.cursor,t.orderBy,t.direction,t.minTimestamp,t.maxTimestamp,n).then((function(t){return t(e.axios,e.basePath)}))}},{key:"listTradesV3",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return tn$1(this.configuration).listTradesV3(t.partyATokenType,t.partyATokenAddress,t.partyBTokenType,t.partyBTokenAddress,t.partyBTokenId,t.pageSize,t.cursor,t.orderBy,t.direction,t.minTimestamp,t.maxTimestamp,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}();function rn$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function an$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function sn$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?an$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):an$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var on$1=function(e){return {createTransfer:(s=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("createTransfer","createTransferRequestV2",n),o="/v2/transfers",u=new URL(o,we$1),e&&(c=e.baseOptions),f=sn$1(sn$1({method:"POST"},c),s),p={},d={},null!=r&&(p["x-imx-eth-address"]=String(r)),null!=a&&(p["x-imx-eth-signature"]=String(a)),null!=i&&(p.Authorization=String(i)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=sn$1(sn$1(sn$1({},p),l),s.headers),f.data=Oe$1(n,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 17:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return s.apply(this,arguments)}),createTransferV1:(i=L$1(W$1.mark((function t(n,r,a,i){var s,o,u,c,f,p,d,l,h=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=h.length>4&&void 0!==h[4]?h[4]:{},xe$1("createTransferV1","createTransferRequest",n),o="/v1/transfers",u=new URL(o,we$1),e&&(c=e.baseOptions),f=sn$1(sn$1({method:"POST"},c),s),p={},d={},null!=r&&(p["x-imx-eth-address"]=String(r)),null!=a&&(p["x-imx-eth-signature"]=String(a)),null!=i&&(p.Authorization=String(i)),p["Content-Type"]="application/json",ke$2(u,d),l=c&&c.headers?c.headers:{},f.headers=sn$1(sn$1(sn$1({},p),l),s.headers),f.data=Oe$1(n,f,e),t.abrupt("return",{url:Pe$1(u),options:f});case 17:case"end":return t.stop()}}),t)}))),function(e,t,n,r){return i.apply(this,arguments)}),getSignableTransfer:(a=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableTransfer","getSignableTransferRequestV2",n),a="/v2/signable-transfer-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=sn$1(sn$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=sn$1(sn$1(sn$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return a.apply(this,arguments)}),getSignableTransferV1:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableTransferV1","getSignableTransferRequest",n),a="/v1/signable-transfer-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=sn$1(sn$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=sn$1(sn$1(sn$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),getTransfer:(n=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getTransfer","id",n),a="/v1/transfers/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=sn$1(sn$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=sn$1(sn$1(sn$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return n.apply(this,arguments)}),listTransfers:(t=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b){var v,w,x,T,k,O,P,_,S=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return v=S.length>17&&void 0!==S[17]?S[17]:{},w="/v1/transfers",x=new URL(w,we$1),e&&(T=e.baseOptions),k=sn$1(sn$1({method:"GET"},T),v),O={},P={},void 0!==n&&(P.page_size=n),void 0!==r&&(P.cursor=r),void 0!==a&&(P.order_by=a),void 0!==i&&(P.direction=i),void 0!==s&&(P.user=s),void 0!==o&&(P.receiver=o),void 0!==u&&(P.status=u),void 0!==c&&(P.min_timestamp=c),void 0!==f&&(P.max_timestamp=f),void 0!==p&&(P.token_type=p),void 0!==d&&(P.token_id=d),void 0!==l&&(P.asset_id=l),void 0!==h&&(P.token_address=h),void 0!==y&&(P.token_name=y),void 0!==m&&(P.min_quantity=m),void 0!==g&&(P.max_quantity=g),void 0!==b&&(P.metadata=b),ke$2(x,P),_=T&&T.headers?T.headers:{},k.headers=sn$1(sn$1(sn$1({},O),_),v.headers),t.abrupt("return",{url:Pe$1(x),options:k});case 28:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g){return t.apply(this,arguments)})};var t,n,r,a,i,s;},un$1=function(e){var t=on$1(e);return {createTransfer:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.createTransfer(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},createTransferV1:function(n,r,a,i,s){return L$1(W$1.mark((function o(){var u;return W$1.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,t.createTransferV1(n,r,a,i,s);case 2:return u=o.sent,o.abrupt("return",_e$1(u,l.default,ye$1,e));case 4:case"end":return o.stop()}}),o)})))()},getSignableTransfer:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableTransfer(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getSignableTransferV1:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableTransferV1(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getTransfer:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getTransfer(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},listTransfers:function(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w){return L$1(W$1.mark((function x(){var T;return W$1.wrap((function(x){for(;;)switch(x.prev=x.next){case 0:return x.next=2,t.listTransfers(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w);case 2:return T=x.sent,x.abrupt("return",_e$1(T,l.default,ye$1,e));case 4:case"end":return x.stop()}}),x)})))()}}},cn$1=function(e){R(n,me$1);var t=rn$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"createTransfer",value:function(e,t){var n=this;return un$1(this.configuration).createTransfer(e.createTransferRequestV2,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"createTransferV1",value:function(e,t){var n=this;return un$1(this.configuration).createTransferV1(e.createTransferRequest,e.xImxEthAddress,e.xImxEthSignature,e.authorization,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableTransfer",value:function(e,t){var n=this;return un$1(this.configuration).getSignableTransfer(e.getSignableTransferRequestV2,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableTransferV1",value:function(e,t){var n=this;return un$1(this.configuration).getSignableTransferV1(e.getSignableTransferRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getTransfer",value:function(e,t){var n=this;return un$1(this.configuration).getTransfer(e.id,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listTransfers",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return un$1(this.configuration).listTransfers(t.pageSize,t.cursor,t.orderBy,t.direction,t.user,t.receiver,t.status,t.minTimestamp,t.maxTimestamp,t.tokenType,t.tokenId,t.assetId,t.tokenAddress,t.tokenName,t.minQuantity,t.maxQuantity,t.metadata,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}();function fn$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function pn$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function dn$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pn$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pn$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var ln$1=function(e){return {getSignableRegistration:(i=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableRegistration","getSignableRegistrationRequest",n),a="/v1/signable-registration",i=new URL(a,we$1),e&&(s=e.baseOptions),o=dn$1(dn$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=dn$1(dn$1(dn$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return i.apply(this,arguments)}),getSignableRegistrationOffchain:(a=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableRegistrationOffchain","getSignableRegistrationRequest",n),a="/v1/signable-registration-offchain",i=new URL(a,we$1),e&&(s=e.baseOptions),o=dn$1(dn$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=dn$1(dn$1(dn$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return a.apply(this,arguments)}),getUsers:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getUsers","user",n),a="/v1/users/{user}".replace("{".concat("user","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=dn$1(dn$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=dn$1(dn$1(dn$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),registerPassportUser:(n=L$1(W$1.mark((function t(n,r){var a,i,s,o,u,c,f,p,d=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a=d.length>2&&void 0!==d[2]?d[2]:{},xe$1("registerPassportUser","authorization",n),xe$1("registerPassportUser","registerPassportUserRequest",r),i="/v1/passport/users",s=new URL(i,we$1),e&&(o=e.baseOptions),u=dn$1(dn$1({method:"POST"},o),a),c={},f={},null!=n&&(c.Authorization=String(n)),c["Content-Type"]="application/json",ke$2(s,f),p=o&&o.headers?o.headers:{},u.headers=dn$1(dn$1(dn$1({},c),p),a.headers),u.data=Oe$1(r,u,e),t.abrupt("return",{url:Pe$1(s),options:u});case 16:case"end":return t.stop()}}),t)}))),function(e,t){return n.apply(this,arguments)}),registerUser:(t=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("registerUser","registerUserRequest",n),a="/v1/users",i=new URL(a,we$1),e&&(s=e.baseOptions),o=dn$1(dn$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=dn$1(dn$1(dn$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return t.apply(this,arguments)})};var t,n,r,a,i;},hn$1=function(e){var t=ln$1(e);return {getSignableRegistration:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableRegistration(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getSignableRegistrationOffchain:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableRegistrationOffchain(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getUsers:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getUsers(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},registerPassportUser:function(n,r,a){return L$1(W$1.mark((function i(){var s;return W$1.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,t.registerPassportUser(n,r,a);case 2:return s=i.sent,i.abrupt("return",_e$1(s,l.default,ye$1,e));case 4:case"end":return i.stop()}}),i)})))()},registerUser:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.registerUser(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()}}},yn$1=function(e){R(n,me$1);var t=fn$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"getSignableRegistration",value:function(e,t){var n=this;return hn$1(this.configuration).getSignableRegistration(e.getSignableRegistrationRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableRegistrationOffchain",value:function(e,t){var n=this;return hn$1(this.configuration).getSignableRegistrationOffchain(e.getSignableRegistrationRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getUsers",value:function(e,t){var n=this;return hn$1(this.configuration).getUsers(e.user,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"registerPassportUser",value:function(e,t){var n=this;return hn$1(this.configuration).registerPassportUser(e.authorization,e.registerPassportUserRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"registerUser",value:function(e,t){var n=this;return hn$1(this.configuration).registerUser(e.registerUserRequest,t).then((function(e){return e(n.axios,n.basePath)}))}}]),n}();function mn$1(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}function gn$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function bn$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gn$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gn$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var vn$1=function(e){return {createWithdrawal:(a=L$1(W$1.mark((function t(n,r,a){var i,s,o,u,c,f,p,d,l=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=l.length>3&&void 0!==l[3]?l[3]:{},xe$1("createWithdrawal","xImxEthAddress",n),xe$1("createWithdrawal","xImxEthSignature",r),xe$1("createWithdrawal","createWithdrawalRequest",a),s="/v1/withdrawals",o=new URL(s,we$1),e&&(u=e.baseOptions),c=bn$1(bn$1({method:"POST"},u),i),f={},p={},null!=n&&(f["x-imx-eth-address"]=String(n)),null!=r&&(f["x-imx-eth-signature"]=String(r)),f["Content-Type"]="application/json",ke$2(o,p),d=u&&u.headers?u.headers:{},c.headers=bn$1(bn$1(bn$1({},f),d),i.headers),c.data=Oe$1(a,c,e),t.abrupt("return",{url:Pe$1(o),options:c});case 18:case"end":return t.stop()}}),t)}))),function(e,t,n){return a.apply(this,arguments)}),getSignableWithdrawal:(r=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f,p=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=p.length>1&&void 0!==p[1]?p[1]:{},xe$1("getSignableWithdrawal","getSignableWithdrawalRequest",n),a="/v1/signable-withdrawal-details",i=new URL(a,we$1),e&&(s=e.baseOptions),o=bn$1(bn$1({method:"POST"},s),r),c={},(u={})["Content-Type"]="application/json",ke$2(i,c),f=s&&s.headers?s.headers:{},o.headers=bn$1(bn$1(bn$1({},u),f),r.headers),o.data=Oe$1(n,o,e),t.abrupt("return",{url:Pe$1(i),options:o});case 14:case"end":return t.stop()}}),t)}))),function(e){return r.apply(this,arguments)}),getWithdrawal:(n=L$1(W$1.mark((function t(n){var r,a,i,s,o,u,c,f=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=f.length>1&&void 0!==f[1]?f[1]:{},xe$1("getWithdrawal","id",n),a="/v1/withdrawals/{id}".replace("{".concat("id","}"),encodeURIComponent(String(n))),i=new URL(a,we$1),e&&(s=e.baseOptions),o=bn$1(bn$1({method:"GET"},s),r),u={},ke$2(i,{}),c=s&&s.headers?s.headers:{},o.headers=bn$1(bn$1(bn$1({},u),c),r.headers),t.abrupt("return",{url:Pe$1(i),options:o});case 12:case"end":return t.stop()}}),t)}))),function(e){return n.apply(this,arguments)}),listWithdrawals:(t=L$1(W$1.mark((function t(n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v){var w,x,T,k,O,P,_,S,A=arguments;return W$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return w=A.length>18&&void 0!==A[18]?A[18]:{},x="/v1/withdrawals",T=new URL(x,we$1),e&&(k=e.baseOptions),O=bn$1(bn$1({method:"GET"},k),w),P={},_={},void 0!==n&&(_.withdrawn_to_wallet=n),void 0!==r&&(_.rollup_status=r),void 0!==a&&(_.page_size=a),void 0!==i&&(_.cursor=i),void 0!==s&&(_.order_by=s),void 0!==o&&(_.direction=o),void 0!==u&&(_.user=u),void 0!==c&&(_.status=c),void 0!==f&&(_.min_timestamp=f),void 0!==p&&(_.max_timestamp=p),void 0!==d&&(_.token_type=d),void 0!==l&&(_.token_id=l),void 0!==h&&(_.asset_id=h),void 0!==y&&(_.token_address=y),void 0!==m&&(_.token_name=m),void 0!==g&&(_.min_quantity=g),void 0!==b&&(_.max_quantity=b),void 0!==v&&(_.metadata=v),ke$2(T,_),S=k&&k.headers?k.headers:{},O.headers=bn$1(bn$1(bn$1({},P),S),w.headers),t.abrupt("return",{url:Pe$1(T),options:O});case 29:case"end":return t.stop()}}),t)}))),function(e,n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b){return t.apply(this,arguments)})};var t,n,r,a;},wn=function(e){var t=vn$1(e);return {createWithdrawal:function(n,r,a,i){return L$1(W$1.mark((function s(){var o;return W$1.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,t.createWithdrawal(n,r,a,i);case 2:return o=s.sent,s.abrupt("return",_e$1(o,l.default,ye$1,e));case 4:case"end":return s.stop()}}),s)})))()},getSignableWithdrawal:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getSignableWithdrawal(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},getWithdrawal:function(n,r){return L$1(W$1.mark((function a(){var i;return W$1.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,t.getWithdrawal(n,r);case 2:return i=a.sent,a.abrupt("return",_e$1(i,l.default,ye$1,e));case 4:case"end":return a.stop()}}),a)})))()},listWithdrawals:function(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w,x){return L$1(W$1.mark((function T(){var k;return W$1.wrap((function(T){for(;;)switch(T.prev=T.next){case 0:return T.next=2,t.listWithdrawals(n,r,a,i,s,o,u,c,f,p,d,h,y,m,g,b,v,w,x);case 2:return k=T.sent,T.abrupt("return",_e$1(k,l.default,ye$1,e));case 4:case"end":return T.stop()}}),T)})))()}}},xn$1=function(e){R(n,me$1);var t=mn$1(n);function n(){return h$1(this,n),t.apply(this,arguments)}return m$2(n,[{key:"createWithdrawal",value:function(e,t){var n=this;return wn(this.configuration).createWithdrawal(e.xImxEthAddress,e.xImxEthSignature,e.createWithdrawalRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getSignableWithdrawal",value:function(e,t){var n=this;return wn(this.configuration).getSignableWithdrawal(e.getSignableWithdrawalRequest,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"getWithdrawal",value:function(e,t){var n=this;return wn(this.configuration).getWithdrawal(e.id,t).then((function(e){return e(n.axios,n.basePath)}))}},{key:"listWithdrawals",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return wn(this.configuration).listWithdrawals(t.withdrawnToWallet,t.rollupStatus,t.pageSize,t.cursor,t.orderBy,t.direction,t.user,t.status,t.minTimestamp,t.maxTimestamp,t.tokenType,t.tokenId,t.assetId,t.tokenAddress,t.tokenName,t.minQuantity,t.maxQuantity,t.metadata,n).then((function(t){return t(e.axios,e.basePath)}))}}]),n}(),Tn=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h$1(this,e),this.apiKey=t.apiKey,this.username=t.username,this.password=t.password,this.accessToken=t.accessToken,this.basePath=t.basePath,this.baseOptions=t.baseOptions,this.formDataCtor=t.formDataCtor;}return m$2(e,[{key:"isJsonMime",value:function(e){var t=new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$","i");return null!==e&&(t.test(e)||"application/json-patch+json"===e.toLowerCase())}}]),e}();let kn$1=!1,On$1=!1;const Pn={debug:1,default:2,info:2,warning:3,error:4,off:5};let _n$1=Pn.default,Sn$1=null;const An=function(){try{const e=[];if(["NFD","NFC","NFKD","NFKC"].forEach((t=>{try{if("test"!=="test".normalize(t))throw new Error("bad normalize")}catch(n){e.push(t);}})),e.length)throw new Error("missing "+e.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(e){return e.message}return null}();var Rn,En$1;!function(e){e.DEBUG="DEBUG",e.INFO="INFO",e.WARNING="WARNING",e.ERROR="ERROR",e.OFF="OFF";}(Rn||(Rn={})),function(e){e.UNKNOWN_ERROR="UNKNOWN_ERROR",e.NOT_IMPLEMENTED="NOT_IMPLEMENTED",e.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",e.NETWORK_ERROR="NETWORK_ERROR",e.SERVER_ERROR="SERVER_ERROR",e.TIMEOUT="TIMEOUT",e.BUFFER_OVERRUN="BUFFER_OVERRUN",e.NUMERIC_FAULT="NUMERIC_FAULT",e.MISSING_NEW="MISSING_NEW",e.INVALID_ARGUMENT="INVALID_ARGUMENT",e.MISSING_ARGUMENT="MISSING_ARGUMENT",e.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",e.CALL_EXCEPTION="CALL_EXCEPTION",e.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",e.NONCE_EXPIRED="NONCE_EXPIRED",e.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",e.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",e.TRANSACTION_REPLACED="TRANSACTION_REPLACED",e.ACTION_REJECTED="ACTION_REJECTED";}(En$1||(En$1={}));const Cn$1="0123456789abcdef";let jn$1 = class jn{constructor(e){Object.defineProperty(this,"version",{enumerable:!0,value:e,writable:!1});}_log(e,t){const n=e.toLowerCase();null==Pn[n]&&this.throwArgumentError("invalid log level name","logLevel",e),_n$1>Pn[n]||console.log.apply(console,t);}debug(...e){this._log(jn.levels.DEBUG,e);}info(...e){this._log(jn.levels.INFO,e);}warn(...e){this._log(jn.levels.WARNING,e);}makeError(e,t,n){if(On$1)return this.makeError("censored error",t,{});t||(t=jn.errors.UNKNOWN_ERROR),n||(n={});const r=[];Object.keys(n).forEach((e=>{const t=n[e];try{if(t instanceof Uint8Array){let n="";for(let e=0;e<t.length;e++)n+=Cn$1[t[e]>>4],n+=Cn$1[15&t[e]];r.push(e+"=Uint8Array(0x"+n+")");}else r.push(e+"="+JSON.stringify(t));}catch(t){r.push(e+"="+JSON.stringify(n[e].toString()));}})),r.push(`code=${t}`),r.push(`version=${this.version}`);const a=e;let i="";switch(t){case En$1.NUMERIC_FAULT:{i="NUMERIC_FAULT";const t=e;switch(t){case"overflow":case"underflow":case"division-by-zero":i+="-"+t;break;case"negative-power":case"negative-width":i+="-unsupported";break;case"unbound-bitwise-result":i+="-unbound-result";}break}case En$1.CALL_EXCEPTION:case En$1.INSUFFICIENT_FUNDS:case En$1.MISSING_NEW:case En$1.NONCE_EXPIRED:case En$1.REPLACEMENT_UNDERPRICED:case En$1.TRANSACTION_REPLACED:case En$1.UNPREDICTABLE_GAS_LIMIT:i=t;}i&&(e+=" [ See: https://links.ethers.org/v5-errors-"+i+" ]"),r.length&&(e+=" ("+r.join(", ")+")");const s=new Error(e);return s.reason=a,s.code=t,Object.keys(n).forEach((function(e){s[e]=n[e];})),s}throwError(e,t,n){throw this.makeError(e,t,n)}throwArgumentError(e,t,n){return this.throwError(e,jn.errors.INVALID_ARGUMENT,{argument:t,value:n})}assert(e,t,n,r){e||this.throwError(t,n,r);}assertArgument(e,t,n,r){e||this.throwArgumentError(t,n,r);}checkNormalize(e){An&&this.throwError("platform missing String.prototype.normalize",jn.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:An});}checkSafeUint53(e,t){"number"==typeof e&&(null==t&&(t="value not safe"),(e<0||e>=9007199254740991)&&this.throwError(t,jn.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:e}),e%1&&this.throwError(t,jn.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:e}));}checkArgumentCount(e,t,n){n=n?": "+n:"",e<t&&this.throwError("missing argument"+n,jn.errors.MISSING_ARGUMENT,{count:e,expectedCount:t}),e>t&&this.throwError("too many arguments"+n,jn.errors.UNEXPECTED_ARGUMENT,{count:e,expectedCount:t});}checkNew(e,t){e!==Object&&null!=e||this.throwError("missing new",jn.errors.MISSING_NEW,{name:t.name});}checkAbstract(e,t){e===t?this.throwError("cannot instantiate abstract class "+JSON.stringify(t.name)+" directly; use a sub-class",jn.errors.UNSUPPORTED_OPERATION,{name:e.name,operation:"new"}):e!==Object&&null!=e||this.throwError("missing new",jn.errors.MISSING_NEW,{name:t.name});}static globalLogger(){return Sn$1||(Sn$1=new jn("logger/5.7.0")),Sn$1}static setCensorship(e,t){if(!e&&t&&this.globalLogger().throwError("cannot permanently disable censorship",jn.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),kn$1){if(!e)return;this.globalLogger().throwError("error censorship permanent",jn.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"});}On$1=!!e,kn$1=!!t;}static setLogLevel(e){const t=Pn[e.toLowerCase()];null!=t?_n$1=t:jn.globalLogger().warn("invalid log level - "+e);}static from(e){return new jn(e)}};jn$1.errors=En$1,jn$1.levels=Rn;var In$1=function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function s(e){try{u(r.next(e));}catch(e){i(e);}}function o(e){try{u(r.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t);}))).then(s,o);}u((r=r.apply(e,t||[])).next());}))};function Mn(e){return In$1(this,void 0,void 0,(function*(){const t=Object.keys(e).map((t=>{const n=e[t];return Promise.resolve(n).then((e=>({key:t,value:e})))}));return (yield Promise.all(t)).reduce(((e,t)=>(e[t.key]=t.value,e)),{})}))}var Nn=function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function s(e){try{u(r.next(e));}catch(e){i(e);}}function o(e){try{u(r.throw(e));}catch(e){i(e);}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t);}))).then(s,o);}u((r=r.apply(e,t||[])).next());}))};const Bn$1=new jn$1("abstract-signer/5.7.0"),Dn$1=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],Un$1=[jn$1.errors.INSUFFICIENT_FUNDS,jn$1.errors.NONCE_EXPIRED,jn$1.errors.REPLACEMENT_UNDERPRICED];let Fn$1 = class Fn{constructor(){var e,t,n;Bn$1.checkAbstract(new.target,Fn),e=this,t="_isSigner",n=!0,Object.defineProperty(e,t,{enumerable:!0,value:n,writable:!1});}getBalance(e){return Nn(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),e)}))}getTransactionCount(e){return Nn(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),e)}))}estimateGas(e){return Nn(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const t=yield Mn(this.checkTransaction(e));return yield this.provider.estimateGas(t)}))}call(e,t){return Nn(this,void 0,void 0,(function*(){this._checkProvider("call");const n=yield Mn(this.checkTransaction(e));return yield this.provider.call(n,t)}))}sendTransaction(e){return Nn(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const t=yield this.populateTransaction(e),n=yield this.signTransaction(t);return yield this.provider.sendTransaction(n)}))}getChainId(){return Nn(this,void 0,void 0,(function*(){this._checkProvider("getChainId");return (yield this.provider.getNetwork()).chainId}))}getGasPrice(){return Nn(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return Nn(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(e){return Nn(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(e)}))}checkTransaction(e){for(const t in e)-1===Dn$1.indexOf(t)&&Bn$1.throwArgumentError("invalid transaction key: "+t,"transaction",e);const t=function(e){const t={};for(const n in e)t[n]=e[n];return t}(e);return null==t.from?t.from=this.getAddress():t.from=Promise.all([Promise.resolve(t.from),this.getAddress()]).then((t=>(t[0].toLowerCase()!==t[1].toLowerCase()&&Bn$1.throwArgumentError("from address mismatch","transaction",e),t[0]))),t}populateTransaction(e){return Nn(this,void 0,void 0,(function*(){const t=yield Mn(this.checkTransaction(e));null!=t.to&&(t.to=Promise.resolve(t.to).then((e=>Nn(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.resolveName(e);return null==t&&Bn$1.throwArgumentError("provided ENS name resolves to null","tx.to",e),t})))),t.to.catch((e=>{})));const n=null!=t.maxFeePerGas||null!=t.maxPriorityFeePerGas;if(null==t.gasPrice||2!==t.type&&!n?0!==t.type&&1!==t.type||!n||Bn$1.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",e):Bn$1.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",e),2!==t.type&&null!=t.type||null==t.maxFeePerGas||null==t.maxPriorityFeePerGas)if(0===t.type||1===t.type)null==t.gasPrice&&(t.gasPrice=this.getGasPrice());else {const e=yield this.getFeeData();if(null==t.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(t.type=2,null!=t.gasPrice){const e=t.gasPrice;delete t.gasPrice,t.maxFeePerGas=e,t.maxPriorityFeePerGas=e;}else null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(n&&Bn$1.throwError("network does not support EIP-1559",jn$1.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==t.gasPrice&&(t.gasPrice=e.gasPrice),t.type=0):Bn$1.throwError("failed to get consistent fee data",jn$1.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===t.type&&(null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas));}else t.type=2;return null==t.nonce&&(t.nonce=this.getTransactionCount("pending")),null==t.gasLimit&&(t.gasLimit=this.estimateGas(t).catch((e=>{if(Un$1.indexOf(e.code)>=0)throw e;return Bn$1.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",jn$1.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,tx:t})}))),null==t.chainId?t.chainId=this.getChainId():t.chainId=Promise.all([Promise.resolve(t.chainId),this.getChainId()]).then((t=>(0!==t[1]&&t[0]!==t[1]&&Bn$1.throwArgumentError("chainId address mismatch","transaction",e),t[0]))),yield Mn(t)}))}_checkProvider(e){this.provider||Bn$1.throwError("missing provider",jn$1.errors.UNSUPPORTED_OPERATION,{operation:e||"_checkProvider"});}static isSigner(e){return !(!e||!e._isSigner)}};function Ln(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=P(e);if(t){var a=P(this).constructor;n=Reflect.construct(r,arguments,a);}else n=r.apply(this,arguments);return j$1(this,n)}}var qn$1=function(e){R(n,le$1(Error));var t=Ln(n);function n(e){var r,a=e.code,i=e.details,s=e.message;return h$1(this,n),(r=t.call(this,s)).code=a,r.details=i,r}return m$2(n)}();function Vn$1(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Gn$1(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vn$1(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vn$1(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var zn$1={"x-sdk-version":"imx-core-sdk-ts-".concat("1.1.0")},Wn$1=function(e){var t=e.coreContractAddress,n=e.registrationContractAddress,r=e.chainID,a=e.basePath,i=e.headers,s=e.sdkVersion;if(!a.trim())throw Error("basePath can not be empty");return s&&(zn$1["x-sdk-version"]=s),i=Gn$1(Gn$1({},i||{}),zn$1),{apiConfiguration:new Tn({basePath:a,baseOptions:{headers:i}}),ethConfiguration:{coreContractAddress:t,registrationContractAddress:n,chainID:r}}},Xn={get PRODUCTION(){return Wn$1({basePath:"https://api.x.immutable.com",chainID:1,coreContractAddress:"0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",registrationContractAddress:"0x72a06bf2a1CE5e39cBA06c0CAb824960B587d64c"})},get SANDBOX(){return Wn$1({basePath:"https://api.sandbox.x.immutable.com",chainID:5,coreContractAddress:"0x7917eDb51ecD6CdB3F9854c3cc593F33de10c623",registrationContractAddress:"0x1C97Ada273C9A52253f463042f29117090Cd7D83"})},createConfig:Wn$1};function Kn$1(e){return Hn$1.apply(this,arguments)}function Hn$1(){return (Hn$1=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.ethSigner,r=t.starkSigner,a=t.usersApi,e.next=3,n.getAddress();case 3:return i=e.sent,e.next=6,r.getAddress();case 6:return s=e.sent,e.next=9,a.getSignableRegistrationOffchain({getSignableRegistrationRequest:{ether_key:i,stark_key:s}});case 9:return o=e.sent,u=o.data,c=u.signable_message,f=u.payload_hash,e.next=13,Q$1(c,n);case 13:return p=e.sent,e.next=16,r.signMessage(f);case 16:return d=e.sent,e.next=19,a.registerUser({registerUserRequest:{eth_signature:p,ether_key:i,stark_signature:d,stark_key:s}});case 19:return l=e.sent,e.abrupt("return",l.data);case 21:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Qn(e,t){return Jn$1.apply(this,arguments)}function Jn$1(){return (Jn$1=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,n.isRegistered(t);case 3:return e.abrupt("return",e.sent);case 6:if(e.prev=6,e.t0=e.catch(0),"USER_UNREGISTERED"!==e.t0.reason){e.next=10;break}return e.abrupt("return",!1);case 10:throw e.t0;case 11:case"end":return e.stop()}}),e,null,[[0,6]])})))).apply(this,arguments)}function $n$1(e,t,n){return Zn.apply(this,arguments)}function Zn(){return (Zn=L$1(W$1.mark((function e(t,n,r){var a;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.getSignableRegistration({getSignableRegistrationRequest:{ether_key:t,stark_key:n}});case 2:return a=e.sent,e.abrupt("return",{operator_signature:a.data.operator_signature,payload_hash:a.data.payload_hash});case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Yn$1,er={exports:{}};
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */Yn$1=er,function(){var e="input is invalid type",t="object"==typeof window,n=t?window:{};n.JS_SHA3_NO_WINDOW&&(t=!1);var r=!t&&"object"==typeof self;!n.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?n=q$1:r&&(n=self);var a=!n.JS_SHA3_NO_COMMON_JS&&Yn$1.exports,i=!n.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,s="0123456789abcdef".split(""),o=[4,1024,262144,67108864],u=[0,8,16,24],c=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],f=[224,256,384,512],p=[128,256],d=["hex","buffer","arrayBuffer","array","digest"],l={128:168,256:136};!n.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return "[object Array]"===Object.prototype.toString.call(e)}),!i||!n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return "object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});for(var h=function(e,t,n){return function(r){return new R(e,t,e).update(r)[n]()}},y=function(e,t,n){return function(r,a){return new R(e,t,a).update(r)[n]()}},m=function(e,t,n){return function(t,r,a,i){return x["cshake"+e].update(t,r,a,i)[n]()}},g=function(e,t,n){return function(t,r,a,i){return x["kmac"+e].update(t,r,a,i)[n]()}},b=function(e,t,n,r){for(var a=0;a<d.length;++a){var i=d[a];e[i]=t(n,r,i);}return e},v=function(e,t){var n=h(e,t,"hex");return n.create=function(){return new R(e,t,e)},n.update=function(e){return n.create().update(e)},b(n,h,e,t)},w=[{name:"keccak",padding:[1,256,65536,16777216],bits:f,createMethod:v},{name:"sha3",padding:[6,1536,393216,100663296],bits:f,createMethod:v},{name:"shake",padding:[31,7936,2031616,520093696],bits:p,createMethod:function(e,t){var n=y(e,t,"hex");return n.create=function(n){return new R(e,t,n)},n.update=function(e,t){return n.create(t).update(e)},b(n,y,e,t)}},{name:"cshake",padding:o,bits:p,createMethod:function(e,t){var n=l[e],r=m(e,0,"hex");return r.create=function(r,a,i){return a||i?new R(e,t,r).bytepad([a,i],n):x["shake"+e].create(r)},r.update=function(e,t,n,a){return r.create(t,n,a).update(e)},b(r,m,e,t)}},{name:"kmac",padding:o,bits:p,createMethod:function(e,t){var n=l[e],r=g(e,0,"hex");return r.create=function(r,a,i){return new E(e,t,a).bytepad(["KMAC",i],n).bytepad([r],n)},r.update=function(e,t,n,a){return r.create(e,n,a).update(t)},b(r,g,e,t)}}],x={},T=[],k=0;k<w.length;++k)for(var O=w[k],P=O.bits,_=0;_<P.length;++_){var S=O.name+"_"+P[_];if(T.push(S),x[S]=O.createMethod(P[_],O.padding),"sha3"!==O.name){var A=O.name+P[_];T.push(A),x[A]=x[S];}}function R(e,t,n){this.blocks=[],this.s=[],this.padding=t,this.outputBits=n,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=n>>5,this.extraBytes=(31&n)>>3;for(var r=0;r<50;++r)this.s[r]=0;}function E(e,t,n){R.call(this,e,t,n);}R.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var n,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(e);if(null===t)throw new Error(e);if(i&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||i&&ArrayBuffer.isView(t)))throw new Error(e);n=!0;}for(var a,s,o=this.blocks,c=this.byteCount,f=t.length,p=this.blockCount,d=0,l=this.s;d<f;){if(this.reset)for(this.reset=!1,o[0]=this.block,a=1;a<p+1;++a)o[a]=0;if(n)for(a=this.start;d<f&&a<c;++d)o[a>>2]|=t[d]<<u[3&a++];else for(a=this.start;d<f&&a<c;++d)(s=t.charCodeAt(d))<128?o[a>>2]|=s<<u[3&a++]:s<2048?(o[a>>2]|=(192|s>>6)<<u[3&a++],o[a>>2]|=(128|63&s)<<u[3&a++]):s<55296||s>=57344?(o[a>>2]|=(224|s>>12)<<u[3&a++],o[a>>2]|=(128|s>>6&63)<<u[3&a++],o[a>>2]|=(128|63&s)<<u[3&a++]):(s=65536+((1023&s)<<10|1023&t.charCodeAt(++d)),o[a>>2]|=(240|s>>18)<<u[3&a++],o[a>>2]|=(128|s>>12&63)<<u[3&a++],o[a>>2]|=(128|s>>6&63)<<u[3&a++],o[a>>2]|=(128|63&s)<<u[3&a++]);if(this.lastByteIndex=a,a>=c){for(this.start=a-c,this.block=o[p],a=0;a<p;++a)l[a]^=o[a];C(l),this.reset=!0;}else this.start=a;}return this},R.prototype.encode=function(e,t){var n=255&e,r=1,a=[n];for(n=255&(e>>=8);n>0;)a.unshift(n),n=255&(e>>=8),++r;return t?a.push(r):a.unshift(r),this.update(a),a.length},R.prototype.encodeString=function(t){var n,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(e);if(null===t)throw new Error(e);if(i&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||i&&ArrayBuffer.isView(t)))throw new Error(e);n=!0;}var a=0,s=t.length;if(n)a=s;else for(var o=0;o<t.length;++o){var u=t.charCodeAt(o);u<128?a+=1:u<2048?a+=2:u<55296||u>=57344?a+=3:(u=65536+((1023&u)<<10|1023&t.charCodeAt(++o)),a+=4);}return a+=this.encode(8*a),this.update(t),a},R.prototype.bytepad=function(e,t){for(var n=this.encode(t),r=0;r<e.length;++r)n+=this.encodeString(e[r]);var a=t-n%t,i=[];return i.length=a,this.update(i),this},R.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex,n=this.blockCount,r=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[n],t=1;t<n+1;++t)e[t]=0;for(e[n-1]|=2147483648,t=0;t<n;++t)r[t]^=e[t];C(r);}},R.prototype.toString=R.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,n=this.s,r=this.outputBlocks,a=this.extraBytes,i=0,o=0,u="";o<r;){for(i=0;i<t&&o<r;++i,++o)e=n[i],u+=s[e>>4&15]+s[15&e]+s[e>>12&15]+s[e>>8&15]+s[e>>20&15]+s[e>>16&15]+s[e>>28&15]+s[e>>24&15];o%t==0&&(C(n),i=0);}return a&&(e=n[i],u+=s[e>>4&15]+s[15&e],a>1&&(u+=s[e>>12&15]+s[e>>8&15]),a>2&&(u+=s[e>>20&15]+s[e>>16&15])),u},R.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,n=this.s,r=this.outputBlocks,a=this.extraBytes,i=0,s=0,o=this.outputBits>>3;e=a?new ArrayBuffer(r+1<<2):new ArrayBuffer(o);for(var u=new Uint32Array(e);s<r;){for(i=0;i<t&&s<r;++i,++s)u[s]=n[i];s%t==0&&C(n);}return a&&(u[i]=n[i],e=e.slice(0,o)),e},R.prototype.buffer=R.prototype.arrayBuffer,R.prototype.digest=R.prototype.array=function(){this.finalize();for(var e,t,n=this.blockCount,r=this.s,a=this.outputBlocks,i=this.extraBytes,s=0,o=0,u=[];o<a;){for(s=0;s<n&&o<a;++s,++o)e=o<<2,t=r[s],u[e]=255&t,u[e+1]=t>>8&255,u[e+2]=t>>16&255,u[e+3]=t>>24&255;o%n==0&&C(r);}return i&&(e=o<<2,t=r[s],u[e]=255&t,i>1&&(u[e+1]=t>>8&255),i>2&&(u[e+2]=t>>16&255)),u},E.prototype=new R,E.prototype.finalize=function(){return this.encode(this.outputBits,!0),R.prototype.finalize.call(this)};var C=function(e){var t,n,r,a,i,s,o,u,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j,I,M,N,B,D,U,F,L,q,V,G,z,W,X,K,H,Q,J,$,Z,Y,ee,te,ne,re,ae,ie,se,oe,ue,ce,fe;for(r=0;r<48;r+=2)a=e[0]^e[10]^e[20]^e[30]^e[40],i=e[1]^e[11]^e[21]^e[31]^e[41],s=e[2]^e[12]^e[22]^e[32]^e[42],o=e[3]^e[13]^e[23]^e[33]^e[43],u=e[4]^e[14]^e[24]^e[34]^e[44],f=e[5]^e[15]^e[25]^e[35]^e[45],p=e[6]^e[16]^e[26]^e[36]^e[46],d=e[7]^e[17]^e[27]^e[37]^e[47],t=(l=e[8]^e[18]^e[28]^e[38]^e[48])^(s<<1|o>>>31),n=(h=e[9]^e[19]^e[29]^e[39]^e[49])^(o<<1|s>>>31),e[0]^=t,e[1]^=n,e[10]^=t,e[11]^=n,e[20]^=t,e[21]^=n,e[30]^=t,e[31]^=n,e[40]^=t,e[41]^=n,t=a^(u<<1|f>>>31),n=i^(f<<1|u>>>31),e[2]^=t,e[3]^=n,e[12]^=t,e[13]^=n,e[22]^=t,e[23]^=n,e[32]^=t,e[33]^=n,e[42]^=t,e[43]^=n,t=s^(p<<1|d>>>31),n=o^(d<<1|p>>>31),e[4]^=t,e[5]^=n,e[14]^=t,e[15]^=n,e[24]^=t,e[25]^=n,e[34]^=t,e[35]^=n,e[44]^=t,e[45]^=n,t=u^(l<<1|h>>>31),n=f^(h<<1|l>>>31),e[6]^=t,e[7]^=n,e[16]^=t,e[17]^=n,e[26]^=t,e[27]^=n,e[36]^=t,e[37]^=n,e[46]^=t,e[47]^=n,t=p^(a<<1|i>>>31),n=d^(i<<1|a>>>31),e[8]^=t,e[9]^=n,e[18]^=t,e[19]^=n,e[28]^=t,e[29]^=n,e[38]^=t,e[39]^=n,e[48]^=t,e[49]^=n,y=e[0],m=e[1],K=e[11]<<4|e[10]>>>28,H=e[10]<<4|e[11]>>>28,R=e[20]<<3|e[21]>>>29,E=e[21]<<3|e[20]>>>29,oe=e[31]<<9|e[30]>>>23,ue=e[30]<<9|e[31]>>>23,G=e[40]<<18|e[41]>>>14,z=e[41]<<18|e[40]>>>14,N=e[2]<<1|e[3]>>>31,B=e[3]<<1|e[2]>>>31,g=e[13]<<12|e[12]>>>20,b=e[12]<<12|e[13]>>>20,Q=e[22]<<10|e[23]>>>22,J=e[23]<<10|e[22]>>>22,C=e[33]<<13|e[32]>>>19,j=e[32]<<13|e[33]>>>19,ce=e[42]<<2|e[43]>>>30,fe=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,ne=e[4]<<30|e[5]>>>2,D=e[14]<<6|e[15]>>>26,U=e[15]<<6|e[14]>>>26,v=e[25]<<11|e[24]>>>21,w=e[24]<<11|e[25]>>>21,$=e[34]<<15|e[35]>>>17,Z=e[35]<<15|e[34]>>>17,I=e[45]<<29|e[44]>>>3,M=e[44]<<29|e[45]>>>3,P=e[6]<<28|e[7]>>>4,_=e[7]<<28|e[6]>>>4,re=e[17]<<23|e[16]>>>9,ae=e[16]<<23|e[17]>>>9,F=e[26]<<25|e[27]>>>7,L=e[27]<<25|e[26]>>>7,x=e[36]<<21|e[37]>>>11,T=e[37]<<21|e[36]>>>11,Y=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,W=e[8]<<27|e[9]>>>5,X=e[9]<<27|e[8]>>>5,S=e[18]<<20|e[19]>>>12,A=e[19]<<20|e[18]>>>12,ie=e[29]<<7|e[28]>>>25,se=e[28]<<7|e[29]>>>25,q=e[38]<<8|e[39]>>>24,V=e[39]<<8|e[38]>>>24,k=e[48]<<14|e[49]>>>18,O=e[49]<<14|e[48]>>>18,e[0]=y^~g&v,e[1]=m^~b&w,e[10]=P^~S&R,e[11]=_^~A&E,e[20]=N^~D&F,e[21]=B^~U&L,e[30]=W^~K&Q,e[31]=X^~H&J,e[40]=te^~re&ie,e[41]=ne^~ae&se,e[2]=g^~v&x,e[3]=b^~w&T,e[12]=S^~R&C,e[13]=A^~E&j,e[22]=D^~F&q,e[23]=U^~L&V,e[32]=K^~Q&$,e[33]=H^~J&Z,e[42]=re^~ie&oe,e[43]=ae^~se&ue,e[4]=v^~x&k,e[5]=w^~T&O,e[14]=R^~C&I,e[15]=E^~j&M,e[24]=F^~q&G,e[25]=L^~V&z,e[34]=Q^~$&Y,e[35]=J^~Z&ee,e[44]=ie^~oe&ce,e[45]=se^~ue&fe,e[6]=x^~k&y,e[7]=T^~O&m,e[16]=C^~I&P,e[17]=j^~M&_,e[26]=q^~G&N,e[27]=V^~z&B,e[36]=$^~Y&W,e[37]=Z^~ee&X,e[46]=oe^~ce&te,e[47]=ue^~fe&ne,e[8]=k^~y&g,e[9]=O^~m&b,e[18]=I^~P&S,e[19]=M^~_&A,e[28]=G^~N&D,e[29]=z^~B&U,e[38]=Y^~W&K,e[39]=ee^~X&H,e[48]=ce^~te&re,e[49]=fe^~ne&ae,e[0]^=c[r],e[1]^=c[r+1];};if(a)Yn$1.exports=x;else for(k=0;k<T.length;++k)n[T[k]]=x[T[k]];}();var tr=er.exports;function nr(e){return "0x"+tr.keccak_256(i$1.arrayify(e))}var rr$1=f.default.BN;const ar=new jn$1("bignumber/5.7.0"),ir={};let sr=!1;class or{constructor(e,t){e!==ir&&ar.throwError("cannot call constructor directly; use BigNumber.from",jn$1.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=t,this._isBigNumber=!0,Object.freeze(this);}fromTwos(e){return cr(fr(this).fromTwos(e))}toTwos(e){return cr(fr(this).toTwos(e))}abs(){return "-"===this._hex[0]?or.from(this._hex.substring(1)):this}add(e){return cr(fr(this).add(fr(e)))}sub(e){return cr(fr(this).sub(fr(e)))}div(e){return or.from(e).isZero()&&pr("division-by-zero","div"),cr(fr(this).div(fr(e)))}mul(e){return cr(fr(this).mul(fr(e)))}mod(e){const t=fr(e);return t.isNeg()&&pr("division-by-zero","mod"),cr(fr(this).umod(t))}pow(e){const t=fr(e);return t.isNeg()&&pr("negative-power","pow"),cr(fr(this).pow(t))}and(e){const t=fr(e);return (this.isNegative()||t.isNeg())&&pr("unbound-bitwise-result","and"),cr(fr(this).and(t))}or(e){const t=fr(e);return (this.isNegative()||t.isNeg())&&pr("unbound-bitwise-result","or"),cr(fr(this).or(t))}xor(e){const t=fr(e);return (this.isNegative()||t.isNeg())&&pr("unbound-bitwise-result","xor"),cr(fr(this).xor(t))}mask(e){return (this.isNegative()||e<0)&&pr("negative-width","mask"),cr(fr(this).maskn(e))}shl(e){return (this.isNegative()||e<0)&&pr("negative-width","shl"),cr(fr(this).shln(e))}shr(e){return (this.isNegative()||e<0)&&pr("negative-width","shr"),cr(fr(this).shrn(e))}eq(e){return fr(this).eq(fr(e))}lt(e){return fr(this).lt(fr(e))}lte(e){return fr(this).lte(fr(e))}gt(e){return fr(this).gt(fr(e))}gte(e){return fr(this).gte(fr(e))}isNegative(){return "-"===this._hex[0]}isZero(){return fr(this).isZero()}toNumber(){try{return fr(this).toNumber()}catch(e){pr("overflow","toNumber",this.toString());}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return ar.throwError("this platform does not support BigInt",jn$1.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?sr||(sr=!0,ar.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?ar.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",jn$1.errors.UNEXPECTED_ARGUMENT,{}):ar.throwError("BigNumber.toString does not accept parameters",jn$1.errors.UNEXPECTED_ARGUMENT,{})),fr(this).toString(10)}toHexString(){return this._hex}toJSON(e){return {type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof or)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new or(ir,ur(e)):e.match(/^-?[0-9]+$/)?new or(ir,ur(new rr$1(e))):ar.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&pr("underflow","BigNumber.from",e),(e>=9007199254740991||e<=-9007199254740991)&&pr("overflow","BigNumber.from",e),or.from(String(e));const t=e;if("bigint"==typeof t)return or.from(t.toString());if(i$1.isBytes(t))return or.from(i$1.hexlify(t));if(t)if(t.toHexString){const e=t.toHexString();if("string"==typeof e)return or.from(e)}else {let e=t._hex;if(null==e&&"BigNumber"===t.type&&(e=t.hex),"string"==typeof e&&(i$1.isHexString(e)||"-"===e[0]&&i$1.isHexString(e.substring(1))))return or.from(e)}return ar.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return !(!e||!e._isBigNumber)}}function ur(e){if("string"!=typeof e)return ur(e.toString(16));if("-"===e[0])return "-"===(e=e.substring(1))[0]&&ar.throwArgumentError("invalid hex","value",e),"0x00"===(e=ur(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return "0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function cr(e){return or.from(ur(e))}function fr(e){const t=or.from(e).toHexString();return "-"===t[0]?new rr$1("-"+t.substring(3),16):new rr$1(t.substring(2),16)}function pr(e,t,n){const r={fault:e,operation:t};return null!=n&&(r.value=n),ar.throwError(e,jn$1.errors.NUMERIC_FAULT,r)}const dr$1=new jn$1("bignumber/5.7.0"),lr={},hr=or.from(0),yr=or.from(-1);function mr$1(e,t,n,r){const a={fault:t,operation:n};return void 0!==r&&(a.value=r),dr$1.throwError(e,jn$1.errors.NUMERIC_FAULT,a)}let gr="0";for(;gr.length<256;)gr+=gr;function br(e){if("number"!=typeof e)try{e=or.from(e).toNumber();}catch(e){}return "number"==typeof e&&e>=0&&e<=256&&!(e%1)?"1"+gr.substring(0,e):dr$1.throwArgumentError("invalid decimal size","decimals",e)}function vr(e,t){null==t&&(t=0);const n=br(t),r=(e=or.from(e)).lt(hr);r&&(e=e.mul(yr));let a=e.mod(n).toString();for(;a.length<n.length-1;)a="0"+a;a=a.match(/^([0-9]*[1-9]|0)(0*)/)[1];const i=e.div(n).toString();return e=1===n.length?i:i+"."+a,r&&(e="-"+e),e}function wr(e,t){null==t&&(t=0);const n=br(t);"string"==typeof e&&e.match(/^-?[0-9.]+$/)||dr$1.throwArgumentError("invalid decimal value","value",e);const r="-"===e.substring(0,1);r&&(e=e.substring(1)),"."===e&&dr$1.throwArgumentError("missing value","value",e);const a=e.split(".");a.length>2&&dr$1.throwArgumentError("too many decimal points","value",e);let i=a[0],s=a[1];for(i||(i="0"),s||(s="0");"0"===s[s.length-1];)s=s.substring(0,s.length-1);for(s.length>n.length-1&&mr$1("fractional component exceeds decimals","underflow","parseFixed"),""===s&&(s="0");s.length<n.length-1;)s+="0";const o=or.from(i),u=or.from(s);let c=o.mul(n).add(u);return r&&(c=c.mul(yr)),c}class xr{constructor(e,t,n,r){e!==lr&&dr$1.throwError("cannot use FixedFormat constructor; use FixedFormat.from",jn$1.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=t,this.width=n,this.decimals=r,this.name=(t?"":"u")+"fixed"+String(n)+"x"+String(r),this._multiplier=br(r),Object.freeze(this);}static from(e){if(e instanceof xr)return e;"number"==typeof e&&(e=`fixed128x${e}`);let t=!0,n=128,r=18;if("string"==typeof e)if("fixed"===e);else if("ufixed"===e)t=!1;else {const a=e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);a||dr$1.throwArgumentError("invalid fixed format","format",e),t="u"!==a[1],n=parseInt(a[2]),r=parseInt(a[3]);}else if(e){const a=(t,n,r)=>null==e[t]?r:(typeof e[t]!==n&&dr$1.throwArgumentError("invalid fixed format ("+t+" not "+n+")","format."+t,e[t]),e[t]);t=a("signed","boolean",t),n=a("width","number",n),r=a("decimals","number",r);}return n%8&&dr$1.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",n),r>80&&dr$1.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",r),new xr(lr,t,n,r)}}class Tr{constructor(e,t,n,r){e!==lr&&dr$1.throwError("cannot use FixedNumber constructor; use FixedNumber.from",jn$1.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=r,this._hex=t,this._value=n,this._isFixedNumber=!0,Object.freeze(this);}_checkFormat(e){this.format.name!==e.format.name&&dr$1.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",e);}addUnsafe(e){this._checkFormat(e);const t=wr(this._value,this.format.decimals),n=wr(e._value,e.format.decimals);return Tr.fromValue(t.add(n),this.format.decimals,this.format)}subUnsafe(e){this._checkFormat(e);const t=wr(this._value,this.format.decimals),n=wr(e._value,e.format.decimals);return Tr.fromValue(t.sub(n),this.format.decimals,this.format)}mulUnsafe(e){this._checkFormat(e);const t=wr(this._value,this.format.decimals),n=wr(e._value,e.format.decimals);return Tr.fromValue(t.mul(n).div(this.format._multiplier),this.format.decimals,this.format)}divUnsafe(e){this._checkFormat(e);const t=wr(this._value,this.format.decimals),n=wr(e._value,e.format.decimals);return Tr.fromValue(t.mul(this.format._multiplier).div(n),this.format.decimals,this.format)}floor(){const e=this.toString().split(".");1===e.length&&e.push("0");let t=Tr.from(e[0],this.format);const n=!e[1].match(/^(0*)$/);return this.isNegative()&&n&&(t=t.subUnsafe(kr$1.toFormat(t.format))),t}ceiling(){const e=this.toString().split(".");1===e.length&&e.push("0");let t=Tr.from(e[0],this.format);const n=!e[1].match(/^(0*)$/);return !this.isNegative()&&n&&(t=t.addUnsafe(kr$1.toFormat(t.format))),t}round(e){null==e&&(e=0);const t=this.toString().split(".");if(1===t.length&&t.push("0"),(e<0||e>80||e%1)&&dr$1.throwArgumentError("invalid decimal count","decimals",e),t[1].length<=e)return this;const n=Tr.from("1"+gr.substring(0,e),this.format),r=Or.toFormat(this.format);return this.mulUnsafe(n).addUnsafe(r).floor().divUnsafe(n)}isZero(){return "0.0"===this._value||"0"===this._value}isNegative(){return "-"===this._value[0]}toString(){return this._value}toHexString(e){if(null==e)return this._hex;e%8&&dr$1.throwArgumentError("invalid byte width","width",e);const t=or.from(this._hex).fromTwos(this.format.width).toTwos(e).toHexString();return i$1.hexZeroPad(t,e/8)}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(e){return Tr.fromString(this._value,e)}static fromValue(e,t,n){return null!=n||null==t||function(e){return null!=e&&(or.isBigNumber(e)||"number"==typeof e&&e%1==0||"string"==typeof e&&!!e.match(/^-?[0-9]+$/)||i$1.isHexString(e)||"bigint"==typeof e||i$1.isBytes(e))}(t)||(n=t,t=null),null==t&&(t=0),null==n&&(n="fixed"),Tr.fromString(vr(e,t),xr.from(n))}static fromString(e,t){null==t&&(t="fixed");const n=xr.from(t),r=wr(e,n.decimals);!n.signed&&r.lt(hr)&&mr$1("unsigned value cannot be negative","overflow","value",e);let a=null;n.signed?a=r.toTwos(n.width).toHexString():(a=r.toHexString(),a=i$1.hexZeroPad(a,n.width/8));const s=vr(r,n.decimals);return new Tr(lr,a,s,n)}static fromBytes(e,t){null==t&&(t="fixed");const n=xr.from(t);if(i$1.arrayify(e).length>n.width/8)throw new Error("overflow");let r=or.from(e);n.signed&&(r=r.fromTwos(n.width));const a=r.toTwos((n.signed?0:1)+n.width).toHexString(),s=vr(r,n.decimals);return new Tr(lr,a,s,n)}static from(e,t){if("string"==typeof e)return Tr.fromString(e,t);if(i$1.isBytes(e))return Tr.fromBytes(e,t);try{return Tr.fromValue(e,0,t)}catch(e){if(e.code!==jn$1.errors.INVALID_ARGUMENT)throw e}return dr$1.throwArgumentError("invalid FixedNumber value","value",e)}static isFixedNumber(e){return !(!e||!e._isFixedNumber)}}const kr$1=Tr.from(1),Or=Tr.from("0.5"),Pr=new jn$1("strings/5.7.0");var _r,Sr;function Rr(e,t=_r.current){t!=_r.current&&(Pr.checkNormalize(),e=e.normalize(t));let n=[];for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){t++;const a=e.charCodeAt(t);if(t>=e.length||56320!=(64512&a))throw new Error("invalid utf-8 string");const i=65536+((1023&r)<<10)+(1023&a);n.push(i>>18|240),n.push(i>>12&63|128),n.push(i>>6&63|128),n.push(63&i|128);}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128);}return i$1.arrayify(n)}function Er(e,t){t||(t=function(e){return [parseInt(e,16)]});let n=0,r={};return e.split(",").forEach((e=>{let a=e.split(":");n+=parseInt(a[0],16),r[n]=t(a[1]);})),r}function Cr(e){let t=0;return e.split(",").map((e=>{let n=e.split("-");1===n.length?n[1]="0":""===n[1]&&(n[1]="1");let r=t+parseInt(n[0],16);return t=parseInt(n[1],16),{l:r,h:t}}))}function jr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Ir(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jr(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}function Mr(e,t,n){return Nr.apply(this,arguments)}function Nr(){return Nr=L$1(W$1.mark((function e(t,n,r){var a,i,s,o,u,c,f,p;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=n.users.map((function(e){return {ether_key:e.user,tokens:e.tokens.map((function(e){return Ir({id:e.id,blueprint:e.blueprint},e.royalties&&e.royalties.length>0&&{royalties:e.royalties.map((function(e){return {recipient:e.recipient,percentage:e.percentage}}))})}))}})),i=n.royalties,s=Ir(Ir({contract_address:n.contract_address},i&&i.length>0&&{royalties:i.map((function(e){return {recipient:e.recipient,percentage:e.percentage}}))}),{},{users:a,auth_signature:""}),o=nr(Rr(JSON.stringify(s))),e.next=6,Q$1(o,t);case 6:return u=e.sent,c=Ir(Ir({users:s.users.map((function(e){return {user:e.ether_key,tokens:e.tokens}}))},i&&i.length>0&&{royalties:i}),{},{contract_address:n.contract_address,auth_signature:u}),f={mintTokensRequestV2:[c]},e.next=11,r.mintTokens(f);case 11:return p=e.sent,e.abrupt("return",p.data);case 13:case"end":return e.stop()}}),e)}))),Nr.apply(this,arguments)}function Br(e){switch(e.type){case"ERC721":return {type:"ERC721",data:{token_id:e.tokenId,token_address:e.tokenAddress}};case"ERC20":return {type:"ERC20",data:{token_address:e.tokenAddress}};case"ETH":return {type:"ETH",data:{decimals:18}}}}function Dr(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return Ur(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ur(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return {s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,o=!1;return {s:function(){n=n.call(e);},n:function(){var e=n.next();return s=e.done,e},e:function(e){o=!0,i=e;},f:function(){try{s||null==n.return||n.return();}finally{if(o)throw i}}}}function Ur(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Fr(e){return Lr.apply(this,arguments)}function Lr(){return (Lr=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l,h,y,m;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.ethSigner,a=t.starkSigner,i=t.request,s=t.transfersApi,e.next=3,r.getAddress();case 3:return o=e.sent,u="ERC721"===i.type?"1":i.amount,e.next=7,s.getSignableTransferV1({getSignableTransferRequest:{sender:o,token:Br(i),amount:u,receiver:i.receiver}});case 7:return c=e.sent,f=c.data,p=f.signable_message,d=f.payload_hash,e.next=11,Q$1(p,r);case 11:return l=e.sent,e.next=14,a.signMessage(d);case 14:return h=e.sent,y={sender_stark_key:c.data.sender_stark_key,sender_vault_id:c.data.sender_vault_id,receiver_stark_key:c.data.receiver_stark_key,receiver_vault_id:c.data.receiver_vault_id,asset_id:c.data.asset_id,amount:c.data.amount,nonce:c.data.nonce,expiration_timestamp:c.data.expiration_timestamp,stark_signature:h},e.next=18,s.createTransferV1({createTransferRequest:y,xImxEthAddress:o,xImxEthSignature:l});case 18:return m=e.sent,e.abrupt("return",{sent_signature:null==m?void 0:m.data.sent_signature,status:null==m||null===(n=m.data.status)||void 0===n?void 0:n.toString(),time:null==m?void 0:m.data.time,transfer_id:null==m?void 0:m.data.transfer_id});case 20:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function qr$1(e){return Vr.apply(this,arguments)}function Vr(){return (Vr=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.ethSigner,r=t.starkSigner,a=t.request,i=t.transfersApi,e.next=3,n.getAddress();case 3:return s=e.sent,o=a.map((function(e){return {amount:"1",token:Br({type:"ERC721",tokenId:e.tokenId,tokenAddress:e.tokenAddress}),receiver:e.receiver}})),e.next=7,i.getSignableTransfer({getSignableTransferRequestV2:{sender_ether_key:s,signable_requests:o}});case 7:if(u=e.sent,void 0!==(c=u.data.signable_message)){e.next=11;break}throw new Error("Invalid response from Signable registration offchain");case 11:return e.next=13,Q$1(c,n);case 13:f=e.sent,p=[],d=Dr(u.data.signable_responses),e.prev=16,d.s();case 18:if((l=d.n()).done){e.next=27;break}return h=l.value,e.next=22,r.signMessage(h.payload_hash);case 22:y=e.sent,m={sender_vault_id:h.sender_vault_id,receiver_stark_key:h.receiver_stark_key,receiver_vault_id:h.receiver_vault_id,asset_id:h.asset_id,amount:h.amount,nonce:h.nonce,expiration_timestamp:h.expiration_timestamp,stark_signature:y},p.push(m);case 25:e.next=18;break;case 27:e.next=32;break;case 29:e.prev=29,e.t0=e.catch(16),d.e(e.t0);case 32:return e.prev=32,d.f(),e.finish(32);case 35:return g={sender_stark_key:u.data.sender_stark_key,requests:p},e.next=38,i.createTransfer({createTransferRequestV2:g,xImxEthAddress:s,xImxEthSignature:f});case 38:return b=e.sent,e.abrupt("return",{transfer_ids:null==b?void 0:b.data.transfer_ids});case 40:case"end":return e.stop()}}),e,null,[[16,29,32,35]])})))).apply(this,arguments)}!function(e){e.current="",e.NFC="NFC",e.NFD="NFD",e.NFKC="NFKC",e.NFKD="NFKD";}(_r||(_r={})),function(e){e.UNEXPECTED_CONTINUE="unexpected continuation byte",e.BAD_PREFIX="bad codepoint prefix",e.OVERRUN="string overrun",e.MISSING_CONTINUE="missing continuation byte",e.OUT_OF_RANGE="out of UTF-8 range",e.UTF16_SURROGATE="UTF-16 surrogate",e.OVERLONG="overlong representation";}(Sr||(Sr={})),Cr("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((e=>parseInt(e,16))),Er("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),Er("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),Er("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(e){if(e.length%4!=0)throw new Error("bad data");let t=[];for(let n=0;n<e.length;n+=4)t.push(parseInt(e.substring(n,n+4),16));return t})),Cr("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");const Gr=new jn$1("units/5.7.0"),zr=["wei","kwei","mwei","gwei","szabo","finney","ether"];function Wr(e,t){if("string"!=typeof e&&Gr.throwArgumentError("value must be a string","value",e),"string"==typeof t){const e=zr.indexOf(t);-1!==e&&(t=3*e);}return wr(e,null!=t?t:18)}function Xr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Kr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xr(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}function Hr(e,t,n,r,a,i,s){return Qr.apply(this,arguments)}function Qr(){return (Qr=L$1(W$1.mark((function e(t,n,r,a,i,s,o){var u,c,f;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return u=e.sent,e.next=5,$n$1(u,a,o);case 5:return c=e.sent,e.next=8,s.populateTransaction.registerAndDepositEth(u,a,c.operator_signature,r,i);case 8:return f=e.sent,e.abrupt("return",t.sendTransaction(Kr(Kr({},f),{},{value:n})));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Jr(e,t,n,r,a,i){return $r.apply(this,arguments)}function $r(){return ($r=L$1(W$1.mark((function e(t,n,r,a,i,s){var o;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s.populateTransaction["deposit(uint256,uint256,uint256)"](a,r,i);case 2:return o=e.sent,e.abrupt("return",t.sendTransaction(Kr(Kr({},o),{},{value:n})));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Zr$1(e,t,n,r,a,i){return Yr.apply(this,arguments)}function Yr(){return (Yr=L$1(W$1.mark((function e(t,n,r,a,i,s){var o,u,c,f,p,d,l,h,y,m,g;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return o=e.sent,u={decimals:18},c=Wr(n.amount,"wei"),f={user:o,token:{type:n.type,data:u},amount:c.toString()},e.next=8,r.getSignableDeposit({getSignableDepositRequest:f});case 8:return p=e.sent,e.next=11,i.encodeAsset({assetType:"asset",encodeAssetRequest:{token:{type:n.type}}});case 11:return d=e.sent,l=d.data.asset_type,h=p.data.stark_key,y=p.data.vault_id,m=O.connect(s.ethConfiguration.coreContractAddress,t),g=D$1.connect(s.ethConfiguration.registrationContractAddress,t),e.next=19,Qn(h,g);case 19:if(e.sent){e.next=24;break}return e.abrupt("return",Hr(t,c,l,h,y,m,a));case 24:return e.abrupt("return",Jr(t,c,l,h,y,m));case 25:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ea(e,t,n,r,a,i){return ta.apply(this,arguments)}function ta(){return (ta=L$1(W$1.mark((function e(t,n,r,a,i,s){var o;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s.populateTransaction.depositERC20(a,r,i,n);case 2:return o=e.sent,e.abrupt("return",t.sendTransaction(o));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function na(e,t,n,r,a,i,s){return ra.apply(this,arguments)}function ra(){return (ra=L$1(W$1.mark((function e(t,n,r,a,i,s,o){var u,c,f;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return u=e.sent,e.next=5,$n$1(u,a,o);case 5:return c=e.sent,e.next=8,s.populateTransaction.registerAndDepositERC20(u,a,c.operator_signature,r,i,n);case 8:return f=e.sent,e.abrupt("return",t.sendTransaction(f));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function aa(e,t,n,r,a,i,s){return ia.apply(this,arguments)}function ia(){return (ia=L$1(W$1.mark((function e(t,n,r,a,i,s,o){var u,c,f,p,d,l,h,y,m,g,b,w,x,T,k,P;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return u=e.sent,e.next=5,i.getToken({address:n.tokenAddress});case 5:return c=e.sent,f=parseInt(c.data.decimals),p={decimals:f,token_address:n.tokenAddress},d=Wr(n.amount,0),l=v.connect(n.tokenAddress,t),e.next=12,l.populateTransaction.approve(o.ethConfiguration.coreContractAddress,d);case 12:return h=e.sent,e.next=15,t.sendTransaction(h);case 15:return y={user:u,token:{type:n.type,data:p},amount:d.toString()},e.next=18,r.getSignableDeposit({getSignableDepositRequest:y});case 18:return m=e.sent,e.next=21,s.encodeAsset({assetType:"asset",encodeAssetRequest:{token:{type:n.type,data:{token_address:n.tokenAddress}}}});case 21:return g=e.sent,b=g.data.asset_type,w=m.data.stark_key,x=m.data.vault_id,T=or.from(m.data.amount),k=O.connect(o.ethConfiguration.coreContractAddress,t),P=D$1.connect(o.ethConfiguration.registrationContractAddress,t),e.next=30,Qn(w,P);case 30:if(e.sent){e.next=35;break}return e.abrupt("return",na(t,T,b,w,x,k,a));case 35:return e.abrupt("return",ea(t,T,b,w,x,k));case 36:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function sa(e,t,n,r,a,i){return oa.apply(this,arguments)}function oa(){return (oa=L$1(W$1.mark((function e(t,n,r,a,i,s){var o;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,s.populateTransaction.depositNft(a,r,i,n);case 2:return o=e.sent,e.abrupt("return",t.sendTransaction(o));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ua(e,t,n,r,a,i){return ca.apply(this,arguments)}function ca(){return (ca=L$1(W$1.mark((function e(t,n,r,a,i,s){var o,u,c,f,p,d,l,h,y,m,g,b,v,w;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return o=e.sent,u={token_address:n.tokenAddress,token_id:n.tokenId},c={user:o,token:{type:n.type,data:u},amount:"1".toString()},e.next=8,r.getSignableDeposit({getSignableDepositRequest:c});case 8:return f=e.sent,e.next=11,i.encodeAsset({assetType:"asset",encodeAssetRequest:{token:{type:n.type,data:{token_address:n.tokenAddress,token_id:n.tokenId}}}});case 11:return p=e.sent,d=p.data.asset_type,l=f.data.stark_key,h=f.data.vault_id,y=O.connect(s.ethConfiguration.coreContractAddress,t),m=D$1.connect(s.ethConfiguration.registrationContractAddress,t),e.next=19,Qn(l,m);case 19:return g=e.sent,b=x$1.connect(n.tokenAddress,t),v=s.ethConfiguration.coreContractAddress,e.next=24,b.isApprovedForAll(o,v);case 24:if(e.sent){e.next=28;break}return e.next=28,b.setApprovalForAll(v,!0);case 28:if(g){e.next=34;break}return e.next=31,$n$1(o,l,a);case 31:return w=e.sent,e.next=34,y.registerUser(o,l,w.operator_signature);case 34:return e.abrupt("return",sa(t,n.tokenId,d,l,h,y));case 35:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var fa=function(e){if(void 0!==e)return e;throw new Error("undefined field exception")};function pa(e){return da.apply(this,arguments)}function da(){return (da=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l,h;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.ethSigner,r=t.starkSigner,a=t.withdrawalsApi,i="ERC721"===t.type?"1":t.amount,e.t0=a,e.next=5,n.getAddress();case 5:return e.t1=e.sent,e.t2=Br(t),e.t3=i,e.t4={user:e.t1,token:e.t2,amount:e.t3},e.t5={getSignableWithdrawalRequest:e.t4},e.next=12,e.t0.getSignableWithdrawal.call(e.t0,e.t5);case 12:return s=e.sent,o=s.data,u=o.signable_message,c=o.payload_hash,e.next=16,r.signMessage(c);case 16:return f=e.sent,e.next=19,Y$1(u,n);case 19:return p=e.sent,d=p.ethAddress,l=p.ethSignature,e.next=24,a.createWithdrawal({createWithdrawalRequest:{stark_key:fa(s.data.stark_key),amount:i,asset_id:fa(s.data.asset_id),vault_id:fa(s.data.vault_id),nonce:fa(s.data.nonce),stark_signature:f},xImxEthAddress:d,xImxEthSignature:l});case 24:return h=e.sent,e.abrupt("return",h.data);case 26:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function la(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function ha(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?la(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):la(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}function ya(e,t,n,r){return ma.apply(this,arguments)}function ma(){return (ma=L$1(W$1.mark((function e(t,n,r,a){var i;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.encodeAsset({assetType:t,encodeAssetRequest:{token:ha({type:n},a&&{data:a})}});case 2:return i=e.sent,e.abrupt("return",i.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ga(e,t,n,r,a){return ba.apply(this,arguments)}function ba(){return (ba=L$1(W$1.mark((function e(t,n,r,a,i){var s,o,u;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return s=e.sent,e.next=5,$n$1(s,r,i);case 5:return o=e.sent,e.next=8,a.populateTransaction.registerAndWithdraw(s,r,o.operator_signature,n);case 8:return u=e.sent,e.abrupt("return",t.sendTransaction(u));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function va(e,t,n,r){return wa.apply(this,arguments)}function wa(){return (wa=L$1(W$1.mark((function e(t,n,r,a){var i;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.populateTransaction.withdraw(r,n);case 2:return i=e.sent,e.abrupt("return",t.sendTransaction(i));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function xa(e,t,n,r,a,i){return Ta.apply(this,arguments)}function Ta(){return (Ta=L$1(W$1.mark((function e(t,n,r,a,i,s){var o,u,c;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ya("asset","ERC20",a,{token_address:r.tokenAddress});case 2:return o=e.sent,u=O.connect(s.ethConfiguration.coreContractAddress,t),c=D$1.connect(s.ethConfiguration.registrationContractAddress,t),e.next=7,Qn(n,c);case 7:if(e.sent){e.next=12;break}return e.abrupt("return",ga(t,o.asset_type,n,c,i));case 12:return e.abrupt("return",va(t,o.asset_type,n,u));case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ka(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Oa(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ka(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ka(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}function Pa(e,t,n,r,a){return _a.apply(this,arguments)}function _a(){return (_a=L$1(W$1.mark((function e(t,n,r,a,i){var s;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.populateTransaction.withdrawAndMint(r,n,a);case 2:return s=e.sent,e.abrupt("return",t.sendTransaction(s));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Sa(e,t,n,r,a,i){return Aa.apply(this,arguments)}function Aa(){return (Aa=L$1(W$1.mark((function e(t,n,r,a,i,s){var o,u,c;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return o=e.sent,e.next=5,$n$1(o,r,s);case 5:return u=e.sent,e.next=8,i.populateTransaction.regsiterAndWithdrawAndMint(o,r,u.operator_signature,n,a);case 8:return c=e.sent,e.abrupt("return",t.sendTransaction(c));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ra(e){var t=e.data.id,n=e.data.blueprint||"";return p$1.sanitizeHex(p$1.utf8ToHex("{".concat(t,"}:{").concat(n,"}")))}function Ea(e,t,n,r,a,i){return Ca.apply(this,arguments)}function Ca(){return (Ca=L$1(W$1.mark((function e(t,n,r,a,i,s){var o,u,c,f;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ya("mintable-asset","ERC721",a,Oa({id:r.data.id,token_address:r.data.tokenAddress},r.data.blueprint&&{blueprint:r.data.blueprint}));case 2:return o=e.sent,u=Ra(r),c=O.connect(s.ethConfiguration.coreContractAddress,t),f=D$1.connect(s.ethConfiguration.registrationContractAddress,t),e.next=8,Qn(n,f);case 8:if(e.sent){e.next=13;break}return e.abrupt("return",Sa(t,o.asset_type,n,u,f,i));case 13:return e.abrupt("return",Pa(t,o.asset_type,n,u,c));case 14:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ja(e,t,n,r,a,i){return Ia.apply(this,arguments)}function Ia(){return (Ia=L$1(W$1.mark((function e(t,n,r,a,i,s){var o,u,c;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return o=e.sent,e.next=5,$n$1(o,r,s);case 5:return u=e.sent,e.next=8,i.populateTransaction.registerAndWithdrawNft(o,r,u.operator_signature,n,a);case 8:return c=e.sent,e.abrupt("return",t.sendTransaction(c));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ma(e,t,n,r,a){return Na.apply(this,arguments)}function Na(){return (Na=L$1(W$1.mark((function e(t,n,r,a,i){var s;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.populateTransaction.withdrawNft(r,n,a);case 2:return s=e.sent,e.abrupt("return",t.sendTransaction(s));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ba(e,t,n,r,a,i){return Da.apply(this,arguments)}function Da(){return (Da=L$1(W$1.mark((function e(t,n,r,a,i,s){var o,u,c;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ya("asset","ERC721",a,{token_id:r.tokenId,token_address:r.tokenAddress});case 2:return o=e.sent,u=O.connect(s.ethConfiguration.coreContractAddress,t),c=D$1.connect(s.ethConfiguration.registrationContractAddress,t),e.next=7,Qn(n,c);case 7:if(e.sent){e.next=12;break}return e.abrupt("return",ja(t,o.asset_type,n,r.tokenId,c,i));case 12:return e.abrupt("return",Ma(t,o.asset_type,n,r.tokenId,u));case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ua(e,t,n,r,a,i,s){return Fa.apply(this,arguments)}function Fa(){return (Fa=L$1(W$1.mark((function e(t,n,r,a,i,s,o){var u,c;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return u=r.tokenAddress,c=r.tokenId,e.next=4,i.getMintableTokenDetailsByClientTokenId({tokenAddress:u,tokenId:c}).then((function(e){return Ea(t,n,{type:"ERC721",data:{id:c,tokenAddress:u,blueprint:e.data.blueprint}},a,s,o)})).catch((function(e){var i;if(404===(null===(i=e.response)||void 0===i?void 0:i.status))return Ba(t,n,r,a,s,o);throw e}));case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function La(e,t,n,r,a){return qa.apply(this,arguments)}function qa(){return (qa=L$1(W$1.mark((function e(t,n,r,a,i){var s,o,u;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getAddress();case 2:return s=e.sent,e.next=5,$n$1(s,r,i);case 5:return o=e.sent,e.next=8,a.populateTransaction.registerAndWithdraw(s,r,o.operator_signature,n);case 8:return u=e.sent,e.abrupt("return",t.sendTransaction(u));case 10:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Va(e,t,n,r){return Ga.apply(this,arguments)}function Ga(){return (Ga=L$1(W$1.mark((function e(t,n,r,a){var i;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.populateTransaction.withdraw(r,n);case 2:return i=e.sent,e.abrupt("return",t.sendTransaction(i));case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function za(e,t,n,r,a){return Wa.apply(this,arguments)}function Wa(){return (Wa=L$1(W$1.mark((function e(t,n,r,a,i){var s,o,u;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ya("asset","ETH",r);case 2:return s=e.sent,o=O.connect(i.ethConfiguration.coreContractAddress,t),u=D$1.connect(i.ethConfiguration.registrationContractAddress,t),e.next=7,Qn(n,u);case 7:if(e.sent){e.next=12;break}return e.abrupt("return",La(t,s.asset_type,n,u,a));case 12:return e.abrupt("return",Va(t,s.asset_type,n,o));case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Xa(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function Ka(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xa(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xa(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}function Ha(e){return Qa.apply(this,arguments)}function Qa(){return (Qa=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.ethSigner,r=t.starkSigner,a=t.request,i=t.ordersApi,e.next=3,n.getAddress();case 3:return s=e.sent,o="ERC721"===a.sell.type?"1":a.sell.amount,u="ERC721"===a.buy.type?"1":a.buy.amount,c={user:s,amount_buy:u,token_buy:Br(a.buy),amount_sell:o,token_sell:Br(a.sell),fees:a.fees,expiration_timestamp:a.expiration_timestamp,split_fees:!0},e.next=9,i.getSignableOrder({getSignableOrderRequestV3:c});case 9:return f=e.sent,p=f.data,d=p.signable_message,l=p.payload_hash,e.next=13,Q$1(d,n);case 13:return h=e.sent,e.next=16,r.signMessage(l);case 16:return y=e.sent,m=f.data,g={createOrderRequest:{amount_buy:m.amount_buy,amount_sell:m.amount_sell,asset_id_buy:m.asset_id_buy,asset_id_sell:m.asset_id_sell,expiration_timestamp:m.expiration_timestamp,include_fees:!0,fees:a.fees,nonce:m.nonce,stark_key:m.stark_key,stark_signature:y,vault_id_buy:m.vault_id_buy,vault_id_sell:m.vault_id_sell},xImxEthAddress:s,xImxEthSignature:h},e.next=21,i.createOrderV3(g);case 21:return b=e.sent,e.abrupt("return",Ka({},b.data));case 23:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ja(e){return $a.apply(this,arguments)}function $a(){return ($a=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.ethSigner,r=t.starkSigner,a=t.request,i=t.ordersApi,e.next=3,i.getSignableCancelOrderV3({getSignableCancelOrderRequest:{order_id:a.order_id}});case 3:return s=e.sent,o=s.data,u=o.signable_message,c=o.payload_hash,e.next=7,Q$1(u,n);case 7:return f=e.sent,e.next=10,r.signMessage(c);case 10:return p=e.sent,e.next=13,n.getAddress();case 13:return d=e.sent,e.next=16,i.cancelOrder({id:a.order_id.toString(),cancelOrderRequest:{order_id:a.order_id,stark_signature:p},xImxEthAddress:d,xImxEthSignature:f});case 16:return l=e.sent,e.abrupt("return",{order_id:l.data.order_id,status:l.data.status});case 18:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Za(e){return Ya.apply(this,arguments)}function Ya(){return (Ya=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.ethSigner,r=t.starkSigner,a=t.request,i=t.tradesApi,e.next=3,n.getAddress();case 3:return s=e.sent,e.next=6,i.getSignableTrade({getSignableTradeRequest:{user:s,order_id:a.order_id,fees:a.fees}});case 6:return o=e.sent,u=o.data,c=u.signable_message,f=u.payload_hash,e.next=10,Q$1(c,n);case 10:return p=e.sent,e.next=13,r.signMessage(f);case 13:return d=e.sent,e.next=16,i.createTradeV3({createTradeRequest:{amount_buy:o.data.amount_buy,amount_sell:o.data.amount_sell,asset_id_buy:o.data.asset_id_buy,asset_id_sell:o.data.asset_id_sell,expiration_timestamp:o.data.expiration_timestamp,fee_info:o.data.fee_info,fees:a.fees,include_fees:!0,nonce:o.data.nonce,order_id:a.order_id,stark_key:o.data.stark_key,vault_id_buy:o.data.vault_id_buy,vault_id_sell:o.data.vault_id_sell,stark_signature:d},xImxEthAddress:s,xImxEthSignature:p});case 16:return l=e.sent,e.abrupt("return",l.data);case 18:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ei(e){return ti.apply(this,arguments)}function ti(){return (ti=L$1(W$1.mark((function e(t){var n,r,a,i,s,o,u,c,f,p,d,l,h,y,m;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.ethSigner,a=t.starkSigner,i=t.request,s=t.exchangesApi,e.next=3,r.getAddress();case 3:return o=e.sent,u=i.amount,e.next=7,s.getExchangeSignableTransfer({id:i.transactionID,getSignableTransferRequest:{sender:o,token:Br(i),amount:u,receiver:i.receiver}});case 7:return c=e.sent,f=c.data,p=f.signable_message,d=f.payload_hash,e.next=11,Q$1(p,r);case 11:return l=e.sent,e.next=14,a.signMessage(d);case 14:return h=e.sent,y={sender_stark_key:c.data.sender_stark_key,sender_vault_id:c.data.sender_vault_id,receiver_stark_key:c.data.receiver_stark_key,receiver_vault_id:c.data.receiver_vault_id,asset_id:c.data.asset_id,amount:c.data.amount,nonce:c.data.nonce,expiration_timestamp:c.data.expiration_timestamp,stark_signature:h},e.next=18,s.createExchangeTransfer({id:i.transactionID,createTransferRequest:y,xImxEthAddress:o,xImxEthSignature:l});case 18:return m=e.sent,e.abrupt("return",{sent_signature:null==m?void 0:m.data.sent_signature,status:null==m||null===(n=m.data.status)||void 0===n?void 0:n.toString(),time:null==m?void 0:m.data.time,transfer_id:null==m?void 0:m.data.transfer_id});case 20:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ni(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r);}return n}function ri(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ni(Object(n),!0).forEach((function(t){g$1(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ni(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}var ai=function(){function e(t){h$1(this,e),this.config=t;var n=t.apiConfiguration;this.config=t,this.depositsApi=new Je$2(n),this.encodingApi=new nt$1(n),this.mintsApi=new _t$1(n),this.ordersApi=new Ut$1(n),this.tokensApi=new Jt$1(n),this.tradesApi=new nn$1(n),this.transfersApi=new cn$1(n),this.usersApi=new yn$1(n),this.withdrawalsApi=new xn$1(n),this.projectsApi=new zt$1(n),this.collectionsApi=new ze$1(n),this.metadataApi=new ht$1(n),this.metadataRefreshesApi=new wt$1(n),this.exchangesApi=new ut$2(n);}var t,n,r,a,i,s,o,u,c,f,p,d,l,y,g,b,v,w,x,T,k,O,P,_,S,A,R,E;return m$2(e,[{key:"isChainValid",value:function(e){return e===this.config.ethConfiguration.chainID}},{key:"validateChain",value:(E=L$1(W$1.mark((function e(t){var n;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.getChainId();case 2:if(n=e.sent,this.isChainValid(n)){e.next=5;break}throw new Error("The wallet used for this operation is not from the correct network.");case 5:case"end":return e.stop()}}),e,this)}))),function(e){return E.apply(this,arguments)})},{key:"registerOffchain",value:(R=L$1(W$1.mark((function e(t){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",Kn$1(ri(ri({},t),{},{usersApi:this.usersApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e){return R.apply(this,arguments)})},{key:"isRegisteredOnchain",value:(A=L$1(W$1.mark((function e(t){var n,r;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return n=D$1.connect(this.config.ethConfiguration.registrationContractAddress,t.ethSigner),e.next=5,t.starkSigner.getAddress();case 5:return r=e.sent,e.abrupt("return",Qn(r,n));case 7:case"end":return e.stop()}}),e,this)}))),function(e){return A.apply(this,arguments)})},{key:"mint",value:(S=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t);case 2:return e.abrupt("return",Mr(t,n,this.mintsApi));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return S.apply(this,arguments)})},{key:"transfer",value:(_=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",Fr(ri(ri({},t),{},{request:n,transfersApi:this.transfersApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return _.apply(this,arguments)})},{key:"exchangeTransfer",value:(P=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",ei(ri(ri({},t),{},{request:n,exchangesApi:this.exchangesApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return P.apply(this,arguments)})},{key:"batchNftTransfer",value:(O=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",qr$1(ri(ri({},t),{},{request:n,transfersApi:this.transfersApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return O.apply(this,arguments)})},{key:"deposit",value:(k=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=n.type,e.next="ETH"===e.t0?3:"ERC20"===e.t0?4:"ERC721"===e.t0?5:6;break;case 3:return e.abrupt("return",this.depositEth(t,n));case 4:return e.abrupt("return",this.depositERC20(t,n));case 5:return e.abrupt("return",this.depositERC721(t,n));case 6:case"end":return e.stop()}}),e,this)}))),function(e,t){return k.apply(this,arguments)})},{key:"depositEth",value:(T=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t);case 2:return e.abrupt("return",Zr$1(t,n,this.depositsApi,this.usersApi,this.encodingApi,this.config));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return T.apply(this,arguments)})},{key:"depositERC20",value:(x=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t);case 2:return e.abrupt("return",aa(t,n,this.depositsApi,this.usersApi,this.tokensApi,this.encodingApi,this.config));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return x.apply(this,arguments)})},{key:"depositERC721",value:(w=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t);case 2:return e.abrupt("return",ua(t,n,this.depositsApi,this.usersApi,this.encodingApi,this.config));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return w.apply(this,arguments)})},{key:"prepareWithdrawal",value:(v=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",pa(ri(ri(ri({},t),n),{},{withdrawalsApi:this.withdrawalsApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return v.apply(this,arguments)})},{key:"completeWithdrawal",value:function(e,t,n){switch(n.type){case"ETH":return this.completeEthWithdrawal(e,t);case"ERC20":return this.completeERC20Withdrawal(e,t,n);case"ERC721":return this.completeERC721Withdrawal(e,t,n)}}},{key:"completeEthWithdrawal",value:(b=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t);case 2:return e.abrupt("return",za(t,n,this.encodingApi,this.usersApi,this.config));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return b.apply(this,arguments)})},{key:"completeERC20Withdrawal",value:(g=L$1(W$1.mark((function e(t,n,r){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t);case 2:return e.abrupt("return",xa(t,n,r,this.encodingApi,this.usersApi,this.config));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t,n){return g.apply(this,arguments)})},{key:"completeERC721Withdrawal",value:function(){var e=L$1(W$1.mark((function e(t,n,r){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t);case 2:return e.abrupt("return",Ua(t,n,r,this.encodingApi,this.mintsApi,this.usersApi,this.config));case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}()},{key:"createOrder",value:(y=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",Ha(ri(ri({},t),{},{request:n,ordersApi:this.ordersApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return y.apply(this,arguments)})},{key:"cancelOrder",value:(l=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",Ja(ri(ri({},t),{},{request:n,ordersApi:this.ordersApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return l.apply(this,arguments)})},{key:"createTrade",value:(d=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.validateChain(t.ethSigner);case 2:return e.abrupt("return",Za(ri(ri({},t),{},{request:n,tradesApi:this.tradesApi})));case 3:case"end":return e.stop()}}),e,this)}))),function(e,t){return d.apply(this,arguments)})},{key:"createProject",value:(p=L$1(W$1.mark((function e(t,n){var r;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return r=e.sent,e.abrupt("return",this.projectsApi.createProject({iMXSignature:r.signature,iMXTimestamp:r.timestamp,createProjectRequest:n}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return p.apply(this,arguments)})},{key:"getProject",value:(f=L$1(W$1.mark((function e(t,n){var r;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return r=e.sent,e.abrupt("return",this.projectsApi.getProject({id:n,iMXSignature:r.signature,iMXTimestamp:r.timestamp}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return f.apply(this,arguments)})},{key:"getProjects",value:(c=L$1(W$1.mark((function e(t,n,r,a,i){var s;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return s=e.sent,e.abrupt("return",this.projectsApi.getProjects({iMXSignature:s.signature,iMXTimestamp:s.timestamp,pageSize:n,cursor:r,orderBy:a,direction:i}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,n,r,a){return c.apply(this,arguments)})},{key:"createCollection",value:(u=L$1(W$1.mark((function e(t,n){var r;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return r=e.sent,e.abrupt("return",this.collectionsApi.createCollection({iMXSignature:r.signature,iMXTimestamp:r.timestamp,createCollectionRequest:n}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return u.apply(this,arguments)})},{key:"updateCollection",value:(o=L$1(W$1.mark((function e(t,n,r){var a;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return a=e.sent,e.abrupt("return",this.collectionsApi.updateCollection({iMXSignature:a.signature,iMXTimestamp:a.timestamp,address:n,updateCollectionRequest:r}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,n){return o.apply(this,arguments)})},{key:"addMetadataSchemaToCollection",value:(s=L$1(W$1.mark((function e(t,n,r){var a;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return a=e.sent,e.abrupt("return",this.metadataApi.addMetadataSchemaToCollection({iMXSignature:a.signature,iMXTimestamp:a.timestamp,addMetadataSchemaToCollectionRequest:r,address:n}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,n){return s.apply(this,arguments)})},{key:"updateMetadataSchemaByName",value:(i=L$1(W$1.mark((function e(t,n,r,a){var i;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return i=e.sent,e.abrupt("return",this.metadataApi.updateMetadataSchemaByName({iMXSignature:i.signature,iMXTimestamp:i.timestamp,address:n,name:r,metadataSchemaRequest:a}));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t,n,r){return i.apply(this,arguments)})},{key:"listMetadataRefreshes",value:(a=L$1(W$1.mark((function e(t,n,r,a){var i,s;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return i=e.sent,e.next=5,t.getAddress();case 5:return s=e.sent,e.abrupt("return",this.metadataRefreshesApi.getAListOfMetadataRefreshes({xImxEthSignature:i.signature,xImxEthTimestamp:i.timestamp,xImxEthAddress:s,collectionAddress:n,pageSize:r,cursor:a}));case 7:case"end":return e.stop()}}),e,this)}))),function(e,t,n,r){return a.apply(this,arguments)})},{key:"getMetadataRefreshErrors",value:(r=L$1(W$1.mark((function e(t,n,r,a){var i,s;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return i=e.sent,e.next=5,t.getAddress();case 5:return s=e.sent,e.abrupt("return",this.metadataRefreshesApi.getMetadataRefreshErrors({xImxEthSignature:i.signature,xImxEthTimestamp:i.timestamp,xImxEthAddress:s,refreshId:n,pageSize:r,cursor:a}));case 7:case"end":return e.stop()}}),e,this)}))),function(e,t,n,a){return r.apply(this,arguments)})},{key:"getMetadataRefreshResults",value:(n=L$1(W$1.mark((function e(t,n){var r,a;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return r=e.sent,e.next=5,t.getAddress();case 5:return a=e.sent,e.abrupt("return",this.metadataRefreshesApi.getMetadataRefreshResults({xImxEthSignature:r.signature,xImxEthTimestamp:r.timestamp,xImxEthAddress:a,refreshId:n}));case 7:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"createMetadataRefresh",value:(t=L$1(W$1.mark((function e(t,n){var r,a;return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$$1(t);case 2:return r=e.sent,e.next=5,t.getAddress();case 5:return a=e.sent,e.abrupt("return",this.metadataRefreshesApi.requestAMetadataRefresh({xImxEthSignature:r.signature,xImxEthTimestamp:r.timestamp,xImxEthAddress:a,createMetadataRefreshRequest:n}));case 7:case"end":return e.stop()}}),e,this)}))),function(e,n){return t.apply(this,arguments)})}]),e}();function ii(e){if(l.default.isAxiosError(e)&&e.response){var t,n,r,a=e.response.data;return a.code&&a.message?new qn$1({code:a.code,details:a.details,message:a.message}):new qn$1({code:null!==(t=null!==(n=e.code)&&void 0!==n?n:null===(r=e.response)||void 0===r?void 0:r.status.toString())&&void 0!==t?t:"unknown_error_code",message:String(e)})}return new qn$1({code:"unknown_error_code",message:String(e)})}var si=function(){function e(t){h$1(this,e),this.depositsApi=new Je$2(t.apiConfiguration),this.mintsApi=new _t$1(t.apiConfiguration),this.ordersApi=new Ut$1(t.apiConfiguration),this.tokensApi=new Jt$1(t.apiConfiguration),this.tradesApi=new nn$1(t.apiConfiguration),this.transfersApi=new cn$1(t.apiConfiguration),this.exchangeApi=new ut$2(t.apiConfiguration),this.usersApi=new yn$1(t.apiConfiguration),this.withdrawalsApi=new xn$1(t.apiConfiguration),this.balanceApi=new Ue$1(t.apiConfiguration),this.assetApi=new je$1(t.apiConfiguration),this.collectionApi=new ze$1(t.apiConfiguration),this.metadataApi=new ht$1(t.apiConfiguration),this.metadataRefreshesApi=new wt$1(t.apiConfiguration),this.nftCheckoutPrimaryApi=new jt$1(t.apiConfiguration),this.projectsApi=new zt$1(t.apiConfiguration),this.workflows=new ai(t);}var t,n,r;return m$2(e,[{key:"deposit",value:function(e,t){return this.workflows.deposit(e,t).catch((function(e){throw ii(e)}))}},{key:"getDeposit",value:function(e){return this.depositsApi.getDeposit(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listDeposits",value:function(e){return this.depositsApi.listDeposits(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"registerOffchain",value:function(e){return this.workflows.registerOffchain(e).catch((function(e){throw ii(e)}))}},{key:"isRegisteredOnchain",value:function(e){return this.workflows.isRegisteredOnchain(e).catch((function(e){throw ii(e)}))}},{key:"getUser",value:function(e){return this.usersApi.getUsers({user:e}).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getAsset",value:function(e){return this.assetApi.getAsset(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listAssets",value:function(e){return this.assetApi.listAssets(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"createCollection",value:function(e,t){return this.workflows.createCollection(e,t).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getCollection",value:function(e){return this.collectionApi.getCollection(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listCollectionFilters",value:function(e){return this.collectionApi.listCollectionFilters(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listCollections",value:function(e){return this.collectionApi.listCollections(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"updateCollection",value:function(e,t,n){return this.workflows.updateCollection(e,t,n).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"addMetadataSchemaToCollection",value:function(e,t,n){return this.workflows.addMetadataSchemaToCollection(e,t,n).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getMetadataSchema",value:function(e){return this.metadataApi.getMetadataSchema(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"updateMetadataSchemaByName",value:function(e,t,n,r){return this.workflows.updateMetadataSchemaByName(e,t,n,r).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listMetadataRefreshes",value:function(e,t,n,r){return this.workflows.listMetadataRefreshes(e,t,n,r).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getMetadataRefreshErrors",value:function(e,t,n,r){return this.workflows.getMetadataRefreshErrors(e,t,n,r).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getMetadataRefreshResults",value:function(e,t){return this.workflows.getMetadataRefreshResults(e,t).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"createMetadataRefresh",value:function(e,t){return this.workflows.createMetadataRefresh(e,t).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"createProject",value:(r=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.workflows.createProject(t,n).then((function(e){return e.data})).catch((function(e){throw ii(e)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"getProject",value:(n=L$1(W$1.mark((function e(t,n){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.workflows.getProject(t,n).then((function(e){return e.data})).catch((function(e){throw ii(e)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"getProjects",value:(t=L$1(W$1.mark((function e(t,n,r,a,i){return W$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.workflows.getProjects(t,n,r,a,i).then((function(e){return e.data})).catch((function(e){throw ii(e)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e,n,r,a,i){return t.apply(this,arguments)})},{key:"getBalance",value:function(e){return this.balanceApi.getBalance(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listBalances",value:function(e){return this.balanceApi.listBalances(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getMint",value:function(e){return this.mintsApi.getMint(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listMints",value:function(e){return this.mintsApi.listMints(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"mint",value:function(e,t){return this.workflows.mint(e,t).catch((function(e){throw ii(e)}))}},{key:"listWithdrawals",value:function(e){return this.withdrawalsApi.listWithdrawals(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getWithdrawal",value:function(e){return this.withdrawalsApi.getWithdrawal(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"prepareWithdrawal",value:function(e,t){return this.workflows.prepareWithdrawal(e,t).catch((function(e){throw ii(e)}))}},{key:"completeWithdrawal",value:function(e,t,n){return this.workflows.completeWithdrawal(e,t,n).catch((function(e){throw ii(e)}))}},{key:"getOrder",value:function(e){return this.ordersApi.getOrder(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listOrders",value:function(e){return this.ordersApi.listOrders(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"createOrder",value:function(e,t){return this.workflows.createOrder(e,t).catch((function(e){throw ii(e)}))}},{key:"cancelOrder",value:function(e,t){return this.workflows.cancelOrder(e,t).catch((function(e){throw ii(e)}))}},{key:"getTrade",value:function(e){return this.tradesApi.getTrade(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listTrades",value:function(e){return this.tradesApi.listTrades(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"createTrade",value:function(e,t){return this.workflows.createTrade(e,t).catch((function(e){throw ii(e)}))}},{key:"getToken",value:function(e){return this.tokensApi.getToken(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listTokens",value:function(e){return this.tokensApi.listTokens(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"getTransfer",value:function(e){return this.transfersApi.getTransfer(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"listTransfers",value:function(e){return this.transfersApi.listTransfers(e).then((function(e){return e.data})).catch((function(e){throw ii(e)}))}},{key:"transfer",value:function(e,t){return this.workflows.transfer(e,t).catch((function(e){throw ii(e)}))}},{key:"batchNftTransfer",value:function(e,t){return this.workflows.batchNftTransfer(e,t).catch((function(e){throw ii(e)}))}},{key:"createExchange",value:function(e){return this.exchangeApi.createExchange(e).catch((function(e){throw ii(e)}))}},{key:"getExchange",value:function(e){return this.exchangeApi.getExchange(e).catch((function(e){throw ii(e)}))}},{key:"getExchanges",value:function(e){return this.exchangeApi.getExchanges(e).catch((function(e){throw ii(e)}))}},{key:"exchangeTransfer",value:function(e,t){return this.workflows.exchangeTransfer(e,t).catch((function(e){throw ii(e)}))}},{key:"createNftPrimary",value:function(e){return this.nftCheckoutPrimaryApi.createNftPrimary(e).catch((function(e){throw ii(e)}))}},{key:"getCurrenciesNFTCheckoutPrimary",value:function(e){return this.nftCheckoutPrimaryApi.getCurrenciesNFTCheckoutPrimary(e).catch((function(e){throw ii(e)}))}},{key:"getNftPrimaryTransaction",value:function(e){return this.nftCheckoutPrimaryApi.getNftPrimaryTransaction(e).catch((function(e){throw ii(e)}))}},{key:"getNftPrimaryTransactions",value:function(e){return this.nftCheckoutPrimaryApi.getNftPrimaryTransactions(e).catch((function(e){throw ii(e)}))}}]),e}();index_cjs.AssetsApi=je$1,index_cjs.AssetsApiAxiosParamCreator=Ee$1,index_cjs.AssetsApiFactory=function(e,t,n){var r=Ce$1(e);return {getAsset:function(e,a,i,s){return r.getAsset(e,a,i,s).then((function(e){return e(n,t)}))},listAssets:function(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v){return r.listAssets(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v).then((function(e){return e(n,t)}))}}},index_cjs.AssetsApiFp=Ce$1,index_cjs.BalancesApi=Ue$1,index_cjs.BalancesApiAxiosParamCreator=Be$1,index_cjs.BalancesApiFactory=function(e,t,n){var r=De$1(e);return {getBalance:function(e,a,i){return r.getBalance(e,a,i).then((function(e){return e(n,t)}))},listBalances:function(e,a,i,s,o,u){return r.listBalances(e,a,i,s,o,u).then((function(e){return e(n,t)}))}}},index_cjs.BalancesApiFp=De$1,index_cjs.CollectionsApi=ze$1,index_cjs.CollectionsApiAxiosParamCreator=Ve$1,index_cjs.CollectionsApiFactory=function(e,t,n){var r=Ge$1(e);return {createCollection:function(e,a,i,s){return r.createCollection(e,a,i,s).then((function(e){return e(n,t)}))},getCollection:function(e,a){return r.getCollection(e,a).then((function(e){return e(n,t)}))},listCollectionFilters:function(e,a,i,s){return r.listCollectionFilters(e,a,i,s).then((function(e){return e(n,t)}))},listCollections:function(e,a,i,s,o,u,c,f){return r.listCollections(e,a,i,s,o,u,c,f).then((function(e){return e(n,t)}))},updateCollection:function(e,a,i,s,o){return r.updateCollection(e,a,i,s,o).then((function(e){return e(n,t)}))}}},index_cjs.CollectionsApiFp=Ge$1,Config = index_cjs.Config=Xn,index_cjs.Configuration=Tn,index_cjs.Contracts=U,index_cjs.CreateExchangeAndURLAPIRequestProviderEnum={Moonpay:"moonpay",Layerswap:"layerswap"},index_cjs.CreateExchangeAndURLAPIRequestTypeEnum={Onramp:"onramp",Offramp:"offramp"},index_cjs.DepositsApi=Je$2,index_cjs.DepositsApiAxiosParamCreator=He$1,index_cjs.DepositsApiFactory=function(e,t,n){var r=Qe$1(e);return {getDeposit:function(e,a){return r.getDeposit(e,a).then((function(e){return e(n,t)}))},getSignableDeposit:function(e,a){return r.getSignableDeposit(e,a).then((function(e){return e(n,t)}))},listDeposits:function(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v){return r.listDeposits(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v).then((function(e){return e(n,t)}))}}},index_cjs.DepositsApiFp=Qe$1,index_cjs.EncodeAssetRequestTokenTypeEnum={Eth:"ETH",Erc20:"ERC20",Erc721:"ERC721"},index_cjs.EncodingApi=nt$1,index_cjs.EncodingApiAxiosParamCreator=et$2,index_cjs.EncodingApiFactory=function(e,t,n){var r=tt$2(e);return {encodeAsset:function(e,a,i){return r.encodeAsset(e,a,i).then((function(e){return e(n,t)}))}}},index_cjs.EncodingApiFp=tt$2,index_cjs.EthSigner=Fn$1,index_cjs.ExchangesApi=ut$2,index_cjs.ExchangesApiAxiosParamCreator=st$1,index_cjs.ExchangesApiFactory=function(e,t,n){var r=ot$1(e);return {createExchange:function(e,a){return r.createExchange(e,a).then((function(e){return e(n,t)}))},createExchangeTransfer:function(e,a,i,s,o,u){return r.createExchangeTransfer(e,a,i,s,o,u).then((function(e){return e(n,t)}))},getExchange:function(e,a){return r.getExchange(e,a).then((function(e){return e(n,t)}))},getExchangeSignableTransfer:function(e,a,i){return r.getExchangeSignableTransfer(e,a,i).then((function(e){return e(n,t)}))},getExchanges:function(e,a,i,s,o,u,c,f,p,d){return r.getExchanges(e,a,i,s,o,u,c,f,p,d).then((function(e){return e(n,t)}))}}},index_cjs.ExchangesApiFp=ot$1,index_cjs.FeeTokenTypeEnum={Eth:"ETH",Erc20:"ERC20"},index_cjs.GetMetadataRefreshResponseStatusEnum={Queued:"queued",InProgress:"in_progress",Completed:"completed"},index_cjs.IMXError=qn$1,ImmutableX = index_cjs.ImmutableX=si,index_cjs.MetadataApi=ht$1,index_cjs.MetadataApiAxiosParamCreator=dt$1,index_cjs.MetadataApiFactory=function(e,t,n){var r=lt$1(e);return {addMetadataSchemaToCollection:function(e,a,i,s,o){return r.addMetadataSchemaToCollection(e,a,i,s,o).then((function(e){return e(n,t)}))},getMetadataSchema:function(e,a){return r.getMetadataSchema(e,a).then((function(e){return e(n,t)}))},updateMetadataSchemaByName:function(e,a,i,s,o,u){return r.updateMetadataSchemaByName(e,a,i,s,o,u).then((function(e){return e(n,t)}))}}},index_cjs.MetadataApiFp=lt$1,index_cjs.MetadataRefreshExcludingSummaryStatusEnum={Queued:"queued",InProgress:"in_progress",Completed:"completed"},index_cjs.MetadataRefreshesApi=wt$1,index_cjs.MetadataRefreshesApiAxiosParamCreator=bt$2,index_cjs.MetadataRefreshesApiFactory=function(e,t,n){var r=vt$1(e);return {getAListOfMetadataRefreshes:function(e,a,i,s,o,u,c){return r.getAListOfMetadataRefreshes(e,a,i,s,o,u,c).then((function(e){return e(n,t)}))},getMetadataRefreshErrors:function(e,a,i,s,o,u,c){return r.getMetadataRefreshErrors(e,a,i,s,o,u,c).then((function(e){return e(n,t)}))},getMetadataRefreshResults:function(e,a,i,s,o){return r.getMetadataRefreshResults(e,a,i,s,o).then((function(e){return e(n,t)}))},requestAMetadataRefresh:function(e,a,i,s,o){return r.requestAMetadataRefresh(e,a,i,s,o).then((function(e){return e(n,t)}))}}},index_cjs.MetadataRefreshesApiFp=vt$1,index_cjs.MetadataSchemaRequestTypeEnum={Enum:"enum",Text:"text",Boolean:"boolean",Continuous:"continuous",Discrete:"discrete"},index_cjs.MintsApi=_t$1,index_cjs.MintsApiAxiosParamCreator=Ot$1,index_cjs.MintsApiFactory=function(e,t,n){var r=Pt$1(e);return {getMint:function(e,a){return r.getMint(e,a).then((function(e){return e(n,t)}))},getMintableTokenDetailsByClientTokenId:function(e,a,i){return r.getMintableTokenDetailsByClientTokenId(e,a,i).then((function(e){return e(n,t)}))},listMints:function(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b){return r.listMints(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b).then((function(e){return e(n,t)}))},mintTokens:function(e,a){return r.mintTokens(e,a).then((function(e){return e(n,t)}))}}},index_cjs.MintsApiFp=Pt$1,index_cjs.NftCheckoutPrimaryApi=jt$1,index_cjs.NftCheckoutPrimaryApiAxiosParamCreator=Et$1,index_cjs.NftCheckoutPrimaryApiFactory=function(e,t,n){var r=Ct$1(e);return {createNftPrimary:function(e,a){return r.createNftPrimary(e,a).then((function(e){return e(n,t)}))},getCurrenciesNFTCheckoutPrimary:function(e,a,i){return r.getCurrenciesNFTCheckoutPrimary(e,a,i).then((function(e){return e(n,t)}))},getNftPrimaryTransaction:function(e,a){return r.getNftPrimaryTransaction(e,a).then((function(e){return e(n,t)}))},getNftPrimaryTransactions:function(e,a,i,s,o,u,c,f,p,d,l,h){return r.getNftPrimaryTransactions(e,a,i,s,o,u,c,f,p,d,l,h).then((function(e){return e(n,t)}))},registerNftPrimarySalesContract:function(e,a){return r.registerNftPrimarySalesContract(e,a).then((function(e){return e(n,t)}))}}},index_cjs.NftCheckoutPrimaryApiFp=Ct$1,index_cjs.OrdersApi=Ut$1,index_cjs.OrdersApiAxiosParamCreator=Bt$1,index_cjs.OrdersApiFactory=function(e,t,n){var r=Dt$1(e);return {cancelOrder:function(e,a,i,s,o,u){return r.cancelOrder(e,a,i,s,o,u).then((function(e){return e(n,t)}))},cancelOrderV3:function(e,a,i,s,o,u){return r.cancelOrderV3(e,a,i,s,o,u).then((function(e){return e(n,t)}))},createOrder:function(e,a,i,s,o){return r.createOrder(e,a,i,s,o).then((function(e){return e(n,t)}))},createOrderV3:function(e,a,i,s,o){return r.createOrderV3(e,a,i,s,o).then((function(e){return e(n,t)}))},getOrder:function(e,a,i,s,o){return r.getOrder(e,a,i,s,o).then((function(e){return e(n,t)}))},getOrderV3:function(e,a,i,s,o){return r.getOrderV3(e,a,i,s,o).then((function(e){return e(n,t)}))},getSignableCancelOrder:function(e,a){return r.getSignableCancelOrder(e,a).then((function(e){return e(n,t)}))},getSignableCancelOrderV3:function(e,a){return r.getSignableCancelOrderV3(e,a).then((function(e){return e(n,t)}))},getSignableOrder:function(e,a){return r.getSignableOrder(e,a).then((function(e){return e(n,t)}))},listOrders:function(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j){return r.listOrders(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j).then((function(e){return e(n,t)}))},listOrdersV3:function(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j){return r.listOrdersV3(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x,T,k,O,P,_,S,A,R,E,C,j).then((function(e){return e(n,t)}))}}},index_cjs.OrdersApiFp=Dt$1,index_cjs.ProjectsApi=zt$1,index_cjs.ProjectsApiAxiosParamCreator=Vt$1,index_cjs.ProjectsApiFactory=function(e,t,n){var r=Gt$1(e);return {createProject:function(e,a,i,s){return r.createProject(e,a,i,s).then((function(e){return e(n,t)}))},getProject:function(e,a,i,s){return r.getProject(e,a,i,s).then((function(e){return e(n,t)}))},getProjects:function(e,a,i,s,o,u,c){return r.getProjects(e,a,i,s,o,u,c).then((function(e){return e(n,t)}))}}},index_cjs.ProjectsApiFp=Gt$1,index_cjs.TokensApi=Jt$1,index_cjs.TokensApiAxiosParamCreator=Ht$1,index_cjs.TokensApiFactory=function(e,t,n){var r=Qt$1(e);return {getToken:function(e,a){return r.getToken(e,a).then((function(e){return e(n,t)}))},listTokens:function(e,a,i,s,o,u,c){return r.listTokens(e,a,i,s,o,u,c).then((function(e){return e(n,t)}))}}},index_cjs.TokensApiFp=Qt$1,index_cjs.TradesApi=nn$1,index_cjs.TradesApiAxiosParamCreator=en$1,index_cjs.TradesApiFactory=function(e,t,n){var r=tn$1(e);return {createTrade:function(e,a,i,s,o){return r.createTrade(e,a,i,s,o).then((function(e){return e(n,t)}))},createTradeV3:function(e,a,i,s,o){return r.createTradeV3(e,a,i,s,o).then((function(e){return e(n,t)}))},getSignableTrade:function(e,a){return r.getSignableTrade(e,a).then((function(e){return e(n,t)}))},getTrade:function(e,a){return r.getTrade(e,a).then((function(e){return e(n,t)}))},listTrades:function(e,a,i,s,o,u,c,f,p,d,l,h){return r.listTrades(e,a,i,s,o,u,c,f,p,d,l,h).then((function(e){return e(n,t)}))},listTradesV3:function(e,a,i,s,o,u,c,f,p,d,l,h){return r.listTradesV3(e,a,i,s,o,u,c,f,p,d,l,h).then((function(e){return e(n,t)}))}}},index_cjs.TradesApiFp=tn$1,index_cjs.TransfersApi=cn$1,index_cjs.TransfersApiAxiosParamCreator=on$1,index_cjs.TransfersApiFactory=function(e,t,n){var r=un$1(e);return {createTransfer:function(e,a,i,s,o){return r.createTransfer(e,a,i,s,o).then((function(e){return e(n,t)}))},createTransferV1:function(e,a,i,s,o){return r.createTransferV1(e,a,i,s,o).then((function(e){return e(n,t)}))},getSignableTransfer:function(e,a){return r.getSignableTransfer(e,a).then((function(e){return e(n,t)}))},getSignableTransferV1:function(e,a){return r.getSignableTransferV1(e,a).then((function(e){return e(n,t)}))},getTransfer:function(e,a){return r.getTransfer(e,a).then((function(e){return e(n,t)}))},listTransfers:function(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w){return r.listTransfers(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w).then((function(e){return e(n,t)}))}}},index_cjs.TransfersApiFp=un$1,index_cjs.UsersApi=yn$1,index_cjs.UsersApiAxiosParamCreator=ln$1,index_cjs.UsersApiFactory=function(e,t,n){var r=hn$1(e);return {getSignableRegistration:function(e,a){return r.getSignableRegistration(e,a).then((function(e){return e(n,t)}))},getSignableRegistrationOffchain:function(e,a){return r.getSignableRegistrationOffchain(e,a).then((function(e){return e(n,t)}))},getUsers:function(e,a){return r.getUsers(e,a).then((function(e){return e(n,t)}))},registerPassportUser:function(e,a,i){return r.registerPassportUser(e,a,i).then((function(e){return e(n,t)}))},registerUser:function(e,a){return r.registerUser(e,a).then((function(e){return e(n,t)}))}}},index_cjs.UsersApiFp=hn$1,index_cjs.WithdrawalsApi=xn$1,index_cjs.WithdrawalsApiAxiosParamCreator=vn$1,index_cjs.WithdrawalsApiFactory=function(e,t,n){var r=wn(e);return {createWithdrawal:function(e,a,i,s){return r.createWithdrawal(e,a,i,s).then((function(e){return e(n,t)}))},getSignableWithdrawal:function(e,a){return r.getSignableWithdrawal(e,a).then((function(e){return e(n,t)}))},getWithdrawal:function(e,a){return r.getWithdrawal(e,a).then((function(e){return e(n,t)}))},listWithdrawals:function(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x){return r.listWithdrawals(e,a,i,s,o,u,c,f,p,d,l,h,y,m,g,b,v,w,x).then((function(e){return e(n,t)}))}}},index_cjs.WithdrawalsApiFp=wn,createStarkSigner = index_cjs.createStarkSigner=function(e){return new fe$1(e)},generateLegacyStarkPrivateKey = index_cjs.generateLegacyStarkPrivateKey=function(e){return ce$1.apply(this,arguments)},index_cjs.generateStarkPrivateKey=function(){return ie(re$1.genKeyPair().getPrivate(),ne$1)};

    var Environment;
    (function (Environment) {
        Environment["PRODUCTION"] = "production";
        Environment["SANDBOX"] = "sandbox";
    })(Environment || (Environment = {}));

    /**
     * createImmutableXConfiguration to create a custom ImmutableXConfiguration
     * other than the production and sandbox defined below.
     */
    const createImmutableXConfiguration = ({ basePath, chainID, coreContractAddress, registrationContractAddress, }) => Config.createConfig({
        basePath,
        chainID,
        coreContractAddress,
        registrationContractAddress,
        sdkVersion: 'ts-immutable-sdk-__SDK_VERSION__',
    });
    /**
     * Sets `sdkVersion` at the time of build
     */
    const production = () => createImmutableXConfiguration({
        basePath: 'https://api.x.immutable.com',
        chainID: 1,
        coreContractAddress: '0x5FDCCA53617f4d2b9134B29090C87D01058e27e9',
        registrationContractAddress: '0x72a06bf2a1CE5e39cBA06c0CAb824960B587d64c',
    });
    /**
     * Sets `sdkVersion` at the time of build
     */
    const sandbox = () => createImmutableXConfiguration({
        basePath: 'https://api.sandbox.x.immutable.com',
        chainID: 5,
        coreContractAddress: '0x7917eDb51ecD6CdB3F9854c3cc593F33de10c623',
        registrationContractAddress: '0x1C97Ada273C9A52253f463042f29117090Cd7D83',
    });
    class ImxConfiguration {
        immutableXConfig;
        baseConfig;
        constructor({ baseConfig, overrides }) {
            this.baseConfig = baseConfig;
            if (overrides) {
                this.immutableXConfig = overrides.immutableXConfig;
            }
            else {
                switch (baseConfig.environment) {
                    case Environment.SANDBOX: {
                        this.immutableXConfig = sandbox();
                        break;
                    }
                    case Environment.PRODUCTION: {
                        this.immutableXConfig = production();
                        break;
                    }
                    default: {
                        this.immutableXConfig = sandbox();
                    }
                }
            }
        }
    }

    class ImmutableXClient {
        immutableX;
        depositsApi;
        mintsApi;
        ordersApi;
        tokensApi;
        tradesApi;
        transfersApi;
        exchangeApi;
        nftCheckoutPrimaryApi;
        usersApi;
        withdrawalsApi;
        balanceApi;
        assetApi;
        collectionApi;
        metadataApi;
        metadataRefreshesApi;
        projectsApi;
        constructor(config) {
            const imxConfig = new ImxConfiguration(config);
            this.immutableX = new ImmutableX(imxConfig.immutableXConfig);
            this.depositsApi = this.immutableX.depositsApi;
            this.mintsApi = this.immutableX.mintsApi;
            this.ordersApi = this.immutableX.ordersApi;
            this.tokensApi = this.immutableX.tokensApi;
            this.tradesApi = this.immutableX.tradesApi;
            this.transfersApi = this.immutableX.transfersApi;
            this.exchangeApi = this.immutableX.exchangeApi;
            this.usersApi = this.immutableX.usersApi;
            this.withdrawalsApi = this.immutableX.withdrawalsApi;
            this.balanceApi = this.immutableX.balanceApi;
            this.assetApi = this.immutableX.assetApi;
            this.collectionApi = this.immutableX.collectionApi;
            this.metadataApi = this.immutableX.metadataApi;
            this.metadataRefreshesApi = this.immutableX.metadataRefreshesApi;
            this.nftCheckoutPrimaryApi = this.immutableX.nftCheckoutPrimaryApi;
            this.projectsApi = this.immutableX.projectsApi;
        }
        /**
         * Get details of a Deposit with the given ID
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Deposit
         * @throws {@link index.IMXError}
         */
        getDeposit(request) {
            return this.immutableX.getDeposit(request);
        }
        /**
         * Get a list of Deposits
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Deposits
         * @throws {@link index.IMXError}
         */
        listDeposits(request) {
            return this.immutableX.listDeposits(request);
        }
        /**
         * Get Stark keys for a registered User
         * @param ethAddress - the eth address of the User
         * @returns a promise that resolves with the requested User
         * @throws {@link index.IMXError}
         */
        getUser(ethAddress) {
            return this.immutableX.getUser(ethAddress);
        }
        /**
         * Get details of an Asset
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Asset
         * @throws {@link index.IMXError}
         */
        getAsset(request) {
            return this.immutableX.getAsset(request);
        }
        /**
         * Get a list of Assets
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Assets
         * @throws {@link index.IMXError}
         */
        listAssets(request) {
            return this.immutableX.listAssets(request);
        }
        /**
         * Create a Collection
         * @param ethSigner - the L1 signer
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with the created Collection
         * @throws {@link index.IMXError}
         */
        createCollection(ethSigner, request) {
            return this.immutableX.createCollection(ethSigner, request);
        }
        /**
         * Get details of a Collection at the given address
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Collection
         * @throws {@link index.IMXError}
         */
        getCollection(request) {
            return this.immutableX.getCollection(request);
        }
        /**
         * Get a list of Collection filters
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Collection Filters
         * @throws {@link index.IMXError}
         */
        listCollectionFilters(request) {
            return this.immutableX.listCollectionFilters(request);
        }
        /**
         * Get a list of Collections
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Collections
         * @throws {@link index.IMXError}
         */
        listCollections(request) {
            return this.collectionApi.listCollections(request).then((res) => res.data);
        }
        /**
         * Update a Collection
         * @param ethSigner - the L1 signer
         * @param collectionAddress - the Collection contract address
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the updated Collection
         * @throws {@link index.IMXError}
         */
        updateCollection(ethSigner, collectionAddress, request) {
            return this.immutableX.updateCollection(ethSigner, collectionAddress, request);
        }
        /**
         * Add metadata schema to Collection
         * @param ethSigner - the L1 signer
         * @param collectionAddress - the Collection contract address
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the SuccessResponse if successful
         * @throws {@link index.IMXError}
         */
        addMetadataSchemaToCollection(ethSigner, collectionAddress, request) {
            return this.immutableX.addMetadataSchemaToCollection(ethSigner, collectionAddress, request);
        }
        /**
         * Get Metadata schema
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Metadata schema
         * @throws {@link index.IMXError}
         */
        getMetadataSchema(request) {
            return this.immutableX.getMetadataSchema(request);
        }
        /**
         * Update metadata schema by name
         * @param ethSigner - the L1 signer
         * @param collectionAddress - the Collection contract address
         * @param name - the Metadata schema name
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the SuccessResponse if successful
         * @throws {@link index.IMXError}
         */
        updateMetadataSchemaByName(ethSigner, collectionAddress, name, request) {
            return this.immutableX.updateMetadataSchemaByName(ethSigner, collectionAddress, name, request);
        }
        /**
         * Get a list of metadata refreshes
         * @param ethSigner - the L1 signer
         * @param collectionAddress - the Collection contract address
         * @param pageSize - the page size of the result
         * @param cursor - the cursor
         * @returns a promise that resolves with the requested metadata refreshes
         * @throws {@link index.IMXError}
         */
        listMetadataRefreshes(ethSigner, collectionAddress, pageSize, cursor) {
            return this.immutableX.listMetadataRefreshes(ethSigner, collectionAddress, pageSize, cursor);
        }
        /**
         * Get a list of metadata refresh errors
         * @param ethSigner - the L1 signer
         * @param refreshId - the metadata refresh ID
         * @param pageSize - the page size of the result
         * @param cursor - the cursor
         * @returns a promise that resolves with the requested metadata refresh errors
         * @throws {@link index.IMXError}
         */
        getMetadataRefreshErrors(ethSigner, refreshId, pageSize, cursor) {
            return this.immutableX.getMetadataRefreshErrors(ethSigner, refreshId, pageSize, cursor);
        }
        /**
         * Get a list of metadata refresh results
         * @param ethSigner - the L1 signer
         * @param refreshId - the metadata refresh ID
         * @returns a promise that resolves with the requested metadata refresh results
         * @throws {@link index.IMXError}
         */
        getMetadataRefreshResults(ethSigner, refreshId) {
            return this.immutableX.getMetadataRefreshResults(ethSigner, refreshId);
        }
        /**
         * Request a metadata refresh
         * @param ethSigner - the L1 signer
         * @param request the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested metadata refresh
         * @throws {@link index.IMXError}
         */
        createMetadataRefresh(ethSigner, request) {
            return this.immutableX.createMetadataRefresh(ethSigner, request);
        }
        /**
         * Create a Project
         * @param ethSigner - the L1 signer
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the created Project
         * @throws {@link index.IMXError}
         */
        async createProject(ethSigner, request) {
            return this.immutableX.createProject(ethSigner, request);
        }
        /**
         * Get a Project
         * @param ethSigner - the L1 signer
         * @param id - the Project ID
         * @returns a promise that resolves with the requested Project
         * @throws {@link index.IMXError}
         */
        async getProject(ethSigner, id) {
            return this.immutableX.getProject(ethSigner, id);
        }
        /**
         * Get Projects owned by the given User
         * @param ethSigner - the L1 signer
         * @param pageSize - the page size of the result
         * @param cursor - the cursor
         * @param orderBy - the property to sort by
         * @param direction - direction to sort (asc/desc)
         * @returns a promise that resolves with the requested Projects
         * @throws {@link index.IMXError}
         */
        async getProjects(ethSigner, pageSize, cursor, orderBy, direction) {
            return this.immutableX.getProjects(ethSigner, pageSize, cursor, orderBy, direction);
        }
        /**
         * Get the token Balances of the User
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Balance
         * @throws {@link index.IMXError}
         */
        getBalance(request) {
            return this.immutableX.getBalance(request);
        }
        /**
         * Get a list of Balances for given User
         * @param request the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Balances
         * @throws {@link index.IMXError}
         */
        listBalances(request) {
            return this.immutableX.listBalances(request);
        }
        /**
         * Get details of a Mint with the given ID
         * @param request the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Mint
         * @throws {@link index.IMXError}
         */
        getMint(request) {
            return this.immutableX.getMint(request);
        }
        /**
         * Get a list of Mints
         * @param request optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Mints
         * @throws {@link index.IMXError}
         */
        listMints(request) {
            return this.immutableX.listMints(request);
        }
        /**
         * Mint tokens in a batch with fees
         * @param ethSigner - the L1 signer
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with the minted tokens
         * @throws {@link index.IMXError}
         */
        mint(ethSigner, request) {
            return this.immutableX.mint(ethSigner, request);
        }
        /**
         * Get a list of Withdrawals
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Withdrawals
         * @throws {@link index.IMXError}
         */
        listWithdrawals(request) {
            return this.immutableX.listWithdrawals(request);
        }
        /**
         * Get details of Withdrawal with the given ID
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Withdrawal
         * @throws {@link index.IMXError}
         */
        getWithdrawal(request) {
            return this.immutableX.getWithdrawal(request);
        }
        /**
         * Get details of an Order with the given ID
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Order
         * @throws {@link index.IMXError}
         */
        getOrder(request) {
            return this.immutableX.getOrder(request);
        }
        /**
         * Get a list of Orders
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Orders
         * @throws {@link index.IMXError}
         */
        listOrders(request) {
            return this.immutableX.listOrders(request);
        }
        /**
         * Get details of a Trade with the given ID
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Trade
         * @throws {@link index.IMXError}
         */
        getTrade(request) {
            return this.immutableX.getTrade(request);
        }
        /**
         * Get a list of Trades
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Trades
         * @throws {@link index.IMXError}
         */
        listTrades(request) {
            return this.immutableX.listTrades(request);
        }
        /**
         * Get details of a Token
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Token
         * @throws {@link index.IMXError}
         */
        getToken(request) {
            return this.immutableX.getToken(request);
        }
        /**
         * Get a list of Tokens
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Tokens
         * @throws {@link index.IMXError}
         */
        listTokens(request) {
            return this.immutableX.listTokens(request);
        }
        /**
         * Get details of a Transfer with the given ID
         * @param request - the request object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested Transfer
         * @throws {@link index.IMXError}
         */
        getTransfer(request) {
            return this.immutableX.getTransfer(request);
        }
        /**
         * Get a list of Transfers
         * @param request - optional object containing the parameters to be provided in the API request
         * @returns a promise that resolves with the requested list of Transfers
         * @throws {@link index.IMXError}
         */
        listTransfers(request) {
            return this.immutableX.listTransfers(request);
        }
        /**
         * Create a new Exchange transaction
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with the created Exchange Transaction
         * @throws {@link index.IMXError}
         */
        createExchange(request) {
            return this.immutableX.createExchange(request).then((res) => res.data);
        }
        /**
         * Get an Exchange transaction
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with the Exchange Transaction
         * @throws {@link index.IMXError}
         */
        getExchange(request) {
            return this.immutableX.getExchange(request).then((res) => res.data);
        }
        /**
         * Get Exchange transactions
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with Exchange Transactions
         * @throws {@link index.IMXError}
         */
        getExchanges(request) {
            return this.immutableX.getExchanges(request).then((res) => res.data);
        }
        /**
         * Create a new Transfer request
         * @param walletConnection - the pair of Eth/Stark signers
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with the created Exchange Transfer
         * @throws {@link index.IMXError}
         */
        exchangeTransfer(walletConnection, request) {
            return this.immutableX.exchangeTransfer(walletConnection, request);
        }
        /**
         * Create a new nft primary transaction
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with the created nft primary Transaction
         * @throws {@link index.IMXError}
         */
        createNftPrimary(request) {
            return this.immutableX.createNftPrimary(request).then((res) => res.data);
        }
        /**
         * Get nft primary supported currencies and their limits
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with nft primary Currencies
         * @throws {@link index.IMXError}
         */
        getCurrenciesNFTCheckoutPrimary(request) {
            return this.immutableX
                .getCurrenciesNFTCheckoutPrimary(request)
                .then((res) => res.data);
        }
        /**
         * Get nft primary transaction by transaction id
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with nft primary transaction
         * @throws {@link index.IMXError}
         */
        getNftPrimaryTransaction(request) {
            return this.immutableX
                .getNftPrimaryTransaction(request)
                .then((res) => res.data);
        }
        /**
         * Get list of nft primary transactions
         * @param request - the request object to be provided in the API request
         * @returns a promise that resolves with nft primary transaction
         * @throws {@link index.IMXError}
         */
        getNftPrimaryTransactions(request) {
            return this.immutableX
                .getNftPrimaryTransactions(request)
                .then((res) => res.data);
        }
    }

    function commonjsRequire(path) {
    	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }

    var core = {exports: {}};

    (function (module, exports) {
    (function (root, factory) {
    		{
    			// CommonJS
    			module.exports = factory();
    		}
    	}(commonjsGlobal, function () {

    		/*globals window, global, require*/

    		/**
    		 * CryptoJS core components.
    		 */
    		var CryptoJS = CryptoJS || (function (Math, undefined$1) {

    		    var crypto;

    		    // Native crypto from window (Browser)
    		    if (typeof window !== 'undefined' && window.crypto) {
    		        crypto = window.crypto;
    		    }

    		    // Native crypto in web worker (Browser)
    		    if (typeof self !== 'undefined' && self.crypto) {
    		        crypto = self.crypto;
    		    }

    		    // Native crypto from worker
    		    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
    		        crypto = globalThis.crypto;
    		    }

    		    // Native (experimental IE 11) crypto from window (Browser)
    		    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
    		        crypto = window.msCrypto;
    		    }

    		    // Native crypto from global (NodeJS)
    		    if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
    		        crypto = commonjsGlobal.crypto;
    		    }

    		    // Native crypto import via require (NodeJS)
    		    if (!crypto && typeof commonjsRequire === 'function') {
    		        try {
    		            crypto = require$$0$3;
    		        } catch (err) {}
    		    }

    		    /*
    		     * Cryptographically secure pseudorandom number generator
    		     *
    		     * As Math.random() is cryptographically not safe to use
    		     */
    		    var cryptoSecureRandomInt = function () {
    		        if (crypto) {
    		            // Use getRandomValues method (Browser)
    		            if (typeof crypto.getRandomValues === 'function') {
    		                try {
    		                    return crypto.getRandomValues(new Uint32Array(1))[0];
    		                } catch (err) {}
    		            }

    		            // Use randomBytes method (NodeJS)
    		            if (typeof crypto.randomBytes === 'function') {
    		                try {
    		                    return crypto.randomBytes(4).readInt32LE();
    		                } catch (err) {}
    		            }
    		        }

    		        throw new Error('Native crypto module could not be used to get secure random number.');
    		    };

    		    /*
    		     * Local polyfill of Object.create

    		     */
    		    var create = Object.create || (function () {
    		        function F() {}

    		        return function (obj) {
    		            var subtype;

    		            F.prototype = obj;

    		            subtype = new F();

    		            F.prototype = null;

    		            return subtype;
    		        };
    		    }());

    		    /**
    		     * CryptoJS namespace.
    		     */
    		    var C = {};

    		    /**
    		     * Library namespace.
    		     */
    		    var C_lib = C.lib = {};

    		    /**
    		     * Base object for prototypal inheritance.
    		     */
    		    var Base = C_lib.Base = (function () {


    		        return {
    		            /**
    		             * Creates a new object that inherits from this object.
    		             *
    		             * @param {Object} overrides Properties to copy into the new object.
    		             *
    		             * @return {Object} The new object.
    		             *
    		             * @static
    		             *
    		             * @example
    		             *
    		             *     var MyType = CryptoJS.lib.Base.extend({
    		             *         field: 'value',
    		             *
    		             *         method: function () {
    		             *         }
    		             *     });
    		             */
    		            extend: function (overrides) {
    		                // Spawn
    		                var subtype = create(this);

    		                // Augment
    		                if (overrides) {
    		                    subtype.mixIn(overrides);
    		                }

    		                // Create default initializer
    		                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
    		                    subtype.init = function () {
    		                        subtype.$super.init.apply(this, arguments);
    		                    };
    		                }

    		                // Initializer's prototype is the subtype object
    		                subtype.init.prototype = subtype;

    		                // Reference supertype
    		                subtype.$super = this;

    		                return subtype;
    		            },

    		            /**
    		             * Extends this object and runs the init method.
    		             * Arguments to create() will be passed to init().
    		             *
    		             * @return {Object} The new object.
    		             *
    		             * @static
    		             *
    		             * @example
    		             *
    		             *     var instance = MyType.create();
    		             */
    		            create: function () {
    		                var instance = this.extend();
    		                instance.init.apply(instance, arguments);

    		                return instance;
    		            },

    		            /**
    		             * Initializes a newly created object.
    		             * Override this method to add some logic when your objects are created.
    		             *
    		             * @example
    		             *
    		             *     var MyType = CryptoJS.lib.Base.extend({
    		             *         init: function () {
    		             *             // ...
    		             *         }
    		             *     });
    		             */
    		            init: function () {
    		            },

    		            /**
    		             * Copies properties into this object.
    		             *
    		             * @param {Object} properties The properties to mix in.
    		             *
    		             * @example
    		             *
    		             *     MyType.mixIn({
    		             *         field: 'value'
    		             *     });
    		             */
    		            mixIn: function (properties) {
    		                for (var propertyName in properties) {
    		                    if (properties.hasOwnProperty(propertyName)) {
    		                        this[propertyName] = properties[propertyName];
    		                    }
    		                }

    		                // IE won't copy toString using the loop above
    		                if (properties.hasOwnProperty('toString')) {
    		                    this.toString = properties.toString;
    		                }
    		            },

    		            /**
    		             * Creates a copy of this object.
    		             *
    		             * @return {Object} The clone.
    		             *
    		             * @example
    		             *
    		             *     var clone = instance.clone();
    		             */
    		            clone: function () {
    		                return this.init.prototype.extend(this);
    		            }
    		        };
    		    }());

    		    /**
    		     * An array of 32-bit words.
    		     *
    		     * @property {Array} words The array of 32-bit words.
    		     * @property {number} sigBytes The number of significant bytes in this word array.
    		     */
    		    var WordArray = C_lib.WordArray = Base.extend({
    		        /**
    		         * Initializes a newly created word array.
    		         *
    		         * @param {Array} words (Optional) An array of 32-bit words.
    		         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
    		         *
    		         * @example
    		         *
    		         *     var wordArray = CryptoJS.lib.WordArray.create();
    		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
    		         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
    		         */
    		        init: function (words, sigBytes) {
    		            words = this.words = words || [];

    		            if (sigBytes != undefined$1) {
    		                this.sigBytes = sigBytes;
    		            } else {
    		                this.sigBytes = words.length * 4;
    		            }
    		        },

    		        /**
    		         * Converts this word array to a string.
    		         *
    		         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
    		         *
    		         * @return {string} The stringified word array.
    		         *
    		         * @example
    		         *
    		         *     var string = wordArray + '';
    		         *     var string = wordArray.toString();
    		         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
    		         */
    		        toString: function (encoder) {
    		            return (encoder || Hex).stringify(this);
    		        },

    		        /**
    		         * Concatenates a word array to this word array.
    		         *
    		         * @param {WordArray} wordArray The word array to append.
    		         *
    		         * @return {WordArray} This word array.
    		         *
    		         * @example
    		         *
    		         *     wordArray1.concat(wordArray2);
    		         */
    		        concat: function (wordArray) {
    		            // Shortcuts
    		            var thisWords = this.words;
    		            var thatWords = wordArray.words;
    		            var thisSigBytes = this.sigBytes;
    		            var thatSigBytes = wordArray.sigBytes;

    		            // Clamp excess bits
    		            this.clamp();

    		            // Concat
    		            if (thisSigBytes % 4) {
    		                // Copy one byte at a time
    		                for (var i = 0; i < thatSigBytes; i++) {
    		                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    		                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
    		                }
    		            } else {
    		                // Copy one word at a time
    		                for (var j = 0; j < thatSigBytes; j += 4) {
    		                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
    		                }
    		            }
    		            this.sigBytes += thatSigBytes;

    		            // Chainable
    		            return this;
    		        },

    		        /**
    		         * Removes insignificant bits.
    		         *
    		         * @example
    		         *
    		         *     wordArray.clamp();
    		         */
    		        clamp: function () {
    		            // Shortcuts
    		            var words = this.words;
    		            var sigBytes = this.sigBytes;

    		            // Clamp
    		            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
    		            words.length = Math.ceil(sigBytes / 4);
    		        },

    		        /**
    		         * Creates a copy of this word array.
    		         *
    		         * @return {WordArray} The clone.
    		         *
    		         * @example
    		         *
    		         *     var clone = wordArray.clone();
    		         */
    		        clone: function () {
    		            var clone = Base.clone.call(this);
    		            clone.words = this.words.slice(0);

    		            return clone;
    		        },

    		        /**
    		         * Creates a word array filled with random bytes.
    		         *
    		         * @param {number} nBytes The number of random bytes to generate.
    		         *
    		         * @return {WordArray} The random word array.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var wordArray = CryptoJS.lib.WordArray.random(16);
    		         */
    		        random: function (nBytes) {
    		            var words = [];

    		            for (var i = 0; i < nBytes; i += 4) {
    		                words.push(cryptoSecureRandomInt());
    		            }

    		            return new WordArray.init(words, nBytes);
    		        }
    		    });

    		    /**
    		     * Encoder namespace.
    		     */
    		    var C_enc = C.enc = {};

    		    /**
    		     * Hex encoding strategy.
    		     */
    		    var Hex = C_enc.Hex = {
    		        /**
    		         * Converts a word array to a hex string.
    		         *
    		         * @param {WordArray} wordArray The word array.
    		         *
    		         * @return {string} The hex string.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
    		         */
    		        stringify: function (wordArray) {
    		            // Shortcuts
    		            var words = wordArray.words;
    		            var sigBytes = wordArray.sigBytes;

    		            // Convert
    		            var hexChars = [];
    		            for (var i = 0; i < sigBytes; i++) {
    		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    		                hexChars.push((bite >>> 4).toString(16));
    		                hexChars.push((bite & 0x0f).toString(16));
    		            }

    		            return hexChars.join('');
    		        },

    		        /**
    		         * Converts a hex string to a word array.
    		         *
    		         * @param {string} hexStr The hex string.
    		         *
    		         * @return {WordArray} The word array.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
    		         */
    		        parse: function (hexStr) {
    		            // Shortcut
    		            var hexStrLength = hexStr.length;

    		            // Convert
    		            var words = [];
    		            for (var i = 0; i < hexStrLength; i += 2) {
    		                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
    		            }

    		            return new WordArray.init(words, hexStrLength / 2);
    		        }
    		    };

    		    /**
    		     * Latin1 encoding strategy.
    		     */
    		    var Latin1 = C_enc.Latin1 = {
    		        /**
    		         * Converts a word array to a Latin1 string.
    		         *
    		         * @param {WordArray} wordArray The word array.
    		         *
    		         * @return {string} The Latin1 string.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
    		         */
    		        stringify: function (wordArray) {
    		            // Shortcuts
    		            var words = wordArray.words;
    		            var sigBytes = wordArray.sigBytes;

    		            // Convert
    		            var latin1Chars = [];
    		            for (var i = 0; i < sigBytes; i++) {
    		                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
    		                latin1Chars.push(String.fromCharCode(bite));
    		            }

    		            return latin1Chars.join('');
    		        },

    		        /**
    		         * Converts a Latin1 string to a word array.
    		         *
    		         * @param {string} latin1Str The Latin1 string.
    		         *
    		         * @return {WordArray} The word array.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
    		         */
    		        parse: function (latin1Str) {
    		            // Shortcut
    		            var latin1StrLength = latin1Str.length;

    		            // Convert
    		            var words = [];
    		            for (var i = 0; i < latin1StrLength; i++) {
    		                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
    		            }

    		            return new WordArray.init(words, latin1StrLength);
    		        }
    		    };

    		    /**
    		     * UTF-8 encoding strategy.
    		     */
    		    var Utf8 = C_enc.Utf8 = {
    		        /**
    		         * Converts a word array to a UTF-8 string.
    		         *
    		         * @param {WordArray} wordArray The word array.
    		         *
    		         * @return {string} The UTF-8 string.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
    		         */
    		        stringify: function (wordArray) {
    		            try {
    		                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
    		            } catch (e) {
    		                throw new Error('Malformed UTF-8 data');
    		            }
    		        },

    		        /**
    		         * Converts a UTF-8 string to a word array.
    		         *
    		         * @param {string} utf8Str The UTF-8 string.
    		         *
    		         * @return {WordArray} The word array.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
    		         */
    		        parse: function (utf8Str) {
    		            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
    		        }
    		    };

    		    /**
    		     * Abstract buffered block algorithm template.
    		     *
    		     * The property blockSize must be implemented in a concrete subtype.
    		     *
    		     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
    		     */
    		    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
    		        /**
    		         * Resets this block algorithm's data buffer to its initial state.
    		         *
    		         * @example
    		         *
    		         *     bufferedBlockAlgorithm.reset();
    		         */
    		        reset: function () {
    		            // Initial values
    		            this._data = new WordArray.init();
    		            this._nDataBytes = 0;
    		        },

    		        /**
    		         * Adds new data to this block algorithm's buffer.
    		         *
    		         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
    		         *
    		         * @example
    		         *
    		         *     bufferedBlockAlgorithm._append('data');
    		         *     bufferedBlockAlgorithm._append(wordArray);
    		         */
    		        _append: function (data) {
    		            // Convert string to WordArray, else assume WordArray already
    		            if (typeof data == 'string') {
    		                data = Utf8.parse(data);
    		            }

    		            // Append
    		            this._data.concat(data);
    		            this._nDataBytes += data.sigBytes;
    		        },

    		        /**
    		         * Processes available data blocks.
    		         *
    		         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
    		         *
    		         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
    		         *
    		         * @return {WordArray} The processed data.
    		         *
    		         * @example
    		         *
    		         *     var processedData = bufferedBlockAlgorithm._process();
    		         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
    		         */
    		        _process: function (doFlush) {
    		            var processedWords;

    		            // Shortcuts
    		            var data = this._data;
    		            var dataWords = data.words;
    		            var dataSigBytes = data.sigBytes;
    		            var blockSize = this.blockSize;
    		            var blockSizeBytes = blockSize * 4;

    		            // Count blocks ready
    		            var nBlocksReady = dataSigBytes / blockSizeBytes;
    		            if (doFlush) {
    		                // Round up to include partial blocks
    		                nBlocksReady = Math.ceil(nBlocksReady);
    		            } else {
    		                // Round down to include only full blocks,
    		                // less the number of blocks that must remain in the buffer
    		                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
    		            }

    		            // Count words ready
    		            var nWordsReady = nBlocksReady * blockSize;

    		            // Count bytes ready
    		            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

    		            // Process blocks
    		            if (nWordsReady) {
    		                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
    		                    // Perform concrete-algorithm logic
    		                    this._doProcessBlock(dataWords, offset);
    		                }

    		                // Remove processed words
    		                processedWords = dataWords.splice(0, nWordsReady);
    		                data.sigBytes -= nBytesReady;
    		            }

    		            // Return processed words
    		            return new WordArray.init(processedWords, nBytesReady);
    		        },

    		        /**
    		         * Creates a copy of this object.
    		         *
    		         * @return {Object} The clone.
    		         *
    		         * @example
    		         *
    		         *     var clone = bufferedBlockAlgorithm.clone();
    		         */
    		        clone: function () {
    		            var clone = Base.clone.call(this);
    		            clone._data = this._data.clone();

    		            return clone;
    		        },

    		        _minBufferSize: 0
    		    });

    		    /**
    		     * Abstract hasher template.
    		     *
    		     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
    		     */
    		    C_lib.Hasher = BufferedBlockAlgorithm.extend({
    		        /**
    		         * Configuration options.
    		         */
    		        cfg: Base.extend(),

    		        /**
    		         * Initializes a newly created hasher.
    		         *
    		         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
    		         *
    		         * @example
    		         *
    		         *     var hasher = CryptoJS.algo.SHA256.create();
    		         */
    		        init: function (cfg) {
    		            // Apply config defaults
    		            this.cfg = this.cfg.extend(cfg);

    		            // Set initial values
    		            this.reset();
    		        },

    		        /**
    		         * Resets this hasher to its initial state.
    		         *
    		         * @example
    		         *
    		         *     hasher.reset();
    		         */
    		        reset: function () {
    		            // Reset data buffer
    		            BufferedBlockAlgorithm.reset.call(this);

    		            // Perform concrete-hasher logic
    		            this._doReset();
    		        },

    		        /**
    		         * Updates this hasher with a message.
    		         *
    		         * @param {WordArray|string} messageUpdate The message to append.
    		         *
    		         * @return {Hasher} This hasher.
    		         *
    		         * @example
    		         *
    		         *     hasher.update('message');
    		         *     hasher.update(wordArray);
    		         */
    		        update: function (messageUpdate) {
    		            // Append
    		            this._append(messageUpdate);

    		            // Update the hash
    		            this._process();

    		            // Chainable
    		            return this;
    		        },

    		        /**
    		         * Finalizes the hash computation.
    		         * Note that the finalize operation is effectively a destructive, read-once operation.
    		         *
    		         * @param {WordArray|string} messageUpdate (Optional) A final message update.
    		         *
    		         * @return {WordArray} The hash.
    		         *
    		         * @example
    		         *
    		         *     var hash = hasher.finalize();
    		         *     var hash = hasher.finalize('message');
    		         *     var hash = hasher.finalize(wordArray);
    		         */
    		        finalize: function (messageUpdate) {
    		            // Final message update
    		            if (messageUpdate) {
    		                this._append(messageUpdate);
    		            }

    		            // Perform concrete-hasher logic
    		            var hash = this._doFinalize();

    		            return hash;
    		        },

    		        blockSize: 512/32,

    		        /**
    		         * Creates a shortcut function to a hasher's object interface.
    		         *
    		         * @param {Hasher} hasher The hasher to create a helper for.
    		         *
    		         * @return {Function} The shortcut function.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
    		         */
    		        _createHelper: function (hasher) {
    		            return function (message, cfg) {
    		                return new hasher.init(cfg).finalize(message);
    		            };
    		        },

    		        /**
    		         * Creates a shortcut function to the HMAC's object interface.
    		         *
    		         * @param {Hasher} hasher The hasher to use in this HMAC helper.
    		         *
    		         * @return {Function} The shortcut function.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
    		         */
    		        _createHmacHelper: function (hasher) {
    		            return function (message, key) {
    		                return new C_algo.HMAC.init(hasher, key).finalize(message);
    		            };
    		        }
    		    });

    		    /**
    		     * Algorithm namespace.
    		     */
    		    var C_algo = C.algo = {};

    		    return C;
    		}(Math));


    		return CryptoJS;

    	})); 
    } (core));

    var coreExports = core.exports;
    var CryptoJS = /*@__PURE__*/getDefaultExportFromCjs(coreExports);

    var sha256$1 = {exports: {}};

    (function (module, exports) {
    (function (root, factory) {
    		{
    			// CommonJS
    			module.exports = factory(coreExports);
    		}
    	}(commonjsGlobal, function (CryptoJS) {

    		(function (Math) {
    		    // Shortcuts
    		    var C = CryptoJS;
    		    var C_lib = C.lib;
    		    var WordArray = C_lib.WordArray;
    		    var Hasher = C_lib.Hasher;
    		    var C_algo = C.algo;

    		    // Initialization and round constants tables
    		    var H = [];
    		    var K = [];

    		    // Compute constants
    		    (function () {
    		        function isPrime(n) {
    		            var sqrtN = Math.sqrt(n);
    		            for (var factor = 2; factor <= sqrtN; factor++) {
    		                if (!(n % factor)) {
    		                    return false;
    		                }
    		            }

    		            return true;
    		        }

    		        function getFractionalBits(n) {
    		            return ((n - (n | 0)) * 0x100000000) | 0;
    		        }

    		        var n = 2;
    		        var nPrime = 0;
    		        while (nPrime < 64) {
    		            if (isPrime(n)) {
    		                if (nPrime < 8) {
    		                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
    		                }
    		                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

    		                nPrime++;
    		            }

    		            n++;
    		        }
    		    }());

    		    // Reusable object
    		    var W = [];

    		    /**
    		     * SHA-256 hash algorithm.
    		     */
    		    var SHA256 = C_algo.SHA256 = Hasher.extend({
    		        _doReset: function () {
    		            this._hash = new WordArray.init(H.slice(0));
    		        },

    		        _doProcessBlock: function (M, offset) {
    		            // Shortcut
    		            var H = this._hash.words;

    		            // Working variables
    		            var a = H[0];
    		            var b = H[1];
    		            var c = H[2];
    		            var d = H[3];
    		            var e = H[4];
    		            var f = H[5];
    		            var g = H[6];
    		            var h = H[7];

    		            // Computation
    		            for (var i = 0; i < 64; i++) {
    		                if (i < 16) {
    		                    W[i] = M[offset + i] | 0;
    		                } else {
    		                    var gamma0x = W[i - 15];
    		                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
    		                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
    		                                   (gamma0x >>> 3);

    		                    var gamma1x = W[i - 2];
    		                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
    		                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
    		                                   (gamma1x >>> 10);

    		                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
    		                }

    		                var ch  = (e & f) ^ (~e & g);
    		                var maj = (a & b) ^ (a & c) ^ (b & c);

    		                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
    		                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

    		                var t1 = h + sigma1 + ch + K[i] + W[i];
    		                var t2 = sigma0 + maj;

    		                h = g;
    		                g = f;
    		                f = e;
    		                e = (d + t1) | 0;
    		                d = c;
    		                c = b;
    		                b = a;
    		                a = (t1 + t2) | 0;
    		            }

    		            // Intermediate hash value
    		            H[0] = (H[0] + a) | 0;
    		            H[1] = (H[1] + b) | 0;
    		            H[2] = (H[2] + c) | 0;
    		            H[3] = (H[3] + d) | 0;
    		            H[4] = (H[4] + e) | 0;
    		            H[5] = (H[5] + f) | 0;
    		            H[6] = (H[6] + g) | 0;
    		            H[7] = (H[7] + h) | 0;
    		        },

    		        _doFinalize: function () {
    		            // Shortcuts
    		            var data = this._data;
    		            var dataWords = data.words;

    		            var nBitsTotal = this._nDataBytes * 8;
    		            var nBitsLeft = data.sigBytes * 8;

    		            // Add padding
    		            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
    		            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
    		            data.sigBytes = dataWords.length * 4;

    		            // Hash final blocks
    		            this._process();

    		            // Return final computed hash
    		            return this._hash;
    		        },

    		        clone: function () {
    		            var clone = Hasher.clone.call(this);
    		            clone._hash = this._hash.clone();

    		            return clone;
    		        }
    		    });

    		    /**
    		     * Shortcut function to the hasher's object interface.
    		     *
    		     * @param {WordArray|string} message The message to hash.
    		     *
    		     * @return {WordArray} The hash.
    		     *
    		     * @static
    		     *
    		     * @example
    		     *
    		     *     var hash = CryptoJS.SHA256('message');
    		     *     var hash = CryptoJS.SHA256(wordArray);
    		     */
    		    C.SHA256 = Hasher._createHelper(SHA256);

    		    /**
    		     * Shortcut function to the HMAC's object interface.
    		     *
    		     * @param {WordArray|string} message The message to hash.
    		     * @param {WordArray|string} key The secret key.
    		     *
    		     * @return {WordArray} The HMAC.
    		     *
    		     * @static
    		     *
    		     * @example
    		     *
    		     *     var hmac = CryptoJS.HmacSHA256(message, key);
    		     */
    		    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    		}(Math));


    		return CryptoJS.SHA256;

    	})); 
    } (sha256$1));

    var sha256Exports = sha256$1.exports;
    var sha256 = /*@__PURE__*/getDefaultExportFromCjs(sha256Exports);

    var encBase64 = {exports: {}};

    (function (module, exports) {
    (function (root, factory) {
    		{
    			// CommonJS
    			module.exports = factory(coreExports);
    		}
    	}(commonjsGlobal, function (CryptoJS) {

    		(function () {
    		    // Shortcuts
    		    var C = CryptoJS;
    		    var C_lib = C.lib;
    		    var WordArray = C_lib.WordArray;
    		    var C_enc = C.enc;

    		    /**
    		     * Base64 encoding strategy.
    		     */
    		    C_enc.Base64 = {
    		        /**
    		         * Converts a word array to a Base64 string.
    		         *
    		         * @param {WordArray} wordArray The word array.
    		         *
    		         * @return {string} The Base64 string.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
    		         */
    		        stringify: function (wordArray) {
    		            // Shortcuts
    		            var words = wordArray.words;
    		            var sigBytes = wordArray.sigBytes;
    		            var map = this._map;

    		            // Clamp excess bits
    		            wordArray.clamp();

    		            // Convert
    		            var base64Chars = [];
    		            for (var i = 0; i < sigBytes; i += 3) {
    		                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
    		                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
    		                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

    		                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

    		                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
    		                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
    		                }
    		            }

    		            // Add padding
    		            var paddingChar = map.charAt(64);
    		            if (paddingChar) {
    		                while (base64Chars.length % 4) {
    		                    base64Chars.push(paddingChar);
    		                }
    		            }

    		            return base64Chars.join('');
    		        },

    		        /**
    		         * Converts a Base64 string to a word array.
    		         *
    		         * @param {string} base64Str The Base64 string.
    		         *
    		         * @return {WordArray} The word array.
    		         *
    		         * @static
    		         *
    		         * @example
    		         *
    		         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
    		         */
    		        parse: function (base64Str) {
    		            // Shortcuts
    		            var base64StrLength = base64Str.length;
    		            var map = this._map;
    		            var reverseMap = this._reverseMap;

    		            if (!reverseMap) {
    		                    reverseMap = this._reverseMap = [];
    		                    for (var j = 0; j < map.length; j++) {
    		                        reverseMap[map.charCodeAt(j)] = j;
    		                    }
    		            }

    		            // Ignore padding
    		            var paddingChar = map.charAt(64);
    		            if (paddingChar) {
    		                var paddingIndex = base64Str.indexOf(paddingChar);
    		                if (paddingIndex !== -1) {
    		                    base64StrLength = paddingIndex;
    		                }
    		            }

    		            // Convert
    		            return parseLoop(base64Str, base64StrLength, reverseMap);

    		        },

    		        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    		    };

    		    function parseLoop(base64Str, base64StrLength, reverseMap) {
    		      var words = [];
    		      var nBytes = 0;
    		      for (var i = 0; i < base64StrLength; i++) {
    		          if (i % 4) {
    		              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
    		              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
    		              var bitsCombined = bits1 | bits2;
    		              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
    		              nBytes++;
    		          }
    		      }
    		      return WordArray.create(words, nBytes);
    		    }
    		}());


    		return CryptoJS.enc.Base64;

    	})); 
    } (encBase64));

    var encBase64Exports = encBase64.exports;
    var Base64 = /*@__PURE__*/getDefaultExportFromCjs(encBase64Exports);

    var encUtf8 = {exports: {}};

    (function (module, exports) {
    (function (root, factory) {
    		{
    			// CommonJS
    			module.exports = factory(coreExports);
    		}
    	}(commonjsGlobal, function (CryptoJS) {

    		return CryptoJS.enc.Utf8;

    	})); 
    } (encUtf8));

    var encUtf8Exports = encUtf8.exports;
    var Utf8 = /*@__PURE__*/getDefaultExportFromCjs(encUtf8Exports);

    var jwtDecode_cjs = {exports: {}};

    function e(e){this.message=e;}e.prototype=new Error,e.prototype.name="InvalidCharacterError";var r$1="undefined"!=typeof window&&window.atob&&window.atob.bind(window)||function(r){var t=String(r).replace(/=+$/,"");if(t.length%4==1)throw new e("'atob' failed: The string to be decoded is not correctly encoded.");for(var n,o,a=0,i=0,c="";o=t.charAt(i++);~o&&(n=a%4?64*n+o:o,a++%4)?c+=String.fromCharCode(255&n>>(-2*a&6)):0)o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o);return c};function t(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw "Illegal base64url string!"}try{return function(e){return decodeURIComponent(r$1(e).replace(/(.)/g,(function(e,r){var t=r.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t="0"+t),"%"+t})))}(t)}catch(e){return r$1(t)}}function n(e){this.message=e;}function o$2(e,r){if("string"!=typeof e)throw new n("Invalid token specified");var o=!0===(r=r||{}).header?0:1;try{return JSON.parse(t(e.split(".")[o]))}catch(e){throw new n("Invalid token specified: "+e.message)}}n.prototype=new Error,n.prototype.name="InvalidTokenError";const a$1=o$2;a$1.default=o$2,a$1.InvalidTokenError=n,jwtDecode_cjs.exports=a$1;


    var jwtDecode_cjsExports = jwtDecode_cjs.exports;
    var jwt_decode = /*@__PURE__*/getDefaultExportFromCjs(jwtDecode_cjsExports);

    // src/utils/CryptoUtils.ts

    // src/utils/Logger.ts
    var nopLogger = {
      debug: () => void 0,
      info: () => void 0,
      warn: () => void 0,
      error: () => void 0
    };
    var level;
    var logger;
    var Log = /* @__PURE__ */ ((Log2) => {
      Log2[Log2["NONE"] = 0] = "NONE";
      Log2[Log2["ERROR"] = 1] = "ERROR";
      Log2[Log2["WARN"] = 2] = "WARN";
      Log2[Log2["INFO"] = 3] = "INFO";
      Log2[Log2["DEBUG"] = 4] = "DEBUG";
      return Log2;
    })(Log || {});
    ((Log2) => {
      function reset() {
        level = 3 /* INFO */;
        logger = nopLogger;
      }
      Log2.reset = reset;
      function setLevel(value) {
        if (!(0 /* NONE */ <= value && value <= 4 /* DEBUG */)) {
          throw new Error("Invalid log level");
        }
        level = value;
      }
      Log2.setLevel = setLevel;
      function setLogger(value) {
        logger = value;
      }
      Log2.setLogger = setLogger;
    })(Log || (Log = {}));
    var Logger = class {
      constructor(_name) {
        this._name = _name;
      }
      debug(...args) {
        if (level >= 4 /* DEBUG */) {
          logger.debug(Logger._format(this._name, this._method), ...args);
        }
      }
      info(...args) {
        if (level >= 3 /* INFO */) {
          logger.info(Logger._format(this._name, this._method), ...args);
        }
      }
      warn(...args) {
        if (level >= 2 /* WARN */) {
          logger.warn(Logger._format(this._name, this._method), ...args);
        }
      }
      error(...args) {
        if (level >= 1 /* ERROR */) {
          logger.error(Logger._format(this._name, this._method), ...args);
        }
      }
      throw(err) {
        this.error(err);
        throw err;
      }
      create(method) {
        const methodLogger = Object.create(this);
        methodLogger._method = method;
        methodLogger.debug("begin");
        return methodLogger;
      }
      static createStatic(name, staticMethod) {
        const staticLogger = new Logger(`${name}.${staticMethod}`);
        staticLogger.debug("begin");
        return staticLogger;
      }
      static _format(name, method) {
        const prefix = `[${name}]`;
        return method ? `${prefix} ${method}:` : prefix;
      }
      // helpers for static class methods
      static debug(name, ...args) {
        if (level >= 4 /* DEBUG */) {
          logger.debug(Logger._format(name), ...args);
        }
      }
      static info(name, ...args) {
        if (level >= 3 /* INFO */) {
          logger.info(Logger._format(name), ...args);
        }
      }
      static warn(name, ...args) {
        if (level >= 2 /* WARN */) {
          logger.warn(Logger._format(name), ...args);
        }
      }
      static error(name, ...args) {
        if (level >= 1 /* ERROR */) {
          logger.error(Logger._format(name), ...args);
        }
      }
    };
    Log.reset();

    // src/utils/CryptoUtils.ts
    var UUID_V4_TEMPLATE = "10000000-1000-4000-8000-100000000000";
    var CryptoUtils = class {
      static _randomWord() {
        return CryptoJS.lib.WordArray.random(1).words[0];
      }
      /**
       * Generates RFC4122 version 4 guid
       */
      static generateUUIDv4() {
        const uuid = UUID_V4_TEMPLATE.replace(
          /[018]/g,
          (c) => (+c ^ CryptoUtils._randomWord() & 15 >> +c / 4).toString(16)
        );
        return uuid.replace(/-/g, "");
      }
      /**
       * PKCE: Generate a code verifier
       */
      static generateCodeVerifier() {
        return CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4();
      }
      /**
       * PKCE: Generate a code challenge
       */
      static generateCodeChallenge(code_verifier) {
        try {
          const hashed = sha256(code_verifier);
          return Base64.stringify(hashed).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
        } catch (err) {
          Logger.error("CryptoUtils.generateCodeChallenge", err);
          throw err;
        }
      }
      /**
       * Generates a base64-encoded string for a basic auth header
       */
      static generateBasicAuth(client_id, client_secret) {
        const basicAuth = Utf8.parse([client_id, client_secret].join(":"));
        return Base64.stringify(basicAuth);
      }
    };

    // src/utils/Event.ts
    var Event = class {
      constructor(_name) {
        this._name = _name;
        this._logger = new Logger(`Event('${this._name}')`);
        this._callbacks = [];
      }
      addHandler(cb) {
        this._callbacks.push(cb);
        return () => this.removeHandler(cb);
      }
      removeHandler(cb) {
        const idx = this._callbacks.lastIndexOf(cb);
        if (idx >= 0) {
          this._callbacks.splice(idx, 1);
        }
      }
      raise(...ev) {
        this._logger.debug("raise:", ...ev);
        for (const cb of this._callbacks) {
          void cb(...ev);
        }
      }
    };
    var JwtUtils = class {
      // IMPORTANT: doesn't validate the token
      static decode(token) {
        try {
          return jwt_decode(token);
        } catch (err) {
          Logger.error("JwtUtils.decode", err);
          throw err;
        }
      }
    };

    // src/utils/PopupUtils.ts
    var PopupUtils = class {
      /**
       * Populates a map of window features with a placement centered in front of
       * the current window. If no explicit width is given, a default value is
       * binned into [800, 720, 600, 480, 360] based on the current window's width.
       */
      static center({ ...features }) {
        var _a, _b, _c;
        if (features.width == null)
          features.width = (_a = [800, 720, 600, 480].find((width) => width <= window.outerWidth / 1.618)) != null ? _a : 360;
        (_b = features.left) != null ? _b : features.left = Math.max(0, Math.round(window.screenX + (window.outerWidth - features.width) / 2));
        if (features.height != null)
          (_c = features.top) != null ? _c : features.top = Math.max(0, Math.round(window.screenY + (window.outerHeight - features.height) / 2));
        return features;
      }
      static serialize(features) {
        return Object.entries(features).filter(([, value]) => value != null).map(([key, value]) => `${key}=${typeof value !== "boolean" ? value : value ? "yes" : "no"}`).join(",");
      }
    };

    // src/utils/Timer.ts
    var Timer = class extends Event {
      constructor() {
        super(...arguments);
        this._logger = new Logger(`Timer('${this._name}')`);
        this._timerHandle = null;
        this._expiration = 0;
        this._callback = () => {
          const diff = this._expiration - Timer.getEpochTime();
          this._logger.debug("timer completes in", diff);
          if (this._expiration <= Timer.getEpochTime()) {
            this.cancel();
            super.raise();
          }
        };
      }
      // get the time
      static getEpochTime() {
        return Math.floor(Date.now() / 1e3);
      }
      init(durationInSeconds) {
        const logger2 = this._logger.create("init");
        durationInSeconds = Math.max(Math.floor(durationInSeconds), 1);
        const expiration = Timer.getEpochTime() + durationInSeconds;
        if (this.expiration === expiration && this._timerHandle) {
          logger2.debug("skipping since already initialized for expiration at", this.expiration);
          return;
        }
        this.cancel();
        logger2.debug("using duration", durationInSeconds);
        this._expiration = expiration;
        const timerDurationInSeconds = Math.min(durationInSeconds, 5);
        this._timerHandle = setInterval(this._callback, timerDurationInSeconds * 1e3);
      }
      get expiration() {
        return this._expiration;
      }
      cancel() {
        this._logger.create("cancel");
        if (this._timerHandle) {
          clearInterval(this._timerHandle);
          this._timerHandle = null;
        }
      }
    };

    // src/utils/UrlUtils.ts
    var UrlUtils = class {
      static readParams(url, responseMode = "query") {
        if (!url)
          throw new TypeError("Invalid URL");
        const parsedUrl = new URL(url, window.location.origin);
        const params = parsedUrl[responseMode === "fragment" ? "hash" : "search"];
        return new URLSearchParams(params.slice(1));
      }
    };

    // src/errors/ErrorResponse.ts
    var ErrorResponse = class extends Error {
      constructor(args, form) {
        var _a, _b, _c;
        super(args.error_description || args.error || "");
        this.form = form;
        /** Marker to detect class: "ErrorResponse" */
        this.name = "ErrorResponse";
        if (!args.error) {
          Logger.error("ErrorResponse", "No error passed");
          throw new Error("No error passed");
        }
        this.error = args.error;
        this.error_description = (_a = args.error_description) != null ? _a : null;
        this.error_uri = (_b = args.error_uri) != null ? _b : null;
        this.state = args.userState;
        this.session_state = (_c = args.session_state) != null ? _c : null;
      }
    };

    // src/errors/ErrorTimeout.ts
    var ErrorTimeout = class extends Error {
      constructor(message) {
        super(message);
        /** Marker to detect class: "ErrorTimeout" */
        this.name = "ErrorTimeout";
      }
    };

    // src/AccessTokenEvents.ts
    var AccessTokenEvents = class {
      constructor(args) {
        this._logger = new Logger("AccessTokenEvents");
        this._expiringTimer = new Timer("Access token expiring");
        this._expiredTimer = new Timer("Access token expired");
        this._expiringNotificationTimeInSeconds = args.expiringNotificationTimeInSeconds;
      }
      load(container) {
        const logger2 = this._logger.create("load");
        if (container.access_token && container.expires_in !== void 0) {
          const duration = container.expires_in;
          logger2.debug("access token present, remaining duration:", duration);
          if (duration > 0) {
            let expiring = duration - this._expiringNotificationTimeInSeconds;
            if (expiring <= 0) {
              expiring = 1;
            }
            logger2.debug("registering expiring timer, raising in", expiring, "seconds");
            this._expiringTimer.init(expiring);
          } else {
            logger2.debug("canceling existing expiring timer because we're past expiration.");
            this._expiringTimer.cancel();
          }
          const expired = duration + 1;
          logger2.debug("registering expired timer, raising in", expired, "seconds");
          this._expiredTimer.init(expired);
        } else {
          this._expiringTimer.cancel();
          this._expiredTimer.cancel();
        }
      }
      unload() {
        this._logger.debug("unload: canceling existing access token timers");
        this._expiringTimer.cancel();
        this._expiredTimer.cancel();
      }
      /**
       * Add callback: Raised prior to the access token expiring.
       */
      addAccessTokenExpiring(cb) {
        return this._expiringTimer.addHandler(cb);
      }
      /**
       * Remove callback: Raised prior to the access token expiring.
       */
      removeAccessTokenExpiring(cb) {
        this._expiringTimer.removeHandler(cb);
      }
      /**
       * Add callback: Raised after the access token has expired.
       */
      addAccessTokenExpired(cb) {
        return this._expiredTimer.addHandler(cb);
      }
      /**
       * Remove callback: Raised after the access token has expired.
       */
      removeAccessTokenExpired(cb) {
        this._expiredTimer.removeHandler(cb);
      }
    };

    // src/CheckSessionIFrame.ts
    var CheckSessionIFrame = class {
      constructor(_callback, _client_id, url, _intervalInSeconds, _stopOnError) {
        this._callback = _callback;
        this._client_id = _client_id;
        this._intervalInSeconds = _intervalInSeconds;
        this._stopOnError = _stopOnError;
        this._logger = new Logger("CheckSessionIFrame");
        this._timer = null;
        this._session_state = null;
        this._message = (e) => {
          if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
            if (e.data === "error") {
              this._logger.error("error message from check session op iframe");
              if (this._stopOnError) {
                this.stop();
              }
            } else if (e.data === "changed") {
              this._logger.debug("changed message from check session op iframe");
              this.stop();
              void this._callback();
            } else {
              this._logger.debug(e.data + " message from check session op iframe");
            }
          }
        };
        const parsedUrl = new URL(url);
        this._frame_origin = parsedUrl.origin;
        this._frame = window.document.createElement("iframe");
        this._frame.style.visibility = "hidden";
        this._frame.style.position = "fixed";
        this._frame.style.left = "-1000px";
        this._frame.style.top = "0";
        this._frame.width = "0";
        this._frame.height = "0";
        this._frame.src = parsedUrl.href;
      }
      load() {
        return new Promise((resolve) => {
          this._frame.onload = () => {
            resolve();
          };
          window.document.body.appendChild(this._frame);
          window.addEventListener("message", this._message, false);
        });
      }
      start(session_state) {
        if (this._session_state === session_state) {
          return;
        }
        this._logger.create("start");
        this.stop();
        this._session_state = session_state;
        const send = () => {
          if (!this._frame.contentWindow || !this._session_state) {
            return;
          }
          this._frame.contentWindow.postMessage(this._client_id + " " + this._session_state, this._frame_origin);
        };
        send();
        this._timer = setInterval(send, this._intervalInSeconds * 1e3);
      }
      stop() {
        this._logger.create("stop");
        this._session_state = null;
        if (this._timer) {
          clearInterval(this._timer);
          this._timer = null;
        }
      }
    };

    // src/InMemoryWebStorage.ts
    var InMemoryWebStorage = class {
      constructor() {
        this._logger = new Logger("InMemoryWebStorage");
        this._data = {};
      }
      clear() {
        this._logger.create("clear");
        this._data = {};
      }
      getItem(key) {
        this._logger.create(`getItem('${key}')`);
        return this._data[key];
      }
      setItem(key, value) {
        this._logger.create(`setItem('${key}')`);
        this._data[key] = value;
      }
      removeItem(key) {
        this._logger.create(`removeItem('${key}')`);
        delete this._data[key];
      }
      get length() {
        return Object.getOwnPropertyNames(this._data).length;
      }
      key(index) {
        return Object.getOwnPropertyNames(this._data)[index];
      }
    };

    // src/JsonService.ts
    var JsonService = class {
      constructor(additionalContentTypes = [], _jwtHandler = null, _extraHeaders = {}) {
        this._jwtHandler = _jwtHandler;
        this._extraHeaders = _extraHeaders;
        this._logger = new Logger("JsonService");
        this._contentTypes = [];
        this._contentTypes.push(...additionalContentTypes, "application/json");
        if (_jwtHandler) {
          this._contentTypes.push("application/jwt");
        }
      }
      async fetchWithTimeout(input, init = {}) {
        const { timeoutInSeconds, ...initFetch } = init;
        if (!timeoutInSeconds) {
          return await fetch(input, initFetch);
        }
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeoutInSeconds * 1e3);
        try {
          const response = await fetch(input, {
            ...init,
            signal: controller.signal
          });
          return response;
        } catch (err) {
          if (err instanceof DOMException && err.name === "AbortError") {
            throw new ErrorTimeout("Network timed out");
          }
          throw err;
        } finally {
          clearTimeout(timeoutId);
        }
      }
      async getJson(url, {
        token,
        credentials
      } = {}) {
        const logger2 = this._logger.create("getJson");
        const headers = {
          "Accept": this._contentTypes.join(", ")
        };
        if (token) {
          logger2.debug("token passed, setting Authorization header");
          headers["Authorization"] = "Bearer " + token;
        }
        this.appendExtraHeaders(headers);
        let response;
        try {
          logger2.debug("url:", url);
          response = await this.fetchWithTimeout(url, { method: "GET", headers, credentials });
        } catch (err) {
          logger2.error("Network Error");
          throw err;
        }
        logger2.debug("HTTP response received, status", response.status);
        const contentType = response.headers.get("Content-Type");
        if (contentType && !this._contentTypes.find((item) => contentType.startsWith(item))) {
          logger2.throw(new Error(`Invalid response Content-Type: ${contentType != null ? contentType : "undefined"}, from URL: ${url}`));
        }
        if (response.ok && this._jwtHandler && (contentType == null ? void 0 : contentType.startsWith("application/jwt"))) {
          return await this._jwtHandler(await response.text());
        }
        let json;
        try {
          json = await response.json();
        } catch (err) {
          logger2.error("Error parsing JSON response", err);
          if (response.ok)
            throw err;
          throw new Error(`${response.statusText} (${response.status})`);
        }
        if (!response.ok) {
          logger2.error("Error from server:", json);
          if (json.error) {
            throw new ErrorResponse(json);
          }
          throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);
        }
        return json;
      }
      async postForm(url, {
        body,
        basicAuth,
        timeoutInSeconds,
        initCredentials
      }) {
        const logger2 = this._logger.create("postForm");
        const headers = {
          "Accept": this._contentTypes.join(", "),
          "Content-Type": "application/x-www-form-urlencoded"
        };
        if (basicAuth !== void 0) {
          headers["Authorization"] = "Basic " + basicAuth;
        }
        this.appendExtraHeaders(headers);
        let response;
        try {
          logger2.debug("url:", url);
          response = await this.fetchWithTimeout(url, { method: "POST", headers, body, timeoutInSeconds, credentials: initCredentials });
        } catch (err) {
          logger2.error("Network error");
          throw err;
        }
        logger2.debug("HTTP response received, status", response.status);
        const contentType = response.headers.get("Content-Type");
        if (contentType && !this._contentTypes.find((item) => contentType.startsWith(item))) {
          throw new Error(`Invalid response Content-Type: ${contentType != null ? contentType : "undefined"}, from URL: ${url}`);
        }
        const responseText = await response.text();
        let json = {};
        if (responseText) {
          try {
            json = JSON.parse(responseText);
          } catch (err) {
            logger2.error("Error parsing JSON response", err);
            if (response.ok)
              throw err;
            throw new Error(`${response.statusText} (${response.status})`);
          }
        }
        if (!response.ok) {
          logger2.error("Error from server:", json);
          if (json.error) {
            throw new ErrorResponse(json, body);
          }
          throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);
        }
        return json;
      }
      appendExtraHeaders(headers) {
        const logger2 = this._logger.create("appendExtraHeaders");
        const customKeys = Object.keys(this._extraHeaders);
        const protectedHeaders = [
          "authorization",
          "accept",
          "content-type"
        ];
        if (customKeys.length === 0) {
          return;
        }
        customKeys.forEach((headerName) => {
          if (protectedHeaders.includes(headerName.toLocaleLowerCase())) {
            logger2.warn("Protected header could not be overridden", headerName, protectedHeaders);
            return;
          }
          const content = typeof this._extraHeaders[headerName] === "function" ? this._extraHeaders[headerName]() : this._extraHeaders[headerName];
          if (content && content !== "") {
            headers[headerName] = content;
          }
        });
      }
    };

    // src/MetadataService.ts
    var MetadataService = class {
      constructor(_settings) {
        this._settings = _settings;
        this._logger = new Logger("MetadataService");
        this._signingKeys = null;
        this._metadata = null;
        this._metadataUrl = this._settings.metadataUrl;
        this._jsonService = new JsonService(
          ["application/jwk-set+json"],
          null,
          this._settings.extraHeaders
        );
        if (this._settings.signingKeys) {
          this._logger.debug("using signingKeys from settings");
          this._signingKeys = this._settings.signingKeys;
        }
        if (this._settings.metadata) {
          this._logger.debug("using metadata from settings");
          this._metadata = this._settings.metadata;
        }
        if (this._settings.fetchRequestCredentials) {
          this._logger.debug("using fetchRequestCredentials from settings");
          this._fetchRequestCredentials = this._settings.fetchRequestCredentials;
        }
      }
      resetSigningKeys() {
        this._signingKeys = null;
      }
      async getMetadata() {
        const logger2 = this._logger.create("getMetadata");
        if (this._metadata) {
          logger2.debug("using cached values");
          return this._metadata;
        }
        if (!this._metadataUrl) {
          logger2.throw(new Error("No authority or metadataUrl configured on settings"));
          throw null;
        }
        logger2.debug("getting metadata from", this._metadataUrl);
        const metadata = await this._jsonService.getJson(this._metadataUrl, { credentials: this._fetchRequestCredentials });
        logger2.debug("merging remote JSON with seed metadata");
        this._metadata = Object.assign({}, this._settings.metadataSeed, metadata);
        return this._metadata;
      }
      getIssuer() {
        return this._getMetadataProperty("issuer");
      }
      getAuthorizationEndpoint() {
        return this._getMetadataProperty("authorization_endpoint");
      }
      getUserInfoEndpoint() {
        return this._getMetadataProperty("userinfo_endpoint");
      }
      getTokenEndpoint(optional = true) {
        return this._getMetadataProperty("token_endpoint", optional);
      }
      getCheckSessionIframe() {
        return this._getMetadataProperty("check_session_iframe", true);
      }
      getEndSessionEndpoint() {
        return this._getMetadataProperty("end_session_endpoint", true);
      }
      getRevocationEndpoint(optional = true) {
        return this._getMetadataProperty("revocation_endpoint", optional);
      }
      getKeysEndpoint(optional = true) {
        return this._getMetadataProperty("jwks_uri", optional);
      }
      async _getMetadataProperty(name, optional = false) {
        const logger2 = this._logger.create(`_getMetadataProperty('${name}')`);
        const metadata = await this.getMetadata();
        logger2.debug("resolved");
        if (metadata[name] === void 0) {
          if (optional === true) {
            logger2.warn("Metadata does not contain optional property");
            return void 0;
          }
          logger2.throw(new Error("Metadata does not contain property " + name));
        }
        return metadata[name];
      }
      async getSigningKeys() {
        const logger2 = this._logger.create("getSigningKeys");
        if (this._signingKeys) {
          logger2.debug("returning signingKeys from cache");
          return this._signingKeys;
        }
        const jwks_uri = await this.getKeysEndpoint(false);
        logger2.debug("got jwks_uri", jwks_uri);
        const keySet = await this._jsonService.getJson(jwks_uri);
        logger2.debug("got key set", keySet);
        if (!Array.isArray(keySet.keys)) {
          logger2.throw(new Error("Missing keys on keyset"));
          throw null;
        }
        this._signingKeys = keySet.keys;
        return this._signingKeys;
      }
    };

    // src/WebStorageStateStore.ts
    var WebStorageStateStore = class {
      constructor({
        prefix = "oidc.",
        store = localStorage
      } = {}) {
        this._logger = new Logger("WebStorageStateStore");
        this._store = store;
        this._prefix = prefix;
      }
      async set(key, value) {
        this._logger.create(`set('${key}')`);
        key = this._prefix + key;
        await this._store.setItem(key, value);
      }
      async get(key) {
        this._logger.create(`get('${key}')`);
        key = this._prefix + key;
        const item = await this._store.getItem(key);
        return item;
      }
      async remove(key) {
        this._logger.create(`remove('${key}')`);
        key = this._prefix + key;
        const item = await this._store.getItem(key);
        await this._store.removeItem(key);
        return item;
      }
      async getAllKeys() {
        this._logger.create("getAllKeys");
        const len = await this._store.length;
        const keys = [];
        for (let index = 0; index < len; index++) {
          const key = await this._store.key(index);
          if (key && key.indexOf(this._prefix) === 0) {
            keys.push(key.substr(this._prefix.length));
          }
        }
        return keys;
      }
    };

    // src/OidcClientSettings.ts
    var DefaultResponseType = "code";
    var DefaultScope = "openid";
    var DefaultClientAuthentication = "client_secret_post";
    var DefaultResponseMode = "query";
    var DefaultStaleStateAgeInSeconds = 60 * 15;
    var DefaultClockSkewInSeconds = 60 * 5;
    var OidcClientSettingsStore = class {
      constructor({
        // metadata related
        authority,
        metadataUrl,
        metadata,
        signingKeys,
        metadataSeed,
        // client related
        client_id,
        client_secret,
        response_type = DefaultResponseType,
        scope = DefaultScope,
        redirect_uri,
        post_logout_redirect_uri,
        client_authentication = DefaultClientAuthentication,
        // optional protocol
        prompt,
        display,
        max_age,
        ui_locales,
        acr_values,
        resource,
        response_mode = DefaultResponseMode,
        // behavior flags
        filterProtocolClaims = true,
        loadUserInfo = false,
        staleStateAgeInSeconds = DefaultStaleStateAgeInSeconds,
        clockSkewInSeconds = DefaultClockSkewInSeconds,
        userInfoJwtIssuer = "OP",
        mergeClaims = false,
        disablePKCE = false,
        // other behavior
        stateStore,
        refreshTokenCredentials,
        revokeTokenAdditionalContentTypes,
        fetchRequestCredentials,
        refreshTokenAllowedScope,
        // extra
        extraQueryParams = {},
        extraTokenParams = {},
        extraHeaders = {}
      }) {
        this.authority = authority;
        if (metadataUrl) {
          this.metadataUrl = metadataUrl;
        } else {
          this.metadataUrl = authority;
          if (authority) {
            if (!this.metadataUrl.endsWith("/")) {
              this.metadataUrl += "/";
            }
            this.metadataUrl += ".well-known/openid-configuration";
          }
        }
        this.metadata = metadata;
        this.metadataSeed = metadataSeed;
        this.signingKeys = signingKeys;
        this.client_id = client_id;
        this.client_secret = client_secret;
        this.response_type = response_type;
        this.scope = scope;
        this.redirect_uri = redirect_uri;
        this.post_logout_redirect_uri = post_logout_redirect_uri;
        this.client_authentication = client_authentication;
        this.prompt = prompt;
        this.display = display;
        this.max_age = max_age;
        this.ui_locales = ui_locales;
        this.acr_values = acr_values;
        this.resource = resource;
        this.response_mode = response_mode;
        this.filterProtocolClaims = filterProtocolClaims != null ? filterProtocolClaims : true;
        this.loadUserInfo = !!loadUserInfo;
        this.staleStateAgeInSeconds = staleStateAgeInSeconds;
        this.clockSkewInSeconds = clockSkewInSeconds;
        this.userInfoJwtIssuer = userInfoJwtIssuer;
        this.mergeClaims = !!mergeClaims;
        this.disablePKCE = !!disablePKCE;
        this.revokeTokenAdditionalContentTypes = revokeTokenAdditionalContentTypes;
        if (fetchRequestCredentials && refreshTokenCredentials) {
          console.warn("Both fetchRequestCredentials and refreshTokenCredentials is set. Only fetchRequestCredentials will be used.");
        }
        this.fetchRequestCredentials = fetchRequestCredentials ? fetchRequestCredentials : refreshTokenCredentials ? refreshTokenCredentials : "same-origin";
        if (stateStore) {
          this.stateStore = stateStore;
        } else {
          const store = typeof window !== "undefined" ? window.localStorage : new InMemoryWebStorage();
          this.stateStore = new WebStorageStateStore({ store });
        }
        this.refreshTokenAllowedScope = refreshTokenAllowedScope;
        this.extraQueryParams = extraQueryParams;
        this.extraTokenParams = extraTokenParams;
        this.extraHeaders = extraHeaders;
      }
    };

    // src/UserInfoService.ts
    var UserInfoService = class {
      constructor(_settings, _metadataService) {
        this._settings = _settings;
        this._metadataService = _metadataService;
        this._logger = new Logger("UserInfoService");
        this._getClaimsFromJwt = async (responseText) => {
          const logger2 = this._logger.create("_getClaimsFromJwt");
          try {
            const payload = JwtUtils.decode(responseText);
            logger2.debug("JWT decoding successful");
            return payload;
          } catch (err) {
            logger2.error("Error parsing JWT response");
            throw err;
          }
        };
        this._jsonService = new JsonService(
          void 0,
          this._getClaimsFromJwt,
          this._settings.extraHeaders
        );
      }
      async getClaims(token) {
        const logger2 = this._logger.create("getClaims");
        if (!token) {
          this._logger.throw(new Error("No token passed"));
        }
        const url = await this._metadataService.getUserInfoEndpoint();
        logger2.debug("got userinfo url", url);
        const claims = await this._jsonService.getJson(url, {
          token,
          credentials: this._settings.fetchRequestCredentials
        });
        logger2.debug("got claims", claims);
        return claims;
      }
    };

    // src/TokenClient.ts
    var TokenClient = class {
      constructor(_settings, _metadataService) {
        this._settings = _settings;
        this._metadataService = _metadataService;
        this._logger = new Logger("TokenClient");
        this._jsonService = new JsonService(
          this._settings.revokeTokenAdditionalContentTypes,
          null,
          this._settings.extraHeaders
        );
      }
      /**
       * Exchange code.
       *
       * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3
       */
      async exchangeCode({
        grant_type = "authorization_code",
        redirect_uri = this._settings.redirect_uri,
        client_id = this._settings.client_id,
        client_secret = this._settings.client_secret,
        ...args
      }) {
        const logger2 = this._logger.create("exchangeCode");
        if (!client_id) {
          logger2.throw(new Error("A client_id is required"));
        }
        if (!redirect_uri) {
          logger2.throw(new Error("A redirect_uri is required"));
        }
        if (!args.code) {
          logger2.throw(new Error("A code is required"));
        }
        const params = new URLSearchParams({ grant_type, redirect_uri });
        for (const [key, value] of Object.entries(args)) {
          if (value != null) {
            params.set(key, value);
          }
        }
        let basicAuth;
        switch (this._settings.client_authentication) {
          case "client_secret_basic":
            if (!client_secret) {
              logger2.throw(new Error("A client_secret is required"));
              throw null;
            }
            basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);
            break;
          case "client_secret_post":
            params.append("client_id", client_id);
            if (client_secret) {
              params.append("client_secret", client_secret);
            }
            break;
        }
        const url = await this._metadataService.getTokenEndpoint(false);
        logger2.debug("got token endpoint");
        const response = await this._jsonService.postForm(url, { body: params, basicAuth, initCredentials: this._settings.fetchRequestCredentials });
        logger2.debug("got response");
        return response;
      }
      /**
       * Exchange credentials.
       *
       * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.3.2
       */
      async exchangeCredentials({
        grant_type = "password",
        client_id = this._settings.client_id,
        client_secret = this._settings.client_secret,
        scope = this._settings.scope,
        ...args
      }) {
        const logger2 = this._logger.create("exchangeCredentials");
        if (!client_id) {
          logger2.throw(new Error("A client_id is required"));
        }
        const params = new URLSearchParams({ grant_type, scope });
        for (const [key, value] of Object.entries(args)) {
          if (value != null) {
            params.set(key, value);
          }
        }
        let basicAuth;
        switch (this._settings.client_authentication) {
          case "client_secret_basic":
            if (!client_secret) {
              logger2.throw(new Error("A client_secret is required"));
              throw null;
            }
            basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);
            break;
          case "client_secret_post":
            params.append("client_id", client_id);
            if (client_secret) {
              params.append("client_secret", client_secret);
            }
            break;
        }
        const url = await this._metadataService.getTokenEndpoint(false);
        logger2.debug("got token endpoint");
        const response = await this._jsonService.postForm(url, { body: params, basicAuth, initCredentials: this._settings.fetchRequestCredentials });
        logger2.debug("got response");
        return response;
      }
      /**
       * Exchange a refresh token.
       *
       * @see https://www.rfc-editor.org/rfc/rfc6749#section-6
       */
      async exchangeRefreshToken({
        grant_type = "refresh_token",
        client_id = this._settings.client_id,
        client_secret = this._settings.client_secret,
        timeoutInSeconds,
        ...args
      }) {
        const logger2 = this._logger.create("exchangeRefreshToken");
        if (!client_id) {
          logger2.throw(new Error("A client_id is required"));
        }
        if (!args.refresh_token) {
          logger2.throw(new Error("A refresh_token is required"));
        }
        const params = new URLSearchParams({ grant_type });
        for (const [key, value] of Object.entries(args)) {
          if (value != null) {
            params.set(key, value);
          }
        }
        let basicAuth;
        switch (this._settings.client_authentication) {
          case "client_secret_basic":
            if (!client_secret) {
              logger2.throw(new Error("A client_secret is required"));
              throw null;
            }
            basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);
            break;
          case "client_secret_post":
            params.append("client_id", client_id);
            if (client_secret) {
              params.append("client_secret", client_secret);
            }
            break;
        }
        const url = await this._metadataService.getTokenEndpoint(false);
        logger2.debug("got token endpoint");
        const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials });
        logger2.debug("got response");
        return response;
      }
      /**
       * Revoke an access or refresh token.
       *
       * @see https://datatracker.ietf.org/doc/html/rfc7009#section-2.1
       */
      async revoke(args) {
        var _a;
        const logger2 = this._logger.create("revoke");
        if (!args.token) {
          logger2.throw(new Error("A token is required"));
        }
        const url = await this._metadataService.getRevocationEndpoint(false);
        logger2.debug(`got revocation endpoint, revoking ${(_a = args.token_type_hint) != null ? _a : "default token type"}`);
        const params = new URLSearchParams();
        for (const [key, value] of Object.entries(args)) {
          if (value != null) {
            params.set(key, value);
          }
        }
        params.set("client_id", this._settings.client_id);
        if (this._settings.client_secret) {
          params.set("client_secret", this._settings.client_secret);
        }
        await this._jsonService.postForm(url, { body: params });
        logger2.debug("got response");
      }
    };

    // src/ResponseValidator.ts
    var ResponseValidator = class {
      constructor(_settings, _metadataService, _claimsService) {
        this._settings = _settings;
        this._metadataService = _metadataService;
        this._claimsService = _claimsService;
        this._logger = new Logger("ResponseValidator");
        this._userInfoService = new UserInfoService(this._settings, this._metadataService);
        this._tokenClient = new TokenClient(this._settings, this._metadataService);
      }
      async validateSigninResponse(response, state) {
        const logger2 = this._logger.create("validateSigninResponse");
        this._processSigninState(response, state);
        logger2.debug("state processed");
        await this._processCode(response, state);
        logger2.debug("code processed");
        if (response.isOpenId) {
          this._validateIdTokenAttributes(response);
        }
        logger2.debug("tokens validated");
        await this._processClaims(response, state == null ? void 0 : state.skipUserInfo, response.isOpenId);
        logger2.debug("claims processed");
      }
      async validateCredentialsResponse(response, skipUserInfo) {
        const logger2 = this._logger.create("validateCredentialsResponse");
        if (response.isOpenId) {
          this._validateIdTokenAttributes(response);
        }
        logger2.debug("tokens validated");
        await this._processClaims(response, skipUserInfo, response.isOpenId);
        logger2.debug("claims processed");
      }
      async validateRefreshResponse(response, state) {
        var _a, _b;
        const logger2 = this._logger.create("validateRefreshResponse");
        response.userState = state.data;
        (_a = response.session_state) != null ? _a : response.session_state = state.session_state;
        (_b = response.scope) != null ? _b : response.scope = state.scope;
        if (response.isOpenId && !!response.id_token) {
          this._validateIdTokenAttributes(response, state.id_token);
          logger2.debug("ID Token validated");
        }
        if (!response.id_token) {
          response.id_token = state.id_token;
          response.profile = state.profile;
        }
        const hasIdToken = response.isOpenId && !!response.id_token;
        await this._processClaims(response, false, hasIdToken);
        logger2.debug("claims processed");
      }
      validateSignoutResponse(response, state) {
        const logger2 = this._logger.create("validateSignoutResponse");
        if (state.id !== response.state) {
          logger2.throw(new Error("State does not match"));
        }
        logger2.debug("state validated");
        response.userState = state.data;
        if (response.error) {
          logger2.warn("Response was error", response.error);
          throw new ErrorResponse(response);
        }
      }
      _processSigninState(response, state) {
        var _a;
        const logger2 = this._logger.create("_processSigninState");
        if (state.id !== response.state) {
          logger2.throw(new Error("State does not match"));
        }
        if (!state.client_id) {
          logger2.throw(new Error("No client_id on state"));
        }
        if (!state.authority) {
          logger2.throw(new Error("No authority on state"));
        }
        if (this._settings.authority !== state.authority) {
          logger2.throw(new Error("authority mismatch on settings vs. signin state"));
        }
        if (this._settings.client_id && this._settings.client_id !== state.client_id) {
          logger2.throw(new Error("client_id mismatch on settings vs. signin state"));
        }
        logger2.debug("state validated");
        response.userState = state.data;
        (_a = response.scope) != null ? _a : response.scope = state.scope;
        if (response.error) {
          logger2.warn("Response was error", response.error);
          throw new ErrorResponse(response);
        }
        if (state.code_verifier && !response.code) {
          logger2.throw(new Error("Expected code in response"));
        }
      }
      async _processClaims(response, skipUserInfo = false, validateSub = true) {
        const logger2 = this._logger.create("_processClaims");
        response.profile = this._claimsService.filterProtocolClaims(response.profile);
        if (skipUserInfo || !this._settings.loadUserInfo || !response.access_token) {
          logger2.debug("not loading user info");
          return;
        }
        logger2.debug("loading user info");
        const claims = await this._userInfoService.getClaims(response.access_token);
        logger2.debug("user info claims received from user info endpoint");
        if (validateSub && claims.sub !== response.profile.sub) {
          logger2.throw(new Error("subject from UserInfo response does not match subject in ID Token"));
        }
        response.profile = this._claimsService.mergeClaims(response.profile, this._claimsService.filterProtocolClaims(claims));
        logger2.debug("user info claims received, updated profile:", response.profile);
      }
      async _processCode(response, state) {
        const logger2 = this._logger.create("_processCode");
        if (response.code) {
          logger2.debug("Validating code");
          const tokenResponse = await this._tokenClient.exchangeCode({
            client_id: state.client_id,
            client_secret: state.client_secret,
            code: response.code,
            redirect_uri: state.redirect_uri,
            code_verifier: state.code_verifier,
            ...state.extraTokenParams
          });
          Object.assign(response, tokenResponse);
        } else {
          logger2.debug("No code to process");
        }
      }
      _validateIdTokenAttributes(response, currentToken) {
        var _a;
        const logger2 = this._logger.create("_validateIdTokenAttributes");
        logger2.debug("decoding ID Token JWT");
        const profile = JwtUtils.decode((_a = response.id_token) != null ? _a : "");
        if (!profile.sub) {
          logger2.throw(new Error("ID Token is missing a subject claim"));
        }
        if (currentToken) {
          const current = JwtUtils.decode(currentToken);
          if (current.sub !== profile.sub) {
            logger2.throw(new Error("sub in id_token does not match current sub"));
          }
          if (current.auth_time && current.auth_time !== profile.auth_time) {
            logger2.throw(new Error("auth_time in id_token does not match original auth_time"));
          }
          if (current.azp && current.azp !== profile.azp) {
            logger2.throw(new Error("azp in id_token does not match original azp"));
          }
          if (!current.azp && profile.azp) {
            logger2.throw(new Error("azp not in id_token, but present in original id_token"));
          }
        }
        response.profile = profile;
      }
    };

    // src/State.ts
    var State = class {
      constructor(args) {
        this.id = args.id || CryptoUtils.generateUUIDv4();
        this.data = args.data;
        if (args.created && args.created > 0) {
          this.created = args.created;
        } else {
          this.created = Timer.getEpochTime();
        }
        this.request_type = args.request_type;
      }
      toStorageString() {
        new Logger("State").create("toStorageString");
        return JSON.stringify({
          id: this.id,
          data: this.data,
          created: this.created,
          request_type: this.request_type
        });
      }
      static fromStorageString(storageString) {
        Logger.createStatic("State", "fromStorageString");
        return new State(JSON.parse(storageString));
      }
      static async clearStaleState(storage, age) {
        const logger2 = Logger.createStatic("State", "clearStaleState");
        const cutoff = Timer.getEpochTime() - age;
        const keys = await storage.getAllKeys();
        logger2.debug("got keys", keys);
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const item = await storage.get(key);
          let remove = false;
          if (item) {
            try {
              const state = State.fromStorageString(item);
              logger2.debug("got item from key:", key, state.created);
              if (state.created <= cutoff) {
                remove = true;
              }
            } catch (err) {
              logger2.error("Error parsing state for key:", key, err);
              remove = true;
            }
          } else {
            logger2.debug("no item in storage for key:", key);
            remove = true;
          }
          if (remove) {
            logger2.debug("removed item for key:", key);
            void storage.remove(key);
          }
        }
      }
    };

    // src/SigninState.ts
    var SigninState = class extends State {
      constructor(args) {
        super(args);
        if (args.code_verifier === true) {
          this.code_verifier = CryptoUtils.generateCodeVerifier();
        } else if (args.code_verifier) {
          this.code_verifier = args.code_verifier;
        }
        if (this.code_verifier) {
          this.code_challenge = CryptoUtils.generateCodeChallenge(this.code_verifier);
        }
        this.authority = args.authority;
        this.client_id = args.client_id;
        this.redirect_uri = args.redirect_uri;
        this.scope = args.scope;
        this.client_secret = args.client_secret;
        this.extraTokenParams = args.extraTokenParams;
        this.response_mode = args.response_mode;
        this.skipUserInfo = args.skipUserInfo;
      }
      toStorageString() {
        new Logger("SigninState").create("toStorageString");
        return JSON.stringify({
          id: this.id,
          data: this.data,
          created: this.created,
          request_type: this.request_type,
          code_verifier: this.code_verifier,
          authority: this.authority,
          client_id: this.client_id,
          redirect_uri: this.redirect_uri,
          scope: this.scope,
          client_secret: this.client_secret,
          extraTokenParams: this.extraTokenParams,
          response_mode: this.response_mode,
          skipUserInfo: this.skipUserInfo
        });
      }
      static fromStorageString(storageString) {
        Logger.createStatic("SigninState", "fromStorageString");
        const data = JSON.parse(storageString);
        return new SigninState(data);
      }
    };

    // src/SigninRequest.ts
    var SigninRequest = class {
      constructor({
        // mandatory
        url,
        authority,
        client_id,
        redirect_uri,
        response_type,
        scope,
        // optional
        state_data,
        response_mode,
        request_type,
        client_secret,
        nonce,
        resource,
        skipUserInfo,
        extraQueryParams,
        extraTokenParams,
        disablePKCE,
        ...optionalParams
      }) {
        this._logger = new Logger("SigninRequest");
        if (!url) {
          this._logger.error("ctor: No url passed");
          throw new Error("url");
        }
        if (!client_id) {
          this._logger.error("ctor: No client_id passed");
          throw new Error("client_id");
        }
        if (!redirect_uri) {
          this._logger.error("ctor: No redirect_uri passed");
          throw new Error("redirect_uri");
        }
        if (!response_type) {
          this._logger.error("ctor: No response_type passed");
          throw new Error("response_type");
        }
        if (!scope) {
          this._logger.error("ctor: No scope passed");
          throw new Error("scope");
        }
        if (!authority) {
          this._logger.error("ctor: No authority passed");
          throw new Error("authority");
        }
        this.state = new SigninState({
          data: state_data,
          request_type,
          code_verifier: !disablePKCE,
          client_id,
          authority,
          redirect_uri,
          response_mode,
          client_secret,
          scope,
          extraTokenParams,
          skipUserInfo
        });
        const parsedUrl = new URL(url);
        parsedUrl.searchParams.append("client_id", client_id);
        parsedUrl.searchParams.append("redirect_uri", redirect_uri);
        parsedUrl.searchParams.append("response_type", response_type);
        parsedUrl.searchParams.append("scope", scope);
        if (nonce) {
          parsedUrl.searchParams.append("nonce", nonce);
        }
        parsedUrl.searchParams.append("state", this.state.id);
        if (this.state.code_challenge) {
          parsedUrl.searchParams.append("code_challenge", this.state.code_challenge);
          parsedUrl.searchParams.append("code_challenge_method", "S256");
        }
        if (resource) {
          const resources = Array.isArray(resource) ? resource : [resource];
          resources.forEach((r) => parsedUrl.searchParams.append("resource", r));
        }
        for (const [key, value] of Object.entries({ response_mode, ...optionalParams, ...extraQueryParams })) {
          if (value != null) {
            parsedUrl.searchParams.append(key, value.toString());
          }
        }
        this.url = parsedUrl.href;
      }
    };

    // src/SigninResponse.ts
    var OidcScope = "openid";
    var SigninResponse = class {
      constructor(params) {
        /** @see {@link User.access_token} */
        this.access_token = "";
        /** @see {@link User.token_type} */
        this.token_type = "";
        /** @see {@link User.profile} */
        this.profile = {};
        this.state = params.get("state");
        this.session_state = params.get("session_state");
        this.error = params.get("error");
        this.error_description = params.get("error_description");
        this.error_uri = params.get("error_uri");
        this.code = params.get("code");
      }
      get expires_in() {
        if (this.expires_at === void 0) {
          return void 0;
        }
        return this.expires_at - Timer.getEpochTime();
      }
      set expires_in(value) {
        if (typeof value === "string")
          value = Number(value);
        if (value !== void 0 && value >= 0) {
          this.expires_at = Math.floor(value) + Timer.getEpochTime();
        }
      }
      get isOpenId() {
        var _a;
        return ((_a = this.scope) == null ? void 0 : _a.split(" ").includes(OidcScope)) || !!this.id_token;
      }
    };

    // src/SignoutRequest.ts
    var SignoutRequest = class {
      constructor({
        url,
        state_data,
        id_token_hint,
        post_logout_redirect_uri,
        extraQueryParams,
        request_type
      }) {
        this._logger = new Logger("SignoutRequest");
        if (!url) {
          this._logger.error("ctor: No url passed");
          throw new Error("url");
        }
        const parsedUrl = new URL(url);
        if (id_token_hint) {
          parsedUrl.searchParams.append("id_token_hint", id_token_hint);
        }
        if (post_logout_redirect_uri) {
          parsedUrl.searchParams.append("post_logout_redirect_uri", post_logout_redirect_uri);
          if (state_data) {
            this.state = new State({ data: state_data, request_type });
            parsedUrl.searchParams.append("state", this.state.id);
          }
        }
        for (const [key, value] of Object.entries({ ...extraQueryParams })) {
          if (value != null) {
            parsedUrl.searchParams.append(key, value.toString());
          }
        }
        this.url = parsedUrl.href;
      }
    };

    // src/SignoutResponse.ts
    var SignoutResponse = class {
      constructor(params) {
        this.state = params.get("state");
        this.error = params.get("error");
        this.error_description = params.get("error_description");
        this.error_uri = params.get("error_uri");
      }
    };

    // src/ClaimsService.ts
    var DefaultProtocolClaims = [
      "nbf",
      "jti",
      "auth_time",
      "nonce",
      "acr",
      "amr",
      "azp",
      "at_hash"
      // https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken
    ];
    var InternalRequiredProtocolClaims = ["sub", "iss", "aud", "exp", "iat"];
    var ClaimsService = class {
      constructor(_settings) {
        this._settings = _settings;
        this._logger = new Logger("ClaimsService");
      }
      filterProtocolClaims(claims) {
        const result = { ...claims };
        if (this._settings.filterProtocolClaims) {
          let protocolClaims;
          if (Array.isArray(this._settings.filterProtocolClaims)) {
            protocolClaims = this._settings.filterProtocolClaims;
          } else {
            protocolClaims = DefaultProtocolClaims;
          }
          for (const claim of protocolClaims) {
            if (!InternalRequiredProtocolClaims.includes(claim)) {
              delete result[claim];
            }
          }
        }
        return result;
      }
      mergeClaims(claims1, claims2) {
        const result = { ...claims1 };
        for (const [claim, values] of Object.entries(claims2)) {
          for (const value of Array.isArray(values) ? values : [values]) {
            const previousValue = result[claim];
            if (!previousValue) {
              result[claim] = value;
            } else if (Array.isArray(previousValue)) {
              if (!previousValue.includes(value)) {
                previousValue.push(value);
              }
            } else if (result[claim] !== value) {
              if (typeof value === "object" && this._settings.mergeClaims) {
                result[claim] = this.mergeClaims(previousValue, value);
              } else {
                result[claim] = [previousValue, value];
              }
            }
          }
        }
        return result;
      }
    };

    // src/OidcClient.ts
    var OidcClient = class {
      constructor(settings) {
        this._logger = new Logger("OidcClient");
        this.settings = new OidcClientSettingsStore(settings);
        this.metadataService = new MetadataService(this.settings);
        this._claimsService = new ClaimsService(this.settings);
        this._validator = new ResponseValidator(this.settings, this.metadataService, this._claimsService);
        this._tokenClient = new TokenClient(this.settings, this.metadataService);
      }
      async createSigninRequest({
        state,
        request,
        request_uri,
        request_type,
        id_token_hint,
        login_hint,
        skipUserInfo,
        nonce,
        response_type = this.settings.response_type,
        scope = this.settings.scope,
        redirect_uri = this.settings.redirect_uri,
        prompt = this.settings.prompt,
        display = this.settings.display,
        max_age = this.settings.max_age,
        ui_locales = this.settings.ui_locales,
        acr_values = this.settings.acr_values,
        resource = this.settings.resource,
        response_mode = this.settings.response_mode,
        extraQueryParams = this.settings.extraQueryParams,
        extraTokenParams = this.settings.extraTokenParams
      }) {
        const logger2 = this._logger.create("createSigninRequest");
        if (response_type !== "code") {
          throw new Error("Only the Authorization Code flow (with PKCE) is supported");
        }
        const url = await this.metadataService.getAuthorizationEndpoint();
        logger2.debug("Received authorization endpoint", url);
        const signinRequest = new SigninRequest({
          url,
          authority: this.settings.authority,
          client_id: this.settings.client_id,
          redirect_uri,
          response_type,
          scope,
          state_data: state,
          prompt,
          display,
          max_age,
          ui_locales,
          id_token_hint,
          login_hint,
          acr_values,
          resource,
          request,
          request_uri,
          extraQueryParams,
          extraTokenParams,
          request_type,
          response_mode,
          client_secret: this.settings.client_secret,
          skipUserInfo,
          nonce,
          disablePKCE: this.settings.disablePKCE
        });
        await this.clearStaleState();
        const signinState = signinRequest.state;
        await this.settings.stateStore.set(signinState.id, signinState.toStorageString());
        return signinRequest;
      }
      async readSigninResponseState(url, removeState = false) {
        const logger2 = this._logger.create("readSigninResponseState");
        const response = new SigninResponse(UrlUtils.readParams(url, this.settings.response_mode));
        if (!response.state) {
          logger2.throw(new Error("No state in response"));
          throw null;
        }
        const storedStateString = await this.settings.stateStore[removeState ? "remove" : "get"](response.state);
        if (!storedStateString) {
          logger2.throw(new Error("No matching state found in storage"));
          throw null;
        }
        const state = SigninState.fromStorageString(storedStateString);
        return { state, response };
      }
      async processSigninResponse(url) {
        const logger2 = this._logger.create("processSigninResponse");
        const { state, response } = await this.readSigninResponseState(url, true);
        logger2.debug("received state from storage; validating response");
        await this._validator.validateSigninResponse(response, state);
        return response;
      }
      async processResourceOwnerPasswordCredentials({
        username,
        password,
        skipUserInfo = false,
        extraTokenParams = {}
      }) {
        const tokenResponse = await this._tokenClient.exchangeCredentials({ username, password, ...extraTokenParams });
        const signinResponse = new SigninResponse(new URLSearchParams());
        Object.assign(signinResponse, tokenResponse);
        await this._validator.validateCredentialsResponse(signinResponse, skipUserInfo);
        return signinResponse;
      }
      async useRefreshToken({
        state,
        timeoutInSeconds
      }) {
        var _a;
        const logger2 = this._logger.create("useRefreshToken");
        let scope;
        if (this.settings.refreshTokenAllowedScope === void 0) {
          scope = state.scope;
        } else {
          const allowableScopes = this.settings.refreshTokenAllowedScope.split(" ");
          const providedScopes = ((_a = state.scope) == null ? void 0 : _a.split(" ")) || [];
          scope = providedScopes.filter((s) => allowableScopes.includes(s)).join(" ");
        }
        const result = await this._tokenClient.exchangeRefreshToken({
          refresh_token: state.refresh_token,
          // provide the (possible filtered) scope list
          scope,
          timeoutInSeconds
        });
        const response = new SigninResponse(new URLSearchParams());
        Object.assign(response, result);
        logger2.debug("validating response", response);
        await this._validator.validateRefreshResponse(response, {
          ...state,
          // overide the scope in the state handed over to the validator
          // so it can set the granted scope to the requested scope in case none is included in the response
          scope
        });
        return response;
      }
      async createSignoutRequest({
        state,
        id_token_hint,
        request_type,
        post_logout_redirect_uri = this.settings.post_logout_redirect_uri,
        extraQueryParams = this.settings.extraQueryParams
      } = {}) {
        const logger2 = this._logger.create("createSignoutRequest");
        const url = await this.metadataService.getEndSessionEndpoint();
        if (!url) {
          logger2.throw(new Error("No end session endpoint"));
          throw null;
        }
        logger2.debug("Received end session endpoint", url);
        const request = new SignoutRequest({
          url,
          id_token_hint,
          post_logout_redirect_uri,
          state_data: state,
          extraQueryParams,
          request_type
        });
        await this.clearStaleState();
        const signoutState = request.state;
        if (signoutState) {
          logger2.debug("Signout request has state to persist");
          await this.settings.stateStore.set(signoutState.id, signoutState.toStorageString());
        }
        return request;
      }
      async readSignoutResponseState(url, removeState = false) {
        const logger2 = this._logger.create("readSignoutResponseState");
        const response = new SignoutResponse(UrlUtils.readParams(url, this.settings.response_mode));
        if (!response.state) {
          logger2.debug("No state in response");
          if (response.error) {
            logger2.warn("Response was error:", response.error);
            throw new ErrorResponse(response);
          }
          return { state: void 0, response };
        }
        const storedStateString = await this.settings.stateStore[removeState ? "remove" : "get"](response.state);
        if (!storedStateString) {
          logger2.throw(new Error("No matching state found in storage"));
          throw null;
        }
        const state = State.fromStorageString(storedStateString);
        return { state, response };
      }
      async processSignoutResponse(url) {
        const logger2 = this._logger.create("processSignoutResponse");
        const { state, response } = await this.readSignoutResponseState(url, true);
        if (state) {
          logger2.debug("Received state from storage; validating response");
          this._validator.validateSignoutResponse(response, state);
        } else {
          logger2.debug("No state from storage; skipping response validation");
        }
        return response;
      }
      clearStaleState() {
        this._logger.create("clearStaleState");
        return State.clearStaleState(this.settings.stateStore, this.settings.staleStateAgeInSeconds);
      }
      async revokeToken(token, type) {
        this._logger.create("revokeToken");
        return await this._tokenClient.revoke({
          token,
          token_type_hint: type
        });
      }
    };

    // src/SessionMonitor.ts
    var SessionMonitor = class {
      constructor(_userManager) {
        this._userManager = _userManager;
        this._logger = new Logger("SessionMonitor");
        this._start = async (user) => {
          const session_state = user.session_state;
          if (!session_state) {
            return;
          }
          const logger2 = this._logger.create("_start");
          if (user.profile) {
            this._sub = user.profile.sub;
            this._sid = user.profile.sid;
            logger2.debug("session_state", session_state, ", sub", this._sub);
          } else {
            this._sub = void 0;
            this._sid = void 0;
            logger2.debug("session_state", session_state, ", anonymous user");
          }
          if (this._checkSessionIFrame) {
            this._checkSessionIFrame.start(session_state);
            return;
          }
          try {
            const url = await this._userManager.metadataService.getCheckSessionIframe();
            if (url) {
              logger2.debug("initializing check session iframe");
              const client_id = this._userManager.settings.client_id;
              const intervalInSeconds = this._userManager.settings.checkSessionIntervalInSeconds;
              const stopOnError = this._userManager.settings.stopCheckSessionOnError;
              const checkSessionIFrame = new CheckSessionIFrame(this._callback, client_id, url, intervalInSeconds, stopOnError);
              await checkSessionIFrame.load();
              this._checkSessionIFrame = checkSessionIFrame;
              checkSessionIFrame.start(session_state);
            } else {
              logger2.warn("no check session iframe found in the metadata");
            }
          } catch (err) {
            logger2.error("Error from getCheckSessionIframe:", err instanceof Error ? err.message : err);
          }
        };
        this._stop = () => {
          const logger2 = this._logger.create("_stop");
          this._sub = void 0;
          this._sid = void 0;
          if (this._checkSessionIFrame) {
            this._checkSessionIFrame.stop();
          }
          if (this._userManager.settings.monitorAnonymousSession) {
            const timerHandle = setInterval(async () => {
              clearInterval(timerHandle);
              try {
                const session = await this._userManager.querySessionStatus();
                if (session) {
                  const tmpUser = {
                    session_state: session.session_state,
                    profile: session.sub && session.sid ? {
                      sub: session.sub,
                      sid: session.sid
                    } : null
                  };
                  void this._start(tmpUser);
                }
              } catch (err) {
                logger2.error("error from querySessionStatus", err instanceof Error ? err.message : err);
              }
            }, 1e3);
          }
        };
        this._callback = async () => {
          const logger2 = this._logger.create("_callback");
          try {
            const session = await this._userManager.querySessionStatus();
            let raiseEvent = true;
            if (session && this._checkSessionIFrame) {
              if (session.sub === this._sub) {
                raiseEvent = false;
                this._checkSessionIFrame.start(session.session_state);
                if (session.sid === this._sid) {
                  logger2.debug("same sub still logged in at OP, restarting check session iframe; session_state", session.session_state);
                } else {
                  logger2.debug("same sub still logged in at OP, session state has changed, restarting check session iframe; session_state", session.session_state);
                  this._userManager.events._raiseUserSessionChanged();
                }
              } else {
                logger2.debug("different subject signed into OP", session.sub);
              }
            } else {
              logger2.debug("subject no longer signed into OP");
            }
            if (raiseEvent) {
              if (this._sub) {
                this._userManager.events._raiseUserSignedOut();
              } else {
                this._userManager.events._raiseUserSignedIn();
              }
            } else {
              logger2.debug("no change in session detected, no event to raise");
            }
          } catch (err) {
            if (this._sub) {
              logger2.debug("Error calling queryCurrentSigninSession; raising signed out event", err);
              this._userManager.events._raiseUserSignedOut();
            }
          }
        };
        if (!_userManager) {
          this._logger.throw(new Error("No user manager passed"));
        }
        this._userManager.events.addUserLoaded(this._start);
        this._userManager.events.addUserUnloaded(this._stop);
        this._init().catch((err) => {
          this._logger.error(err);
        });
      }
      async _init() {
        this._logger.create("_init");
        const user = await this._userManager.getUser();
        if (user) {
          void this._start(user);
        } else if (this._userManager.settings.monitorAnonymousSession) {
          const session = await this._userManager.querySessionStatus();
          if (session) {
            const tmpUser = {
              session_state: session.session_state,
              profile: session.sub && session.sid ? {
                sub: session.sub,
                sid: session.sid
              } : null
            };
            void this._start(tmpUser);
          }
        }
      }
    };

    // src/User.ts
    var User = class {
      constructor(args) {
        var _a;
        this.id_token = args.id_token;
        this.session_state = (_a = args.session_state) != null ? _a : null;
        this.access_token = args.access_token;
        this.refresh_token = args.refresh_token;
        this.token_type = args.token_type;
        this.scope = args.scope;
        this.profile = args.profile;
        this.expires_at = args.expires_at;
        this.state = args.userState;
      }
      /** Computed number of seconds the access token has remaining. */
      get expires_in() {
        if (this.expires_at === void 0) {
          return void 0;
        }
        return this.expires_at - Timer.getEpochTime();
      }
      set expires_in(value) {
        if (value !== void 0) {
          this.expires_at = Math.floor(value) + Timer.getEpochTime();
        }
      }
      /** Computed value indicating if the access token is expired. */
      get expired() {
        const expires_in = this.expires_in;
        if (expires_in === void 0) {
          return void 0;
        }
        return expires_in <= 0;
      }
      /** Array representing the parsed values from the `scope`. */
      get scopes() {
        var _a, _b;
        return (_b = (_a = this.scope) == null ? void 0 : _a.split(" ")) != null ? _b : [];
      }
      toStorageString() {
        new Logger("User").create("toStorageString");
        return JSON.stringify({
          id_token: this.id_token,
          session_state: this.session_state,
          access_token: this.access_token,
          refresh_token: this.refresh_token,
          token_type: this.token_type,
          scope: this.scope,
          profile: this.profile,
          expires_at: this.expires_at
        });
      }
      static fromStorageString(storageString) {
        Logger.createStatic("User", "fromStorageString");
        return new User(JSON.parse(storageString));
      }
    };

    // src/navigators/AbstractChildWindow.ts
    var messageSource = "oidc-client";
    var AbstractChildWindow = class {
      constructor() {
        this._abort = new Event("Window navigation aborted");
        this._disposeHandlers = /* @__PURE__ */ new Set();
        this._window = null;
      }
      async navigate(params) {
        const logger2 = this._logger.create("navigate");
        if (!this._window) {
          throw new Error("Attempted to navigate on a disposed window");
        }
        logger2.debug("setting URL in window");
        this._window.location.replace(params.url);
        const { url, keepOpen } = await new Promise((resolve, reject) => {
          const listener = (e) => {
            var _a;
            const data = e.data;
            const origin = (_a = params.scriptOrigin) != null ? _a : window.location.origin;
            if (e.origin !== origin || (data == null ? void 0 : data.source) !== messageSource) {
              return;
            }
            try {
              const state = UrlUtils.readParams(data.url, params.response_mode).get("state");
              if (!state) {
                logger2.warn("no state found in response url");
              }
              if (e.source !== this._window && state !== params.state) {
                return;
              }
            } catch (err) {
              this._dispose();
              reject(new Error("Invalid response from window"));
            }
            resolve(data);
          };
          window.addEventListener("message", listener, false);
          this._disposeHandlers.add(() => window.removeEventListener("message", listener, false));
          this._disposeHandlers.add(this._abort.addHandler((reason) => {
            this._dispose();
            reject(reason);
          }));
        });
        logger2.debug("got response from window");
        this._dispose();
        if (!keepOpen) {
          this.close();
        }
        return { url };
      }
      _dispose() {
        this._logger.create("_dispose");
        for (const dispose of this._disposeHandlers) {
          dispose();
        }
        this._disposeHandlers.clear();
      }
      static _notifyParent(parent, url, keepOpen = false, targetOrigin = window.location.origin) {
        parent.postMessage({
          source: messageSource,
          url,
          keepOpen
        }, targetOrigin);
      }
    };

    // src/UserManagerSettings.ts
    var DefaultPopupWindowFeatures = {
      location: false,
      toolbar: false,
      height: 640
    };
    var DefaultPopupTarget = "_blank";
    var DefaultAccessTokenExpiringNotificationTimeInSeconds = 60;
    var DefaultCheckSessionIntervalInSeconds = 2;
    var DefaultSilentRequestTimeoutInSeconds = 10;
    var UserManagerSettingsStore = class extends OidcClientSettingsStore {
      constructor(args) {
        const {
          popup_redirect_uri = args.redirect_uri,
          popup_post_logout_redirect_uri = args.post_logout_redirect_uri,
          popupWindowFeatures = DefaultPopupWindowFeatures,
          popupWindowTarget = DefaultPopupTarget,
          redirectMethod = "assign",
          redirectTarget = "self",
          iframeNotifyParentOrigin = args.iframeNotifyParentOrigin,
          iframeScriptOrigin = args.iframeScriptOrigin,
          silent_redirect_uri = args.redirect_uri,
          silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,
          automaticSilentRenew = true,
          validateSubOnSilentRenew = true,
          includeIdTokenInSilentRenew = false,
          monitorSession = false,
          monitorAnonymousSession = false,
          checkSessionIntervalInSeconds = DefaultCheckSessionIntervalInSeconds,
          query_status_response_type = "code",
          stopCheckSessionOnError = true,
          revokeTokenTypes = ["access_token", "refresh_token"],
          revokeTokensOnSignout = false,
          includeIdTokenInSilentSignout = false,
          accessTokenExpiringNotificationTimeInSeconds = DefaultAccessTokenExpiringNotificationTimeInSeconds,
          userStore
        } = args;
        super(args);
        this.popup_redirect_uri = popup_redirect_uri;
        this.popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;
        this.popupWindowFeatures = popupWindowFeatures;
        this.popupWindowTarget = popupWindowTarget;
        this.redirectMethod = redirectMethod;
        this.redirectTarget = redirectTarget;
        this.iframeNotifyParentOrigin = iframeNotifyParentOrigin;
        this.iframeScriptOrigin = iframeScriptOrigin;
        this.silent_redirect_uri = silent_redirect_uri;
        this.silentRequestTimeoutInSeconds = silentRequestTimeoutInSeconds;
        this.automaticSilentRenew = automaticSilentRenew;
        this.validateSubOnSilentRenew = validateSubOnSilentRenew;
        this.includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;
        this.monitorSession = monitorSession;
        this.monitorAnonymousSession = monitorAnonymousSession;
        this.checkSessionIntervalInSeconds = checkSessionIntervalInSeconds;
        this.stopCheckSessionOnError = stopCheckSessionOnError;
        this.query_status_response_type = query_status_response_type;
        this.revokeTokenTypes = revokeTokenTypes;
        this.revokeTokensOnSignout = revokeTokensOnSignout;
        this.includeIdTokenInSilentSignout = includeIdTokenInSilentSignout;
        this.accessTokenExpiringNotificationTimeInSeconds = accessTokenExpiringNotificationTimeInSeconds;
        if (userStore) {
          this.userStore = userStore;
        } else {
          const store = typeof window !== "undefined" ? window.sessionStorage : new InMemoryWebStorage();
          this.userStore = new WebStorageStateStore({ store });
        }
      }
    };

    // src/navigators/IFrameWindow.ts
    var IFrameWindow = class extends AbstractChildWindow {
      constructor({
        silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds
      }) {
        super();
        this._logger = new Logger("IFrameWindow");
        this._timeoutInSeconds = silentRequestTimeoutInSeconds;
        this._frame = IFrameWindow.createHiddenIframe();
        this._window = this._frame.contentWindow;
      }
      static createHiddenIframe() {
        const iframe = window.document.createElement("iframe");
        iframe.style.visibility = "hidden";
        iframe.style.position = "fixed";
        iframe.style.left = "-1000px";
        iframe.style.top = "0";
        iframe.width = "0";
        iframe.height = "0";
        iframe.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
        window.document.body.appendChild(iframe);
        return iframe;
      }
      async navigate(params) {
        this._logger.debug("navigate: Using timeout of:", this._timeoutInSeconds);
        const timer = setTimeout(() => this._abort.raise(new ErrorTimeout("IFrame timed out without a response")), this._timeoutInSeconds * 1e3);
        this._disposeHandlers.add(() => clearTimeout(timer));
        return await super.navigate(params);
      }
      close() {
        var _a;
        if (this._frame) {
          if (this._frame.parentNode) {
            this._frame.addEventListener("load", (ev) => {
              var _a2;
              const frame = ev.target;
              (_a2 = frame.parentNode) == null ? void 0 : _a2.removeChild(frame);
              this._abort.raise(new Error("IFrame removed from DOM"));
            }, true);
            (_a = this._frame.contentWindow) == null ? void 0 : _a.location.replace("about:blank");
          }
          this._frame = null;
        }
        this._window = null;
      }
      static notifyParent(url, targetOrigin) {
        return super._notifyParent(window.parent, url, false, targetOrigin);
      }
    };

    // src/navigators/IFrameNavigator.ts
    var IFrameNavigator = class {
      constructor(_settings) {
        this._settings = _settings;
        this._logger = new Logger("IFrameNavigator");
      }
      async prepare({
        silentRequestTimeoutInSeconds = this._settings.silentRequestTimeoutInSeconds
      }) {
        return new IFrameWindow({ silentRequestTimeoutInSeconds });
      }
      async callback(url) {
        this._logger.create("callback");
        IFrameWindow.notifyParent(url, this._settings.iframeNotifyParentOrigin);
      }
    };

    // src/navigators/PopupWindow.ts
    var checkForPopupClosedInterval = 500;
    var PopupWindow = class extends AbstractChildWindow {
      constructor({
        popupWindowTarget = DefaultPopupTarget,
        popupWindowFeatures = {}
      }) {
        super();
        this._logger = new Logger("PopupWindow");
        const centeredPopup = PopupUtils.center({ ...DefaultPopupWindowFeatures, ...popupWindowFeatures });
        this._window = window.open(void 0, popupWindowTarget, PopupUtils.serialize(centeredPopup));
      }
      async navigate(params) {
        var _a;
        (_a = this._window) == null ? void 0 : _a.focus();
        const popupClosedInterval = setInterval(() => {
          if (!this._window || this._window.closed) {
            this._abort.raise(new Error("Popup closed by user"));
          }
        }, checkForPopupClosedInterval);
        this._disposeHandlers.add(() => clearInterval(popupClosedInterval));
        return await super.navigate(params);
      }
      close() {
        if (this._window) {
          if (!this._window.closed) {
            this._window.close();
            this._abort.raise(new Error("Popup closed"));
          }
        }
        this._window = null;
      }
      static notifyOpener(url, keepOpen) {
        if (!window.opener) {
          throw new Error("No window.opener. Can't complete notification.");
        }
        return super._notifyParent(window.opener, url, keepOpen);
      }
    };

    // src/navigators/PopupNavigator.ts
    var PopupNavigator = class {
      constructor(_settings) {
        this._settings = _settings;
        this._logger = new Logger("PopupNavigator");
      }
      async prepare({
        popupWindowFeatures = this._settings.popupWindowFeatures,
        popupWindowTarget = this._settings.popupWindowTarget
      }) {
        return new PopupWindow({ popupWindowFeatures, popupWindowTarget });
      }
      async callback(url, keepOpen = false) {
        this._logger.create("callback");
        PopupWindow.notifyOpener(url, keepOpen);
      }
    };

    // src/navigators/RedirectNavigator.ts
    var RedirectNavigator = class {
      constructor(_settings) {
        this._settings = _settings;
        this._logger = new Logger("RedirectNavigator");
      }
      async prepare({
        redirectMethod = this._settings.redirectMethod,
        redirectTarget = this._settings.redirectTarget
      }) {
        var _a;
        this._logger.create("prepare");
        let targetWindow = window.self;
        if (redirectTarget === "top") {
          targetWindow = (_a = window.top) != null ? _a : window.self;
        }
        const redirect = targetWindow.location[redirectMethod].bind(targetWindow.location);
        let abort;
        return {
          navigate: async (params) => {
            this._logger.create("navigate");
            const promise = new Promise((resolve, reject) => {
              abort = reject;
            });
            redirect(params.url);
            return await promise;
          },
          close: () => {
            this._logger.create("close");
            abort == null ? void 0 : abort(new Error("Redirect aborted"));
            targetWindow.stop();
          }
        };
      }
    };

    // src/UserManagerEvents.ts
    var UserManagerEvents = class extends AccessTokenEvents {
      constructor(settings) {
        super({ expiringNotificationTimeInSeconds: settings.accessTokenExpiringNotificationTimeInSeconds });
        this._logger = new Logger("UserManagerEvents");
        this._userLoaded = new Event("User loaded");
        this._userUnloaded = new Event("User unloaded");
        this._silentRenewError = new Event("Silent renew error");
        this._userSignedIn = new Event("User signed in");
        this._userSignedOut = new Event("User signed out");
        this._userSessionChanged = new Event("User session changed");
      }
      load(user, raiseEvent = true) {
        super.load(user);
        if (raiseEvent) {
          this._userLoaded.raise(user);
        }
      }
      unload() {
        super.unload();
        this._userUnloaded.raise();
      }
      /**
       * Add callback: Raised when a user session has been established (or re-established).
       */
      addUserLoaded(cb) {
        return this._userLoaded.addHandler(cb);
      }
      /**
       * Remove callback: Raised when a user session has been established (or re-established).
       */
      removeUserLoaded(cb) {
        return this._userLoaded.removeHandler(cb);
      }
      /**
       * Add callback: Raised when a user session has been terminated.
       */
      addUserUnloaded(cb) {
        return this._userUnloaded.addHandler(cb);
      }
      /**
       * Remove callback: Raised when a user session has been terminated.
       */
      removeUserUnloaded(cb) {
        return this._userUnloaded.removeHandler(cb);
      }
      /**
       * Add callback: Raised when the automatic silent renew has failed.
       */
      addSilentRenewError(cb) {
        return this._silentRenewError.addHandler(cb);
      }
      /**
       * Remove callback: Raised when the automatic silent renew has failed.
       */
      removeSilentRenewError(cb) {
        return this._silentRenewError.removeHandler(cb);
      }
      /**
       * @internal
       */
      _raiseSilentRenewError(e) {
        this._silentRenewError.raise(e);
      }
      /**
       * Add callback: Raised when the user is signed in (when `monitorSession` is set).
       * @see {@link UserManagerSettings.monitorSession}
       */
      addUserSignedIn(cb) {
        return this._userSignedIn.addHandler(cb);
      }
      /**
       * Remove callback: Raised when the user is signed in (when `monitorSession` is set).
       */
      removeUserSignedIn(cb) {
        this._userSignedIn.removeHandler(cb);
      }
      /**
       * @internal
       */
      _raiseUserSignedIn() {
        this._userSignedIn.raise();
      }
      /**
       * Add callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).
       * @see {@link UserManagerSettings.monitorSession}
       */
      addUserSignedOut(cb) {
        return this._userSignedOut.addHandler(cb);
      }
      /**
       * Remove callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).
       */
      removeUserSignedOut(cb) {
        this._userSignedOut.removeHandler(cb);
      }
      /**
       * @internal
       */
      _raiseUserSignedOut() {
        this._userSignedOut.raise();
      }
      /**
       * Add callback: Raised when the user session changed (when `monitorSession` is set).
       * @see {@link UserManagerSettings.monitorSession}
       */
      addUserSessionChanged(cb) {
        return this._userSessionChanged.addHandler(cb);
      }
      /**
       * Remove callback: Raised when the user session changed (when `monitorSession` is set).
       */
      removeUserSessionChanged(cb) {
        this._userSessionChanged.removeHandler(cb);
      }
      /**
       * @internal
       */
      _raiseUserSessionChanged() {
        this._userSessionChanged.raise();
      }
    };

    // src/SilentRenewService.ts
    var SilentRenewService = class {
      constructor(_userManager) {
        this._userManager = _userManager;
        this._logger = new Logger("SilentRenewService");
        this._isStarted = false;
        this._retryTimer = new Timer("Retry Silent Renew");
        this._tokenExpiring = async () => {
          const logger2 = this._logger.create("_tokenExpiring");
          try {
            await this._userManager.signinSilent();
            logger2.debug("silent token renewal successful");
          } catch (err) {
            if (err instanceof ErrorTimeout) {
              logger2.warn("ErrorTimeout from signinSilent:", err, "retry in 5s");
              this._retryTimer.init(5);
              return;
            }
            logger2.error("Error from signinSilent:", err);
            this._userManager.events._raiseSilentRenewError(err);
          }
        };
      }
      async start() {
        const logger2 = this._logger.create("start");
        if (!this._isStarted) {
          this._isStarted = true;
          this._userManager.events.addAccessTokenExpiring(this._tokenExpiring);
          this._retryTimer.addHandler(this._tokenExpiring);
          try {
            await this._userManager.getUser();
          } catch (err) {
            logger2.error("getUser error", err);
          }
        }
      }
      stop() {
        if (this._isStarted) {
          this._retryTimer.cancel();
          this._retryTimer.removeHandler(this._tokenExpiring);
          this._userManager.events.removeAccessTokenExpiring(this._tokenExpiring);
          this._isStarted = false;
        }
      }
    };

    // src/RefreshState.ts
    var RefreshState = class {
      constructor(args) {
        this.refresh_token = args.refresh_token;
        this.id_token = args.id_token;
        this.session_state = args.session_state;
        this.scope = args.scope;
        this.profile = args.profile;
        this.data = args.state;
      }
    };

    // src/UserManager.ts
    var UserManager = class {
      constructor(settings) {
        this._logger = new Logger("UserManager");
        this.settings = new UserManagerSettingsStore(settings);
        this._client = new OidcClient(settings);
        this._redirectNavigator = new RedirectNavigator(this.settings);
        this._popupNavigator = new PopupNavigator(this.settings);
        this._iframeNavigator = new IFrameNavigator(this.settings);
        this._events = new UserManagerEvents(this.settings);
        this._silentRenewService = new SilentRenewService(this);
        if (this.settings.automaticSilentRenew) {
          this.startSilentRenew();
        }
        this._sessionMonitor = null;
        if (this.settings.monitorSession) {
          this._sessionMonitor = new SessionMonitor(this);
        }
      }
      /** Returns an object used to register for events raised by the `UserManager`. */
      get events() {
        return this._events;
      }
      /** Returns an object used to access the metadata configuration of the OIDC provider. */
      get metadataService() {
        return this._client.metadataService;
      }
      /**
       * Returns promise to load the `User` object for the currently authenticated user.
       */
      async getUser() {
        const logger2 = this._logger.create("getUser");
        const user = await this._loadUser();
        if (user) {
          logger2.info("user loaded");
          this._events.load(user, false);
          return user;
        }
        logger2.info("user not found in storage");
        return null;
      }
      /**
       * Returns promise to remove from any storage the currently authenticated user.
       */
      async removeUser() {
        const logger2 = this._logger.create("removeUser");
        await this.storeUser(null);
        logger2.info("user removed from storage");
        this._events.unload();
      }
      /**
       * Returns promise to trigger a redirect of the current window to the authorization endpoint.
       */
      async signinRedirect(args = {}) {
        this._logger.create("signinRedirect");
        const {
          redirectMethod,
          ...requestArgs
        } = args;
        const handle = await this._redirectNavigator.prepare({ redirectMethod });
        await this._signinStart({
          request_type: "si:r",
          ...requestArgs
        }, handle);
      }
      /**
       * Returns promise to process response from the authorization endpoint. The result of the promise is the authenticated `User`.
       */
      async signinRedirectCallback(url = window.location.href) {
        const logger2 = this._logger.create("signinRedirectCallback");
        const user = await this._signinEnd(url);
        if (user.profile && user.profile.sub) {
          logger2.info("success, signed in subject", user.profile.sub);
        } else {
          logger2.info("no subject");
        }
        return user;
      }
      /**
       * Returns promise to process the signin with user/password. The result of the promise is the authenticated `User`.
       *
       * Throws an ErrorResponse in case of wrong authentication.
       */
      async signinResourceOwnerCredentials({
        username,
        password,
        skipUserInfo = false
      }) {
        const logger2 = this._logger.create("signinResourceOwnerCredential");
        const signinResponse = await this._client.processResourceOwnerPasswordCredentials({ username, password, skipUserInfo, extraTokenParams: this.settings.extraTokenParams });
        logger2.debug("got signin response");
        const user = await this._buildUser(signinResponse);
        if (user.profile && user.profile.sub) {
          logger2.info("success, signed in subject", user.profile.sub);
        } else {
          logger2.info("no subject");
        }
        return user;
      }
      /**
       * Returns promise to trigger a request (via a popup window) to the authorization endpoint. The result of the promise is the authenticated `User`.
       */
      async signinPopup(args = {}) {
        const logger2 = this._logger.create("signinPopup");
        const {
          popupWindowFeatures,
          popupWindowTarget,
          ...requestArgs
        } = args;
        const url = this.settings.popup_redirect_uri;
        if (!url) {
          logger2.throw(new Error("No popup_redirect_uri configured"));
        }
        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget });
        const user = await this._signin({
          request_type: "si:p",
          redirect_uri: url,
          display: "popup",
          ...requestArgs
        }, handle);
        if (user) {
          if (user.profile && user.profile.sub) {
            logger2.info("success, signed in subject", user.profile.sub);
          } else {
            logger2.info("no subject");
          }
        }
        return user;
      }
      /**
       * Returns promise to notify the opening window of response from the authorization endpoint.
       */
      async signinPopupCallback(url = window.location.href, keepOpen = false) {
        const logger2 = this._logger.create("signinPopupCallback");
        await this._popupNavigator.callback(url, keepOpen);
        logger2.info("success");
      }
      /**
       * Returns promise to trigger a silent request (via an iframe) to the authorization endpoint.
       * The result of the promise is the authenticated `User`.
       */
      async signinSilent(args = {}) {
        var _a;
        const logger2 = this._logger.create("signinSilent");
        const {
          silentRequestTimeoutInSeconds,
          ...requestArgs
        } = args;
        let user = await this._loadUser();
        if (user == null ? void 0 : user.refresh_token) {
          logger2.debug("using refresh token");
          const state = new RefreshState(user);
          return await this._useRefreshToken(state);
        }
        const url = this.settings.silent_redirect_uri;
        if (!url) {
          logger2.throw(new Error("No silent_redirect_uri configured"));
        }
        let verifySub;
        if (user && this.settings.validateSubOnSilentRenew) {
          logger2.debug("subject prior to silent renew:", user.profile.sub);
          verifySub = user.profile.sub;
        }
        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });
        user = await this._signin({
          request_type: "si:s",
          redirect_uri: url,
          prompt: "none",
          id_token_hint: this.settings.includeIdTokenInSilentRenew ? user == null ? void 0 : user.id_token : void 0,
          ...requestArgs
        }, handle, verifySub);
        if (user) {
          if ((_a = user.profile) == null ? void 0 : _a.sub) {
            logger2.info("success, signed in subject", user.profile.sub);
          } else {
            logger2.info("no subject");
          }
        }
        return user;
      }
      async _useRefreshToken(state) {
        const response = await this._client.useRefreshToken({
          state,
          timeoutInSeconds: this.settings.silentRequestTimeoutInSeconds
        });
        const user = new User({ ...state, ...response });
        await this.storeUser(user);
        this._events.load(user);
        return user;
      }
      /**
       * Returns promise to notify the parent window of response from the authorization endpoint.
       */
      async signinSilentCallback(url = window.location.href) {
        const logger2 = this._logger.create("signinSilentCallback");
        await this._iframeNavigator.callback(url);
        logger2.info("success");
      }
      async signinCallback(url = window.location.href) {
        const { state } = await this._client.readSigninResponseState(url);
        switch (state.request_type) {
          case "si:r":
            return await this.signinRedirectCallback(url);
          case "si:p":
            return await this.signinPopupCallback(url);
          case "si:s":
            return await this.signinSilentCallback(url);
          default:
            throw new Error("invalid response_type in state");
        }
      }
      async signoutCallback(url = window.location.href, keepOpen = false) {
        const { state } = await this._client.readSignoutResponseState(url);
        if (!state) {
          return;
        }
        switch (state.request_type) {
          case "so:r":
            await this.signoutRedirectCallback(url);
            break;
          case "so:p":
            await this.signoutPopupCallback(url, keepOpen);
            break;
          case "so:s":
            await this.signoutSilentCallback(url);
            break;
          default:
            throw new Error("invalid response_type in state");
        }
      }
      /**
       * Returns promise to query OP for user's current signin status. Returns object with session_state and subject identifier.
       */
      async querySessionStatus(args = {}) {
        const logger2 = this._logger.create("querySessionStatus");
        const {
          silentRequestTimeoutInSeconds,
          ...requestArgs
        } = args;
        const url = this.settings.silent_redirect_uri;
        if (!url) {
          logger2.throw(new Error("No silent_redirect_uri configured"));
        }
        const user = await this._loadUser();
        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });
        const navResponse = await this._signinStart({
          request_type: "si:s",
          // this acts like a signin silent
          redirect_uri: url,
          prompt: "none",
          id_token_hint: this.settings.includeIdTokenInSilentRenew ? user == null ? void 0 : user.id_token : void 0,
          response_type: this.settings.query_status_response_type,
          scope: "openid",
          skipUserInfo: true,
          ...requestArgs
        }, handle);
        try {
          const signinResponse = await this._client.processSigninResponse(navResponse.url);
          logger2.debug("got signin response");
          if (signinResponse.session_state && signinResponse.profile.sub) {
            logger2.info("success for subject", signinResponse.profile.sub);
            return {
              session_state: signinResponse.session_state,
              sub: signinResponse.profile.sub,
              sid: signinResponse.profile.sid
            };
          }
          logger2.info("success, user not authenticated");
          return null;
        } catch (err) {
          if (this.settings.monitorAnonymousSession && err instanceof ErrorResponse) {
            switch (err.error) {
              case "login_required":
              case "consent_required":
              case "interaction_required":
              case "account_selection_required":
                logger2.info("success for anonymous user");
                return {
                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                  session_state: err.session_state
                };
            }
          }
          throw err;
        }
      }
      async _signin(args, handle, verifySub) {
        const navResponse = await this._signinStart(args, handle);
        return await this._signinEnd(navResponse.url, verifySub);
      }
      async _signinStart(args, handle) {
        const logger2 = this._logger.create("_signinStart");
        try {
          const signinRequest = await this._client.createSigninRequest(args);
          logger2.debug("got signin request");
          return await handle.navigate({
            url: signinRequest.url,
            state: signinRequest.state.id,
            response_mode: signinRequest.state.response_mode,
            scriptOrigin: this.settings.iframeScriptOrigin
          });
        } catch (err) {
          logger2.debug("error after preparing navigator, closing navigator window");
          handle.close();
          throw err;
        }
      }
      async _signinEnd(url, verifySub) {
        const logger2 = this._logger.create("_signinEnd");
        const signinResponse = await this._client.processSigninResponse(url);
        logger2.debug("got signin response");
        const user = await this._buildUser(signinResponse, verifySub);
        return user;
      }
      async _buildUser(signinResponse, verifySub) {
        const logger2 = this._logger.create("_buildUser");
        const user = new User(signinResponse);
        if (verifySub) {
          if (verifySub !== user.profile.sub) {
            logger2.debug("current user does not match user returned from signin. sub from signin:", user.profile.sub);
            throw new ErrorResponse({ ...signinResponse, error: "login_required" });
          }
          logger2.debug("current user matches user returned from signin");
        }
        await this.storeUser(user);
        logger2.debug("user stored");
        this._events.load(user);
        return user;
      }
      /**
       * Returns promise to trigger a redirect of the current window to the end session endpoint.
       */
      async signoutRedirect(args = {}) {
        const logger2 = this._logger.create("signoutRedirect");
        const {
          redirectMethod,
          ...requestArgs
        } = args;
        const handle = await this._redirectNavigator.prepare({ redirectMethod });
        await this._signoutStart({
          request_type: "so:r",
          post_logout_redirect_uri: this.settings.post_logout_redirect_uri,
          ...requestArgs
        }, handle);
        logger2.info("success");
      }
      /**
       * Returns promise to process response from the end session endpoint.
       */
      async signoutRedirectCallback(url = window.location.href) {
        const logger2 = this._logger.create("signoutRedirectCallback");
        const response = await this._signoutEnd(url);
        logger2.info("success");
        return response;
      }
      /**
       * Returns promise to trigger a redirect of a popup window window to the end session endpoint.
       */
      async signoutPopup(args = {}) {
        const logger2 = this._logger.create("signoutPopup");
        const {
          popupWindowFeatures,
          popupWindowTarget,
          ...requestArgs
        } = args;
        const url = this.settings.popup_post_logout_redirect_uri;
        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget });
        await this._signout({
          request_type: "so:p",
          post_logout_redirect_uri: url,
          // we're putting a dummy entry in here because we
          // need a unique id from the state for notification
          // to the parent window, which is necessary if we
          // plan to return back to the client after signout
          // and so we can close the popup after signout
          state: url == null ? void 0 : {},
          ...requestArgs
        }, handle);
        logger2.info("success");
      }
      /**
       * Returns promise to process response from the end session endpoint from a popup window.
       */
      async signoutPopupCallback(url = window.location.href, keepOpen = false) {
        const logger2 = this._logger.create("signoutPopupCallback");
        await this._popupNavigator.callback(url, keepOpen);
        logger2.info("success");
      }
      async _signout(args, handle) {
        const navResponse = await this._signoutStart(args, handle);
        return await this._signoutEnd(navResponse.url);
      }
      async _signoutStart(args = {}, handle) {
        var _a;
        const logger2 = this._logger.create("_signoutStart");
        try {
          const user = await this._loadUser();
          logger2.debug("loaded current user from storage");
          if (this.settings.revokeTokensOnSignout) {
            await this._revokeInternal(user);
          }
          const id_token = args.id_token_hint || user && user.id_token;
          if (id_token) {
            logger2.debug("setting id_token_hint in signout request");
            args.id_token_hint = id_token;
          }
          await this.removeUser();
          logger2.debug("user removed, creating signout request");
          const signoutRequest = await this._client.createSignoutRequest(args);
          logger2.debug("got signout request");
          return await handle.navigate({
            url: signoutRequest.url,
            state: (_a = signoutRequest.state) == null ? void 0 : _a.id
          });
        } catch (err) {
          logger2.debug("error after preparing navigator, closing navigator window");
          handle.close();
          throw err;
        }
      }
      async _signoutEnd(url) {
        const logger2 = this._logger.create("_signoutEnd");
        const signoutResponse = await this._client.processSignoutResponse(url);
        logger2.debug("got signout response");
        return signoutResponse;
      }
      /**
       * Returns promise to trigger a silent request (via an iframe) to the end session endpoint.
       */
      async signoutSilent(args = {}) {
        var _a;
        const logger2 = this._logger.create("signoutSilent");
        const {
          silentRequestTimeoutInSeconds,
          ...requestArgs
        } = args;
        const id_token_hint = this.settings.includeIdTokenInSilentSignout ? (_a = await this._loadUser()) == null ? void 0 : _a.id_token : void 0;
        const url = this.settings.popup_post_logout_redirect_uri;
        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });
        await this._signout({
          request_type: "so:s",
          post_logout_redirect_uri: url,
          id_token_hint,
          ...requestArgs
        }, handle);
        logger2.info("success");
      }
      /**
       * Returns promise to notify the parent window of response from the end session endpoint.
       */
      async signoutSilentCallback(url = window.location.href) {
        const logger2 = this._logger.create("signoutSilentCallback");
        await this._iframeNavigator.callback(url);
        logger2.info("success");
      }
      async revokeTokens(types) {
        const user = await this._loadUser();
        await this._revokeInternal(user, types);
      }
      async _revokeInternal(user, types = this.settings.revokeTokenTypes) {
        const logger2 = this._logger.create("_revokeInternal");
        if (!user)
          return;
        const typesPresent = types.filter((type) => typeof user[type] === "string");
        if (!typesPresent.length) {
          logger2.debug("no need to revoke due to no token(s)");
          return;
        }
        for (const type of typesPresent) {
          await this._client.revokeToken(
            user[type],
            // eslint-disable-line @typescript-eslint/no-non-null-assertion
            type
          );
          logger2.info(`${type} revoked successfully`);
          if (type !== "access_token") {
            user[type] = null;
          }
        }
        await this.storeUser(user);
        logger2.debug("user stored");
        this._events.load(user);
      }
      /**
       * Enables silent renew for the `UserManager`.
       */
      startSilentRenew() {
        this._logger.create("startSilentRenew");
        void this._silentRenewService.start();
      }
      /**
       * Disables silent renew for the `UserManager`.
       */
      stopSilentRenew() {
        this._silentRenewService.stop();
      }
      get _userStoreKey() {
        return `user:${this.settings.authority}:${this.settings.client_id}`;
      }
      async _loadUser() {
        const logger2 = this._logger.create("_loadUser");
        const storageString = await this.settings.userStore.get(this._userStoreKey);
        if (storageString) {
          logger2.debug("user storageString loaded");
          return User.fromStorageString(storageString);
        }
        logger2.debug("no user storageString");
        return null;
      }
      async storeUser(user) {
        const logger2 = this._logger.create("storeUser");
        if (user) {
          logger2.debug("storing user");
          const storageString = user.toStorageString();
          await this.settings.userStore.set(this._userStoreKey, storageString);
        } else {
          this._logger.debug("removing user");
          await this.settings.userStore.remove(this._userStoreKey);
        }
      }
      /**
       * Removes stale state entries in storage for incomplete authorize requests.
       */
      async clearStaleState() {
        await this._client.clearStaleState();
      }
    };

    const POLL_INTERVAL = 1 * 1000; // every 1 second
    const MAX_RETRIES = 3;
    const wait = (ms) => new Promise((resolve) => {
        setTimeout(() => resolve(), ms);
    });
    const retryWithDelay = async (fn, options) => {
        const { retries = MAX_RETRIES, interval = POLL_INTERVAL, finalErr = Error('Retry failed'), } = options || {};
        try {
            return await fn();
        }
        catch (err) {
            if (retries <= 0) {
                return Promise.reject(finalErr);
            }
            await wait(interval);
            return retryWithDelay(fn, { retries: retries - 1, finalErr });
        }
    };

    const getAuthConfiguration = ({ oidcConfiguration, authenticationDomain, }) => {
        const baseConfiguration = {
            authority: authenticationDomain,
            redirect_uri: oidcConfiguration.redirectUri,
            popup_redirect_uri: oidcConfiguration.redirectUri,
            client_id: oidcConfiguration.clientId,
            metadata: {
                authorization_endpoint: `${authenticationDomain}/authorize`,
                token_endpoint: `${authenticationDomain}/oauth/token`,
                userinfo_endpoint: `${authenticationDomain}/userinfo`,
                end_session_endpoint: `${authenticationDomain}/v2/logout`
                    + `?returnTo=${encodeURIComponent(oidcConfiguration.logoutRedirectUri)}`
                    + `&client_id=${oidcConfiguration.clientId}`,
            },
            mergeClaims: true,
            loadUserInfo: true,
            scope: oidcConfiguration.scope,
        };
        if (oidcConfiguration.audience) {
            baseConfiguration.extraQueryParams = {
                audience: oidcConfiguration.audience,
            };
        }
        return baseConfiguration;
    };
    class AuthManager {
        userManager;
        config;
        constructor(config) {
            this.config = config;
            this.userManager = new UserManager(getAuthConfiguration(config));
        }
        static mapOidcUserToDomainModel = (oidcUser) => {
            const passport = oidcUser.profile?.passport;
            return {
                expired: oidcUser.expired,
                idToken: oidcUser.id_token,
                accessToken: oidcUser.access_token,
                refreshToken: oidcUser.refresh_token,
                profile: {
                    sub: oidcUser.profile.sub,
                    email: oidcUser.profile.email,
                    nickname: oidcUser.profile.nickname,
                },
                etherKey: passport?.ether_key || '',
            };
        };
        async login() {
            return withPassportError(async () => {
                const popupWindowFeatures = { width: 410, height: 450 };
                const oidcUser = await this.userManager.signinPopup({
                    popupWindowFeatures,
                });
                return AuthManager.mapOidcUserToDomainModel(oidcUser);
            }, PassportErrorType.AUTHENTICATION_ERROR);
        }
        async loginCallback() {
            return withPassportError(async () => this.userManager.signinPopupCallback(), PassportErrorType.AUTHENTICATION_ERROR);
        }
        async logout() {
            return withPassportError(async () => this.userManager.signoutRedirect(), PassportErrorType.LOGOUT_ERROR);
        }
        async loginSilent() {
            return withPassportError(async () => {
                const existedUser = await this.getUser();
                if (!existedUser) {
                    return null;
                }
                const oidcUser = await this.userManager.signinSilent();
                if (!oidcUser) {
                    return null;
                }
                return AuthManager.mapOidcUserToDomainModel(oidcUser);
            }, PassportErrorType.SILENT_LOGIN_ERROR);
        }
        async getUser() {
            return withPassportError(async () => {
                const oidcUser = await this.userManager.getUser();
                if (!oidcUser) {
                    return null;
                }
                return AuthManager.mapOidcUserToDomainModel(oidcUser);
            }, PassportErrorType.NOT_LOGGED_IN_ERROR);
        }
        async requestRefreshTokenAfterRegistration() {
            return withPassportError(async () => {
                const updatedUser = await retryWithDelay(async () => {
                    const user = await this.userManager.signinSilent();
                    const passportMetadata = user?.profile?.passport;
                    const metadataExists = !!passportMetadata?.ether_key
                        && !!passportMetadata?.stark_key
                        && !!passportMetadata?.user_admin_key;
                    if (metadataExists) {
                        return user;
                    }
                    return Promise.reject(new Error('user wallet addresses not exist'));
                });
                if (!updatedUser) {
                    return null;
                }
                return AuthManager.mapOidcUserToDomainModel(updatedUser);
            }, PassportErrorType.REFRESH_TOKEN_ERROR);
        }
    }

    var r=(n=>(n.MissingApiKey="MISSING_API_KEY",n.ModalNotReady="MODAL_NOT_READY",n.MalformedResponse="MALFORMED_RESPONSE",n.InvalidArgument="INVALID_ARGUMENT",n.ExtensionNotInitialized="EXTENSION_NOT_INITIALIZED",n.IncompatibleExtensions="INCOMPATIBLE_EXTENSIONS",n))(r||{}),a=(s=>(s.SyncWeb3Method="SYNC_WEB3_METHOD",s.DuplicateIframe="DUPLICATE_IFRAME",s.ReactNativeEndpointConfiguration="REACT_NATIVE_ENDPOINT_CONFIGURATION",s.DeprecationNotice="DEPRECATION_NOTICE",s))(a||{}),m$1=(t=>(t[t.ParseError=-32700]="ParseError",t[t.InvalidRequest=-32600]="InvalidRequest",t[t.MethodNotFound=-32601]="MethodNotFound",t[t.InvalidParams=-32602]="InvalidParams",t[t.InternalError=-32603]="InternalError",t[t.MagicLinkFailedVerification=-1e4]="MagicLinkFailedVerification",t[t.MagicLinkExpired=-10001]="MagicLinkExpired",t[t.MagicLinkRateLimited=-10002]="MagicLinkRateLimited",t[t.MagicLinkInvalidRedirectURL=-10006]="MagicLinkInvalidRedirectURL",t[t.UserAlreadyLoggedIn=-10003]="UserAlreadyLoggedIn",t[t.UpdateEmailFailed=-10004]="UpdateEmailFailed",t[t.UserRequestEditEmail=-10005]="UserRequestEditEmail",t[t.InactiveRecipient=-10010]="InactiveRecipient",t[t.AccessDeniedToUser=-10011]="AccessDeniedToUser",t))(m$1||{});var p=(e=>(e.LoginWithSms="magic_auth_login_with_sms",e.LoginWithEmailOTP="magic_auth_login_with_email_otp",e.LoginWithMagicLink="magic_auth_login_with_magic_link",e.LoginWithCredential="magic_auth_login_with_credential",e.GetIdToken="magic_auth_get_id_token",e.GenerateIdToken="magic_auth_generate_id_token",e.GetMetadata="magic_auth_get_metadata",e.IsLoggedIn="magic_auth_is_logged_in",e.Logout="magic_auth_logout",e.UpdateEmail="magic_auth_update_email",e.UserSettings="magic_auth_settings",e.UserSettingsTestMode="magic_auth_settings_testing_mode",e.LoginWithSmsTestMode="magic_auth_login_with_sms_testing_mode",e.LoginWithEmailOTPTestMode="magic_auth_login_with_email_otp_testing_mode",e.LoginWithMagicLinkTestMode="magic_login_with_magic_link_testing_mode",e.LoginWithCredentialTestMode="magic_auth_login_with_credential_testing_mode",e.GetIdTokenTestMode="magic_auth_get_id_token_testing_mode",e.GenerateIdTokenTestMode="magic_auth_generate_id_token_testing_mode",e.GetMetadataTestMode="magic_auth_get_metadata_testing_mode",e.IsLoggedInTestMode="magic_auth_is_logged_in_testing_mode",e.LogoutTestMode="magic_auth_logout_testing_mode",e.UpdateEmailTestMode="magic_auth_update_email_testing_mode",e.IntermediaryEvent="magic_intermediary_event",e.RequestAccounts="eth_requestAccounts",e.GetInfo="mc_get_wallet_info",e.ShowUI="mc_wallet",e.NFTPurchase="magic_nft_purchase",e.RequestUserInfoWithUI="mc_request_user_info",e.Disconnect="mc_disconnect",e.UpdatePhoneNumber="magic_auth_update_phone_number",e.UpdatePhoneNumberTestMode="magic_auth_update_phone_number_testing_mode",e.RecoverAccount="magic_auth_recover_account",e.RecoverAccountTestMode="magic_auth_recover_account_testing_mode",e))(p||{});var u=(i=>(i.MAGIC_HANDLE_RESPONSE="MAGIC_HANDLE_RESPONSE",i.MAGIC_OVERLAY_READY="MAGIC_OVERLAY_READY",i.MAGIC_SHOW_OVERLAY="MAGIC_SHOW_OVERLAY",i.MAGIC_HIDE_OVERLAY="MAGIC_HIDE_OVERLAY",i.MAGIC_HANDLE_EVENT="MAGIC_HANDLE_EVENT",i))(u||{}),o$1=(_=>(_.MAGIC_HANDLE_REQUEST="MAGIC_HANDLE_REQUEST",_))(o$1||{});var c=(_=>(_.Harmony="HARMONY",_))(c||{});

    var vt=Object.create;var Y=Object.defineProperty,It=Object.defineProperties,Pt=Object.getOwnPropertyDescriptor,xt=Object.getOwnPropertyDescriptors,bt$1=Object.getOwnPropertyNames,Oe=Object.getOwnPropertySymbols,$t=Object.getPrototypeOf,_e=Object.prototype.hasOwnProperty,Nt=Object.prototype.propertyIsEnumerable;var Ce=(n,e,t)=>e in n?Y(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,Z=(n,e)=>{for(var t in e||(e={}))_e.call(e,t)&&Ce(n,t,e[t]);if(Oe)for(var t of Oe(e))Nt.call(e,t)&&Ce(n,t,e[t]);return n},De=(n,e)=>It(n,xt(e));var Mt=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),wt=(n,e)=>{for(var t in e)Y(n,t,{get:e[t],enumerable:!0});},At=(n,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of bt$1(e))!_e.call(n,o)&&o!==t&&Y(n,o,{get:()=>e[o],enumerable:!(r=Pt(e,o))||r.enumerable});return n};var Lt=(n,e,t)=>(t=n!=null?vt($t(n)):{},At(e||!n||!n.__esModule?Y(t,"default",{value:n,enumerable:!0}):t,n));var x=(n,e,t)=>new Promise((r,o)=>{var s=c=>{try{i(t.next(c));}catch(p){o(p);}},a=c=>{try{i(t.throw(c));}catch(p){o(p);}},i=c=>c.done?r(c.value):Promise.resolve(c.value).then(s,a);i((t=t.apply(n,e)).next());});var lt=Mt((Tr,be)=>{var Nn=Object.prototype.hasOwnProperty,v="~";function B(){}Object.create&&(B.prototype=Object.create(null),new B().__proto__||(v=!1));function Mn(n,e,t){this.fn=n,this.context=e,this.once=t||!1;}function ct(n,e,t,r,o){if(typeof t!="function")throw new TypeError("The listener must be a function");var s=new Mn(t,r||n,o),a=v?v+e:e;return n._events[a]?n._events[a].fn?n._events[a]=[n._events[a],s]:n._events[a].push(s):(n._events[a]=s,n._eventsCount++),n}function ie(n,e){--n._eventsCount===0?n._events=new B:delete n._events[e];}function R(){this._events=new B,this._eventsCount=0;}R.prototype.eventNames=function(){var e=[],t,r;if(this._eventsCount===0)return e;for(r in t=this._events)Nn.call(t,r)&&e.push(v?r.slice(1):r);return Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(t)):e};R.prototype.listeners=function(e){var t=v?v+e:e,r=this._events[t];if(!r)return [];if(r.fn)return [r.fn];for(var o=0,s=r.length,a=new Array(s);o<s;o++)a[o]=r[o].fn;return a};R.prototype.listenerCount=function(e){var t=v?v+e:e,r=this._events[t];return r?r.fn?1:r.length:0};R.prototype.emit=function(e,t,r,o,s,a){var i=v?v+e:e;if(!this._events[i])return !1;var c=this._events[i],p=arguments.length,l,u;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),p){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,r),!0;case 4:return c.fn.call(c.context,t,r,o),!0;case 5:return c.fn.call(c.context,t,r,o,s),!0;case 6:return c.fn.call(c.context,t,r,o,s,a),!0}for(u=1,l=new Array(p-1);u<p;u++)l[u-1]=arguments[u];c.fn.apply(c.context,l);}else {var P=c.length,A;for(u=0;u<P;u++)switch(c[u].once&&this.removeListener(e,c[u].fn,void 0,!0),p){case 1:c[u].fn.call(c[u].context);break;case 2:c[u].fn.call(c[u].context,t);break;case 3:c[u].fn.call(c[u].context,t,r);break;case 4:c[u].fn.call(c[u].context,t,r,o);break;default:if(!l)for(A=1,l=new Array(p-1);A<p;A++)l[A-1]=arguments[A];c[u].fn.apply(c[u].context,l);}}return !0};R.prototype.on=function(e,t,r){return ct(this,e,t,r,!1)};R.prototype.once=function(e,t,r){return ct(this,e,t,r,!0)};R.prototype.removeListener=function(e,t,r,o){var s=v?v+e:e;if(!this._events[s])return this;if(!t)return ie(this,s),this;var a=this._events[s];if(a.fn)a.fn===t&&(!o||a.once)&&(!r||a.context===r)&&ie(this,s);else {for(var i=0,c=[],p=a.length;i<p;i++)(a[i].fn!==t||o&&!a[i].once||r&&a[i].context!==r)&&c.push(a[i]);c.length?this._events[s]=c.length===1?c[0]:c:ie(this,s);}return this};R.prototype.removeAllListeners=function(e){var t;return e?(t=v?v+e:e,this._events[t]&&ie(this,t)):(this._events=new B,this._eventsCount=0),this};R.prototype.off=R.prototype.removeListener;R.prototype.addListener=R.prototype.on;R.prefixed=v;R.EventEmitter=R;typeof be<"u"&&(be.exports=R);});function St(n){let e={exports:{}};return n(e,e.exports),e.exports}var Ot=Number.MAX_SAFE_INTEGER||9007199254740991;var Pe={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Ot,MAX_SAFE_COMPONENT_LENGTH:16},Ct=typeof process=="object"&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...n)=>console.error("SEMVER",...n):()=>{},m=Ct,W=St(function(n,e){let{MAX_SAFE_COMPONENT_LENGTH:t}=Pe,r=(e=n.exports={}).re=[],o=e.src=[],s=e.t={},a=0,i=(c,p,l)=>{let u=a++;m(u,p),s[c]=u,o[u]=p,r[u]=new RegExp(p,l?"g":void 0);};i("NUMERICIDENTIFIER","0|[1-9]\\d*"),i("NUMERICIDENTIFIERLOOSE","[0-9]+"),i("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),i("MAINVERSION",`(${o[s.NUMERICIDENTIFIER]})\\.(${o[s.NUMERICIDENTIFIER]})\\.(${o[s.NUMERICIDENTIFIER]})`),i("MAINVERSIONLOOSE",`(${o[s.NUMERICIDENTIFIERLOOSE]})\\.(${o[s.NUMERICIDENTIFIERLOOSE]})\\.(${o[s.NUMERICIDENTIFIERLOOSE]})`),i("PRERELEASEIDENTIFIER",`(?:${o[s.NUMERICIDENTIFIER]}|${o[s.NONNUMERICIDENTIFIER]})`),i("PRERELEASEIDENTIFIERLOOSE",`(?:${o[s.NUMERICIDENTIFIERLOOSE]}|${o[s.NONNUMERICIDENTIFIER]})`),i("PRERELEASE",`(?:-(${o[s.PRERELEASEIDENTIFIER]}(?:\\.${o[s.PRERELEASEIDENTIFIER]})*))`),i("PRERELEASELOOSE",`(?:-?(${o[s.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${o[s.PRERELEASEIDENTIFIERLOOSE]})*))`),i("BUILDIDENTIFIER","[0-9A-Za-z-]+"),i("BUILD",`(?:\\+(${o[s.BUILDIDENTIFIER]}(?:\\.${o[s.BUILDIDENTIFIER]})*))`),i("FULLPLAIN",`v?${o[s.MAINVERSION]}${o[s.PRERELEASE]}?${o[s.BUILD]}?`),i("FULL",`^${o[s.FULLPLAIN]}$`),i("LOOSEPLAIN",`[v=\\s]*${o[s.MAINVERSIONLOOSE]}${o[s.PRERELEASELOOSE]}?${o[s.BUILD]}?`),i("LOOSE",`^${o[s.LOOSEPLAIN]}$`),i("GTLT","((?:<|>)?=?)"),i("XRANGEIDENTIFIERLOOSE",`${o[s.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),i("XRANGEIDENTIFIER",`${o[s.NUMERICIDENTIFIER]}|x|X|\\*`),i("XRANGEPLAIN",`[v=\\s]*(${o[s.XRANGEIDENTIFIER]})(?:\\.(${o[s.XRANGEIDENTIFIER]})(?:\\.(${o[s.XRANGEIDENTIFIER]})(?:${o[s.PRERELEASE]})?${o[s.BUILD]}?)?)?`),i("XRANGEPLAINLOOSE",`[v=\\s]*(${o[s.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[s.XRANGEIDENTIFIERLOOSE]})(?:\\.(${o[s.XRANGEIDENTIFIERLOOSE]})(?:${o[s.PRERELEASELOOSE]})?${o[s.BUILD]}?)?)?`),i("XRANGE",`^${o[s.GTLT]}\\s*${o[s.XRANGEPLAIN]}$`),i("XRANGELOOSE",`^${o[s.GTLT]}\\s*${o[s.XRANGEPLAINLOOSE]}$`),i("COERCE",`(^|[^\\d])(\\d{1,${t}})(?:\\.(\\d{1,${t}}))?(?:\\.(\\d{1,${t}}))?(?:$|[^\\d])`),i("COERCERTL",o[s.COERCE],!0),i("LONETILDE","(?:~>?)"),i("TILDETRIM",`(\\s*)${o[s.LONETILDE]}\\s+`,!0),e.tildeTrimReplace="$1~",i("TILDE",`^${o[s.LONETILDE]}${o[s.XRANGEPLAIN]}$`),i("TILDELOOSE",`^${o[s.LONETILDE]}${o[s.XRANGEPLAINLOOSE]}$`),i("LONECARET","(?:\\^)"),i("CARETTRIM",`(\\s*)${o[s.LONECARET]}\\s+`,!0),e.caretTrimReplace="$1^",i("CARET",`^${o[s.LONECARET]}${o[s.XRANGEPLAIN]}$`),i("CARETLOOSE",`^${o[s.LONECARET]}${o[s.XRANGEPLAINLOOSE]}$`),i("COMPARATORLOOSE",`^${o[s.GTLT]}\\s*(${o[s.LOOSEPLAIN]})$|^$`),i("COMPARATOR",`^${o[s.GTLT]}\\s*(${o[s.FULLPLAIN]})$|^$`),i("COMPARATORTRIM",`(\\s*)${o[s.GTLT]}\\s*(${o[s.LOOSEPLAIN]}|${o[s.XRANGEPLAIN]})`,!0),e.comparatorTrimReplace="$1$2$3",i("HYPHENRANGE",`^\\s*(${o[s.XRANGEPLAIN]})\\s+-\\s+(${o[s.XRANGEPLAIN]})\\s*$`),i("HYPHENRANGELOOSE",`^\\s*(${o[s.XRANGEPLAINLOOSE]})\\s+-\\s+(${o[s.XRANGEPLAINLOOSE]})\\s*$`),i("STAR","(<|>)?=?\\s*\\*"),i("GTE0","^\\s*>=\\s*0.0.0\\s*$"),i("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$");}),ke$1=/^[0-9]+$/,Xe=(n,e)=>{let t=ke$1.test(n),r=ke$1.test(e);return t&&r&&(n=+n,e=+e),n===e?0:t&&!r?-1:r&&!t?1:n<e?-1:1},_t=(n,e)=>Xe(e,n),Dt={compareIdentifiers:Xe,rcompareIdentifiers:_t},{MAX_LENGTH:qe,MAX_SAFE_INTEGER:Q}=Pe,{re:Je$1,t:Ue}=W,{compareIdentifiers:K}=Dt,E=class{constructor(e,t){if(t&&typeof t=="object"||(t={loose:!!t,includePrerelease:!1}),e instanceof E){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version;}else if(typeof e!="string")throw new TypeError(`Invalid Version: ${e}`);if(e.length>qe)throw new TypeError(`version is longer than ${qe} characters`);m("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;let r=e.trim().match(t.loose?Je$1[Ue.LOOSE]:Je$1[Ue.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Q||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Q||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Q||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map(o=>{if(/^[0-9]+$/.test(o)){let s=+o;if(s>=0&&s<Q)return s}return o}):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format();}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(m("SemVer.compare",this.version,this.options,e),!(e instanceof E)){if(typeof e=="string"&&e===this.version)return 0;e=new E(e,this.options);}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof E||(e=new E(e,this.options)),K(this.major,e.major)||K(this.minor,e.minor)||K(this.patch,e.patch)}comparePre(e){if(e instanceof E||(e=new E(e,this.options)),this.prerelease.length&&!e.prerelease.length)return -1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{let r=this.prerelease[t],o=e.prerelease[t];if(m("prerelease compare",t,r,o),r===void 0&&o===void 0)return 0;if(o===void 0)return 1;if(r===void 0)return -1;if(r!==o)return K(r,o)}while(++t)}compareBuild(e){e instanceof E||(e=new E(e,this.options));let t=0;do{let r=this.build[t],o=e.build[t];if(m("prerelease compare",t,r,o),r===void 0&&o===void 0)return 0;if(o===void 0)return 1;if(r===void 0)return -1;if(r!==o)return K(r,o)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",t),this.inc("pre",t);break;case"major":this.minor===0&&this.patch===0&&this.prerelease.length!==0||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":this.patch===0&&this.prerelease.length!==0||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":if(this.prerelease.length===0)this.prerelease=[0];else {let r=this.prerelease.length;for(;--r>=0;)typeof this.prerelease[r]=="number"&&(this.prerelease[r]++,r=-2);r===-1&&this.prerelease.push(0);}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}},kt=(n,e,t)=>new E(n,t).compare(new E(e,t)),k=kt,qt=(n,e,t)=>k(n,e,t)===0,Jt=qt,Ut=(n,e,t)=>k(n,e,t)!==0,Gt=Ut,Ft=(n,e,t)=>k(n,e,t)>0,Kt=Ft,jt=(n,e,t)=>k(n,e,t)>=0,Wt=jt,Xt=(n,e,t)=>k(n,e,t)<0,Bt=Xt,Ht=(n,e,t)=>k(n,e,t)<=0,Vt=Ht,zt=(n,e,t,r)=>{switch(e){case"===":return typeof n=="object"&&(n=n.version),typeof t=="object"&&(t=t.version),n===t;case"!==":return typeof n=="object"&&(n=n.version),typeof t=="object"&&(t=t.version),n!==t;case"":case"=":case"==":return Jt(n,t,r);case"!=":return Gt(n,t,r);case">":return Kt(n,t,r);case">=":return Wt(n,t,r);case"<":return Bt(n,t,r);case"<=":return Vt(n,t,r);default:throw new TypeError(`Invalid operator: ${e}`)}},Ie=zt,j=Symbol("SemVer ANY"),L=class{static get ANY(){return j}constructor(e,t){if(t&&typeof t=="object"||(t={loose:!!t,includePrerelease:!1}),e instanceof L){if(e.loose===!!t.loose)return e;e=e.value;}m("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===j?this.value="":this.value=this.operator+this.semver.version,m("comp",this);}parse(e){let t=this.options.loose?Ge[Fe.COMPARATORLOOSE]:Ge[Fe.COMPARATOR],r=e.match(t);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=r[1]!==void 0?r[1]:"",this.operator==="="&&(this.operator=""),r[2]?this.semver=new E(r[2],this.options.loose):this.semver=j;}toString(){return this.value}test(e){if(m("Comparator.test",e,this.options.loose),this.semver===j||e===j)return !0;if(typeof e=="string")try{e=new E(e,this.options);}catch(t){return !1}return Ie(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof L))throw new TypeError("a Comparator is required");if(t&&typeof t=="object"||(t={loose:!!t,includePrerelease:!1}),this.operator==="")return this.value===""||new $(e.value,t).test(this.value);if(e.operator==="")return e.value===""||new $(this.value,t).test(e.semver);let r=!(this.operator!==">="&&this.operator!==">"||e.operator!==">="&&e.operator!==">"),o=!(this.operator!=="<="&&this.operator!=="<"||e.operator!=="<="&&e.operator!=="<"),s=this.semver.version===e.semver.version,a=!(this.operator!==">="&&this.operator!=="<="||e.operator!==">="&&e.operator!=="<="),i=Ie(this.semver,"<",e.semver,t)&&(this.operator===">="||this.operator===">")&&(e.operator==="<="||e.operator==="<"),c=Ie(this.semver,">",e.semver,t)&&(this.operator==="<="||this.operator==="<")&&(e.operator===">="||e.operator===">");return r||o||s&&a||i||c}},{re:Ge,t:Fe}=W,$=class{constructor(e,t){if(t&&typeof t=="object"||(t={loose:!!t,includePrerelease:!1}),e instanceof $)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new $(e.raw,t);if(e instanceof L)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(r=>this.parseRange(r.trim())).filter(r=>r.length),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);this.format();}format(){return this.range=this.set.map(e=>e.join(" ").trim()).join("||").trim(),this.range}toString(){return this.range}parseRange(e){let{loose:t}=this.options;e=e.trim();let r=t?g[y.HYPHENRANGELOOSE]:g[y.HYPHENRANGE];e=e.replace(r,pn(this.options.includePrerelease)),m("hyphen replace",e),e=e.replace(g[y.COMPARATORTRIM],Yt),m("comparator trim",e,g[y.COMPARATORTRIM]),e=(e=(e=e.replace(g[y.TILDETRIM],Zt)).replace(g[y.CARETTRIM],Qt)).split(/\s+/).join(" ");let o=t?g[y.COMPARATORLOOSE]:g[y.COMPARATOR];return e.split(" ").map(s=>en(s,this.options)).join(" ").split(/\s+/).map(s=>ln(s,this.options)).filter(this.options.loose?s=>!!s.match(o):()=>!0).map(s=>new L(s,this.options))}intersects(e,t){if(!(e instanceof $))throw new TypeError("a Range is required");return this.set.some(r=>Ke(r,t)&&e.set.some(o=>Ke(o,t)&&r.every(s=>o.every(a=>s.intersects(a,t)))))}test(e){if(!e)return !1;if(typeof e=="string")try{e=new E(e,this.options);}catch(t){return !1}for(let t=0;t<this.set.length;t++)if(un(this.set[t],e,this.options))return !0;return !1}},{re:g,t:y,comparatorTrimReplace:Yt,tildeTrimReplace:Zt,caretTrimReplace:Qt}=W,Ke=(n,e)=>{let t=!0,r=n.slice(),o=r.pop();for(;t&&r.length;)t=r.every(s=>o.intersects(s,e)),o=r.pop();return t},en=(n,e)=>(m("comp",n,e),n=rn(n,e),m("caret",n),n=tn(n,e),m("tildes",n),n=on(n,e),m("xrange",n),n=cn(n,e),m("stars",n),n),T=n=>!n||n.toLowerCase()==="x"||n==="*",tn=(n,e)=>n.trim().split(/\s+/).map(t=>nn(t,e)).join(" "),nn=(n,e)=>{let t=e.loose?g[y.TILDELOOSE]:g[y.TILDE];return n.replace(t,(r,o,s,a,i)=>{let c;return m("tilde",n,r,o,s,a,i),T(o)?c="":T(s)?c=`>=${o}.0.0 <${+o+1}.0.0-0`:T(a)?c=`>=${o}.${s}.0 <${o}.${+s+1}.0-0`:i?(m("replaceTilde pr",i),c=`>=${o}.${s}.${a}-${i} <${o}.${+s+1}.0-0`):c=`>=${o}.${s}.${a} <${o}.${+s+1}.0-0`,m("tilde return",c),c})},rn=(n,e)=>n.trim().split(/\s+/).map(t=>sn(t,e)).join(" "),sn=(n,e)=>{m("caret",n,e);let t=e.loose?g[y.CARETLOOSE]:g[y.CARET],r=e.includePrerelease?"-0":"";return n.replace(t,(o,s,a,i,c)=>{let p;return m("caret",n,o,s,a,i,c),T(s)?p="":T(a)?p=`>=${s}.0.0${r} <${+s+1}.0.0-0`:T(i)?p=s==="0"?`>=${s}.${a}.0${r} <${s}.${+a+1}.0-0`:`>=${s}.${a}.0${r} <${+s+1}.0.0-0`:c?(m("replaceCaret pr",c),p=s==="0"?a==="0"?`>=${s}.${a}.${i}-${c} <${s}.${a}.${+i+1}-0`:`>=${s}.${a}.${i}-${c} <${s}.${+a+1}.0-0`:`>=${s}.${a}.${i}-${c} <${+s+1}.0.0-0`):(m("no pr"),p=s==="0"?a==="0"?`>=${s}.${a}.${i}${r} <${s}.${a}.${+i+1}-0`:`>=${s}.${a}.${i}${r} <${s}.${+a+1}.0-0`:`>=${s}.${a}.${i} <${+s+1}.0.0-0`),m("caret return",p),p})},on=(n,e)=>(m("replaceXRanges",n,e),n.split(/\s+/).map(t=>an(t,e)).join(" ")),an=(n,e)=>{n=n.trim();let t=e.loose?g[y.XRANGELOOSE]:g[y.XRANGE];return n.replace(t,(r,o,s,a,i,c)=>{m("xRange",n,r,o,s,a,i,c);let p=T(s),l=p||T(a),u=l||T(i),P=u;return o==="="&&P&&(o=""),c=e.includePrerelease?"-0":"",p?r=o===">"||o==="<"?"<0.0.0-0":"*":o&&P?(l&&(a=0),i=0,o===">"?(o=">=",l?(s=+s+1,a=0,i=0):(a=+a+1,i=0)):o==="<="&&(o="<",l?s=+s+1:a=+a+1),o==="<"&&(c="-0"),r=`${o+s}.${a}.${i}${c}`):l?r=`>=${s}.0.0${c} <${+s+1}.0.0-0`:u&&(r=`>=${s}.${a}.0${c} <${s}.${+a+1}.0-0`),m("xRange return",r),r})},cn=(n,e)=>(m("replaceStars",n,e),n.trim().replace(g[y.STAR],"")),ln=(n,e)=>(m("replaceGTE0",n,e),n.trim().replace(g[e.includePrerelease?y.GTE0PRE:y.GTE0],"")),pn=n=>(e,t,r,o,s,a,i,c,p,l,u,P,A)=>`${t=T(r)?"":T(o)?`>=${r}.0.0${n?"-0":""}`:T(s)?`>=${r}.${o}.0${n?"-0":""}`:a?`>=${t}`:`>=${t}${n?"-0":""}`} ${c=T(p)?"":T(l)?`<${+p+1}.0.0-0`:T(u)?`<${p}.${+l+1}.0-0`:P?`<=${p}.${l}.${u}-${P}`:n?`<${p}.${l}.${+u+1}-0`:`<=${c}`}`.trim(),un=(n,e,t)=>{for(let r=0;r<n.length;r++)if(!n[r].test(e))return !1;if(e.prerelease.length&&!t.includePrerelease){for(let r=0;r<n.length;r++)if(m(n[r].semver),n[r].semver!==L.ANY&&n[r].semver.prerelease.length>0){let o=n[r].semver;if(o.major===e.major&&o.minor===e.minor&&o.patch===e.patch)return !0}return !1}return !0},Be=(n,e,t)=>{try{e=new $(e,t);}catch(r){return !1}return e.test(n)};var{MAX_LENGTH:dn}=Pe,{re:je,t:We}=W,mn=(n,e)=>{if(e&&typeof e=="object"||(e={loose:!!e,includePrerelease:!1}),n instanceof E)return n;if(typeof n!="string"||n.length>dn||!(e.loose?je[We.LOOSE]:je[We.FULL]).test(n))return null;try{return new E(n,e)}catch(t){return null}},hn=mn,{re:ee,t:te}=W,He=(n,e)=>{if(n instanceof E)return n;if(typeof n=="number"&&(n=String(n)),typeof n!="string")return null;let t=null;if((e=e||{}).rtl){let r;for(;(r=ee[te.COERCERTL].exec(n))&&(!t||t.index+t[0].length!==n.length);)t&&r.index+r[0].length===t.index+t[0].length||(t=r),ee[te.COERCERTL].lastIndex=r.index+r[1].length+r[2].length;ee[te.COERCERTL].lastIndex=-1;}else t=n.match(ee[te.COERCE]);return t===null?null:hn(`${t[2]}.${t[3]||"0"}.${t[4]||"0"}`,e)};function En(n){return String.fromCharCode(parseInt(n.slice(1),16))}function fn(n){return `%${`00${n.charCodeAt(0).toString(16)}`.slice(-2)}`}function yn(n){return btoa(encodeURIComponent(n).replace(/%[0-9A-F]{2}/g,En))}function gn(n){return decodeURIComponent(Array.from(atob(n),fn).join(""))}function ne(n){return yn(JSON.stringify(n))}function Ve(n){return JSON.parse(gn(n))}function N(n){return typeof n=="undefined"}function vn(n){return n===null}function re(n){return vn(n)||N(n)}function ze(n){return re(n)?!1:!N(n.jsonrpc)&&!N(n.id)&&(!N(n.result)||!N(n.error))}function Ye(n){return re(n)?!1:typeof n=="number"&&Object.values(m$1).includes(n)}function se$1(n){if(!n)return !0;for(let e in n)if(Object.hasOwnProperty.call(n,e))return !1;return !0}var h={};function In(n,e){return Object.assign(h,e),n}var Ze$1={"magic-sdk":"magic-sdk","@magic-sdk/react-native":"magic-sdk-rn","@magic-sdk/react-native-bare":"magic-sdk-rn-bare","@magic-sdk/react-native-expo":"magic-sdk-rn-expo"};var b=class extends Error{constructor(t,r){super(`Magic SDK Error: [${t}] ${r}`);this.code=t;this.rawMessage=r;this.__proto__=Error;Object.setPrototypeOf(this,b.prototype);}},M=class extends Error{constructor(t){super();this.__proto__=Error;let r=Number(t==null?void 0:t.code);this.rawMessage=(t==null?void 0:t.message)||"Internal error",this.code=Ye(r)?r:m$1.InternalError,this.message=`Magic RPC Error: [${this.code}] ${this.rawMessage}`,this.data=(t==null?void 0:t.data)||void 0,Object.setPrototypeOf(this,M.prototype);}},q=class{constructor(e,t){this.code=e;this.rawMessage=t;this.message=`Magic SDK Warning: [${e}] ${t}`;}log(){console.warn(this.message);}},J=class extends Error{constructor(t,r,o,s){super(`Magic Extension Error (${t.name}): [${r}] ${o}`);this.code=r;this.rawMessage=o;this.data=s;this.__proto__=Error;Object.setPrototypeOf(this,J.prototype);}},X=class{constructor(e,t,r){this.code=t;this.rawMessage=r;this.message=`Magic Extension Warning (${e.name}): [${t}] ${r}`;}log(){console.warn(this.message);}};function Qe(){return new b(r.MissingApiKey,"Please provide an API key that you acquired from the Magic developer dashboard.")}function dr(){return new b(r.ModalNotReady,"Modal is not ready.")}function et$1(){return new b(r.MalformedResponse,"Response from the Magic iframe is malformed.")}function tt$1(n){return new b(r.ExtensionNotInitialized,`Extensions must be initialized with a Magic SDK instance before \`Extension.${n}\` can be accessed. Do not invoke \`Extension.${n}\` inside an extension constructor.`)}function nt(n){let e=`Some extensions are incompatible with \`${h.sdkName}@${h.version}\`:`;return n.filter(t=>typeof t.compat!="undefined"&&t.compat!==null).forEach(t=>{let r=t.compat[h.sdkName];typeof r=="string"?e+=`
  - Extension \`${t.name}\` supports version(s) \`${r}\``:r||(e+=`
  - Extension \`${t.name}\` does not support ${h.platform} environments.`);}),new b(r.IncompatibleExtensions,e)}function rt$1(n){let e=t=>{let r=t+1,o=r%10,s=r%100;return o===1&&s!==11?`${r}st`:o===2&&s!==12?`${r}nd`:o===3&&s!==13?`${r}rd`:`${r}th`};return new b(r.InvalidArgument,`Invalid ${e(n.argument)} argument given to \`${n.procedure}\`.
  Expected: \`${n.expected}\`
  Received: \`${n.received}\``)}function mr(){return new q(a.DuplicateIframe,"Duplicate iframes found.")}function st(){return new q(a.SyncWeb3Method,"Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.")}function ot(){return new q(a.ReactNativeEndpointConfiguration,`CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The \`endpoint\` parameter SHOULD NOT be provided. The Magic \`<iframe>\` is automatically wrapped by a WebView pointed at \`${h.defaultEndpoint}\`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.`)}function*xn(){let n=0;for(;;)n<Number.MAX_SAFE_INTEGER?yield ++n:n=0;}var bn=xn();function xe(){return bn.next().value}var it=Symbol("Payload pre-processed by Magic SDK");function at$1(n){return Object.defineProperty(n,it,{value:!0,enumerable:!1}),n}function $n(n){return !!n[it]}function _(n){var e,t,r;return $n(n)||(n.jsonrpc=(e=n.jsonrpc)!=null?e:"2.0",n.id=xe(),n.method=(t=n.method)!=null?t:"noop",n.params=(r=n.params)!=null?r:[],at$1(n)),n}function d(n,e=[]){return at$1({params:e,method:n,jsonrpc:"2.0",id:xe()})}var S=class{constructor(e){e instanceof S?(this._jsonrpc=e.payload.jsonrpc,this._id=e.payload.id,this._result=e.payload.result,this._error=e.payload.error):ze(e)?(this._jsonrpc=e.jsonrpc,this._id=e.id,this._result=e.result,this._error=e.error):(this._jsonrpc=e.jsonrpc,this._id=e.id,this._result=void 0,this._error=void 0);}applyError(e){return this._error=e,this}applyResult(e){return this._result=e,this}get hasError(){return typeof this._error!="undefined"&&this._error!==null}get hasResult(){return typeof this._result!="undefined"}get payload(){return {jsonrpc:this._jsonrpc,id:this._id,result:this._result,error:this._error}}};var pt=Lt(lt()),$e$1=class $e extends pt.default{};function ae(){let n=new $e$1;return {emitter:n,createChainingEmitterMethod:(r,o)=>(...s)=>(n[r].apply(n,s),o),createBoundEmitterMethod:r=>(...o)=>n[r].apply(n,o)}}var ut$1=Symbol("isPromiEvent");function dt(n){return !!n[ut$1]}function ce(n){let e=Ne(n),{createBoundEmitterMethod:t,createChainingEmitterMethod:r}=ae(),o=Symbol("Promise.then"),s=Symbol("Promise.catch"),a=Symbol("Promise.finally"),i=(l,u)=>(...P)=>{let A=u[l].apply(u,P);return c(A)},c=l=>Object.assign(l,{[ut$1]:!0,[o]:l[o]||l.then,[s]:l[s]||l.catch,[a]:l[a]||l.finally,then:i(o,l),catch:i(s,l),finally:i(a,l),on:r("on",l),once:r("once",l),addListener:r("addListener",l),off:r("off",l),removeListener:r("removeListener",l),removeAllListeners:r("removeAllListeners",l),emit:t("emit"),eventNames:t("eventNames"),listeners:t("listeners"),listenerCount:t("listenerCount")}),p=c(e.then(l=>(p.emit("done",l),p.emit("settled"),l),l=>{throw p.emit("error",l),p.emit("settled"),l}));return p}function Ne(n){return new Promise((e,t)=>{let r=n(e,t);Promise.resolve(r).catch(t);})}var I=class{constructor(e){this.sdk=e;}get overlay(){return this.sdk.overlay}request(e){let t=this.overlay.post(o$1.MAGIC_HANDLE_REQUEST,_(e)),r=ce((s,a)=>{t.then(i=>{if(o(),i.hasError)a(new M(i.payload.error));else if(i.hasResult)s(i.payload.result);else throw et$1()}).catch(i=>{o(),a(i);});}),o=this.overlay.on(u.MAGIC_HANDLE_EVENT,s=>{var i;let{response:a}=s.data;if(a.id===e.id&&((i=a.result)==null?void 0:i.event)){let{event:c,params:p=[]}=a.result;r.emit(c,...p);}});return r}createIntermediaryEvent(e,t){return o=>{let s=d(p.IntermediaryEvent,[{payloadId:t,eventType:e,args:o}]);this.request(s);}}};var le=class extends I{loginWithMagicLink(e){let{email:t,showUI:r=!0,redirectURI:o}=e,s=d(this.sdk.testMode?p.LoginWithMagicLinkTestMode:p.LoginWithMagicLink,[{email:t,showUI:r,redirectURI:o}]);return this.request(s)}loginWithSMS(e){let{phoneNumber:t}=e,r=d(this.sdk.testMode?p.LoginWithSmsTestMode:p.LoginWithSms,[{phoneNumber:t,showUI:!0}]);return this.request(r)}loginWithEmailOTP(e){let{email:t,showUI:r}=e,o=d(this.sdk.testMode?p.LoginWithEmailOTPTestMode:p.LoginWithEmailOTP,[{email:t,showUI:r}]);if(!r){let s=this.request(o);return s&&s.on("otp-input-sent",a=>{this.createIntermediaryEvent("verify-email-otp",o.id)(a);}),s}return this.request(o)}loginWithCredential(e){let t=e!=null?e:"";if(!e&&h.platform==="web"){t=window.location.search;let o=window.location.origin+window.location.pathname;window.history.replaceState(null,"",o);}let r=d(this.sdk.testMode?p.LoginWithCredentialTestMode:p.LoginWithCredential,[t]);return this.request(r)}};var H={};wt(H,{clear:()=>Sn,getItem:()=>D,iterate:()=>Dn,key:()=>Cn,keys:()=>_n,length:()=>On,removeItem:()=>ue,setItem:()=>G});var pe$1;function C(n){return (...e)=>x(this,null,function*(){return pe$1||(pe$1=yield h.configureStorage()),yield pe$1.ready(),pe$1[n](...e)})}var D=C("getItem"),G=C("setItem"),ue=C("removeItem"),Sn=C("clear"),On=C("length"),Cn=C("key"),_n=C("keys"),Dn=C("iterate");function mt(){let n=window.crypto.getRandomValues(new Uint8Array(16));n[6]=n[6]&15|64,n[8]=n[8]&191|128;let e="";return e+=n[0].toString(16),e+=n[1].toString(16),e+=n[2].toString(16),e+=n[3].toString(16),e+="-",e+=n[4].toString(16),e+=n[5].toString(16),e+="-",e+=n[6].toString(16),e+=n[7].toString(16),e+="-",e+=n[8].toString(16),e+=n[9].toString(16),e+="-",e+=n[10].toString(16),e+=n[11].toString(16),e+=n[12].toString(16),e+=n[13].toString(16),e+=n[14].toString(16),e+=n[15].toString(16),e}var Me="STORE_KEY_PRIVATE_KEY",de="STORE_KEY_PUBLIC_JWK",we="ECDSA",Et="P-256",kn={name:we,namedCurve:Et},qn={name:we,namedCurve:Et};function me(){ue(de),ue(Me);}function ft$1(){return x(this,null,function*(){let n=yield Jn();if(!n){console.info("unable to create public key or webcrypto is unsupported");return}let{subtle:e}=window.crypto,t=yield D(Me);if(!t||!e){console.info("unable to find private key or webcrypto unsupported");return}let r={iat:Math.floor(new Date().getTime()/1e3),jti:mt()},o={typ:"dpop+jwt",alg:"ES256",jwk:n},s={protected:ht(JSON.stringify(o)),claims:ht(JSON.stringify(r))},a=Fn(`${s.protected}.${s.claims}`),i={name:we,hash:{name:"SHA-256"}},c=jn(new Uint8Array(yield e.sign(i,t,a)));return `${s.protected}.${s.claims}.${c}`})}function Jn(){return x(this,null,function*(){if(!Gn()){console.info("webcrypto is not supported");return}return (yield D(de))||(yield Un()),D(de)})}function Un(){return x(this,null,function*(){let n=null,{subtle:e}=window.crypto,t=yield e.generateKey(kn,!0,["sign"]),r=yield e.exportKey("jwk",t.privateKey);n=yield e.exportKey("jwk",t.publicKey);let o=yield e.importKey("jwk",r,qn,!1,["sign"]);yield G(Me,o),yield G(de,n);})}function Gn(){let n=typeof window!="undefined"&&!!window.crypto,e=n&&!!window.crypto.subtle;return n&&e}function ht(n){return yt(Kn(n))}function Fn(n){return new TextEncoder().encode(n)}function yt(n){return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+/g,"")}function Kn(n){return encodeURIComponent(n).replace(/%([0-9A-F]{2})/g,(t,r)=>String.fromCharCode(parseInt(r,16)))}function jn(n){let e="";return n.forEach(t=>{e+=String.fromCharCode(t);}),yt(e)}var he=class extends I{getIdToken(e){let t=d(this.sdk.testMode?p.GetIdTokenTestMode:p.GetIdToken,[e]);return this.request(t)}generateIdToken(e){let t=d(this.sdk.testMode?p.GenerateIdTokenTestMode:p.GenerateIdToken,[e]);return this.request(t)}getMetadata(){let e=d(this.sdk.testMode?p.GetMetadataTestMode:p.GetMetadata);return this.request(e)}updateEmail(e){let{email:t,showUI:r=!0}=e,o=d(this.sdk.testMode?p.UpdateEmailTestMode:p.UpdateEmail,[{email:t,showUI:r}]);return this.request(o)}isLoggedIn(){let e=d(this.sdk.testMode?p.IsLoggedInTestMode:p.IsLoggedIn);return this.request(e)}logout(){me();let e=d(this.sdk.testMode?p.LogoutTestMode:p.Logout);return this.request(e)}showSettings(){let e=d(this.sdk.testMode?p.UserSettingsTestMode:p.UserSettings);return this.request(e)}updatePhoneNumber(){let e=d(this.sdk.testMode?p.UpdatePhoneNumberTestMode:p.UpdatePhoneNumber);return this.request(e)}recoverAccount(e){let t=d(this.sdk.testMode?p.RecoverAccountTestMode:p.RecoverAccount,[e]);return this.request(t)}};var Ee=class extends I{connectWithUI(){let e=d(p.RequestAccounts);return this.request(e)}showUI(){let e=d(p.ShowUI);return this.request(e)}getInfo(){let e=d(p.GetInfo);return this.request(e)}requestUserInfoWithUI(e){let t=d(p.RequestUserInfoWithUI,e?[e]:[]);return this.request(t)}disconnect(){me();let e=d(p.Disconnect);return this.request(e)}};var{createBoundEmitterMethod:fe,createChainingEmitterMethod:F}=ae(),ye=class extends I{constructor(){super(...arguments);this.isMagic=!0;this.on=F("on",this);this.once=F("once",this);this.addListener=F("addListener",this);this.off=F("off",this);this.removeListener=F("removeListener",this);this.removeAllListeners=F("removeAllListeners",this);this.emit=fe("emit");this.eventNames=fe("eventNames");this.listeners=fe("listeners");this.listenerCount=fe("listenerCount");}sendAsync(t,r){if(!r)throw rt$1({procedure:"Magic.rpcProvider.sendAsync",argument:1,expected:"function",received:r===null?"null":typeof r});if(Array.isArray(t))this.overlay.post(o$1.MAGIC_HANDLE_REQUEST,t.map(o=>{let s=_(o);return this.prefixPayloadMethodForTestMode(s),s})).then(o=>{r(null,o.map(s=>De(Z({},s.payload),{error:s.hasError?new M(s.payload.error):null})));});else {let o=_(t);this.prefixPayloadMethodForTestMode(o),this.overlay.post(o$1.MAGIC_HANDLE_REQUEST,o).then(s=>{r(s.hasError?new M(s.payload.error):null,s.payload);});}}send(t,r){if(typeof t=="string"){let s=d(t,Array.isArray(r)?r:[]);return this.request(s)}if(Array.isArray(t)||!!r){this.sendAsync(t,r);return}let o=st();return o.log(),new S(t).applyError({code:-32603,message:o.rawMessage}).payload}enable(){let t=d("eth_accounts");return this.request(t)}request(t){return this.prefixPayloadMethodForTestMode(t),super.request(t)}prefixPayloadMethodForTestMode(t){let r="testMode/eth/";this.sdk.testMode&&(t.method=`${r}${t.method}`);}};function Ae(n,e){return e?new URL(n,e):new URL(n)}var Rt=["request","overlay","sdk"];function Wn(n){let e=Object.getPrototypeOf(n),t=[e];for(;e!==I.prototype;)e=Object.getPrototypeOf(e),t.push(e);return t}var ge$1=class ge extends I{constructor(){super(void 0);this.__sdk_access_field_descriptors__=new Map;this.__is_initialized__=!1;this.utils={createPromiEvent:ce,isPromiEvent:dt,encodeJSON:ne,decodeJSON:Ve,createJsonRpcRequestPayload:d,standardizeJsonRpcRequestPayload:_,storage:H};let t=[this,...Wn(this)];Rt.forEach(r=>{let o=t.map(c=>Object.getOwnPropertyDescriptor(c,r)),s=o.findIndex(c=>!!c),a=s>0,i=o[s];i&&(this.__sdk_access_field_descriptors__.set(r,{descriptor:i,isPrototypeField:a}),Object.defineProperty(this,r,{configurable:!0,get:()=>{throw tt$1(r)}}));});}init(t){this.__is_initialized__||(Rt.forEach(r=>{if(this.__sdk_access_field_descriptors__.has(r)){let{descriptor:o,isPrototypeField:s}=this.__sdk_access_field_descriptors__.get(r);s?delete this[r]:Object.defineProperty(this,r,o);}}),this.sdk=t,this.__is_initialized__=!0);}createDeprecationWarning(t){let{method:r,removalVersion:o,useInstead:s}=t,a=s?` Use \`${s}\` instead.`:"",i=`\`${r}\` will be removed from this Extension in version \`${o}\`.${a}`;return new X(this,"DEPRECATION_NOTICE",i)}createWarning(t,r){return new X(this,t,r)}createError(t,r,o){return new J(this,t,r,o)}},Le=class extends ge$1{},w=class extends ge$1{};w.Internal=Le,w.Anonymous="anonymous extension";var Re=class extends I{purchase(e){let t=d(p.NFTPurchase,[e]);return this.request(t)}};function Tt(n){return n.compat&&n.compat[h.sdkName]!=null?typeof n.compat[h.sdkName]=="string"?Be(He(h.version),n.compat[h.sdkName]):!!n.compat[h.sdkName]:!0}function Bn(n){var o;let e=(o=n==null?void 0:n.extensions)!=null?o:[],t={},r=[];if(Array.isArray(e)?e.forEach(s=>{Tt(s)?(s.init(this),(s.name||s.name!==w.Anonymous)&&(this[s.name]=s),s instanceof w.Internal&&(se$1(s.config)||(t[s.name]=s.config))):r.push(s);}):Object.keys(e).forEach(s=>{if(Tt(e[s])){e[s].init(this);let a=e[s];this[s]=a,a instanceof w.Internal&&(se$1(a.config)||(t[e[s].name]=a.config));}else r.push(e[s]);}),r.length)throw nt(r);return t}var z=class{constructor(e,t){this.apiKey=e;var a;if(!e)throw Qe();h.platform==="react-native"&&(t==null?void 0:t.endpoint)&&ot().log();let{defaultEndpoint:r,version:o}=h;this.testMode=!!(t!=null&&t.testMode),this.endpoint=Ae((a=t==null?void 0:t.endpoint)!=null?a:r).origin,this.auth=new le(this),this.user=new he(this),this.wallet=new Ee(this),this.nft=new Re(this),this.rpcProvider=new ye(this);let s=Bn.call(this,t);this.parameters=ne(Z({API_KEY:this.apiKey,DOMAIN_ORIGIN:window.location?window.location.origin:"",ETH_NETWORK:t==null?void 0:t.network,host:Ae(this.endpoint).host,sdk:Ze$1[h.sdkName],version:o,ext:se$1(s)?void 0:s,locale:(t==null?void 0:t.locale)||"en_US"},h.bundleId?{bundleId:h.bundleId}:{}));}get overlay(){if(!z.__overlays__.has(this.parameters)){let e=new h.ViewController(this.endpoint,this.parameters);e.init(),z.__overlays__.set(this.parameters,e);}return z.__overlays__.get(this.parameters)}preload(){return x(this,null,function*(){yield this.overlay.ready;})}},Te$1=z;Te$1.__overlays__=new Map;function Hn(n,e){return e&&Array.isArray(n)?n.find(t=>t.id===e):n}function Vn(n,e){var o;let t=(o=e.data.response)==null?void 0:o.id,r=Hn(n,t);if(t&&r){let s=new S(r).applyResult(e.data.response.result).applyError(e.data.response.error);return {id:t,response:s}}return {}}function zn(n,e){return x(this,null,function*(){let t=yield D("rt"),r;if(h.platform==="web")try{r=yield ft$1();}catch(o){console.error("webcrypto error",o);}return r?t?{msgType:n,payload:e,jwt:r,rt:t}:{msgType:n,payload:e,jwt:r}:{msgType:n,payload:e}})}function Yn(n){return x(this,null,function*(){!n.data.rt||(yield G("rt",n.data.rt));})}var Se=class{constructor(e,t){this.endpoint=e;this.parameters=t;this.messageHandlers=new Set;this.ready=this.waitForReady(),this.listen();}post(e,t){return x(this,null,function*(){return Ne(r=>x(this,null,function*(){yield this.ready;let o=[],s=Array.isArray(t)?t.map(p=>p.id):[],a=yield zn(`${e}-${this.parameters}`,t);yield this._post(a);let i=p=>l=>{let{id:u,response:P}=Vn(t,l);Yn(l),u&&P&&Array.isArray(t)&&s.includes(u)?(o.push(P),o.length===t.length&&(p(),r(o))):u&&P&&!Array.isArray(t)&&u===t.id&&(p(),r(P));},c=this.on(u.MAGIC_HANDLE_RESPONSE,i(()=>c()));}))})}on(e,t){let r=t.bind(window),o=s=>{s.data.msgType===`${e}-${this.parameters}`&&r(s);};return this.messageHandlers.add(o),()=>this.messageHandlers.delete(o)}waitForReady(){return new Promise(e=>{this.on(u.MAGIC_OVERLAY_READY,()=>e());})}listen(){this.on(u.MAGIC_HIDE_OVERLAY,()=>{this.hideOverlay();}),this.on(u.MAGIC_SHOW_OVERLAY,()=>{this.showOverlay();});}};

    var Zr=Object.create;var Je=Object.defineProperty;var qr=Object.getOwnPropertyDescriptor;var kr=Object.getOwnPropertyNames;var et=Object.getPrototypeOf,rt=Object.prototype.hasOwnProperty;var ve=(b=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(b,{get:(A,R)=>(typeof require!="undefined"?require:A)[R]}):b)(function(b){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+b+'" is not supported')});var $e=(b,A)=>()=>(A||b((A={exports:{}}).exports,A),A.exports);var tt=(b,A,R,L)=>{if(A&&typeof A=="object"||typeof A=="function")for(let D of kr(A))!rt.call(b,D)&&D!==R&&Je(b,D,{get:()=>A[D],enumerable:!(L=qr(A,D))||L.enumerable});return b};var Ze=(b,A,R)=>(R=b!=null?Zr(et(b)):{},tt(A||!b||!b.__esModule?Je(R,"default",{value:b,enumerable:!0}):R,b));var se=(b,A,R)=>new Promise((L,D)=>{var X=I=>{try{Y(R.next(I));}catch(M){D(M);}},P=I=>{try{Y(R.throw(I));}catch(M){D(M);}},Y=I=>I.done?L(I.value):Promise.resolve(I.value).then(X,P);Y((R=R.apply(b,A)).next());});var ke=$e((qe,Ne)=>{(function(b){if(typeof qe=="object"&&typeof Ne<"u")Ne.exports=b();else if(typeof define=="function"&&define.amd)define([],b);else {var A;typeof window<"u"?A=window:typeof global<"u"?A=global:typeof self<"u"?A=self:A=this,A.localforage=b();}})(function(){return function L(D,X,P){function Y(H,$){if(!X[H]){if(!D[H]){var m=typeof ve=="function"&&ve;if(!$&&m)return m(H,!0);if(I)return I(H,!0);var _=new Error("Cannot find module '"+H+"'");throw _.code="MODULE_NOT_FOUND",_}var B=X[H]={exports:{}};D[H][0].call(B.exports,function(z){var Z=D[H][1][z];return Y(Z||z)},B,B.exports,L,D,X,P);}return X[H].exports}for(var I=typeof ve=="function"&&ve,M=0;M<P.length;M++)Y(P[M]);return Y}({1:[function(L,D,X){(function(P){var Y=P.MutationObserver||P.WebKitMutationObserver,I;if(Y){var M=0,H=new Y(z),$=P.document.createTextNode("");H.observe($,{characterData:!0}),I=function(){$.data=M=++M%2;};}else if(!P.setImmediate&&typeof P.MessageChannel<"u"){var m=new P.MessageChannel;m.port1.onmessage=z,I=function(){m.port2.postMessage(0);};}else "document"in P&&"onreadystatechange"in P.document.createElement("script")?I=function(){var F=P.document.createElement("script");F.onreadystatechange=function(){z(),F.onreadystatechange=null,F.parentNode.removeChild(F),F=null;},P.document.documentElement.appendChild(F);}:I=function(){setTimeout(z,0);};var _,B=[];function z(){_=!0;for(var F,k,U=B.length;U;){for(k=B,B=[],F=-1;++F<U;)k[F]();U=B.length;}_=!1;}D.exports=Z;function Z(F){B.push(F)===1&&!_&&I();}}).call(this,typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:{});},{}],2:[function(L,D,X){var P=L(1);function Y(){}var I={},M=["REJECTED"],H=["FULFILLED"],$=["PENDING"];D.exports=m;function m(h){if(typeof h!="function")throw new TypeError("resolver must be a function");this.state=$,this.queue=[],this.outcome=void 0,h!==Y&&Z(this,h);}m.prototype.catch=function(h){return this.then(null,h)},m.prototype.then=function(h,N){if(typeof h!="function"&&this.state===H||typeof N!="function"&&this.state===M)return this;var E=new this.constructor(Y);if(this.state!==$){var O=this.state===H?h:N;B(E,O,this.outcome);}else this.queue.push(new _(E,h,N));return E};function _(h,N,E){this.promise=h,typeof N=="function"&&(this.onFulfilled=N,this.callFulfilled=this.otherCallFulfilled),typeof E=="function"&&(this.onRejected=E,this.callRejected=this.otherCallRejected);}_.prototype.callFulfilled=function(h){I.resolve(this.promise,h);},_.prototype.otherCallFulfilled=function(h){B(this.promise,this.onFulfilled,h);},_.prototype.callRejected=function(h){I.reject(this.promise,h);},_.prototype.otherCallRejected=function(h){B(this.promise,this.onRejected,h);};function B(h,N,E){P(function(){var O;try{O=N(E);}catch(V){return I.reject(h,V)}O===h?I.reject(h,new TypeError("Cannot resolve promise with itself")):I.resolve(h,O);});}I.resolve=function(h,N){var E=F(z,N);if(E.status==="error")return I.reject(h,E.value);var O=E.value;if(O)Z(h,O);else {h.state=H,h.outcome=N;for(var V=-1,j=h.queue.length;++V<j;)h.queue[V].callFulfilled(N);}return h},I.reject=function(h,N){h.state=M,h.outcome=N;for(var E=-1,O=h.queue.length;++E<O;)h.queue[E].callRejected(N);return h};function z(h){var N=h&&h.then;if(h&&(typeof h=="object"||typeof h=="function")&&typeof N=="function")return function(){N.apply(h,arguments);}}function Z(h,N){var E=!1;function O(J){E||(E=!0,I.reject(h,J));}function V(J){E||(E=!0,I.resolve(h,J));}function j(){N(V,O);}var Q=F(j);Q.status==="error"&&O(Q.value);}function F(h,N){var E={};try{E.value=h(N),E.status="success";}catch(O){E.status="error",E.value=O;}return E}m.resolve=k;function k(h){return h instanceof this?h:I.resolve(new this(Y),h)}m.reject=U;function U(h){var N=new this(Y);return I.reject(N,h)}m.all=ae;function ae(h){var N=this;if(Object.prototype.toString.call(h)!=="[object Array]")return this.reject(new TypeError("must be an array"));var E=h.length,O=!1;if(!E)return this.resolve([]);for(var V=new Array(E),j=0,Q=-1,J=new this(Y);++Q<E;)ee(h[Q],Q);return J;function ee(oe,a){N.resolve(oe).then(s,function(v){O||(O=!0,I.reject(J,v));});function s(v){V[a]=v,++j===E&&!O&&(O=!0,I.resolve(J,V));}}}m.race=re;function re(h){var N=this;if(Object.prototype.toString.call(h)!=="[object Array]")return this.reject(new TypeError("must be an array"));var E=h.length,O=!1;if(!E)return this.resolve([]);for(var V=-1,j=new this(Y);++V<E;)Q(h[V]);return j;function Q(J){N.resolve(J).then(function(ee){O||(O=!0,I.resolve(j,ee));},function(ee){O||(O=!0,I.reject(j,ee));});}}},{1:1}],3:[function(L,D,X){(function(P){typeof P.Promise!="function"&&(P.Promise=L(2));}).call(this,typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:{});},{2:2}],4:[function(L,D,X){var P=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function Y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function I(){try{if(typeof indexedDB<"u")return indexedDB;if(typeof webkitIndexedDB<"u")return webkitIndexedDB;if(typeof mozIndexedDB<"u")return mozIndexedDB;if(typeof OIndexedDB<"u")return OIndexedDB;if(typeof msIndexedDB<"u")return msIndexedDB}catch{return}}var M=I();function H(){try{if(!M||!M.open)return !1;var e=typeof openDatabase<"u"&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t=typeof fetch=="function"&&fetch.toString().indexOf("[native code")!==-1;return (!e||t)&&typeof indexedDB<"u"&&typeof IDBKeyRange<"u"}catch{return !1}}function $(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(n){if(n.name!=="TypeError")throw n;for(var r=typeof BlobBuilder<"u"?BlobBuilder:typeof MSBlobBuilder<"u"?MSBlobBuilder:typeof MozBlobBuilder<"u"?MozBlobBuilder:WebKitBlobBuilder,o=new r,i=0;i<e.length;i+=1)o.append(e[i]);return o.getBlob(t.type)}}typeof Promise>"u"&&L(3);var m=Promise;function _(e,t){t&&e.then(function(r){t(null,r);},function(r){t(r);});}function B(e,t,r){typeof t=="function"&&e.then(t),typeof r=="function"&&e.catch(r);}function z(e){return typeof e!="string"&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function Z(){if(arguments.length&&typeof arguments[arguments.length-1]=="function")return arguments[arguments.length-1]}var F="local-forage-detect-blob-support",k=void 0,U={},ae=Object.prototype.toString,re="readonly",h="readwrite";function N(e){for(var t=e.length,r=new ArrayBuffer(t),o=new Uint8Array(r),i=0;i<t;i++)o[i]=e.charCodeAt(i);return r}function E(e){return new m(function(t){var r=e.transaction(F,h),o=$([""]);r.objectStore(F).put(o,"key"),r.onabort=function(i){i.preventDefault(),i.stopPropagation(),t(!1);},r.oncomplete=function(){var i=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!i||parseInt(i[1],10)>=43);};}).catch(function(){return !1})}function O(e){return typeof k=="boolean"?m.resolve(k):E(e).then(function(t){return k=t,k})}function V(e){var t=U[e.name],r={};r.promise=new m(function(o,i){r.resolve=o,r.reject=i;}),t.deferredOperations.push(r),t.dbReady?t.dbReady=t.dbReady.then(function(){return r.promise}):t.dbReady=r.promise;}function j(e){var t=U[e.name],r=t.deferredOperations.pop();if(r)return r.resolve(),r.promise}function Q(e,t){var r=U[e.name],o=r.deferredOperations.pop();if(o)return o.reject(t),o.promise}function J(e,t){return new m(function(r,o){if(U[e.name]=U[e.name]||G(),e.db)if(t)V(e),e.db.close();else return r(e.db);var i=[e.name];t&&i.push(e.version);var n=M.open.apply(M,i);t&&(n.onupgradeneeded=function(f){var u=n.result;try{u.createObjectStore(e.storeName),f.oldVersion<=1&&u.createObjectStore(F);}catch(c){if(c.name==="ConstraintError")console.warn('The database "'+e.name+'" has been upgraded from version '+f.oldVersion+" to version "+f.newVersion+', but the storage "'+e.storeName+'" already exists.');else throw c}}),n.onerror=function(f){f.preventDefault(),o(n.error);},n.onsuccess=function(){var f=n.result;f.onversionchange=function(u){u.target.close();},r(f),j(e);};})}function ee(e){return J(e,!1)}function oe(e){return J(e,!0)}function a(e,t){if(!e.db)return !0;var r=!e.db.objectStoreNames.contains(e.storeName),o=e.version<e.db.version,i=e.version>e.db.version;if(o&&(e.version!==t&&console.warn('The database "'+e.name+`" can't be downgraded from version `+e.db.version+" to version "+e.version+"."),e.version=e.db.version),i||r){if(r){var n=e.db.version+1;n>e.version&&(e.version=n);}return !0}return !1}function s(e){return new m(function(t,r){var o=new FileReader;o.onerror=r,o.onloadend=function(i){var n=btoa(i.target.result||"");t({__local_forage_encoded_blob:!0,data:n,type:e.type});},o.readAsBinaryString(e);})}function v(e){var t=N(atob(e.data));return $([t],{type:e.type})}function p(e){return e&&e.__local_forage_encoded_blob}function g(e){var t=this,r=t._initReady().then(function(){var o=U[t._dbInfo.name];if(o&&o.dbReady)return o.dbReady});return B(r,e,e),r}function w(e){V(e);for(var t=U[e.name],r=t.forages,o=0;o<r.length;o++){var i=r[o];i._dbInfo.db&&(i._dbInfo.db.close(),i._dbInfo.db=null);}return e.db=null,ee(e).then(function(n){return e.db=n,a(e)?oe(e):n}).then(function(n){e.db=t.db=n;for(var f=0;f<r.length;f++)r[f]._dbInfo.db=n;}).catch(function(n){throw Q(e,n),n})}function T(e,t,r,o){o===void 0&&(o=1);try{var i=e.db.transaction(e.storeName,t);r(null,i);}catch(n){if(o>0&&(!e.db||n.name==="InvalidStateError"||n.name==="NotFoundError"))return m.resolve().then(function(){if(!e.db||n.name==="NotFoundError"&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),oe(e)}).then(function(){return w(e).then(function(){T(e,t,r,o-1);})}).catch(r);r(n);}}function G(){return {forages:[],db:null,dbReady:null,deferredOperations:[]}}function fe(e){var t=this,r={db:null};if(e)for(var o in e)r[o]=e[o];var i=U[r.name];i||(i=G(),U[r.name]=i),i.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=g);var n=[];function f(){return m.resolve()}for(var u=0;u<i.forages.length;u++){var c=i.forages[u];c!==t&&n.push(c._initReady().catch(f));}var l=i.forages.slice(0);return m.all(n).then(function(){return r.db=i.db,ee(r)}).then(function(d){return r.db=d,a(r,t._defaultConfig.version)?oe(r):d}).then(function(d){r.db=i.db=d,t._dbInfo=r;for(var y=0;y<l.length;y++){var S=l[y];S!==t&&(S._dbInfo.db=r.db,S._dbInfo.version=r.version);}})}function ie(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){T(r._dbInfo,re,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=c.get(e);l.onsuccess=function(){var d=l.result;d===void 0&&(d=null),p(d)&&(d=v(d)),i(d);},l.onerror=function(){n(l.error);};}catch(d){n(d);}});}).catch(n);});return _(o,t),o}function ce(e,t){var r=this,o=new m(function(i,n){r.ready().then(function(){T(r._dbInfo,re,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=c.openCursor(),d=1;l.onsuccess=function(){var y=l.result;if(y){var S=y.value;p(S)&&(S=v(S));var x=e(S,y.key,d++);x!==void 0?i(x):y.continue();}else i();},l.onerror=function(){n(l.error);};}catch(y){n(y);}});}).catch(n);});return _(o,t),o}function nr(e,t,r){var o=this;e=z(e);var i=new m(function(n,f){var u;o.ready().then(function(){return u=o._dbInfo,ae.call(t)==="[object Blob]"?O(u.db).then(function(c){return c?t:s(t)}):t}).then(function(c){T(o._dbInfo,h,function(l,d){if(l)return f(l);try{var y=d.objectStore(o._dbInfo.storeName);c===null&&(c=void 0);var S=y.put(c,e);d.oncomplete=function(){c===void 0&&(c=null),n(c);},d.onabort=d.onerror=function(){var x=S.error?S.error:S.transaction.error;f(x);};}catch(x){f(x);}});}).catch(f);});return _(i,r),i}function or(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){T(r._dbInfo,h,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=c.delete(e);u.oncomplete=function(){i();},u.onerror=function(){n(l.error);},u.onabort=function(){var d=l.error?l.error:l.transaction.error;n(d);};}catch(d){n(d);}});}).catch(n);});return _(o,t),o}function ir(e){var t=this,r=new m(function(o,i){t.ready().then(function(){T(t._dbInfo,h,function(n,f){if(n)return i(n);try{var u=f.objectStore(t._dbInfo.storeName),c=u.clear();f.oncomplete=function(){o();},f.onabort=f.onerror=function(){var l=c.error?c.error:c.transaction.error;i(l);};}catch(l){i(l);}});}).catch(i);});return _(r,e),r}function ar(e){var t=this,r=new m(function(o,i){t.ready().then(function(){T(t._dbInfo,re,function(n,f){if(n)return i(n);try{var u=f.objectStore(t._dbInfo.storeName),c=u.count();c.onsuccess=function(){o(c.result);},c.onerror=function(){i(c.error);};}catch(l){i(l);}});}).catch(i);});return _(r,e),r}function fr(e,t){var r=this,o=new m(function(i,n){if(e<0){i(null);return}r.ready().then(function(){T(r._dbInfo,re,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=!1,d=c.openKeyCursor();d.onsuccess=function(){var y=d.result;if(!y){i(null);return}e===0||l?i(y.key):(l=!0,y.advance(e));},d.onerror=function(){n(d.error);};}catch(y){n(y);}});}).catch(n);});return _(o,t),o}function ur(e){var t=this,r=new m(function(o,i){t.ready().then(function(){T(t._dbInfo,re,function(n,f){if(n)return i(n);try{var u=f.objectStore(t._dbInfo.storeName),c=u.openKeyCursor(),l=[];c.onsuccess=function(){var d=c.result;if(!d){o(l);return}l.push(d.key),d.continue();},c.onerror=function(){i(c.error);};}catch(d){i(d);}});}).catch(i);});return _(r,e),r}function sr(e,t){t=Z.apply(this,arguments);var r=this.config();e=typeof e!="function"&&e||{},e.name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var o=this,i;if(!e.name)i=m.reject("Invalid arguments");else {var n=e.name===r.name&&o._dbInfo.db,f=n?m.resolve(o._dbInfo.db):ee(e).then(function(u){var c=U[e.name],l=c.forages;c.db=u;for(var d=0;d<l.length;d++)l[d]._dbInfo.db=u;return u});e.storeName?i=f.then(function(u){if(!!u.objectStoreNames.contains(e.storeName)){var c=u.version+1;V(e);var l=U[e.name],d=l.forages;u.close();for(var y=0;y<d.length;y++){var S=d[y];S._dbInfo.db=null,S._dbInfo.version=c;}var x=new m(function(C,K){var W=M.open(e.name,c);W.onerror=function(q){var de=W.result;de.close(),K(q);},W.onupgradeneeded=function(){var q=W.result;q.deleteObjectStore(e.storeName);},W.onsuccess=function(){var q=W.result;q.close(),C(q);};});return x.then(function(C){l.db=C;for(var K=0;K<d.length;K++){var W=d[K];W._dbInfo.db=C,j(W._dbInfo);}}).catch(function(C){throw (Q(e,C)||m.resolve()).catch(function(){}),C})}}):i=f.then(function(u){V(e);var c=U[e.name],l=c.forages;u.close();for(var d=0;d<l.length;d++){var y=l[d];y._dbInfo.db=null;}var S=new m(function(x,C){var K=M.deleteDatabase(e.name);K.onerror=function(){var W=K.result;W&&W.close(),C(K.error);},K.onblocked=function(){console.warn('dropInstance blocked for database "'+e.name+'" until all open connections are closed');},K.onsuccess=function(){var W=K.result;W&&W.close(),x(W);};});return S.then(function(x){c.db=x;for(var C=0;C<l.length;C++){var K=l[C];j(K._dbInfo);}}).catch(function(x){throw (Q(e,x)||m.resolve()).catch(function(){}),x})});}return _(i,t),i}var cr={_driver:"asyncStorage",_initStorage:fe,_support:H(),iterate:ce,getItem:ie,setItem:nr,removeItem:or,clear:ir,length:ar,key:fr,keys:ur,dropInstance:sr};function lr(){return typeof openDatabase=="function"}var te="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",dr="~~local_forage_type~",Be=/^~~local_forage_type~([^~]+)~/,he="__lfsc__:",be=he.length,_e="arbf",we="blob",xe="si08",Oe="ui08",Ce="uic8",Le="si16",Pe="si32",Me="ur16",Fe="ui32",Ue="fl32",Ye="fl64",ze=be+_e.length,We=Object.prototype.toString;function Ke(e){var t=e.length*.75,r=e.length,o,i=0,n,f,u,c;e[e.length-1]==="="&&(t--,e[e.length-2]==="="&&t--);var l=new ArrayBuffer(t),d=new Uint8Array(l);for(o=0;o<r;o+=4)n=te.indexOf(e[o]),f=te.indexOf(e[o+1]),u=te.indexOf(e[o+2]),c=te.indexOf(e[o+3]),d[i++]=n<<2|f>>4,d[i++]=(f&15)<<4|u>>2,d[i++]=(u&3)<<6|c&63;return l}function Ee(e){var t=new Uint8Array(e),r="",o;for(o=0;o<t.length;o+=3)r+=te[t[o]>>2],r+=te[(t[o]&3)<<4|t[o+1]>>4],r+=te[(t[o+1]&15)<<2|t[o+2]>>6],r+=te[t[o+2]&63];return t.length%3===2?r=r.substring(0,r.length-1)+"=":t.length%3===1&&(r=r.substring(0,r.length-2)+"=="),r}function vr(e,t){var r="";if(e&&(r=We.call(e)),e&&(r==="[object ArrayBuffer]"||e.buffer&&We.call(e.buffer)==="[object ArrayBuffer]")){var o,i=he;e instanceof ArrayBuffer?(o=e,i+=_e):(o=e.buffer,r==="[object Int8Array]"?i+=xe:r==="[object Uint8Array]"?i+=Oe:r==="[object Uint8ClampedArray]"?i+=Ce:r==="[object Int16Array]"?i+=Le:r==="[object Uint16Array]"?i+=Me:r==="[object Int32Array]"?i+=Pe:r==="[object Uint32Array]"?i+=Fe:r==="[object Float32Array]"?i+=Ue:r==="[object Float64Array]"?i+=Ye:t(new Error("Failed to get type for BinaryArray"))),t(i+Ee(o));}else if(r==="[object Blob]"){var n=new FileReader;n.onload=function(){var f=dr+e.type+"~"+Ee(this.result);t(he+we+f);},n.readAsArrayBuffer(e);}else try{t(JSON.stringify(e));}catch(f){console.error("Couldn't convert value into a JSON string: ",e),t(null,f);}}function hr(e){if(e.substring(0,be)!==he)return JSON.parse(e);var t=e.substring(ze),r=e.substring(be,ze),o;if(r===we&&Be.test(t)){var i=t.match(Be);o=i[1],t=t.substring(i[0].length);}var n=Ke(t);switch(r){case _e:return n;case we:return $([n],{type:o});case xe:return new Int8Array(n);case Oe:return new Uint8Array(n);case Ce:return new Uint8ClampedArray(n);case Le:return new Int16Array(n);case Me:return new Uint16Array(n);case Pe:return new Int32Array(n);case Fe:return new Uint32Array(n);case Ue:return new Float32Array(n);case Ye:return new Float64Array(n);default:throw new Error("Unkown type: "+r)}}var Ie={serialize:vr,deserialize:hr,stringToBuffer:Ke,bufferToString:Ee};function He(e,t,r,o){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],r,o);}function mr(e){var t=this,r={db:null};if(e)for(var o in e)r[o]=typeof e[o]!="string"?e[o].toString():e[o];var i=new m(function(n,f){try{r.db=openDatabase(r.name,String(r.version),r.description,r.size);}catch(u){return f(u)}r.db.transaction(function(u){He(u,r,function(){t._dbInfo=r,n();},function(c,l){f(l);});},f);});return r.serializer=Ie,i}function ne(e,t,r,o,i,n){e.executeSql(r,o,i,function(f,u){u.code===u.SYNTAX_ERR?f.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],function(c,l){l.rows.length?n(c,u):He(c,t,function(){c.executeSql(r,o,i,n);},n);},n):n(f,u);},n);}function yr(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,"SELECT * FROM "+f.storeName+" WHERE key = ? LIMIT 1",[e],function(c,l){var d=l.rows.length?l.rows.item(0).value:null;d&&(d=f.serializer.deserialize(d)),i(d);},function(c,l){n(l);});});}).catch(n);});return _(o,t),o}function pr(e,t){var r=this,o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,"SELECT * FROM "+f.storeName,[],function(c,l){for(var d=l.rows,y=d.length,S=0;S<y;S++){var x=d.item(S),C=x.value;if(C&&(C=f.serializer.deserialize(C)),C=e(C,x.key,S+1),C!==void 0){i(C);return}}i();},function(c,l){n(l);});});}).catch(n);});return _(o,t),o}function Ve(e,t,r,o){var i=this;e=z(e);var n=new m(function(f,u){i.ready().then(function(){t===void 0&&(t=null);var c=t,l=i._dbInfo;l.serializer.serialize(t,function(d,y){y?u(y):l.db.transaction(function(S){ne(S,l,"INSERT OR REPLACE INTO "+l.storeName+" (key, value) VALUES (?, ?)",[e,d],function(){f(c);},function(x,C){u(C);});},function(S){if(S.code===S.QUOTA_ERR){if(o>0){f(Ve.apply(i,[e,c,r,o-1]));return}u(S);}});});}).catch(u);});return _(n,r),n}function gr(e,t,r){return Ve.apply(this,[e,t,r,1])}function br(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,"DELETE FROM "+f.storeName+" WHERE key = ?",[e],function(){i();},function(c,l){n(l);});});}).catch(n);});return _(o,t),o}function _r(e){var t=this,r=new m(function(o,i){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(f){ne(f,n,"DELETE FROM "+n.storeName,[],function(){o();},function(u,c){i(c);});});}).catch(i);});return _(r,e),r}function wr(e){var t=this,r=new m(function(o,i){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(f){ne(f,n,"SELECT COUNT(key) as c FROM "+n.storeName,[],function(u,c){var l=c.rows.item(0).c;o(l);},function(u,c){i(c);});});}).catch(i);});return _(r,e),r}function Er(e,t){var r=this,o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,"SELECT key FROM "+f.storeName+" WHERE id = ? LIMIT 1",[e+1],function(c,l){var d=l.rows.length?l.rows.item(0).key:null;i(d);},function(c,l){n(l);});});}).catch(n);});return _(o,t),o}function Ir(e){var t=this,r=new m(function(o,i){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(f){ne(f,n,"SELECT key FROM "+n.storeName,[],function(u,c){for(var l=[],d=0;d<c.rows.length;d++)l.push(c.rows.item(d).key);o(l);},function(u,c){i(c);});});}).catch(i);});return _(r,e),r}function Sr(e){return new m(function(t,r){e.transaction(function(o){o.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(i,n){for(var f=[],u=0;u<n.rows.length;u++)f.push(n.rows.item(u).name);t({db:e,storeNames:f});},function(i,n){r(n);});},function(o){r(o);});})}function Ar(e,t){t=Z.apply(this,arguments);var r=this.config();e=typeof e!="function"&&e||{},e.name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var o=this,i;return e.name?i=new m(function(n){var f;e.name===r.name?f=o._dbInfo.db:f=openDatabase(e.name,"","",0),e.storeName?n({db:f,storeNames:[e.storeName]}):n(Sr(f));}).then(function(n){return new m(function(f,u){n.db.transaction(function(c){function l(x){return new m(function(C,K){c.executeSql("DROP TABLE IF EXISTS "+x,[],function(){C();},function(W,q){K(q);});})}for(var d=[],y=0,S=n.storeNames.length;y<S;y++)d.push(l(n.storeNames[y]));m.all(d).then(function(){f();}).catch(function(x){u(x);});},function(c){u(c);});})}):i=m.reject("Invalid arguments"),_(i,t),i}var Rr={_driver:"webSQLStorage",_initStorage:mr,_support:lr(),iterate:pr,getItem:yr,setItem:gr,removeItem:br,clear:_r,length:wr,key:Er,keys:Ir,dropInstance:Ar};function Dr(){try{return typeof localStorage<"u"&&"setItem"in localStorage&&!!localStorage.setItem}catch{return !1}}function Ge(e,t){var r=e.name+"/";return e.storeName!==t.storeName&&(r+=e.storeName+"/"),r}function Nr(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch{return !0}}function Tr(){return !Nr()||localStorage.length>0}function Br(e){var t=this,r={};if(e)for(var o in e)r[o]=e[o];return r.keyPrefix=Ge(e,t._defaultConfig),Tr()?(t._dbInfo=r,r.serializer=Ie,m.resolve()):m.reject()}function xr(e){var t=this,r=t.ready().then(function(){for(var o=t._dbInfo.keyPrefix,i=localStorage.length-1;i>=0;i--){var n=localStorage.key(i);n.indexOf(o)===0&&localStorage.removeItem(n);}});return _(r,e),r}function Or(e,t){var r=this;e=z(e);var o=r.ready().then(function(){var i=r._dbInfo,n=localStorage.getItem(i.keyPrefix+e);return n&&(n=i.serializer.deserialize(n)),n});return _(o,t),o}function Cr(e,t){var r=this,o=r.ready().then(function(){for(var i=r._dbInfo,n=i.keyPrefix,f=n.length,u=localStorage.length,c=1,l=0;l<u;l++){var d=localStorage.key(l);if(d.indexOf(n)===0){var y=localStorage.getItem(d);if(y&&(y=i.serializer.deserialize(y)),y=e(y,d.substring(f),c++),y!==void 0)return y}}});return _(o,t),o}function Lr(e,t){var r=this,o=r.ready().then(function(){var i=r._dbInfo,n;try{n=localStorage.key(e);}catch{n=null;}return n&&(n=n.substring(i.keyPrefix.length)),n});return _(o,t),o}function Pr(e){var t=this,r=t.ready().then(function(){for(var o=t._dbInfo,i=localStorage.length,n=[],f=0;f<i;f++){var u=localStorage.key(f);u.indexOf(o.keyPrefix)===0&&n.push(u.substring(o.keyPrefix.length));}return n});return _(r,e),r}function Mr(e){var t=this,r=t.keys().then(function(o){return o.length});return _(r,e),r}function Fr(e,t){var r=this;e=z(e);var o=r.ready().then(function(){var i=r._dbInfo;localStorage.removeItem(i.keyPrefix+e);});return _(o,t),o}function Ur(e,t,r){var o=this;e=z(e);var i=o.ready().then(function(){t===void 0&&(t=null);var n=t;return new m(function(f,u){var c=o._dbInfo;c.serializer.serialize(t,function(l,d){if(d)u(d);else try{localStorage.setItem(c.keyPrefix+e,l),f(n);}catch(y){(y.name==="QuotaExceededError"||y.name==="NS_ERROR_DOM_QUOTA_REACHED")&&u(y),u(y);}});})});return _(i,r),i}function Yr(e,t){if(t=Z.apply(this,arguments),e=typeof e!="function"&&e||{},!e.name){var r=this.config();e.name=e.name||r.name,e.storeName=e.storeName||r.storeName;}var o=this,i;return e.name?i=new m(function(n){e.storeName?n(Ge(e,o._defaultConfig)):n(e.name+"/");}).then(function(n){for(var f=localStorage.length-1;f>=0;f--){var u=localStorage.key(f);u.indexOf(n)===0&&localStorage.removeItem(u);}}):i=m.reject("Invalid arguments"),_(i,t),i}var zr={_driver:"localStorageWrapper",_initStorage:Br,_support:Dr(),iterate:Cr,getItem:Or,setItem:Ur,removeItem:Fr,clear:xr,length:Mr,key:Lr,keys:Pr,dropInstance:Yr},Wr=function(t,r){return t===r||typeof t=="number"&&typeof r=="number"&&isNaN(t)&&isNaN(r)},Kr=function(t,r){for(var o=t.length,i=0;i<o;){if(Wr(t[i],r))return !0;i++;}return !1},je=Array.isArray||function(e){return Object.prototype.toString.call(e)==="[object Array]"},le={},Xe={},ue={INDEXEDDB:cr,WEBSQL:Rr,LOCALSTORAGE:zr},Hr=[ue.INDEXEDDB._driver,ue.WEBSQL._driver,ue.LOCALSTORAGE._driver],me=["dropInstance"],Se=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(me),Vr={description:"",driver:Hr.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function Gr(e,t){e[t]=function(){var r=arguments;return e.ready().then(function(){return e[t].apply(e,r)})};}function Ae(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var r in t)t.hasOwnProperty(r)&&(je(t[r])?arguments[0][r]=t[r].slice():arguments[0][r]=t[r]);}return arguments[0]}var jr=function(){function e(t){Y(this,e);for(var r in ue)if(ue.hasOwnProperty(r)){var o=ue[r],i=o._driver;this[r]=i,le[i]||this.defineDriver(o);}this._defaultConfig=Ae({},Vr),this._config=Ae({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){});}return e.prototype.config=function(r){if((typeof r>"u"?"undefined":P(r))==="object"){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var o in r){if(o==="storeName"&&(r[o]=r[o].replace(/\W/g,"_")),o==="version"&&typeof r[o]!="number")return new Error("Database version must be a number.");this._config[o]=r[o];}return "driver"in r&&r.driver?this.setDriver(this._config.driver):!0}else return typeof r=="string"?this._config[r]:this._config},e.prototype.defineDriver=function(r,o,i){var n=new m(function(f,u){try{var c=r._driver,l=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!r._driver){u(l);return}for(var d=Se.concat("_initStorage"),y=0,S=d.length;y<S;y++){var x=d[y],C=!Kr(me,x);if((C||r[x])&&typeof r[x]!="function"){u(l);return}}var K=function(){for(var de=function(Jr){return function(){var $r=new Error("Method "+Jr+" is not implemented by the current driver"),Qe=m.reject($r);return _(Qe,arguments[arguments.length-1]),Qe}},Re=0,Qr=me.length;Re<Qr;Re++){var De=me[Re];r[De]||(r[De]=de(De));}};K();var W=function(de){le[c]&&console.info("Redefining LocalForage driver: "+c),le[c]=r,Xe[c]=de,f();};"_support"in r?r._support&&typeof r._support=="function"?r._support().then(W,u):W(!!r._support):W(!0);}catch(q){u(q);}});return B(n,o,i),n},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(r,o,i){var n=le[r]?m.resolve(le[r]):m.reject(new Error("Driver not found."));return B(n,o,i),n},e.prototype.getSerializer=function(r){var o=m.resolve(Ie);return B(o,r),o},e.prototype.ready=function(r){var o=this,i=o._driverSet.then(function(){return o._ready===null&&(o._ready=o._initDriver()),o._ready});return B(i,r,r),i},e.prototype.setDriver=function(r,o,i){var n=this;je(r)||(r=[r]);var f=this._getSupportedDrivers(r);function u(){n._config.driver=n.driver();}function c(y){return n._extend(y),u(),n._ready=n._initStorage(n._config),n._ready}function l(y){return function(){var S=0;function x(){for(;S<y.length;){var C=y[S];return S++,n._dbInfo=null,n._ready=null,n.getDriver(C).then(c).catch(x)}u();var K=new Error("No available storage method found.");return n._driverSet=m.reject(K),n._driverSet}return x()}}var d=this._driverSet!==null?this._driverSet.catch(function(){return m.resolve()}):m.resolve();return this._driverSet=d.then(function(){var y=f[0];return n._dbInfo=null,n._ready=null,n.getDriver(y).then(function(S){n._driver=S._driver,u(),n._wrapLibraryMethodsWithReady(),n._initDriver=l(f);})}).catch(function(){u();var y=new Error("No available storage method found.");return n._driverSet=m.reject(y),n._driverSet}),B(this._driverSet,o,i),this._driverSet},e.prototype.supports=function(r){return !!Xe[r]},e.prototype._extend=function(r){Ae(this,r);},e.prototype._getSupportedDrivers=function(r){for(var o=[],i=0,n=r.length;i<n;i++){var f=r[i];this.supports(f)&&o.push(f);}return o},e.prototype._wrapLibraryMethodsWithReady=function(){for(var r=0,o=Se.length;r<o;r++)Gr(this,Se[r]);},e.prototype.createInstance=function(r){return new e(r)},e}(),Xr=new jr;D.exports=Xr;},{3:3}]},{},[4])(4)});});var rr=$e((ye,er)=>{(function(b,A){typeof ye=="object"&&typeof er<"u"?A(ye):typeof define=="function"&&define.amd?define("localforage-driver-memory",["exports"],A):A(b.LocalforageDriverMemory={});})(typeof self<"u"?self:ye,function(b){var A="localforage-driver-memory";function R(a){var s=typeof Symbol=="function"&&a[Symbol.iterator],v=0;return s?s.call(a):{next:function(){return a&&v>=a.length&&(a=void 0),{value:a&&a[v++],done:!a}}}}function L(a,s){a=a||[],s=s||{};try{return new Blob(a,s)}catch(w){if(w.name!=="TypeError")throw w;for(var v=typeof BlobBuilder<"u"?BlobBuilder:typeof MSBlobBuilder<"u"?MSBlobBuilder:typeof MozBlobBuilder<"u"?MozBlobBuilder:WebKitBlobBuilder,p=new v,g=0;g<a.length;g+=1)p.append(a[g]);return p.getBlob(s.type)}}var D=/^~~local_forage_type~([^~]+)~/,X=9,P=X+4,Y=Object.prototype.toString;function I(a){var s=a.length*.75,v=a.length;a[a.length-1]==="="&&(s--,a[a.length-2]==="="&&s--);for(var p=new ArrayBuffer(s),g=new Uint8Array(p),w=0,T=0;w<v;w+=4){var G="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a[w]),fe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a[w+1]),ie="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a[w+2]),ce="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(a[w+3]);g[T++]=G<<2|fe>>4,g[T++]=(fe&15)<<4|ie>>2,g[T++]=(ie&3)<<6|ce&63;}return p}function M(a){for(var s=new Uint8Array(a),v="",p=0;p<s.length;p+=3)v+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[s[p]>>2],v+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(s[p]&3)<<4|s[p+1]>>4],v+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[(s[p+1]&15)<<2|s[p+2]>>6],v+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[s[p+2]&63];return s.length%3===2?v=v.substring(0,v.length-1)+"=":s.length%3===1&&(v=v.substring(0,v.length-2)+"=="),v}function H(a,s){var v="";if(a&&(v=Y.call(a)),a&&(v==="[object ArrayBuffer]"||a.buffer&&Y.call(a.buffer)==="[object ArrayBuffer]")){var p=void 0,g="__lfsc__:";a instanceof ArrayBuffer?(p=a,g+="arbf"):(p=a.buffer,v==="[object Int8Array]"?g+="si08":v==="[object Uint8Array]"?g+="ui08":v==="[object Uint8ClampedArray]"?g+="uic8":v==="[object Int16Array]"?g+="si16":v==="[object Uint16Array]"?g+="ur16":v==="[object Int32Array]"?g+="si32":v==="[object Uint32Array]"?g+="ui32":v==="[object Float32Array]"?g+="fl32":v==="[object Float64Array]"?g+="fl64":s(new Error("Failed to get type for BinaryArray"))),s(g+M(p));}else if(v==="[object Blob]"){var w=new FileReader;w.onload=function(){var T="~~local_forage_type~"+a.type+"~"+M(this.result);s("__lfsc__:blob"+T);},w.readAsArrayBuffer(a);}else try{s(JSON.stringify(a));}catch(T){console.error("Couldn't convert value into a JSON string: ",a),s(null,T);}}function $(a){if(a.substring(0,X)!=="__lfsc__:")return JSON.parse(a);var s=a.substring(P),v=a.substring(X,P),p;if(v==="blob"&&D.test(s)){var g=s.match(D);p=g[1],s=s.substring(g[0].length);}var w=I(s);switch(v){case"arbf":return w;case"blob":return L([w],{type:p});case"si08":return new Int8Array(w);case"ui08":return new Uint8Array(w);case"uic8":return new Uint8ClampedArray(w);case"si16":return new Int16Array(w);case"ur16":return new Uint16Array(w);case"si32":return new Int32Array(w);case"ui32":return new Uint32Array(w);case"fl32":return new Float32Array(w);case"fl64":return new Float64Array(w);default:throw new Error("Unkown type: "+v)}}function m(a){var s,v;if(a===null||typeof a!="object"||"isActiveClone"in a)return a;var p=a instanceof Date?new Date(a):a.constructor();try{for(var g=R(Object.keys(a)),w=g.next();!w.done;w=g.next()){var T=w.value;Object.prototype.hasOwnProperty.call(a,T)&&(a.isActiveClone=null,p[T]=m(a[T]),delete a.isActiveClone);}}catch(G){s={error:G};}finally{try{w&&!w.done&&(v=g.return)&&v.call(g);}finally{if(s)throw s.error}}return p}function _(a,s){return (a.name||s.name)+"/"+(a.storeName||s.storeName)+"/"}function B(a,s){s&&a.then(function(v){s(null,v);},function(v){s(v);});}function z(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];if(arguments.length&&typeof arguments[arguments.length-1]=="function")return arguments[arguments.length-1]}function Z(a,s){var v=this;if(s=z.apply(this,arguments),a=typeof a!="function"&&a||{},!a.name){var p=this.config();a.name=a.name||p.name,a.storeName=a.storeName||p.storeName;}var g;return a.name?g=new Promise(function(w){a.storeName?w(_(a,v._defaultConfig)):w(a.name+"/");}):g=Promise.reject("Invalid arguments"),{promise:g,callback:s}}function F(a){return typeof a!="string"&&(console.warn(a+" used as a key, but it is not a string."),a=String(a)),a}var k={bufferToString:M,deserialize:$,serialize:H,stringToBuffer:I},U={},ae=function(){function a(s){this.kp=s,this.data={};}return a.resolve=function(s){return U[s]||(U[s]=new a(s)),U[s]},a.prototype.clear=function(){this.data={};},a.prototype.drop=function(){this.clear(),delete U[this.kp];},a.prototype.get=function(s){return this.data[s]},a.prototype.key=function(s){return this.keys()[s]},a.prototype.keys=function(){return Object.keys(this.data)},a.prototype.rm=function(s){delete this.data[s];},a.prototype.set=function(s,v){this.data[s]=v;},a}();function re(a){var s=a?m(a):{},v=_(s,this._defaultConfig),p=ae.resolve(v);return this._dbInfo=s,this._dbInfo.serializer=k,this._dbInfo.keyPrefix=v,this._dbInfo.mStore=p,Promise.resolve()}function h(a){var s=this,v=this.ready().then(function(){s._dbInfo.mStore.clear();});return B(v,a),v}function N(a,s){var v=Z.apply(this,arguments),p=v.promise,g=v.callback,w=p.then(function(T){ae.resolve(T).drop();});return B(w,g),p}function E(a,s){var v=this;a=F(a);var p=this.ready().then(function(){var g=v._dbInfo.mStore.get(a);return g==null?null:v._dbInfo.serializer.deserialize(g)});return B(p,s),p}function O(a,s){var v=this,p=this.ready().then(function(){for(var g=v._dbInfo.mStore,w=g.keys(),T=0;T<w.length;T++){var G=g.get(w[T]);if(G&&(G=v._dbInfo.serializer.deserialize(G)),G=a(G,w[T],T+1),G!==void 0)return G}});return B(p,s),p}function V(a,s){var v=this,p=this.ready().then(function(){var g;try{g=v._dbInfo.mStore.key(a),g===void 0&&(g=null);}catch{g=null;}return g});return B(p,s),p}function j(a){var s=this,v=this.ready().then(function(){return s._dbInfo.mStore.keys()});return B(v,a),v}function Q(a){var s=this.keys().then(function(v){return v.length});return B(s,a),s}function J(a,s){var v=this;a=F(a);var p=this.ready().then(function(){v._dbInfo.mStore.rm(a);});return B(p,s),p}function ee(a,s,v){var p=this;a=F(a);var g=this.ready().then(function(){s===void 0&&(s=null);var w=s;return new Promise(function(T,G){p._dbInfo.serializer.serialize(s,function(fe,ie){if(ie)G(ie);else try{p._dbInfo.mStore.set(a,fe),T(w);}catch(ce){G(ce);}});})});return B(g,v),g}var oe=!0;b._support=oe,b._driver=A,b._initStorage=re,b.clear=h,b.dropInstance=N,b.getItem=E,b.iterate=O,b.key=V,b.keys=j,b.length=Q,b.removeItem=J,b.setItem=ee,Object.defineProperty(b,"__esModule",{value:!0});});});var ge=Ze(ke()),Te=Ze(rr());var at={display:"none",position:"fixed",top:"0",right:"0",width:"100%",height:"100%",borderRadius:"0",border:"none",zIndex:"2147483647"};function ft(b){for(let[A,R]of Object.entries(at))b.style[A]=R;}function ut(b){let A=[].slice.call(document.querySelectorAll(".magic-iframe"));return Boolean(A.find(R=>R.src.includes(b)))}var pe=class extends Se{constructor(){super(...arguments);this.activeElement=null;}init(){this.test="hello",this.iframe=new Promise(R=>{let L=()=>{if(ut(encodeURIComponent(this.parameters)))mr().log();else {let D=document.createElement("iframe");D.classList.add("magic-iframe"),D.dataset.magicIframeLabel=Ae(this.endpoint).host,D.title="Secure Modal",D.src=Ae(`/send?params=${encodeURIComponent(this.parameters)}`,this.endpoint).href,ft(D),document.body.appendChild(D),R(D);}};["loaded","interactive","complete"].includes(document.readyState)?L():window.addEventListener("load",L,!1);}),window.addEventListener("message",R=>{var L;if(R.origin===this.endpoint&&R.data&&R.data.msgType&&this.messageHandlers.size){R.data.response=(L=R.data.response)!=null?L:{};for(let D of this.messageHandlers.values())D(R);}});}showOverlay(){return se(this,null,function*(){let R=yield this.iframe;R.style.display="block",this.activeElement=document.activeElement,R.focus();})}hideOverlay(){return se(this,null,function*(){var L;let R=yield this.iframe;R.style.display="none",(L=this.activeElement)!=null&&L.focus&&this.activeElement.focus(),this.activeElement=null;})}_post(R){return se(this,null,function*(){let L=yield this.iframe;if(L&&L.contentWindow)L.contentWindow.postMessage(R,this.endpoint);else throw dr()})}};var bt=In(Te$1,{platform:"web",sdkName:"magic-sdk",version:"13.6.2",defaultEndpoint:"https://auth.magic.link/",ViewController:pe,configureStorage:()=>se(void 0,null,function*(){let b=ge.default.createInstance({name:"MagicAuthLocalStorageDB",storeName:"MagicAuthLocalStorage"});return yield b.defineDriver(Te),yield b.setDriver([ge.default.INDEXEDDB,ge.default.LOCALSTORAGE,Te._driver]),b})});

    var i=(t=>(t.LoginWithOIDC="magic_auth_login_with_oidc",t))(i||{});var o=class extends w.Internal{constructor(){super(...arguments);this.name="openid";this.config={};}loginWithOIDC(t){let n=this.utils.createJsonRpcRequestPayload("magic_auth_login_with_oidc",[t]);return this.request(n)}};

    class MagicAdapter {
        magicClient;
        config;
        constructor(config) {
            this.config = config;
            this.magicClient = new bt(config.magicPublishableApiKey, {
                network: config.network,
                extensions: [new o()],
            });
        }
        async login(idToken) {
            return withPassportError(async () => {
                await this.magicClient.openid.loginWithOIDC({
                    jwt: idToken,
                    providerId: this.config.magicProviderId,
                });
                return new lib$w.ethers.providers.Web3Provider(this.magicClient
                    .rpcProvider);
            }, PassportErrorType.WALLET_CONNECTION_ERROR);
        }
        getProvider() {
            return new lib$w.ethers.providers.Web3Provider(this.magicClient
                .rpcProvider);
        }
    }

    // used to sign message with L1 keys. Used for registration
    function serializeEthSignature(sig) {
        // This is because golang appends a recovery param
        // https://github.com/ethers-io/ethers.js/issues/823
        return addHexPrefix_1(padLeft_1(sig.r.toString(16), 64)
            + padLeft_1(sig.s.toString(16), 64)
            + padLeft_1(sig.recoveryParam?.toString(16) || '', 2));
    }
    function importRecoveryParam(v) {
        const isValidBigNumber = new BN$a(v, 16).cmp(new BN$a(27)) !== -1
            ? new BN$a(v, 16).sub(new BN$a(27)).toNumber()
            : new BN$a(v, 16).toNumber();
        return v.trim()
            ? isValidBigNumber
            : undefined;
    }
    // used chained with serializeEthSignature. serializeEthSignature(deserializeSignature(...))
    function deserializeSignature(sig, size = 64) {
        const removedHexPrefixSig = removeHexPrefix_1(sig);
        return {
            r: new BN$a(removedHexPrefixSig.substring(0, size), 'hex'),
            s: new BN$a(removedHexPrefixSig.substring(size, size * 2), 'hex'),
            recoveryParam: importRecoveryParam(removedHexPrefixSig.substring(size * 2, size * 2 + 2)),
        };
    }
    async function signRaw(payload, signer) {
        const signature = deserializeSignature(await signer.signMessage(payload));
        return serializeEthSignature(signature);
    }

    /**
     * Helper method to convert token type to a SignableToken type
     * @param token - the token type to convert to a SignableToken type
     * @returns the converted SignableToken
     */
    function convertToSignableToken(token) {
        switch (token.type) {
            case 'ERC721':
                return {
                    type: 'ERC721',
                    data: {
                        token_id: token.tokenId,
                        token_address: token.tokenAddress,
                    },
                };
            case 'ERC20':
                return {
                    type: 'ERC20',
                    data: {
                        token_address: token.tokenAddress,
                    },
                };
            case 'ETH':
            default:
                return {
                    type: 'ETH',
                    data: {
                        decimals: 18,
                    },
                };
        }
    }

    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }

    // utils is a library of generic helper functions non-specific to axios

    const {toString} = Object.prototype;
    const {getPrototypeOf} = Object;

    const kindOf = (cache => thing => {
        const str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(Object.create(null));

    const kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type
    };

    const typeOfTest = type => thing => typeof thing === type;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     *
     * @returns {boolean} True if value is an Array, otherwise false
     */
    const {isArray} = Array;

    /**
     * Determine if a value is undefined
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    const isUndefined = typeOfTest('undefined');

    /**
     * Determine if a value is a Buffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    const isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      let result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a String, otherwise false
     */
    const isString = typeOfTest('string');

    /**
     * Determine if a value is a Function
     *
     * @param {*} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    const isFunction = typeOfTest('function');

    /**
     * Determine if a value is a Number
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Number, otherwise false
     */
    const isNumber = typeOfTest('number');

    /**
     * Determine if a value is an Object
     *
     * @param {*} thing The value to test
     *
     * @returns {boolean} True if value is an Object, otherwise false
     */
    const isObject = (thing) => thing !== null && typeof thing === 'object';

    /**
     * Determine if a value is a Boolean
     *
     * @param {*} thing The value to test
     * @returns {boolean} True if value is a Boolean, otherwise false
     */
    const isBoolean = thing => thing === true || thing === false;

    /**
     * Determine if a value is a plain Object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a plain Object, otherwise false
     */
    const isPlainObject = (val) => {
      if (kindOf(val) !== 'object') {
        return false;
      }

      const prototype = getPrototypeOf(val);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };

    /**
     * Determine if a value is a Date
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Date, otherwise false
     */
    const isDate = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a File, otherwise false
     */
    const isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    const isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a File, otherwise false
     */
    const isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Stream
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    const isStream = (val) => isObject(val) && isFunction(val.pipe);

    /**
     * Determine if a value is a FormData
     *
     * @param {*} thing The value to test
     *
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    const isFormData = (thing) => {
      let kind;
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) || (
          isFunction(thing.append) && (
            (kind = kindOf(thing)) === 'formdata' ||
            // detect form-data instance
            (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
          )
        )
      )
    };

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    const isURLSearchParams = kindOfTest('URLSearchParams');

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     *
     * @returns {String} The String freed of excess whitespace
     */
    const trim = (str) => str.trim ?
      str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     *
     * @param {Boolean} [allOwnKeys = false]
     * @returns {any}
     */
    function forEach(obj, fn, {allOwnKeys = false} = {}) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      let i;
      let l;

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;

        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }

    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }

    const _global = (() => {
      /*eslint no-undef:0*/
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
    })();

    const isContextDefined = (context) => !isUndefined(context) && context !== _global;

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     *
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      const {caseless} = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };

      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     *
     * @param {Boolean} [allOwnKeys]
     * @returns {Object} The resulting value of object a
     */
    const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, {allOwnKeys});
      return a;
    };

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     *
     * @returns {string} content value without BOM
     */
    const stripBOM = (content) => {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    };

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     *
     * @returns {void}
     */
    const inherits = (constructor, superConstructor, props, descriptors) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, 'super', {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function|Boolean} [filter]
     * @param {Function} [propFilter]
     *
     * @returns {Object}
     */
    const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};

      destObj = destObj || {};
      // eslint-disable-next-line no-eq-null,eqeqeq
      if (sourceObj == null) return destObj;

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    };

    /**
     * Determines whether a string ends with the characters of a specified string
     *
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     *
     * @returns {boolean}
     */
    const endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };


    /**
     * Returns new array from array like object or null if failed
     *
     * @param {*} [thing]
     *
     * @returns {?Array}
     */
    const toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };

    /**
     * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
     * thing passed in is an instance of Uint8Array
     *
     * @param {TypedArray}
     *
     * @returns {Array}
     */
    // eslint-disable-next-line func-names
    const isTypedArray = (TypedArray => {
      // eslint-disable-next-line func-names
      return thing => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

    /**
     * For each entry in the object, call the function with the key and value.
     *
     * @param {Object<any, any>} obj - The object to iterate over.
     * @param {Function} fn - The function to call for each entry.
     *
     * @returns {void}
     */
    const forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];

      const iterator = generator.call(obj);

      let result;

      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };

    /**
     * It takes a regular expression and a string, and returns an array of all the matches
     *
     * @param {string} regExp - The regular expression to match against.
     * @param {string} str - The string to search.
     *
     * @returns {Array<boolean>}
     */
    const matchAll = (regExp, str) => {
      let matches;
      const arr = [];

      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }

      return arr;
    };

    /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
    const isHTMLForm = kindOfTest('HTMLFormElement');

    const toCamelCase = str => {
      return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };

    /* Creating a function that will check if an object has a property. */
    const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

    /**
     * Determine if a value is a RegExp object
     *
     * @param {*} val The value to test
     *
     * @returns {boolean} True if value is a RegExp object, otherwise false
     */
    const isRegExp = kindOfTest('RegExp');

    const reduceDescriptors = (obj, reducer) => {
      const descriptors = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};

      forEach(descriptors, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });

      Object.defineProperties(obj, reducedDescriptors);
    };

    /**
     * Makes all methods read-only
     * @param {Object} obj
     */

    const freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        // skip restricted props in strict mode
        if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
          return false;
        }

        const value = obj[name];

        if (!isFunction(value)) return;

        descriptor.enumerable = false;

        if ('writable' in descriptor) {
          descriptor.writable = false;
          return;
        }

        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error('Can not rewrite read-only method \'' + name + '\'');
          };
        }
      });
    };

    const toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};

      const define = (arr) => {
        arr.forEach(value => {
          obj[value] = true;
        });
      };

      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

      return obj;
    };

    const noop = () => {};

    const toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };

    const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

    const DIGIT = '0123456789';

    const ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };

    const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = '';
      const {length} = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length|0];
      }

      return str;
    };

    /**
     * If the thing is a FormData object, return true, otherwise return false.
     *
     * @param {unknown} thing - The thing to check.
     *
     * @returns {boolean}
     */
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
    }

    const toJSONObject = (obj) => {
      const stack = new Array(10);

      const visit = (source, i) => {

        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }

          if(!('toJSON' in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};

            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });

            stack[i] = undefined;

            return target;
          }
        }

        return source;
      };

      return visit(obj, 0);
    };

    const isAsyncFn = kindOfTest('AsyncFunction');

    const isThenable = (thing) =>
      thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

    var utils = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     *
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = (new Error()).stack;
      }

      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }

    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });

    const prototype$1 = AxiosError.prototype;
    const descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED',
      'ERR_NOT_SUPPORT',
      'ERR_INVALID_URL'
    // eslint-disable-next-line func-names
    ].forEach(code => {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);

      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, prop => {
        return prop !== 'isAxiosError';
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.cause = error;

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    // eslint-disable-next-line strict
    var httpAdapter = null;

    /**
     * Determines if the given thing is a array or js object.
     *
     * @param {string} thing - The object or array to be visited.
     *
     * @returns {boolean}
     */
    function isVisitable(thing) {
      return utils.isPlainObject(thing) || utils.isArray(thing);
    }

    /**
     * It removes the brackets from the end of a string
     *
     * @param {string} key - The key of the parameter.
     *
     * @returns {string} the key without the brackets.
     */
    function removeBrackets(key) {
      return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
    }

    /**
     * It takes a path, a key, and a boolean, and returns a string
     *
     * @param {string} path - The path to the current key.
     * @param {string} key - The key of the current object being iterated over.
     * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
     *
     * @returns {string} The path to the current key.
     */
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        // eslint-disable-next-line no-param-reassign
        token = removeBrackets(token);
        return !dots && i ? '[' + token + ']' : token;
      }).join(dots ? '.' : '');
    }

    /**
     * If the array is an array and none of its elements are visitable, then it's a flat array.
     *
     * @param {Array<any>} arr - The array to check
     *
     * @returns {boolean}
     */
    function isFlatArray(arr) {
      return utils.isArray(arr) && !arr.some(isVisitable);
    }

    const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });

    /**
     * Convert a data object to FormData
     *
     * @param {Object} obj
     * @param {?Object} [formData]
     * @param {?Object} [options]
     * @param {Function} [options.visitor]
     * @param {Boolean} [options.metaTokens = true]
     * @param {Boolean} [options.dots = false]
     * @param {?Boolean} [options.indexes = false]
     *
     * @returns {Object}
     **/

    /**
     * It converts an object into a FormData object
     *
     * @param {Object<any, any>} obj - The object to convert to form data.
     * @param {string} formData - The FormData object to append to.
     * @param {Object<string, any>} options
     *
     * @returns
     */
    function toFormData(obj, formData, options) {
      if (!utils.isObject(obj)) {
        throw new TypeError('target must be an object');
      }

      // eslint-disable-next-line no-param-reassign
      formData = formData || new (FormData)();

      // eslint-disable-next-line no-param-reassign
      options = utils.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        // eslint-disable-next-line no-eq-null,eqeqeq
        return !utils.isUndefined(source[option]);
      });

      const metaTokens = options.metaTokens;
      // eslint-disable-next-line no-use-before-define
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
      const useBlob = _Blob && utils.isSpecCompliantForm(formData);

      if (!utils.isFunction(visitor)) {
        throw new TypeError('visitor must be a function');
      }

      function convertValue(value) {
        if (value === null) return '';

        if (utils.isDate(value)) {
          return value.toISOString();
        }

        if (!useBlob && utils.isBlob(value)) {
          throw new AxiosError('Blob is not supported. Use a Buffer instead.');
        }

        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer$g.from(value);
        }

        return value;
      }

      /**
       * Default visitor.
       *
       * @param {*} value
       * @param {String|Number} key
       * @param {Array<String|Number>} path
       * @this {FormData}
       *
       * @returns {boolean} return true to visit the each prop of the value recursively
       */
      function defaultVisitor(value, key, path) {
        let arr = value;

        if (value && !path && typeof value === 'object') {
          if (utils.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            key = metaTokens ? key : key.slice(0, -2);
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (
            (utils.isArray(value) && isFlatArray(value)) ||
            ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))
            )) {
            // eslint-disable-next-line no-param-reassign
            key = removeBrackets(key);

            arr.forEach(function each(el, index) {
              !(utils.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
                convertValue(el)
              );
            });
            return false;
          }
        }

        if (isVisitable(value)) {
          return true;
        }

        formData.append(renderKey(path, key, dots), convertValue(value));

        return false;
      }

      const stack = [];

      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });

      function build(value, path) {
        if (utils.isUndefined(value)) return;

        if (stack.indexOf(value) !== -1) {
          throw Error('Circular reference detected in ' + path.join('.'));
        }

        stack.push(value);

        utils.forEach(value, function each(el, key) {
          const result = !(utils.isUndefined(el) || el === null) && visitor.call(
            formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers
          );

          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });

        stack.pop();
      }

      if (!utils.isObject(obj)) {
        throw new TypeError('data must be an object');
      }

      build(obj);

      return formData;
    }

    /**
     * It encodes a string by replacing all characters that are not in the unreserved set with
     * their percent-encoded equivalents
     *
     * @param {string} str - The string to encode.
     *
     * @returns {string} The encoded string.
     */
    function encode$1(str) {
      const charMap = {
        '!': '%21',
        "'": '%27',
        '(': '%28',
        ')': '%29',
        '~': '%7E',
        '%20': '+',
        '%00': '\x00'
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }

    /**
     * It takes a params object and converts it to a FormData object
     *
     * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
     * @param {Object<string, any>} options - The options object passed to the Axios constructor.
     *
     * @returns {void}
     */
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];

      params && toFormData(params, this, options);
    }

    const prototype = AxiosURLSearchParams.prototype;

    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };

    prototype.toString = function toString(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;

      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + '=' + _encode(pair[1]);
      }, '').join('&');
    };

    /**
     * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
     * URI encoded counterparts
     *
     * @param {string} val The value to be encoded.
     *
     * @returns {string} The encoded value.
     */
    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @param {?object} options
     *
     * @returns {string} The formatted url
     */
    function buildURL(url, params, options) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }
      
      const _encode = options && options.encode || encode;

      const serializeFn = options && options.serialize;

      let serializedParams;

      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils.isURLSearchParams(params) ?
          params.toString() :
          new AxiosURLSearchParams(params, options).toString(_encode);
      }

      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");

        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    }

    class InterceptorManager {
      constructor() {
        this.handlers = [];
      }

      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }

      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }

      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }

      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    }

    var InterceptorManager$1 = InterceptorManager;

    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

    var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

    var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     *
     * @returns {boolean}
     */
    const isStandardBrowserEnv = (() => {
      let product;
      if (typeof navigator !== 'undefined' && (
        (product = navigator.product) === 'ReactNative' ||
        product === 'NativeScript' ||
        product === 'NS')
      ) {
        return false;
      }

      return typeof window !== 'undefined' && typeof document !== 'undefined';
    })();

    /**
     * Determine if we're running in a standard browser webWorker environment
     *
     * Although the `isStandardBrowserEnv` method indicates that
     * `allows axios to run in a web worker`, the WebWorker will still be
     * filtered out due to its judgment standard
     * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
     * This leads to a problem when axios post `FormData` in webWorker
     */
     const isStandardBrowserWebWorkerEnv = (() => {
      return (
        typeof WorkerGlobalScope !== 'undefined' &&
        // eslint-disable-next-line no-undef
        self instanceof WorkerGlobalScope &&
        typeof self.importScripts === 'function'
      );
    })();


    var platform = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      isStandardBrowserEnv,
      isStandardBrowserWebWorkerEnv,
      protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
    };

    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils.isBuffer(value)) {
            this.append(key, value.toString('base64'));
            return false;
          }

          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }

    /**
     * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
     *
     * @param {string} name - The name of the property to get.
     *
     * @returns An array of strings.
     */
    function parsePropPath(name) {
      // foo[x][y][z]
      // foo.x.y.z
      // foo-x-y-z
      // foo x y z
      return utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
        return match[0] === '[]' ? '' : match[1] || match[0];
      });
    }

    /**
     * Convert an array to an object.
     *
     * @param {Array<any>} arr - The array to convert to an object.
     *
     * @returns An object with the same keys and values as the array.
     */
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }

    /**
     * It takes a FormData object and returns a JavaScript object
     *
     * @param {string} formData The FormData object to convert to JSON.
     *
     * @returns {Object<string, any> | null} The converted object.
     */
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils.isArray(target) ? target.length : name;

        if (isLast) {
          if (utils.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }

          return !isNumericKey;
        }

        if (!target[name] || !utils.isObject(target[name])) {
          target[name] = [];
        }

        const result = buildPath(path, value, target[name], index);

        if (result && utils.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }

        return !isNumericKey;
      }

      if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
        const obj = {};

        utils.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });

        return obj;
      }

      return null;
    }

    const DEFAULT_CONTENT_TYPE = {
      'Content-Type': undefined
    };

    /**
     * It takes a string, tries to parse it, and if it fails, it returns the stringified version
     * of the input
     *
     * @param {any} rawValue - The value to be stringified.
     * @param {Function} parser - A function that parses a string into a JavaScript object.
     * @param {Function} encoder - A function that takes a value and returns a string.
     *
     * @returns {string} A stringified version of the rawValue.
     */
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    const defaults = {

      transitional: transitionalDefaults,

      adapter: ['xhr', 'http'],

      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || '';
        const hasJSONContentType = contentType.indexOf('application/json') > -1;
        const isObjectPayload = utils.isObject(data);

        if (isObjectPayload && utils.isHTMLForm(data)) {
          data = new FormData(data);
        }

        const isFormData = utils.isFormData(data);

        if (isFormData) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }

        if (utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
          return data.toString();
        }

        let isFileList;

        if (isObjectPayload) {
          if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }

          if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
            const _FormData = this.env && this.env.FormData;

            return toFormData(
              isFileList ? {'files[]': data} : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }

        if (isObjectPayload || hasJSONContentType ) {
          headers.setContentType('application/json', false);
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === 'json';

        if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;

          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults$1 = defaults;

    // RawAxiosHeaders whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    const ignoreDuplicateOf = utils.toObjectSet([
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ]);

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} rawHeaders Headers needing to be parsed
     *
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = rawHeaders => {
      const parsed = {};
      let key;
      let val;
      let i;

      rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
        i = line.indexOf(':');
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();

        if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
          return;
        }

        if (key === 'set-cookie') {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      });

      return parsed;
    };

    const $internals = Symbol('internals');

    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }

    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }

      return utils.isArray(value) ? value.map(normalizeValue) : String(value);
    }

    function parseTokens(str) {
      const tokens = Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;

      while ((match = tokensRE.exec(str))) {
        tokens[match[1]] = match[2];
      }

      return tokens;
    }

    const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils.isFunction(filter)) {
        return filter.call(this, value, header);
      }

      if (isHeaderNameFilter) {
        value = header;
      }

      if (!utils.isString(value)) return;

      if (utils.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }

      if (utils.isRegExp(filter)) {
        return filter.test(value);
      }
    }

    function formatHeader(header) {
      return header.trim()
        .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
          return char.toUpperCase() + str;
        });
    }

    function buildAccessors(obj, header) {
      const accessorName = utils.toCamelCase(' ' + header);

      ['get', 'set', 'has'].forEach(methodName => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }

    class AxiosHeaders {
      constructor(headers) {
        headers && this.set(headers);
      }

      set(header, valueOrRewrite, rewrite) {
        const self = this;

        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);

          if (!lHeader) {
            throw new Error('header name must be a non-empty string');
          }

          const key = utils.findKey(self, lHeader);

          if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
            self[key || _header] = normalizeValue(_value);
          }
        }

        const setHeaders = (headers, _rewrite) =>
          utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

        if (utils.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }

        return this;
      }

      get(header, parser) {
        header = normalizeHeader(header);

        if (header) {
          const key = utils.findKey(this, header);

          if (key) {
            const value = this[key];

            if (!parser) {
              return value;
            }

            if (parser === true) {
              return parseTokens(value);
            }

            if (utils.isFunction(parser)) {
              return parser.call(this, value, key);
            }

            if (utils.isRegExp(parser)) {
              return parser.exec(value);
            }

            throw new TypeError('parser must be boolean|regexp|function');
          }
        }
      }

      has(header, matcher) {
        header = normalizeHeader(header);

        if (header) {
          const key = utils.findKey(this, header);

          return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }

        return false;
      }

      delete(header, matcher) {
        const self = this;
        let deleted = false;

        function deleteHeader(_header) {
          _header = normalizeHeader(_header);

          if (_header) {
            const key = utils.findKey(self, _header);

            if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
              delete self[key];

              deleted = true;
            }
          }
        }

        if (utils.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }

        return deleted;
      }

      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;

        while (i--) {
          const key = keys[i];
          if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }

        return deleted;
      }

      normalize(format) {
        const self = this;
        const headers = {};

        utils.forEach(this, (value, header) => {
          const key = utils.findKey(headers, header);

          if (key) {
            self[key] = normalizeValue(value);
            delete self[header];
            return;
          }

          const normalized = format ? formatHeader(header) : String(header).trim();

          if (normalized !== header) {
            delete self[header];
          }

          self[normalized] = normalizeValue(value);

          headers[normalized] = true;
        });

        return this;
      }

      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }

      toJSON(asStrings) {
        const obj = Object.create(null);

        utils.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);
        });

        return obj;
      }

      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }

      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
      }

      get [Symbol.toStringTag]() {
        return 'AxiosHeaders';
      }

      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }

      static concat(first, ...targets) {
        const computed = new this(first);

        targets.forEach((target) => computed.set(target));

        return computed;
      }

      static accessor(header) {
        const internals = this[$internals] = (this[$internals] = {
          accessors: {}
        });

        const accessors = internals.accessors;
        const prototype = this.prototype;

        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);

          if (!accessors[lHeader]) {
            buildAccessors(prototype, _header);
            accessors[lHeader] = true;
          }
        }

        utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

        return this;
      }
    }

    AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

    utils.freezeMethods(AxiosHeaders.prototype);
    utils.freezeMethods(AxiosHeaders);

    var AxiosHeaders$1 = AxiosHeaders;

    /**
     * Transform the data for a request or a response
     *
     * @param {Array|Function} fns A single function or Array of functions
     * @param {?Object} response The response object
     *
     * @returns {*} The resulting transformed data
     */
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;

      utils.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
      });

      headers.normalize();

      return data;
    }

    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @param {string=} message The message.
     * @param {Object=} config The config.
     * @param {Object=} request The request.
     *
     * @returns {CanceledError} The created error.
     */
    function CanceledError(message, config, request) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
      this.name = 'CanceledError';
    }

    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     *
     * @returns {object} The response.
     */
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          'Request failed with status code ' + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }

    var cookies = platform.isStandardBrowserEnv ?

    // Standard browser envs support document.cookie
      (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));

            if (utils.isNumber(expires)) {
              cookie.push('expires=' + new Date(expires).toGMTString());
            }

            if (utils.isString(path)) {
              cookie.push('path=' + path);
            }

            if (utils.isString(domain)) {
              cookie.push('domain=' + domain);
            }

            if (secure === true) {
              cookie.push('secure');
            }

            document.cookie = cookie.join('; ');
          },

          read: function read(name) {
            const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return (match ? decodeURIComponent(match[3]) : null);
          },

          remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
          }
        };
      })() :

    // Non standard browser env (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return {
          write: function write() {},
          read: function read() { return null; },
          remove: function remove() {}
        };
      })();

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     *
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     *
     * @returns {string} The combined URL
     */
    function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    }

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     *
     * @returns {string} The combined full path
     */
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }

    var isURLSameOrigin = platform.isStandardBrowserEnv ?

    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement('a');
        let originURL;

        /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
        function resolveURL(url) {
          let href = url;

          if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href);

          // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
              urlParsingNode.pathname :
              '/' + urlParsingNode.pathname
          };
        }

        originURL = resolveURL(window.location.href);

        /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
        return function isURLSameOrigin(requestURL) {
          const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
          return (parsed.protocol === originURL.protocol &&
              parsed.host === originURL.host);
        };
      })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })();

    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    }

    /**
     * Calculate data maxRate
     * @param {Number} [samplesCount= 10]
     * @param {Number} [min= 1000]
     * @returns {Function}
     */
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;

      min = min !== undefined ? min : 1000;

      return function push(chunkLength) {
        const now = Date.now();

        const startedAt = timestamps[tail];

        if (!firstSampleTS) {
          firstSampleTS = now;
        }

        bytes[head] = chunkLength;
        timestamps[head] = now;

        let i = tail;
        let bytesCount = 0;

        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }

        head = (head + 1) % samplesCount;

        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }

        if (now - firstSampleTS < min) {
          return;
        }

        const passed = startedAt && now - startedAt;

        return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
      };
    }

    function progressEventReducer(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);

      return e => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : undefined;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;

        bytesNotified = loaded;

        const data = {
          loaded,
          total,
          progress: total ? (loaded / total) : undefined,
          bytes: progressBytes,
          rate: rate ? rate : undefined,
          estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
          event: e
        };

        data[isDownloadStream ? 'download' : 'upload'] = true;

        listener(data);
      };
    }

    const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

    var xhrAdapter = isXHRAdapterSupported && function (config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils.isFormData(requestData)) {
          if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false); // Let the browser set it
          } else {
            requestHeaders.setContentType('multipart/form-data;', false); // mobile/desktop app frameworks
          }
        }

        let request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          const username = config.auth.username || '';
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
        }

        const fullPath = buildFullPath(config.baseURL, config.url);

        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          const responseHeaders = AxiosHeaders$1.from(
            'getAllResponseHeaders' in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
            request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          const transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (platform.isStandardBrowserEnv) {
          // Add xsrf header
          const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))
            && config.xsrfCookieName && cookies.read(config.xsrfCookieName);

          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }

        // Remove Content-Type if data is undefined
        requestData === undefined && requestHeaders.setContentType(null);

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = cancel => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        const protocol = parseProtocol(fullPath);

        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData || null);
      });
    };

    const knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter
    };

    utils.forEach(knownAdapters, (fn, value) => {
      if(fn) {
        try {
          Object.defineProperty(fn, 'name', {value});
        } catch (e) {
          // eslint-disable-next-line no-empty
        }
        Object.defineProperty(fn, 'adapterName', {value});
      }
    });

    var adapters = {
      getAdapter: (adapters) => {
        adapters = utils.isArray(adapters) ? adapters : [adapters];

        const {length} = adapters;
        let nameOrAdapter;
        let adapter;

        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters[i];
          if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {
            break;
          }
        }

        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError(
              `Adapter ${nameOrAdapter} is not supported by the environment`,
              'ERR_NOT_SUPPORT'
            );
          }

          throw new Error(
            utils.hasOwnProp(knownAdapters, nameOrAdapter) ?
              `Adapter '${nameOrAdapter}' is not available in the build` :
              `Unknown adapter '${nameOrAdapter}'`
          );
        }

        if (!utils.isFunction(adapter)) {
          throw new TypeError('adapter is not a function');
        }

        return adapter;
      },
      adapters: knownAdapters
    };

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     *
     * @param {Object} config The config that is to be used for the request
     *
     * @returns {void}
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      config.headers = AxiosHeaders$1.from(config.headers);

      // Transform request data
      config.data = transformData.call(
        config,
        config.transformRequest
      );

      if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
        config.headers.setContentType('application/x-www-form-urlencoded', false);
      }

      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );

        response.headers = AxiosHeaders$1.from(response.headers);

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }

        return Promise.reject(reason);
      });
    }

    const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     *
     * @returns {Object} New object resulting from merging config2 to config1
     */
    function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      const config = {};

      function getMergedValue(target, source, caseless) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge.call({caseless}, target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(a, b, caseless) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(undefined, a, caseless);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(undefined, b);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(undefined, b);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(undefined, a);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(undefined, a);
        }
      }

      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };

      utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge(config1[prop], config2[prop], prop);
        (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    }

    const VERSION = "1.4.0";

    const validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    const deprecatedWarnings = {};

    /**
     * Transitional option validator
     *
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     *
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            AxiosError.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     *
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     *
     * @returns {object}
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator = schema[opt];
        if (validator) {
          const value = options[opt];
          const result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }

    var validator = {
      assertOptions,
      validators: validators$1
    };

    const validators = validator.validators;

    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     *
     * @return {Axios} A new instance of Axios
     */
    class Axios {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }

      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config) {
        /*eslint no-param-reassign:0*/
        // Allow for axios('example/url'[, config]) a la fetch API
        if (typeof configOrUrl === 'string') {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }

        config = mergeConfig(this.defaults, config);

        const {transitional, paramsSerializer, headers} = config;

        if (transitional !== undefined) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }

        if (paramsSerializer != null) {
          if (utils.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }

        // Set config.method
        config.method = (config.method || this.defaults.method || 'get').toLowerCase();

        let contextHeaders;

        // Flatten headers
        contextHeaders = headers && utils.merge(
          headers.common,
          headers[config.method]
        );

        contextHeaders && utils.forEach(
          ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
          (method) => {
            delete headers[method];
          }
        );

        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

        // filter out skipped interceptors
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
            return;
          }

          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });

        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });

        let promise;
        let i = 0;
        let len;

        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), undefined];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;

          promise = Promise.resolve(config);

          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }

          return promise;
        }

        len = requestInterceptorChain.length;

        let newConfig = config;

        i = 0;

        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }

        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }

        i = 0;
        len = responseInterceptorChain.length;

        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }

        return promise;
      }

      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    }

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url,
            data
          }));
        };
      }

      Axios.prototype[method] = generateHTTPMethod();

      Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    var Axios$1 = Axios;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @param {Function} executor The executor function.
     *
     * @returns {CancelToken}
     */
    class CancelToken {
      constructor(executor) {
        if (typeof executor !== 'function') {
          throw new TypeError('executor must be a function.');
        }

        let resolvePromise;

        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });

        const token = this;

        // eslint-disable-next-line func-names
        this.promise.then(cancel => {
          if (!token._listeners) return;

          let i = token._listeners.length;

          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });

        // eslint-disable-next-line func-names
        this.promise.then = onfulfilled => {
          let _resolve;
          // eslint-disable-next-line func-names
          const promise = new Promise(resolve => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);

          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };

          return promise;
        };

        executor(function cancel(message, config, request) {
          if (token.reason) {
            // Cancellation has already been requested
            return;
          }

          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }

      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }

      /**
       * Subscribe to the cancel signal
       */

      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }

        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }

      /**
       * Unsubscribe from the cancel signal
       */

      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }

      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    }

    var CancelToken$1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     *
     * @returns {Function}
     */
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     *
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    function isAxiosError(payload) {
      return utils.isObject(payload) && (payload.isAxiosError === true);
    }

    const HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511,
    };

    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });

    var HttpStatusCode$1 = HttpStatusCode;

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     *
     * @returns {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

      // Copy context to instance
      utils.extend(instance, context, null, {allOwnKeys: true});

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    const axios = createInstance(defaults$1);

    // Expose Axios class to allow class inheritance
    axios.Axios = Axios$1;

    // Expose Cancel & CancelToken
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;

    // Expose AxiosError class
    axios.AxiosError = AxiosError;

    // alias for CanceledError for backward compatibility
    axios.Cancel = axios.CanceledError;

    // Expose all/spread
    axios.all = function all(promises) {
      return Promise.all(promises);
    };

    axios.spread = spread;

    // Expose isAxiosError
    axios.isAxiosError = isAxiosError;

    // Expose mergeConfig
    axios.mergeConfig = mergeConfig;

    axios.AxiosHeaders = AxiosHeaders$1;

    axios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);

    axios.HttpStatusCode = HttpStatusCode$1;

    axios.default = axios;

    // this module should only have a default export
    var globalAxios = axios;

    /* tslint:disable */
    /* eslint-disable */
    /**
     * Swagger Guardian
     * Guardian API
     *
     * The version of the OpenAPI document: 1.0.0
     * Contact: support@immutable.com
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
     * https://openapi-generator.tech
     * Do not edit the class manually.
     */
    const BASE_PATH = "http://guardian.sandbox.imtbl.com".replace(/\/+$/, "");
    /**
     *
     * @export
     * @class BaseAPI
     */
    class BaseAPI {
        basePath;
        axios;
        configuration;
        constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
            this.basePath = basePath;
            this.axios = axios;
            if (configuration) {
                this.configuration = configuration;
                this.basePath = configuration.basePath || this.basePath;
            }
        }
    }
    /**
     *
     * @export
     * @class RequiredError
     * @extends {Error}
     */
    class RequiredError extends Error {
        field;
        constructor(field, msg) {
            super(msg);
            this.field = field;
            this.name = "RequiredError";
        }
    }

    /* tslint:disable */
    /* eslint-disable */
    /**
     * Swagger Guardian
     * Guardian API
     *
     * The version of the OpenAPI document: 1.0.0
     * Contact: support@immutable.com
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
     * https://openapi-generator.tech
     * Do not edit the class manually.
     */
    /**
     *
     * @export
     */
    const DUMMY_BASE_URL = 'https://example.com';
    /**
     *
     * @throws {RequiredError}
     * @export
     */
    const assertParamExists = function (functionName, paramName, paramValue) {
        if (paramValue === null || paramValue === undefined) {
            throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
        }
    };
    /**
     *
     * @export
     */
    const setBearerAuthToObject = async function (object, configuration) {
        if (configuration && configuration.accessToken) {
            const accessToken = typeof configuration.accessToken === 'function'
                ? await configuration.accessToken()
                : await configuration.accessToken;
            object["Authorization"] = "Bearer " + accessToken;
        }
    };
    function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
        if (parameter == null)
            return;
        if (typeof parameter === "object") {
            if (Array.isArray(parameter)) {
                parameter.forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
            }
            else {
                Object.keys(parameter).forEach(currentKey => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`));
            }
        }
        else {
            if (urlSearchParams.has(key)) {
                urlSearchParams.append(key, parameter);
            }
            else {
                urlSearchParams.set(key, parameter);
            }
        }
    }
    /**
     *
     * @export
     */
    const setSearchParams = function (url, ...objects) {
        const searchParams = new URLSearchParams(url.search);
        setFlattenedQueryParams(searchParams, objects);
        url.search = searchParams.toString();
    };
    /**
     *
     * @export
     */
    const toPathString = function (url) {
        return url.pathname + url.search + url.hash;
    };
    /**
     *
     * @export
     */
    const createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
        return (axios = globalAxios, basePath = BASE_PATH) => {
            const axiosRequestArgs = { ...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url };
            return axios.request(axiosRequestArgs);
        };
    };

    /* tslint:disable */
    /* eslint-disable */
    /**
     * Swagger Guardian
     * Guardian API
     *
     * The version of the OpenAPI document: 1.0.0
     * Contact: support@immutable.com
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
     * https://openapi-generator.tech
     * Do not edit the class manually.
     */
    /**
     * StarkexTransactionsApi - axios parameter creator
     * @export
     */
    const StarkexTransactionsApiAxiosParamCreator = function (configuration) {
        return {
            /**
             * Check if it is a valid transaction by payload hash
             * @summary Evaluate if it is an valid transaction
             * @param {string} payloadHash Hash for the payload
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            evaluateStarkexTransaction: async (payloadHash, options = {}) => {
                // verify required parameter 'payloadHash' is not null or undefined
                assertParamExists('evaluateStarkexTransaction', 'payloadHash', payloadHash);
                const localVarPath = `/guardian/v1/starkex/evaluate/{payloadHash}`
                    .replace(`{${"payloadHash"}}`, encodeURIComponent(String(payloadHash)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                // authentication BearerAuth required
                // http bearer authentication required
                await setBearerAuthToObject(localVarHeaderParameter, configuration);
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * StarkexTransactionsApi - functional programming interface
     * @export
     */
    const StarkexTransactionsApiFp = function (configuration) {
        const localVarAxiosParamCreator = StarkexTransactionsApiAxiosParamCreator(configuration);
        return {
            /**
             * Check if it is a valid transaction by payload hash
             * @summary Evaluate if it is an valid transaction
             * @param {string} payloadHash Hash for the payload
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            async evaluateStarkexTransaction(payloadHash, options) {
                const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateStarkexTransaction(payloadHash, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            },
        };
    };
    /**
     * StarkexTransactionsApi - object-oriented interface
     * @export
     * @class StarkexTransactionsApi
     * @extends {BaseAPI}
     */
    class StarkexTransactionsApi extends BaseAPI {
        /**
         * Check if it is a valid transaction by payload hash
         * @summary Evaluate if it is an valid transaction
         * @param {StarkexTransactionsApiEvaluateStarkexTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof StarkexTransactionsApi
         */
        evaluateStarkexTransaction(requestParameters, options) {
            return StarkexTransactionsApiFp(this.configuration).evaluateStarkexTransaction(requestParameters.payloadHash, options).then((request) => request(this.axios, this.basePath));
        }
    }

    /* tslint:disable */
    /* eslint-disable */
    /**
     * Swagger Guardian
     * Guardian API
     *
     * The version of the OpenAPI document: 1.0.0
     * Contact: support@immutable.com
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
     * https://openapi-generator.tech
     * Do not edit the class manually.
     */
    /**
     * TransactionsApi - axios parameter creator
     * @export
     */
    const TransactionsApiAxiosParamCreator = function (configuration) {
        return {
            /**
             * Get a transaction by payload hash
             * @summary Info for a specific transaction
             * @param {string} transactionID The id of the starkex transaction to retrieve
             * @param {string} chainType roll up type
             * @param {number} [chainID] ID of evm chain
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            getTransactionByID: async (transactionID, chainType, chainID, options = {}) => {
                // verify required parameter 'transactionID' is not null or undefined
                assertParamExists('getTransactionByID', 'transactionID', transactionID);
                // verify required parameter 'chainType' is not null or undefined
                assertParamExists('getTransactionByID', 'chainType', chainType);
                const localVarPath = `/guardian/v1/transactions/{transactionID}`
                    .replace(`{${"transactionID"}}`, encodeURIComponent(String(transactionID)));
                // use dummy base URL string because the URL constructor only accepts absolute URLs.
                const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                let baseOptions;
                if (configuration) {
                    baseOptions = configuration.baseOptions;
                }
                const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                // authentication BearerAuth required
                // http bearer authentication required
                await setBearerAuthToObject(localVarHeaderParameter, configuration);
                if (chainType !== undefined) {
                    localVarQueryParameter['chainType'] = chainType;
                }
                if (chainID !== undefined) {
                    localVarQueryParameter['chainID'] = chainID;
                }
                setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
                return {
                    url: toPathString(localVarUrlObj),
                    options: localVarRequestOptions,
                };
            },
        };
    };
    /**
     * TransactionsApi - functional programming interface
     * @export
     */
    const TransactionsApiFp = function (configuration) {
        const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration);
        return {
            /**
             * Get a transaction by payload hash
             * @summary Info for a specific transaction
             * @param {string} transactionID The id of the starkex transaction to retrieve
             * @param {string} chainType roll up type
             * @param {number} [chainID] ID of evm chain
             * @param {*} [options] Override http request option.
             * @throws {RequiredError}
             */
            async getTransactionByID(transactionID, chainType, chainID, options) {
                const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionByID(transactionID, chainType, chainID, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            },
        };
    };
    /**
     * TransactionsApi - object-oriented interface
     * @export
     * @class TransactionsApi
     * @extends {BaseAPI}
     */
    class TransactionsApi extends BaseAPI {
        /**
         * Get a transaction by payload hash
         * @summary Info for a specific transaction
         * @param {TransactionsApiGetTransactionByIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof TransactionsApi
         */
        getTransactionByID(requestParameters, options) {
            return TransactionsApiFp(this.configuration).getTransactionByID(requestParameters.transactionID, requestParameters.chainType, requestParameters.chainID, options).then((request) => request(this.axios, this.basePath));
        }
    }

    /* tslint:disable */
    /* eslint-disable */
    /**
     * Swagger Guardian
     * Guardian API
     *
     * The version of the OpenAPI document: 1.0.0
     * Contact: support@immutable.com
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
     * https://openapi-generator.tech
     * Do not edit the class manually.
     */
    class Configuration {
        /**
         * parameter for apiKey security
         * @param name security name
         * @memberof Configuration
         */
        apiKey;
        /**
         * parameter for basic security
         *
         * @type {string}
         * @memberof Configuration
         */
        username;
        /**
         * parameter for basic security
         *
         * @type {string}
         * @memberof Configuration
         */
        password;
        /**
         * parameter for oauth2 security
         * @param name security name
         * @param scopes oauth2 scope
         * @memberof Configuration
         */
        accessToken;
        /**
         * override base path
         *
         * @type {string}
         * @memberof Configuration
         */
        basePath;
        /**
         * base options for axios calls
         *
         * @type {any}
         * @memberof Configuration
         */
        baseOptions;
        /**
         * The FormData constructor that will be used to create multipart form data
         * requests. You can inject this here so that execution environments that
         * do not support the FormData class can still run the generated client.
         *
         * @type {new () => FormData}
         */
        formDataCtor;
        constructor(param = {}) {
            this.apiKey = param.apiKey;
            this.username = param.username;
            this.password = param.password;
            this.accessToken = param.accessToken;
            this.basePath = param.basePath;
            this.baseOptions = param.baseOptions;
            this.formDataCtor = param.formDataCtor;
        }
        /**
         * Check if the given MIME is a JSON MIME.
         * JSON MIME examples:
         *   application/json
         *   application/json; charset=UTF8
         *   APPLICATION/JSON
         *   application/vnd.company+json
         * @param mime - MIME (Multipurpose Internet Mail Extensions)
         * @return True if the given MIME is JSON, false otherwise.
         */
        isJsonMime(mime) {
            const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        }
    }

    var ReceiveMessage;
    (function (ReceiveMessage) {
        ReceiveMessage["CONFIRMATION_WINDOW_READY"] = "confirmation_window_ready";
        ReceiveMessage["TRANSACTION_CONFIRMED"] = "transaction_confirmed";
        ReceiveMessage["TRANSACTION_ERROR"] = "transaction_error";
    })(ReceiveMessage || (ReceiveMessage = {}));
    var SendMessage;
    (function (SendMessage) {
        SendMessage["TRANSACTION_START"] = "transaction_start";
    })(SendMessage || (SendMessage = {}));
    var TransactionTypes;
    (function (TransactionTypes) {
        TransactionTypes["cancelOrder"] = "delete:v1/orders";
        TransactionTypes["createOrder"] = "post:v1/orders";
        TransactionTypes["createTrade"] = "post:v1/trades";
        TransactionTypes["createTransfer"] = "post:v1/transfers";
        TransactionTypes["createBatchTransfer"] = "post:v2/transfers";
    })(TransactionTypes || (TransactionTypes = {}));
    const PASSPORT_EVENT_TYPE = 'imx_passport_confirmation';

    const openPopupCenter = ({ url, title, width, height, }) => {
        const left = Math.max(0, Math.round(window.screenX + (window.outerWidth - width) / 2));
        const top = Math.max(0, Math.round(window.screenY + (window.outerHeight - height) / 2));
        const newWindow = window.open(url, title, `
      scrollbars=yes,
      width=${width}, 
      height=${height}, 
      top=${top}, 
      left=${left}
     `);
        if (!newWindow) {
            throw new Error('Failed to open confirmation screen');
        }
        newWindow.focus();
        return newWindow;
    };

    const CONFIRMATION_WINDOW_TITLE = 'Confirm this transaction';
    const CONFIRMATION_WINDOW_HEIGHT = 380;
    const CONFIRMATION_WINDOW_WIDTH = 480;
    const CONFIRMATION_WINDOW_CLOSED_POLLING_DURATION = 1000;
    class ConfirmationScreen {
        config;
        constructor(config) {
            this.config = config;
        }
        postMessage(destinationWindow, accessToken, message) {
            destinationWindow.postMessage({
                eventType: PASSPORT_EVENT_TYPE,
                accessToken,
                ...message,
            }, this.config.passportDomain);
        }
        startTransaction(accessToken, transaction, popupOptions) {
            return new Promise((resolve, reject) => {
                const messageHandler = ({ data, origin }) => {
                    if (origin !== this.config.passportDomain
                        || data.eventType !== PASSPORT_EVENT_TYPE) {
                        return;
                    }
                    switch (data.messageType) {
                        case ReceiveMessage.CONFIRMATION_WINDOW_READY: {
                            // TODO: remove once fixed
                            // eslint-disable-next-line @typescript-eslint/no-use-before-define
                            this.postMessage(confirmationWindow, accessToken, {
                                messageType: SendMessage.TRANSACTION_START,
                                messageData: transaction,
                            });
                            break;
                        }
                        case ReceiveMessage.TRANSACTION_CONFIRMED: {
                            resolve({ confirmed: true });
                            break;
                        }
                        case ReceiveMessage.TRANSACTION_ERROR: {
                            reject(new Error('Transaction error'));
                            break;
                        }
                        default:
                            reject(new Error('Unsupported message type'));
                    }
                };
                window.addEventListener('message', messageHandler);
                const confirmationWindow = openPopupCenter({
                    url: `${this.config.passportDomain}/transaction-confirmation`,
                    title: CONFIRMATION_WINDOW_TITLE,
                    width: popupOptions?.width || CONFIRMATION_WINDOW_WIDTH,
                    height: popupOptions?.height || CONFIRMATION_WINDOW_HEIGHT,
                });
                // https://stackoverflow.com/questions/9388380/capture-the-close-event-of-popup-window-in-javascript/48240128#48240128
                const timer = setInterval(() => {
                    if (confirmationWindow.closed) {
                        clearInterval(timer);
                        window.removeEventListener('message', messageHandler);
                        resolve({ confirmed: false });
                    }
                }, CONFIRMATION_WINDOW_CLOSED_POLLING_DURATION);
            });
        }
        startGuardianTransaction(transactionId, popupOptions) {
            return new Promise((resolve, reject) => {
                const messageHandler = ({ data, origin }) => {
                    if (origin !== this.config.passportDomain
                        || data.eventType !== PASSPORT_EVENT_TYPE) {
                        return;
                    }
                    switch (data.messageType) {
                        case ReceiveMessage.CONFIRMATION_WINDOW_READY: {
                            break;
                        }
                        case ReceiveMessage.TRANSACTION_CONFIRMED: {
                            resolve({ confirmed: true });
                            break;
                        }
                        case ReceiveMessage.TRANSACTION_ERROR: {
                            reject(new Error('Transaction error'));
                            break;
                        }
                        default:
                            reject(new Error('Unsupported message type'));
                    }
                };
                window.addEventListener('message', messageHandler);
                const confirmationWindow = openPopupCenter({
                    // eslint-disable-next-line max-len
                    url: `${this.config.passportDomain}/transaction-confirmation/transaction.html?transactionId=${transactionId}&chainType=starkex`,
                    title: CONFIRMATION_WINDOW_TITLE,
                    width: popupOptions?.width || CONFIRMATION_WINDOW_WIDTH,
                    height: popupOptions?.height || CONFIRMATION_WINDOW_HEIGHT,
                });
                // https://stackoverflow.com/questions/9388380/capture-the-close-event-of-popup-window-in-javascript/48240128#48240128
                const timer = setInterval(() => {
                    if (confirmationWindow.closed) {
                        clearInterval(timer);
                        window.removeEventListener('message', messageHandler);
                        resolve({ confirmed: false });
                    }
                }, CONFIRMATION_WINDOW_CLOSED_POLLING_DURATION);
            });
        }
    }

    const ERC721$1 = 'ERC721';
    const transferWithGuardian = async ({ accessToken, imxPublicApiDomain, payloadHash, confirmationScreen, }) => {
        const transactionAPI = new TransactionsApi(new Configuration({
            accessToken,
            basePath: imxPublicApiDomain,
        }));
        const starkExTransactionApi = new StarkexTransactionsApi(new Configuration({
            accessToken,
            basePath: imxPublicApiDomain,
        }));
        const transactionRes = await retryWithDelay(async () => transactionAPI.getTransactionByID({
            transactionID: payloadHash,
            chainType: 'starkex',
        }));
        if (!transactionRes.data.id) {
            throw new Error("Transaction doesn't exists");
        }
        const evaluateStarkexRes = await starkExTransactionApi.evaluateStarkexTransaction({
            payloadHash,
        });
        const { confirmationRequired } = evaluateStarkexRes.data;
        if (confirmationRequired) {
            const confirmationResult = await confirmationScreen.startGuardianTransaction(payloadHash);
            if (!confirmationResult.confirmed) {
                throw new Error('Transaction rejected by user');
            }
        }
    };
    async function transfer({ request, transfersApi, starkSigner, user, imxPublicApiDomain, confirmationScreen, }) {
        return withPassportError(async () => {
            const transferAmount = request.type === ERC721$1 ? '1' : request.amount;
            const getSignableTransferRequest = {
                sender: user.etherKey,
                token: convertToSignableToken(request),
                amount: transferAmount,
                receiver: request.receiver,
            };
            const headers = {
                Authorization: `Bearer ${user.accessToken}`,
            };
            const signableResult = await transfersApi.getSignableTransferV1({
                getSignableTransferRequest,
            }, { headers });
            await transferWithGuardian({
                imxPublicApiDomain,
                accessToken: user.accessToken,
                payloadHash: signableResult.data.payload_hash,
                confirmationScreen,
            });
            const signableResultData = signableResult.data;
            const { payload_hash: payloadHash } = signableResultData;
            const starkSignature = await starkSigner.signMessage(payloadHash);
            const senderStarkKey = await starkSigner.getAddress();
            const transferSigningParams = {
                sender_stark_key: signableResultData.sender_stark_key || senderStarkKey,
                sender_vault_id: signableResultData.sender_vault_id,
                receiver_stark_key: signableResultData.receiver_stark_key,
                receiver_vault_id: signableResultData.receiver_vault_id,
                asset_id: signableResultData.asset_id,
                amount: signableResultData.amount,
                nonce: signableResultData.nonce,
                expiration_timestamp: signableResultData.expiration_timestamp,
                stark_signature: starkSignature,
            };
            const createTransferRequest = {
                createTransferRequest: transferSigningParams,
            };
            const { data: responseData } = await transfersApi.createTransferV1(createTransferRequest, { headers });
            return {
                sent_signature: responseData.sent_signature,
                status: responseData.status?.toString(),
                time: responseData.time,
                transfer_id: responseData.transfer_id,
            };
        }, PassportErrorType.TRANSFER_ERROR);
    }
    async function batchNftTransfer({ user, starkSigner, request, transfersApi, confirmationScreen, }) {
        return withPassportError(async () => {
            const ethAddress = user.etherKey;
            const signableRequests = request.map((nftTransfer) => ({
                amount: '1',
                token: convertToSignableToken({
                    type: ERC721$1,
                    tokenId: nftTransfer.tokenId,
                    tokenAddress: nftTransfer.tokenAddress,
                }),
                receiver: nftTransfer.receiver,
            }));
            const getSignableTransferRequestV2 = {
                sender_ether_key: ethAddress,
                signable_requests: signableRequests,
            };
            const signableResult = await transfersApi.getSignableTransfer({
                getSignableTransferRequestV2,
            });
            const popupWindowSize = { width: 480, height: 784 };
            const confirmationResult = await confirmationScreen.startTransaction(user.accessToken, {
                transactionType: TransactionTypes.createBatchTransfer,
                transactionData: getSignableTransferRequestV2,
            }, popupWindowSize);
            if (!confirmationResult.confirmed) {
                throw new Error('Transaction rejected by user');
            }
            const requests = await Promise.all(signableResult.data.signable_responses.map(async (resp) => {
                const starkSignature = await starkSigner.signMessage(resp.payload_hash);
                return {
                    sender_vault_id: resp.sender_vault_id,
                    receiver_stark_key: resp.receiver_stark_key,
                    receiver_vault_id: resp.receiver_vault_id,
                    asset_id: resp.asset_id,
                    amount: resp.amount,
                    nonce: resp.nonce,
                    expiration_timestamp: resp.expiration_timestamp,
                    stark_signature: starkSignature,
                };
            }));
            const transferSigningParams = {
                sender_stark_key: signableResult.data.sender_stark_key,
                requests,
            };
            const headers = {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                Authorization: `Bearer ${user.accessToken}`,
            };
            const response = await transfersApi.createTransfer({
                createTransferRequestV2: transferSigningParams,
            }, { headers });
            return {
                transfer_ids: response?.data.transfer_ids,
            };
        }, PassportErrorType.TRANSFER_ERROR);
    }

    const ERC721 = 'ERC721';
    async function createOrder({ starkSigner, user, request, ordersApi, confirmationScreen, }) {
        return withPassportError(async () => {
            const ethAddress = user.etherKey;
            const amountSell = request.sell.type === ERC721 ? '1' : request.sell.amount;
            const amountBuy = request.buy.type === ERC721 ? '1' : request.buy.amount;
            const getSignableOrderRequestV3 = {
                user: ethAddress,
                amount_buy: amountBuy,
                token_buy: convertToSignableToken(request.buy),
                amount_sell: amountSell,
                token_sell: convertToSignableToken(request.sell),
                fees: request.fees,
                expiration_timestamp: request.expiration_timestamp,
            };
            const getSignableOrderResponse = await ordersApi.getSignableOrder({
                getSignableOrderRequestV3,
            });
            const confirmationResult = await confirmationScreen.startTransaction(user.accessToken, {
                transactionType: TransactionTypes.createOrder,
                transactionData: getSignableOrderRequestV3,
            });
            if (!confirmationResult.confirmed) {
                throw new Error('Transaction rejected by user');
            }
            const { payload_hash: payloadHash } = getSignableOrderResponse.data;
            const starkSignature = await starkSigner.signMessage(payloadHash);
            const signableResultData = getSignableOrderResponse.data;
            const orderParams = {
                createOrderRequest: {
                    include_fees: true,
                    fees: request.fees,
                    stark_signature: starkSignature,
                    amount_buy: signableResultData.amount_buy,
                    amount_sell: signableResultData.amount_sell,
                    asset_id_buy: signableResultData.asset_id_buy,
                    asset_id_sell: signableResultData.asset_id_sell,
                    expiration_timestamp: signableResultData.expiration_timestamp,
                    nonce: signableResultData.nonce,
                    stark_key: signableResultData.stark_key,
                    vault_id_buy: signableResultData.vault_id_buy,
                    vault_id_sell: signableResultData.vault_id_sell,
                },
            };
            const headers = {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                Authorization: `Bearer ${user.accessToken}`,
            };
            const createOrderResponse = await ordersApi.createOrder(orderParams, {
                headers,
            });
            return {
                ...createOrderResponse.data,
            };
        }, PassportErrorType.CREATE_ORDER_ERROR);
    }
    async function cancelOrder({ user, starkSigner, request, ordersApi, confirmationScreen, }) {
        return withPassportError(async () => {
            const getSignableCancelOrderRequest = {
                order_id: request.order_id,
            };
            const getSignableCancelOrderResponse = await ordersApi.getSignableCancelOrder({
                getSignableCancelOrderRequest,
            });
            const confirmationResult = await confirmationScreen.startTransaction(user.accessToken, {
                transactionType: TransactionTypes.cancelOrder,
                transactionData: getSignableCancelOrderRequest,
            });
            if (!confirmationResult.confirmed) {
                throw new Error('Transaction rejected by user');
            }
            const { payload_hash: payloadHash } = getSignableCancelOrderResponse.data;
            const starkSignature = await starkSigner.signMessage(payloadHash);
            const headers = {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                Authorization: `Bearer ${user.accessToken}`,
            };
            const cancelOrderResponse = await ordersApi.cancelOrder({
                id: request.order_id.toString(),
                cancelOrderRequest: {
                    order_id: request.order_id,
                    stark_signature: starkSignature,
                },
            }, { headers });
            return {
                order_id: cancelOrderResponse.data.order_id,
                status: cancelOrderResponse.data.status,
            };
        }, PassportErrorType.CANCEL_ORDER_ERROR);
    }

    async function exchangeTransfer({ user, starkSigner, request, exchangesApi, }) {
        return withPassportError(async () => {
            const ethAddress = user.etherKey;
            const transferAmount = request.amount;
            const signableResult = await exchangesApi.getExchangeSignableTransfer({
                id: request.transactionID,
                getSignableTransferRequest: {
                    sender: ethAddress,
                    token: convertToSignableToken(request),
                    amount: transferAmount,
                    receiver: request.receiver,
                },
            });
            const starkAddress = await starkSigner.getAddress();
            const { payload_hash: payloadHash } = signableResult.data;
            const starkSignature = await starkSigner.signMessage(payloadHash);
            const transferSigningParams = {
                sender_stark_key: signableResult.data.sender_stark_key || starkAddress,
                sender_vault_id: signableResult.data.sender_vault_id,
                receiver_stark_key: signableResult.data.receiver_stark_key,
                receiver_vault_id: signableResult.data.receiver_vault_id,
                asset_id: signableResult.data.asset_id,
                amount: signableResult.data.amount,
                nonce: signableResult.data.nonce,
                expiration_timestamp: signableResult.data.expiration_timestamp,
                stark_signature: starkSignature,
            };
            const headers = {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                Authorization: `Bearer ${user.accessToken}`,
            };
            const response = await exchangesApi.createExchangeTransfer({
                id: request.transactionID,
                createTransferRequest: transferSigningParams,
            }, { headers });
            return {
                sent_signature: response?.data.sent_signature,
                status: response?.data.status?.toString(),
                time: response?.data.time,
                transfer_id: response?.data.transfer_id,
            };
        }, PassportErrorType.EXCHANGE_TRANSFER_ERROR);
    }

    async function createTrade({ request, tradesApi, user, starkSigner, confirmationScreen, }) {
        return withPassportError(async () => {
            const ethAddress = user.etherKey;
            const getSignableTradeRequest = {
                expiration_timestamp: request.expiration_timestamp,
                fees: request.fees,
                order_id: request.order_id,
                user: ethAddress,
            };
            const getSignableTradeResponse = await tradesApi.getSignableTrade({
                getSignableTradeRequest,
            });
            const confirmationResult = await confirmationScreen.startTransaction(user.accessToken, {
                transactionType: TransactionTypes.createTrade,
                transactionData: getSignableTradeRequest,
            });
            if (!confirmationResult.confirmed) {
                throw new Error('Transaction rejected by user');
            }
            const { payload_hash: payloadHash } = getSignableTradeResponse.data;
            const starkSignature = await starkSigner.signMessage(payloadHash);
            const { data: signableResultData } = getSignableTradeResponse;
            const tradeParams = {
                createTradeRequest: {
                    include_fees: true,
                    fees: request?.fees,
                    stark_signature: starkSignature,
                    order_id: request?.order_id,
                    fee_info: signableResultData.fee_info,
                    amount_buy: signableResultData.amount_buy,
                    amount_sell: signableResultData.amount_sell,
                    asset_id_buy: signableResultData.asset_id_buy,
                    asset_id_sell: signableResultData.asset_id_sell,
                    expiration_timestamp: signableResultData.expiration_timestamp,
                    nonce: signableResultData.nonce,
                    stark_key: signableResultData.stark_key,
                    vault_id_buy: signableResultData.vault_id_buy,
                    vault_id_sell: signableResultData.vault_id_sell,
                },
            };
            // eslint-disable-next-line @typescript-eslint/naming-convention
            const headers = { Authorization: `Bearer ${user.accessToken}` };
            const { data: createTradeResponse } = await tradesApi.createTradeV3(tradeParams, {
                headers,
            });
            return createTradeResponse;
        }, PassportErrorType.CREATE_TRADE_ERROR);
    }

    class PassportImxProvider {
        user;
        starkSigner;
        immutableXClient;
        confirmationScreen;
        imxPublicApiDomain;
        constructor({ user, starkSigner, immutableXClient, imxPublicApiDomain, confirmationScreen, }) {
            this.user = user;
            this.starkSigner = starkSigner;
            this.immutableXClient = immutableXClient;
            this.imxPublicApiDomain = imxPublicApiDomain;
            this.confirmationScreen = confirmationScreen;
        }
        async transfer(request) {
            return transfer({
                request,
                user: this.user,
                starkSigner: this.starkSigner,
                transfersApi: this.immutableXClient.transfersApi,
                confirmationScreen: this.confirmationScreen,
                imxPublicApiDomain: this.imxPublicApiDomain,
            });
        }
        // TODO: Remove once implemented
        // eslint-disable-next-line class-methods-use-this
        registerOffchain() {
            throw new PassportError('Operation not supported', PassportErrorType.OPERATION_NOT_SUPPORTED_ERROR);
        }
        // TODO: Remove once implemented
        // eslint-disable-next-line class-methods-use-this
        isRegisteredOnchain() {
            throw new PassportError('Operation not supported', PassportErrorType.OPERATION_NOT_SUPPORTED_ERROR);
        }
        createOrder(request) {
            return createOrder({
                request,
                user: this.user,
                starkSigner: this.starkSigner,
                ordersApi: this.immutableXClient.ordersApi,
                confirmationScreen: this.confirmationScreen,
            });
        }
        cancelOrder(request) {
            return cancelOrder({
                request,
                user: this.user,
                starkSigner: this.starkSigner,
                ordersApi: this.immutableXClient.ordersApi,
                confirmationScreen: this.confirmationScreen,
            });
        }
        createTrade(request) {
            return createTrade({
                request,
                user: this.user,
                starkSigner: this.starkSigner,
                tradesApi: this.immutableXClient.tradesApi,
                confirmationScreen: this.confirmationScreen,
            });
        }
        batchNftTransfer(request) {
            return batchNftTransfer({
                request,
                user: this.user,
                starkSigner: this.starkSigner,
                transfersApi: this.immutableXClient.transfersApi,
                confirmationScreen: this.confirmationScreen,
            });
        }
        exchangeTransfer(request) {
            return exchangeTransfer({
                request,
                user: this.user,
                starkSigner: this.starkSigner,
                exchangesApi: this.immutableXClient.exchangeApi,
            });
        }
        // TODO: Remove once implemented
        // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
        deposit(deposit) {
            throw new PassportError('Operation not supported', PassportErrorType.OPERATION_NOT_SUPPORTED_ERROR);
        }
        // TODO: Remove once implemented
        // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars
        prepareWithdrawal(request) {
            throw new PassportError('Operation not supported', PassportErrorType.OPERATION_NOT_SUPPORTED_ERROR);
        }
        // TODO: Remove once implemented
        // eslint-disable-next-line class-methods-use-this
        completeWithdrawal(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        starkPublicKey, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        token) {
            throw new PassportError('Operation not supported', PassportErrorType.OPERATION_NOT_SUPPORTED_ERROR);
        }
        getAddress() {
            return Promise.resolve(this.user.etherKey);
        }
    }

    var Networks;
    (function (Networks) {
        Networks["PRODUCTION"] = "mainnet";
        Networks["SANDBOX"] = "goerli";
    })(Networks || (Networks = {}));

    const validateConfiguration = (configuration, requiredKeys, prefix) => {
        const missingKeys = requiredKeys
            .map((key) => !configuration[key] && key)
            .filter((n) => n)
            .join(', ');
        if (missingKeys !== '') {
            const errorMessage = prefix
                ? `${prefix} - ${missingKeys} cannot be null`
                : `${missingKeys} cannot be null`;
            throw new PassportError(errorMessage, PassportErrorType.INVALID_CONFIGURATION);
        }
    };
    class PassportConfiguration {
        network;
        authenticationDomain;
        passportDomain;
        imxPublicApiDomain;
        magicPublishableApiKey;
        magicProviderId;
        oidcConfiguration;
        baseConfig;
        constructor({ baseConfig, overrides, ...oidcConfiguration }) {
            validateConfiguration(oidcConfiguration, [
                'clientId',
                'logoutRedirectUri',
                'redirectUri',
            ]);
            this.oidcConfiguration = oidcConfiguration;
            this.baseConfig = baseConfig;
            if (overrides) {
                validateConfiguration(overrides, [
                    'network',
                    'authenticationDomain',
                    'magicPublishableApiKey',
                    'magicProviderId',
                    'passportDomain',
                    'imxPublicApiDomain',
                ], 'overrides');
                this.network = overrides.network;
                this.authenticationDomain = overrides.authenticationDomain;
                this.passportDomain = overrides.passportDomain;
                this.imxPublicApiDomain = overrides.imxPublicApiDomain;
                this.magicPublishableApiKey = overrides.magicPublishableApiKey;
                this.magicProviderId = overrides.magicProviderId;
            }
            else {
                switch (baseConfig.environment) {
                    case Environment.PRODUCTION: {
                        this.network = Networks.PRODUCTION;
                        this.authenticationDomain = 'https://auth.immutable.com';
                        this.magicPublishableApiKey = 'pk_live_10F423798A540ED7';
                        this.magicProviderId = 'fSMzaRQ4O7p4fttl7pCyGVtJS_G70P8SNsLXtPPGHo0=';
                        this.passportDomain = 'https://passport.immutable.com';
                        this.imxPublicApiDomain = 'https://api.immutable.com';
                        break;
                    }
                    case Environment.SANDBOX:
                    default: {
                        this.network = Networks.SANDBOX;
                        this.authenticationDomain = 'https://auth.immutable.com';
                        this.magicPublishableApiKey = 'pk_live_10F423798A540ED7';
                        this.magicProviderId = 'fSMzaRQ4O7p4fttl7pCyGVtJS_G70P8SNsLXtPPGHo0=';
                        this.passportDomain = 'https://passport.sandbox.immutable.com';
                        this.imxPublicApiDomain = 'https://api.sandbox.immutable.com';
                        break;
                    }
                }
            }
        }
    }

    // TODO: remove this eslint disable once we have a better solution
    // eslint-disable-next-line max-len
    const getStarkSigner = async (signer) => withPassportError(async () => {
        const privateKey = await generateLegacyStarkPrivateKey(signer);
        return createStarkSigner(privateKey);
    }, PassportErrorType.WALLET_CONNECTION_ERROR);

    async function registerPassport({ ethSigner, starkSigner, usersApi }, authorization) {
        return withPassportError(async () => {
            const userAddress = await ethSigner.getAddress();
            const starkPublicKey = await starkSigner.getAddress();
            const signableResult = await usersApi.getSignableRegistrationOffchain({
                getSignableRegistrationRequest: {
                    ether_key: userAddress,
                    stark_key: starkPublicKey,
                },
            });
            const { signable_message: signableMessage, payload_hash: payloadHash } = signableResult.data;
            const ethSignature = await signRaw(signableMessage, ethSigner);
            const starkSignature = await starkSigner.signMessage(payloadHash);
            const response = await usersApi.registerPassportUser({
                authorization: `Bearer ${authorization}`,
                registerPassportUserRequest: {
                    eth_signature: ethSignature,
                    ether_key: userAddress,
                    stark_signature: starkSignature,
                    stark_key: starkPublicKey,
                },
            });
            return response.statusText;
        }, PassportErrorType.USER_REGISTRATION_ERROR);
    }

    class Passport {
        authManager;
        magicAdapter;
        config;
        immutableXClient;
        confirmationScreen;
        constructor(passportModuleConfiguration) {
            this.config = new PassportConfiguration(passportModuleConfiguration);
            this.authManager = new AuthManager(this.config);
            this.magicAdapter = new MagicAdapter(this.config);
            this.confirmationScreen = new ConfirmationScreen(this.config);
            this.immutableXClient = passportModuleConfiguration.overrides?.immutableXClient
                || new ImmutableXClient({
                    baseConfig: passportModuleConfiguration.baseConfig,
                });
        }
        async getImxProvider(user) {
            if (!user || !user.idToken) {
                throw new PassportError('Failed to initialise', PassportErrorType.WALLET_CONNECTION_ERROR);
            }
            const provider = await this.magicAdapter.login(user.idToken);
            const ethSigner = provider.getSigner();
            const starkSigner = await getStarkSigner(ethSigner);
            if (!user.etherKey) {
                const updatedUser = await this.registerUser(ethSigner, starkSigner, user.accessToken);
                return new PassportImxProvider({
                    user: updatedUser,
                    starkSigner,
                    immutableXClient: this.immutableXClient,
                    imxPublicApiDomain: this.config.imxPublicApiDomain,
                    confirmationScreen: this.confirmationScreen,
                });
            }
            const userWithEtherKey = user;
            return new PassportImxProvider({
                user: userWithEtherKey,
                starkSigner,
                immutableXClient: this.immutableXClient,
                imxPublicApiDomain: this.config.imxPublicApiDomain,
                confirmationScreen: this.confirmationScreen,
            });
        }
        async connectImxSilent() {
            const user = await this.authManager.loginSilent();
            if (!user) {
                return null;
            }
            return this.getImxProvider(user);
        }
        async connectImx() {
            const user = await this.authManager.login();
            return this.getImxProvider(user);
        }
        async loginCallback() {
            return this.authManager.loginCallback();
        }
        async logout() {
            return this.authManager.logout();
        }
        async getUserInfo() {
            const user = await this.authManager.getUser();
            return user?.profile;
        }
        async getIdToken() {
            const user = await this.authManager.getUser();
            return user?.idToken;
        }
        async getAccessToken() {
            const user = await this.authManager.getUser();
            return user?.accessToken;
        }
        async registerUser(userAdminKeySigner, starkSigner, jwt) {
            await registerPassport({
                ethSigner: userAdminKeySigner,
                starkSigner,
                usersApi: this.immutableXClient.usersApi,
            }, jwt);
            const updatedUser = await this.authManager.requestRefreshTokenAfterRegistration();
            if (!updatedUser) {
                throw new PassportError('Failed to get refresh token', PassportErrorType.REFRESH_TOKEN_ERROR);
            }
            return updatedUser;
        }
        async signMessage(message) {
            return this.magicAdapter.getProvider().getSigner().signMessage(message);
        }
    }

    exports.Passport = Passport;
    exports.PassportError = PassportError;

    return exports;

})({});
